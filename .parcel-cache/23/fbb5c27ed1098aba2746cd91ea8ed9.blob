{"mappings":"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CCriB;QACC32B,OAAO;;;IAGTi5C;MACCriB;QACC52B,OAAO;;;IAGTk5C;MACC9hB;QACCp3B,OAAO;;;IAGTgyB;MACCmnB;QACCn5C,OAAO;;MAERo5C;QACCp5C,OAAO;;MAERq5C;QACCr5C,OAAO;;MAERs5C;QACCt5C,WAAWq7B,MAAM;;;IAGnBgM;MACCkS;QACCv5C;;MAEDw5C;QACCx5C;;MAEDy5C;QACCz5C;QACA05C;UACC16B;UACA8V;;;MAGF6kB;QACC35C;QACA05C;UACCE;UACAC;UACAC;UACAC;;;MAGFC;QACCh6C;;MAEDi6C;QACCj6C;;MAEDk6C;QACCl6C;QACA05C;UACC5kB;UACA/nC;UACAiyB;UACA5uB;UACA+pD;UACAC;UACAC;;;MAGFC;QACCt6C;QACA05C;UACCE;UACAC;UACAC;UACAC;;;MAGFQ;QACCv6C;;MAEDw6C;QACCx6C;;MAEDy6C;QACCz6C;QACA05C;UACC5kB;UACA/nC;UACAstD;UACAjqD;;;MAGFsqD;QACC16C;QACA05C;UACCE;UACAC;UACAC;UACAC;UACAY;UACAC;;;MAGFC;QACC76C;;MAED86C;QACC96C;;MAED+6C;QACC/6C;QACA05C;UACC16B;UACAg8B;UACAC;;;;MAIFC;QACCl7C;QACA05C;UACC5kB;UACA/nC;UACA0W;UACAC;;;MAGFy3C;QACCn7C,OAAO;;MAERo7C;QACCp7C,OAAO;;;IAGTia;MACCk+B;QACCn4C,WAAWq7B,MAAM;;MAElBjJ;QACCpyB,OAAO;;MAERqa;QACCra,OAAO;;MAERgL;QACChL,OAAO;;MAERlX;QACCkX,OAAO;;MAER81B;QACC91B,OAAO;;MAERo4C;QACCp4C,WAAWoL;;;IAGbiiC;MACC8K;QACCn4C,WAAWq7B,MAAM;;MAElBjJ;QACCpyB,OAAO;;MAER4G;QACC5G,WAAW6G,QAAQ,KAAK;;MAEzBgE;QACC7K,OAAO;;MAERlX;QACCkX,OAAO;;MAER81B;QACC91B,OAAO;;MAERo4C;QACCp4C,WAAWoL;;;;QAKRiwC;IACLC;MACC3U,UAAUI,eAAemR,YAAYjH,QAAQ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vG,IAAI;IACf,KAAKhwG,SAASO,OAAO,KAAKN,MAAMA,OAAO,KAAKA,MAAMjzB;;;EAKpDlqB,OAAOC;IACL,KAAKi9C,SAASO,OAAO,KAAKN,MAAMA,OAAO,KAAKA,MAAMjzB;;;;;AC3GtjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["./node_modules/@parcel/runtime-browser-hmr/lib/HMRRuntime.js","./src/app.js","../node_modules/three/build/three.js","./src/setup.js","../node_modules/three-orbit-controls/index.js","./node_modules/uuid/index.js","./node_modules/uuid/v1.js","./node_modules/uuid/lib/rng-browser.js","./node_modules/uuid/lib/bytesToUuid.js","./node_modules/uuid/v4.js","./node_modules/@parcel/transformer-js/lib/esmodule-helpers.js"],"sourcesContent":[null,null,"/**\n * @license\n * Copyright 2010-2021 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\tconst REVISION = '129';\n\tconst MOUSE = {\n\t\tLEFT: 0,\n\t\tMIDDLE: 1,\n\t\tRIGHT: 2,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2\n\t};\n\tconst TOUCH = {\n\t\tROTATE: 0,\n\t\tPAN: 1,\n\t\tDOLLY_PAN: 2,\n\t\tDOLLY_ROTATE: 3\n\t};\n\tconst CullFaceNone = 0;\n\tconst CullFaceBack = 1;\n\tconst CullFaceFront = 2;\n\tconst CullFaceFrontBack = 3;\n\tconst BasicShadowMap = 0;\n\tconst PCFShadowMap = 1;\n\tconst PCFSoftShadowMap = 2;\n\tconst VSMShadowMap = 3;\n\tconst FrontSide = 0;\n\tconst BackSide = 1;\n\tconst DoubleSide = 2;\n\tconst FlatShading = 1;\n\tconst SmoothShading = 2;\n\tconst NoBlending = 0;\n\tconst NormalBlending = 1;\n\tconst AdditiveBlending = 2;\n\tconst SubtractiveBlending = 3;\n\tconst MultiplyBlending = 4;\n\tconst CustomBlending = 5;\n\tconst AddEquation = 100;\n\tconst SubtractEquation = 101;\n\tconst ReverseSubtractEquation = 102;\n\tconst MinEquation = 103;\n\tconst MaxEquation = 104;\n\tconst ZeroFactor = 200;\n\tconst OneFactor = 201;\n\tconst SrcColorFactor = 202;\n\tconst OneMinusSrcColorFactor = 203;\n\tconst SrcAlphaFactor = 204;\n\tconst OneMinusSrcAlphaFactor = 205;\n\tconst DstAlphaFactor = 206;\n\tconst OneMinusDstAlphaFactor = 207;\n\tconst DstColorFactor = 208;\n\tconst OneMinusDstColorFactor = 209;\n\tconst SrcAlphaSaturateFactor = 210;\n\tconst NeverDepth = 0;\n\tconst AlwaysDepth = 1;\n\tconst LessDepth = 2;\n\tconst LessEqualDepth = 3;\n\tconst EqualDepth = 4;\n\tconst GreaterEqualDepth = 5;\n\tconst GreaterDepth = 6;\n\tconst NotEqualDepth = 7;\n\tconst MultiplyOperation = 0;\n\tconst MixOperation = 1;\n\tconst AddOperation = 2;\n\tconst NoToneMapping = 0;\n\tconst LinearToneMapping = 1;\n\tconst ReinhardToneMapping = 2;\n\tconst CineonToneMapping = 3;\n\tconst ACESFilmicToneMapping = 4;\n\tconst CustomToneMapping = 5;\n\tconst UVMapping = 300;\n\tconst CubeReflectionMapping = 301;\n\tconst CubeRefractionMapping = 302;\n\tconst EquirectangularReflectionMapping = 303;\n\tconst EquirectangularRefractionMapping = 304;\n\tconst CubeUVReflectionMapping = 306;\n\tconst CubeUVRefractionMapping = 307;\n\tconst RepeatWrapping = 1000;\n\tconst ClampToEdgeWrapping = 1001;\n\tconst MirroredRepeatWrapping = 1002;\n\tconst NearestFilter = 1003;\n\tconst NearestMipmapNearestFilter = 1004;\n\tconst NearestMipMapNearestFilter = 1004;\n\tconst NearestMipmapLinearFilter = 1005;\n\tconst NearestMipMapLinearFilter = 1005;\n\tconst LinearFilter = 1006;\n\tconst LinearMipmapNearestFilter = 1007;\n\tconst LinearMipMapNearestFilter = 1007;\n\tconst LinearMipmapLinearFilter = 1008;\n\tconst LinearMipMapLinearFilter = 1008;\n\tconst UnsignedByteType = 1009;\n\tconst ByteType = 1010;\n\tconst ShortType = 1011;\n\tconst UnsignedShortType = 1012;\n\tconst IntType = 1013;\n\tconst UnsignedIntType = 1014;\n\tconst FloatType = 1015;\n\tconst HalfFloatType = 1016;\n\tconst UnsignedShort4444Type = 1017;\n\tconst UnsignedShort5551Type = 1018;\n\tconst UnsignedShort565Type = 1019;\n\tconst UnsignedInt248Type = 1020;\n\tconst AlphaFormat = 1021;\n\tconst RGBFormat = 1022;\n\tconst RGBAFormat = 1023;\n\tconst LuminanceFormat = 1024;\n\tconst LuminanceAlphaFormat = 1025;\n\tconst RGBEFormat = RGBAFormat;\n\tconst DepthFormat = 1026;\n\tconst DepthStencilFormat = 1027;\n\tconst RedFormat = 1028;\n\tconst RedIntegerFormat = 1029;\n\tconst RGFormat = 1030;\n\tconst RGIntegerFormat = 1031;\n\tconst RGBIntegerFormat = 1032;\n\tconst RGBAIntegerFormat = 1033;\n\tconst RGB_S3TC_DXT1_Format = 33776;\n\tconst RGBA_S3TC_DXT1_Format = 33777;\n\tconst RGBA_S3TC_DXT3_Format = 33778;\n\tconst RGBA_S3TC_DXT5_Format = 33779;\n\tconst RGB_PVRTC_4BPPV1_Format = 35840;\n\tconst RGB_PVRTC_2BPPV1_Format = 35841;\n\tconst RGBA_PVRTC_4BPPV1_Format = 35842;\n\tconst RGBA_PVRTC_2BPPV1_Format = 35843;\n\tconst RGB_ETC1_Format = 36196;\n\tconst RGB_ETC2_Format = 37492;\n\tconst RGBA_ETC2_EAC_Format = 37496;\n\tconst RGBA_ASTC_4x4_Format = 37808;\n\tconst RGBA_ASTC_5x4_Format = 37809;\n\tconst RGBA_ASTC_5x5_Format = 37810;\n\tconst RGBA_ASTC_6x5_Format = 37811;\n\tconst RGBA_ASTC_6x6_Format = 37812;\n\tconst RGBA_ASTC_8x5_Format = 37813;\n\tconst RGBA_ASTC_8x6_Format = 37814;\n\tconst RGBA_ASTC_8x8_Format = 37815;\n\tconst RGBA_ASTC_10x5_Format = 37816;\n\tconst RGBA_ASTC_10x6_Format = 37817;\n\tconst RGBA_ASTC_10x8_Format = 37818;\n\tconst RGBA_ASTC_10x10_Format = 37819;\n\tconst RGBA_ASTC_12x10_Format = 37820;\n\tconst RGBA_ASTC_12x12_Format = 37821;\n\tconst RGBA_BPTC_Format = 36492;\n\tconst SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tconst SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tconst SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tconst SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tconst SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tconst SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tconst SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tconst SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tconst SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tconst SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tconst SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tconst SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tconst SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tconst SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tconst LoopOnce = 2200;\n\tconst LoopRepeat = 2201;\n\tconst LoopPingPong = 2202;\n\tconst InterpolateDiscrete = 2300;\n\tconst InterpolateLinear = 2301;\n\tconst InterpolateSmooth = 2302;\n\tconst ZeroCurvatureEnding = 2400;\n\tconst ZeroSlopeEnding = 2401;\n\tconst WrapAroundEnding = 2402;\n\tconst NormalAnimationBlendMode = 2500;\n\tconst AdditiveAnimationBlendMode = 2501;\n\tconst TrianglesDrawMode = 0;\n\tconst TriangleStripDrawMode = 1;\n\tconst TriangleFanDrawMode = 2;\n\tconst LinearEncoding = 3000;\n\tconst sRGBEncoding = 3001;\n\tconst GammaEncoding = 3007;\n\tconst RGBEEncoding = 3002;\n\tconst LogLuvEncoding = 3003;\n\tconst RGBM7Encoding = 3004;\n\tconst RGBM16Encoding = 3005;\n\tconst RGBDEncoding = 3006;\n\tconst BasicDepthPacking = 3200;\n\tconst RGBADepthPacking = 3201;\n\tconst TangentSpaceNormalMap = 0;\n\tconst ObjectSpaceNormalMap = 1;\n\tconst ZeroStencilOp = 0;\n\tconst KeepStencilOp = 7680;\n\tconst ReplaceStencilOp = 7681;\n\tconst IncrementStencilOp = 7682;\n\tconst DecrementStencilOp = 7683;\n\tconst IncrementWrapStencilOp = 34055;\n\tconst DecrementWrapStencilOp = 34056;\n\tconst InvertStencilOp = 5386;\n\tconst NeverStencilFunc = 512;\n\tconst LessStencilFunc = 513;\n\tconst EqualStencilFunc = 514;\n\tconst LessEqualStencilFunc = 515;\n\tconst GreaterStencilFunc = 516;\n\tconst NotEqualStencilFunc = 517;\n\tconst GreaterEqualStencilFunc = 518;\n\tconst AlwaysStencilFunc = 519;\n\tconst StaticDrawUsage = 35044;\n\tconst DynamicDrawUsage = 35048;\n\tconst StreamDrawUsage = 35040;\n\tconst StaticReadUsage = 35045;\n\tconst DynamicReadUsage = 35049;\n\tconst StreamReadUsage = 35041;\n\tconst StaticCopyUsage = 35046;\n\tconst DynamicCopyUsage = 35050;\n\tconst StreamCopyUsage = 35042;\n\tconst GLSL1 = '100';\n\tconst GLSL3 = '300 es';\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\tclass EventDispatcher {\n\t\taddEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) this._listeners = {};\n\t\t\tconst listeners = this._listeners;\n\n\t\t\tif (listeners[type] === undefined) {\n\t\t\t\tlisteners[type] = [];\n\t\t\t}\n\n\t\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\t\tlisteners[type].push(listener);\n\t\t\t}\n\t\t}\n\n\t\thasEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return false;\n\t\t\tconst listeners = this._listeners;\n\t\t\treturn listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\t\t}\n\n\t\tremoveEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tconst listeners = this._listeners;\n\t\t\tconst listenerArray = listeners[type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tconst index = listenerArray.indexOf(listener);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdispatchEvent(event) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tconst listeners = this._listeners;\n\t\t\tconst listenerArray = listeners[event.type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tevent.target = this; // Make a copy, in case listeners are removed while iterating.\n\n\t\t\t\tconst array = listenerArray.slice(0);\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tarray[i].call(this, event);\n\t\t\t\t}\n\n\t\t\t\tevent.target = null;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tconst _lut = [];\n\n\tfor (let i = 0; i < 256; i++) {\n\t\t_lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n\t}\n\n\tlet _seed = 1234567;\n\tconst DEG2RAD = Math.PI / 180;\n\tconst RAD2DEG = 180 / Math.PI; // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\tfunction generateUUID() {\n\t\tconst d0 = Math.random() * 0xffffffff | 0;\n\t\tconst d1 = Math.random() * 0xffffffff | 0;\n\t\tconst d2 = Math.random() * 0xffffffff | 0;\n\t\tconst d3 = Math.random() * 0xffffffff | 0;\n\t\tconst uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n\t\treturn uuid.toUpperCase();\n\t}\n\n\tfunction clamp(value, min, max) {\n\t\treturn Math.max(min, Math.min(max, value));\n\t} // compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\n\tfunction euclideanModulo(n, m) {\n\t\treturn (n % m + m) % m;\n\t} // Linear mapping from range <a1, a2> to range <b1, b2>\n\n\n\tfunction mapLinear(x, a1, a2, b1, b2) {\n\t\treturn b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n\t} // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n\n\n\tfunction inverseLerp(x, y, value) {\n\t\tif (x !== y) {\n\t\t\treturn (value - x) / (y - x);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t} // https://en.wikipedia.org/wiki/Linear_interpolation\n\n\n\tfunction lerp(x, y, t) {\n\t\treturn (1 - t) * x + t * y;\n\t} // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n\n\n\tfunction damp(x, y, lambda, dt) {\n\t\treturn lerp(x, y, 1 - Math.exp(-lambda * dt));\n\t} // https://www.desmos.com/calculator/vcsjnyz7x4\n\n\n\tfunction pingpong(x, length = 1) {\n\t\treturn length - Math.abs(euclideanModulo(x, length * 2) - length);\n\t} // http://en.wikipedia.org/wiki/Smoothstep\n\n\n\tfunction smoothstep(x, min, max) {\n\t\tif (x <= min) return 0;\n\t\tif (x >= max) return 1;\n\t\tx = (x - min) / (max - min);\n\t\treturn x * x * (3 - 2 * x);\n\t}\n\n\tfunction smootherstep(x, min, max) {\n\t\tif (x <= min) return 0;\n\t\tif (x >= max) return 1;\n\t\tx = (x - min) / (max - min);\n\t\treturn x * x * x * (x * (x * 6 - 15) + 10);\n\t} // Random integer from <low, high> interval\n\n\n\tfunction randInt(low, high) {\n\t\treturn low + Math.floor(Math.random() * (high - low + 1));\n\t} // Random float from <low, high> interval\n\n\n\tfunction randFloat(low, high) {\n\t\treturn low + Math.random() * (high - low);\n\t} // Random float from <-range/2, range/2> interval\n\n\n\tfunction randFloatSpread(range) {\n\t\treturn range * (0.5 - Math.random());\n\t} // Deterministic pseudo-random float in the interval [ 0, 1 ]\n\n\n\tfunction seededRandom(s) {\n\t\tif (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm\n\n\t\t_seed = _seed * 16807 % 2147483647;\n\t\treturn (_seed - 1) / 2147483646;\n\t}\n\n\tfunction degToRad(degrees) {\n\t\treturn degrees * DEG2RAD;\n\t}\n\n\tfunction radToDeg(radians) {\n\t\treturn radians * RAD2DEG;\n\t}\n\n\tfunction isPowerOfTwo(value) {\n\t\treturn (value & value - 1) === 0 && value !== 0;\n\t}\n\n\tfunction ceilPowerOfTwo(value) {\n\t\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n\t}\n\n\tfunction floorPowerOfTwo(value) {\n\t\treturn Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n\t}\n\n\tfunction setQuaternionFromProperEuler(q, a, b, c, order) {\n\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t// angles are in radians\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\t\tconst c2 = cos(b / 2);\n\t\tconst s2 = sin(b / 2);\n\t\tconst c13 = cos((a + c) / 2);\n\t\tconst s13 = sin((a + c) / 2);\n\t\tconst c1_3 = cos((a - c) / 2);\n\t\tconst s1_3 = sin((a - c) / 2);\n\t\tconst c3_1 = cos((c - a) / 2);\n\t\tconst s3_1 = sin((c - a) / 2);\n\n\t\tswitch (order) {\n\t\t\tcase 'XYX':\n\t\t\t\tq.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZY':\n\t\t\t\tq.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXZ':\n\t\t\t\tq.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZX':\n\t\t\t\tq.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXY':\n\t\t\t\tq.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYZ':\n\t\t\t\tq.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n\t\t}\n\t}\n\n\tvar MathUtils = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tDEG2RAD: DEG2RAD,\n\t\tRAD2DEG: RAD2DEG,\n\t\tgenerateUUID: generateUUID,\n\t\tclamp: clamp,\n\t\teuclideanModulo: euclideanModulo,\n\t\tmapLinear: mapLinear,\n\t\tinverseLerp: inverseLerp,\n\t\tlerp: lerp,\n\t\tdamp: damp,\n\t\tpingpong: pingpong,\n\t\tsmoothstep: smoothstep,\n\t\tsmootherstep: smootherstep,\n\t\trandInt: randInt,\n\t\trandFloat: randFloat,\n\t\trandFloatSpread: randFloatSpread,\n\t\tseededRandom: seededRandom,\n\t\tdegToRad: degToRad,\n\t\tradToDeg: radToDeg,\n\t\tisPowerOfTwo: isPowerOfTwo,\n\t\tceilPowerOfTwo: ceilPowerOfTwo,\n\t\tfloorPowerOfTwo: floorPowerOfTwo,\n\t\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler\n\t});\n\n\tclass Vector2 {\n\t\tconstructor(x = 0, y = 0) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tget width() {\n\t\t\treturn this.x;\n\t\t}\n\n\t\tset width(value) {\n\t\t\tthis.x = value;\n\t\t}\n\n\t\tget height() {\n\t\t\treturn this.y;\n\t\t}\n\n\t\tset height(value) {\n\t\t\tthis.y = value;\n\t\t}\n\n\t\tset(x, y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6];\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7];\n\t\t\treturn this;\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y;\n\t\t}\n\n\t\tcross(v) {\n\t\t\treturn this.x * v.y - this.y * v.x;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tangle() {\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\t\t\tconst angle = Math.atan2(-this.y, -this.x) + Math.PI;\n\t\t\treturn angle;\n\t\t}\n\n\t\tdistanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t}\n\n\t\tdistanceToSquared(v) {\n\t\t\tconst dx = this.x - v.x,\n\t\t\t\t\t\tdy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\t\t}\n\n\t\tmanhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateAround(center, angle) {\n\t\t\tconst c = Math.cos(angle),\n\t\t\t\t\t\ts = Math.sin(angle);\n\t\t\tconst x = this.x - center.x;\n\t\t\tconst y = this.y - center.y;\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector2.prototype.isVector2 = true;\n\n\tclass Matrix3 {\n\t\tconstructor() {\n\t\t\tthis.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tset(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[1] = n21;\n\t\t\tte[2] = n31;\n\t\t\tte[3] = n12;\n\t\t\tte[4] = n22;\n\t\t\tte[5] = n32;\n\t\t\tte[6] = n13;\n\t\t\tte[7] = n23;\n\t\t\tte[8] = n33;\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\tthis.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(m) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\treturn this;\n\t\t}\n\n\t\textractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrix3Column(this, 0);\n\t\t\tyAxis.setFromMatrix3Column(this, 1);\n\t\t\tzAxis.setFromMatrix3Column(this, 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrix4(m) {\n\t\t\tconst me = m.elements;\n\t\t\tthis.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(m) {\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t}\n\n\t\tpremultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t}\n\n\t\tmultiplyMatrices(a, b) {\n\t\t\tconst ae = a.elements;\n\t\t\tconst be = b.elements;\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = ae[0],\n\t\t\t\t\t\ta12 = ae[3],\n\t\t\t\t\t\ta13 = ae[6];\n\t\t\tconst a21 = ae[1],\n\t\t\t\t\t\ta22 = ae[4],\n\t\t\t\t\t\ta23 = ae[7];\n\t\t\tconst a31 = ae[2],\n\t\t\t\t\t\ta32 = ae[5],\n\t\t\t\t\t\ta33 = ae[8];\n\t\t\tconst b11 = be[0],\n\t\t\t\t\t\tb12 = be[3],\n\t\t\t\t\t\tb13 = be[6];\n\t\t\tconst b21 = be[1],\n\t\t\t\t\t\tb22 = be[4],\n\t\t\t\t\t\tb23 = be[7];\n\t\t\tconst b31 = be[2],\n\t\t\t\t\t\tb32 = be[5],\n\t\t\t\t\t\tb33 = be[8];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[3] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[4] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[5] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[8] *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeterminant() {\n\t\t\tconst te = this.elements;\n\t\t\tconst a = te[0],\n\t\t\t\t\t\tb = te[1],\n\t\t\t\t\t\tc = te[2],\n\t\t\t\t\t\td = te[3],\n\t\t\t\t\t\te = te[4],\n\t\t\t\t\t\tf = te[5],\n\t\t\t\t\t\tg = te[6],\n\t\t\t\t\t\th = te[7],\n\t\t\t\t\t\ti = te[8];\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\t}\n\n\t\tinvert() {\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tn11 = te[0],\n\t\t\t\t\t\tn21 = te[1],\n\t\t\t\t\t\tn31 = te[2],\n\t\t\t\t\t\tn12 = te[3],\n\t\t\t\t\t\tn22 = te[4],\n\t\t\t\t\t\tn32 = te[5],\n\t\t\t\t\t\tn13 = te[6],\n\t\t\t\t\t\tn23 = te[7],\n\t\t\t\t\t\tn33 = te[8],\n\t\t\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\t\t\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tconst detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n31 * n23 - n33 * n21) * detInv;\n\t\t\tte[2] = (n32 * n21 - n31 * n22) * detInv;\n\t\t\tte[3] = t12 * detInv;\n\t\t\tte[4] = (n33 * n11 - n31 * n13) * detInv;\n\t\t\tte[5] = (n31 * n12 - n32 * n11) * detInv;\n\t\t\tte[6] = t13 * detInv;\n\t\t\tte[7] = (n21 * n13 - n23 * n11) * detInv;\n\t\t\tte[8] = (n22 * n11 - n21 * n12) * detInv;\n\t\t\treturn this;\n\t\t}\n\n\t\ttranspose() {\n\t\t\tlet tmp;\n\t\t\tconst m = this.elements;\n\t\t\ttmp = m[1];\n\t\t\tm[1] = m[3];\n\t\t\tm[3] = tmp;\n\t\t\ttmp = m[2];\n\t\t\tm[2] = m[6];\n\t\t\tm[6] = tmp;\n\t\t\ttmp = m[5];\n\t\t\tm[5] = m[7];\n\t\t\tm[7] = tmp;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetNormalMatrix(matrix4) {\n\t\t\treturn this.setFromMatrix4(matrix4).invert().transpose();\n\t\t}\n\n\t\ttransposeIntoArray(r) {\n\t\t\tconst m = this.elements;\n\t\t\tr[0] = m[0];\n\t\t\tr[1] = m[3];\n\t\t\tr[2] = m[6];\n\t\t\tr[3] = m[1];\n\t\t\tr[4] = m[4];\n\t\t\tr[5] = m[7];\n\t\t\tr[6] = m[2];\n\t\t\tr[7] = m[5];\n\t\t\tr[8] = m[8];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n\t\t\tconst c = Math.cos(rotation);\n\t\t\tconst s = Math.sin(rotation);\n\t\t\tthis.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(sx, sy) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= sx;\n\t\t\tte[3] *= sx;\n\t\t\tte[6] *= sx;\n\t\t\tte[1] *= sy;\n\t\t\tte[4] *= sy;\n\t\t\tte[7] *= sy;\n\t\t\treturn this;\n\t\t}\n\n\t\trotate(theta) {\n\t\t\tconst c = Math.cos(theta);\n\t\t\tconst s = Math.sin(theta);\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = te[0],\n\t\t\t\t\t\ta12 = te[3],\n\t\t\t\t\t\ta13 = te[6];\n\t\t\tconst a21 = te[1],\n\t\t\t\t\t\ta22 = te[4],\n\t\t\t\t\t\ta23 = te[7];\n\t\t\tte[0] = c * a11 + s * a21;\n\t\t\tte[3] = c * a12 + s * a22;\n\t\t\tte[6] = c * a13 + s * a23;\n\t\t\tte[1] = -s * a11 + c * a21;\n\t\t\tte[4] = -s * a12 + c * a22;\n\t\t\tte[7] = -s * a13 + c * a23;\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(tx, ty) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] += tx * te[2];\n\t\t\tte[3] += tx * te[5];\n\t\t\tte[6] += tx * te[8];\n\t\t\tte[1] += ty * te[2];\n\t\t\tte[4] += ty * te[5];\n\t\t\tte[7] += ty * te[8];\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(matrix) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = matrix.elements;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\treturn array;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().fromArray(this.elements);\n\t\t}\n\n\t}\n\n\tMatrix3.prototype.isMatrix3 = true;\n\n\tlet _canvas;\n\n\tclass ImageUtils {\n\t\tstatic getDataURL(image) {\n\t\t\tif (/^data:/i.test(image.src)) {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tif (typeof HTMLCanvasElement == 'undefined') {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tlet canvas;\n\n\t\t\tif (image instanceof HTMLCanvasElement) {\n\t\t\t\tcanvas = image;\n\t\t\t} else {\n\t\t\t\tif (_canvas === undefined) _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tconst context = _canvas.getContext('2d');\n\n\t\t\t\tif (image instanceof ImageData) {\n\t\t\t\t\tcontext.putImageData(image, 0, 0);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.drawImage(image, 0, 0, image.width, image.height);\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\t\t\t}\n\n\t\t\tif (canvas.width > 2048 || canvas.height > 2048) {\n\t\t\t\tconsole.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);\n\t\t\t\treturn canvas.toDataURL('image/jpeg', 0.6);\n\t\t\t} else {\n\t\t\t\treturn canvas.toDataURL('image/png');\n\t\t\t}\n\t\t}\n\n\t}\n\n\tlet textureId = 0;\n\n\tclass Texture extends EventDispatcher {\n\t\tconstructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding) {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: textureId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.image = image;\n\t\t\tthis.mipmaps = [];\n\t\t\tthis.mapping = mapping;\n\t\t\tthis.wrapS = wrapS;\n\t\t\tthis.wrapT = wrapT;\n\t\t\tthis.magFilter = magFilter;\n\t\t\tthis.minFilter = minFilter;\n\t\t\tthis.anisotropy = anisotropy;\n\t\t\tthis.format = format;\n\t\t\tthis.internalFormat = null;\n\t\t\tthis.type = type;\n\t\t\tthis.offset = new Vector2(0, 0);\n\t\t\tthis.repeat = new Vector2(1, 1);\n\t\t\tthis.center = new Vector2(0, 0);\n\t\t\tthis.rotation = 0;\n\t\t\tthis.matrixAutoUpdate = true;\n\t\t\tthis.matrix = new Matrix3();\n\t\t\tthis.generateMipmaps = true;\n\t\t\tthis.premultiplyAlpha = false;\n\t\t\tthis.flipY = true;\n\t\t\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t\t//\n\t\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n\t\t\tthis.encoding = encoding;\n\t\t\tthis.version = 0;\n\t\t\tthis.onUpdate = null;\n\t\t}\n\n\t\tupdateMatrix() {\n\t\t\tthis.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice(0);\n\t\t\tthis.mapping = source.mapping;\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\t\t\tthis.anisotropy = source.anisotropy;\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\t\t\tthis.offset.copy(source.offset);\n\t\t\tthis.repeat.copy(source.repeat);\n\t\t\tthis.center.copy(source.center);\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst isRootObject = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (!isRootObject && meta.textures[this.uuid] !== undefined) {\n\t\t\t\treturn meta.textures[this.uuid];\n\t\t\t}\n\n\t\t\tconst output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\t\t\t\tmapping: this.mapping,\n\t\t\t\trepeat: [this.repeat.x, this.repeat.y],\n\t\t\t\toffset: [this.offset.x, this.offset.y],\n\t\t\t\tcenter: [this.center.x, this.center.y],\n\t\t\t\trotation: this.rotation,\n\t\t\t\twrap: [this.wrapS, this.wrapT],\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\t\t\t\tflipY: this.flipY,\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\t\t\t};\n\n\t\t\tif (this.image !== undefined) {\n\t\t\t\t// TODO: Move to THREE.Image\n\t\t\t\tconst image = this.image;\n\n\t\t\t\tif (image.uuid === undefined) {\n\t\t\t\t\timage.uuid = generateUUID(); // UGH\n\t\t\t\t}\n\n\t\t\t\tif (!isRootObject && meta.images[image.uuid] === undefined) {\n\t\t\t\t\tlet url;\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor (let i = 0, l = image.length; i < l; i++) {\n\t\t\t\t\t\t\t// check cube texture with data textures\n\t\t\t\t\t\t\tif (image[i].isDataTexture) {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i].image));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// process single image\n\t\t\t\t\t\turl = serializeImage(image);\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[image.uuid] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\t\t\t}\n\n\t\t\tif (!isRootObject) {\n\t\t\t\tmeta.textures[this.uuid] = output;\n\t\t\t}\n\n\t\t\treturn output;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t\ttransformUv(uv) {\n\t\t\tif (this.mapping !== UVMapping) return uv;\n\t\t\tuv.applyMatrix3(this.matrix);\n\n\t\t\tif (uv.x < 0 || uv.x > 1) {\n\t\t\t\tswitch (this.wrapS) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.x) % 2) === 1) {\n\t\t\t\t\t\t\tuv.x = Math.ceil(uv.x) - uv.x;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (uv.y < 0 || uv.y > 1) {\n\t\t\t\tswitch (this.wrapT) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.y) % 2) === 1) {\n\t\t\t\t\t\t\tuv.y = Math.ceil(uv.y) - uv.y;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.flipY) {\n\t\t\t\tuv.y = 1 - uv.y;\n\t\t\t}\n\n\t\t\treturn uv;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\tTexture.prototype.isTexture = true;\n\n\tfunction serializeImage(image) {\n\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t// default images\n\t\t\treturn ImageUtils.getDataURL(image);\n\t\t} else {\n\t\t\tif (image.data) {\n\t\t\t\t// images of DataTexture\n\t\t\t\treturn {\n\t\t\t\t\tdata: Array.prototype.slice.call(image.data),\n\t\t\t\t\twidth: image.width,\n\t\t\t\t\theight: image.height,\n\t\t\t\t\ttype: image.data.constructor.name\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.Texture: Unable to serialize Texture.');\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t}\n\n\tclass Vector4 {\n\t\tconstructor(x = 0, y = 0, z = 0, w = 1) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t}\n\n\t\tget width() {\n\t\t\treturn this.z;\n\t\t}\n\n\t\tset width(value) {\n\t\t\tthis.z = value;\n\t\t}\n\n\t\tget height() {\n\t\t\treturn this.w;\n\t\t}\n\n\t\tset height(value) {\n\t\t\tthis.w = value;\n\t\t}\n\n\t\tset(x, y, z, w) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetW(w) {\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.w = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tcase 3:\n\t\t\t\t\treturn this.w;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z, this.w);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = v.w !== undefined ? v.w : 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\tthis.w *= v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z,\n\t\t\t\t\t\tw = this.w;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n\t\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tsetAxisAngleFromQuaternion(q) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\t\t// q is assumed to be normalized\n\t\t\tthis.w = 2 * Math.acos(q.w);\n\t\t\tconst s = Math.sqrt(1 - q.w * q.w);\n\n\t\t\tif (s < 0.0001) {\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t} else {\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetAxisAngleFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tlet angle, x, y, z; // variables for result\n\n\t\t\tconst epsilon = 0.01,\n\t\t\t\t\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\n\t\t\t\t\t\t// margin to distinguish between 0 and 180 degrees\n\t\t\tte = m.elements,\n\t\t\t\t\t\tm11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8],\n\t\t\t\t\t\tm21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9],\n\t\t\t\t\t\tm31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10];\n\n\t\t\tif (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\t\t\t\tif (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\t\t\t\t\tthis.set(1, 0, 0, 0);\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\t\t\t\t} // otherwise this singularity is angle = 180\n\n\n\t\t\t\tangle = Math.PI;\n\t\t\t\tconst xx = (m11 + 1) / 2;\n\t\t\t\tconst yy = (m22 + 1) / 2;\n\t\t\t\tconst zz = (m33 + 1) / 2;\n\t\t\t\tconst xy = (m12 + m21) / 4;\n\t\t\t\tconst xz = (m13 + m31) / 4;\n\t\t\t\tconst yz = (m23 + m32) / 4;\n\n\t\t\t\tif (xx > yy && xx > zz) {\n\t\t\t\t\t// m11 is the largest diagonal term\n\t\t\t\t\tif (xx < epsilon) {\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = Math.sqrt(xx);\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\t\t\t\t\t}\n\t\t\t\t} else if (yy > zz) {\n\t\t\t\t\t// m22 is the largest diagonal term\n\t\t\t\t\tif (yy < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty = Math.sqrt(yy);\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\t\t\t\tif (zz < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz = Math.sqrt(zz);\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set(x, y, z, angle);\n\t\t\t\treturn this; // return 180 deg rotation\n\t\t\t} // as we have reached here there are no singularities so we can handle normally\n\n\n\t\t\tlet s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n\t\t\tif (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = (m32 - m23) / s;\n\t\t\tthis.y = (m13 - m31) / s;\n\t\t\tthis.z = (m21 - m12) / s;\n\t\t\tthis.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\tthis.w = Math.min(this.w, v.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\tthis.w = Math.max(this.w, v.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\tthis.w = Math.max(min.w, Math.min(max.w, this.w));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\tthis.w = Math.max(minVal, Math.min(maxVal, this.w));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\tthis.w = Math.floor(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\tthis.w = Math.ceil(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\tthis.w = Math.round(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\tthis.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\tthis.w = -this.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\tthis.w += (v.w - this.w) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\tthis.w = v1.w + (v2.w - v1.w) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\tthis.w = array[offset + 3];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\tarray[offset + 3] = this.w;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\tthis.w = attribute.getW(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\tthis.w = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector4.prototype.isVector4 = true;\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\n\tclass WebGLRenderTarget extends EventDispatcher {\n\t\tconstructor(width, height, options) {\n\t\t\tsuper();\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = 1;\n\t\t\tthis.scissor = new Vector4(0, 0, width, height);\n\t\t\tthis.scissorTest = false;\n\t\t\tthis.viewport = new Vector4(0, 0, width, height);\n\t\t\toptions = options || {};\n\t\t\tthis.texture = new Texture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\tthis.texture.image = {};\n\t\t\tthis.texture.image.width = width;\n\t\t\tthis.texture.image.height = height;\n\t\t\tthis.texture.image.depth = 1;\n\t\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\t}\n\n\t\tsetTexture(texture) {\n\t\t\ttexture.image = {\n\t\t\t\twidth: this.width,\n\t\t\t\theight: this.height,\n\t\t\t\tdepth: this.depth\n\t\t\t};\n\t\t\tthis.texture = texture;\n\t\t}\n\n\t\tsetSize(width, height, depth = 1) {\n\t\t\tif (this.width !== width || this.height !== height || this.depth !== depth) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.depth = depth;\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\t\t\t\tthis.texture.image.depth = depth;\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.viewport.copy(source.viewport);\n\t\t\tthis.texture = source.texture.clone();\n\t\t\tthis.texture.image = { ...this.texture.image\n\t\t\t}; // See #20328.\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tWebGLRenderTarget.prototype.isWebGLRenderTarget = true;\n\n\tclass WebGLMultipleRenderTargets extends WebGLRenderTarget {\n\t\tconstructor(width, height, count) {\n\t\t\tsuper(width, height);\n\t\t\tconst texture = this.texture;\n\t\t\tthis.texture = [];\n\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tthis.texture[i] = texture.clone();\n\t\t\t}\n\t\t}\n\n\t\tsetSize(width, height, depth = 1) {\n\t\t\tif (this.width !== width || this.height !== height || this.depth !== depth) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.depth = depth;\n\n\t\t\t\tfor (let i = 0, il = this.texture.length; i < il; i++) {\n\t\t\t\t\tthis.texture[i].image.width = width;\n\t\t\t\t\tthis.texture[i].image.height = height;\n\t\t\t\t\tthis.texture[i].image.depth = depth;\n\t\t\t\t}\n\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.dispose();\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.viewport.set(0, 0, this.width, this.height);\n\t\t\tthis.scissor.set(0, 0, this.width, this.height);\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\tthis.texture.length = 0;\n\n\t\t\tfor (let i = 0, il = source.texture.length; i < il; i++) {\n\t\t\t\tthis.texture[i] = source.texture[i].clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tWebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;\n\n\tclass WebGLMultisampleRenderTarget extends WebGLRenderTarget {\n\t\tconstructor(width, height, options) {\n\t\t\tsuper(width, height, options);\n\t\t\tthis.samples = 4;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy.call(this, source);\n\t\t\tthis.samples = source.samples;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;\n\n\tclass Quaternion {\n\t\tconstructor(x = 0, y = 0, z = 0, w = 1) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\t\t}\n\n\t\tstatic slerp(qa, qb, qm, t) {\n\t\t\tconsole.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');\n\t\t\treturn qm.slerpQuaternions(qa, qb, t);\n\t\t}\n\n\t\tstatic slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\t\tlet x0 = src0[srcOffset0 + 0],\n\t\t\t\t\ty0 = src0[srcOffset0 + 1],\n\t\t\t\t\tz0 = src0[srcOffset0 + 2],\n\t\t\t\t\tw0 = src0[srcOffset0 + 3];\n\t\t\tconst x1 = src1[srcOffset1 + 0],\n\t\t\t\t\t\ty1 = src1[srcOffset1 + 1],\n\t\t\t\t\t\tz1 = src1[srcOffset1 + 2],\n\t\t\t\t\t\tw1 = src1[srcOffset1 + 3];\n\n\t\t\tif (t === 0) {\n\t\t\t\tdst[dstOffset + 0] = x0;\n\t\t\t\tdst[dstOffset + 1] = y0;\n\t\t\t\tdst[dstOffset + 2] = z0;\n\t\t\t\tdst[dstOffset + 3] = w0;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (t === 1) {\n\t\t\t\tdst[dstOffset + 0] = x1;\n\t\t\t\tdst[dstOffset + 1] = y1;\n\t\t\t\tdst[dstOffset + 2] = z1;\n\t\t\t\tdst[dstOffset + 3] = w1;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n\t\t\t\tlet s = 1 - t;\n\t\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\t\t\t\tdir = cos >= 0 ? 1 : -1,\n\t\t\t\t\t\t\tsqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n\t\t\t\tif (sqrSin > Number.EPSILON) {\n\t\t\t\t\tconst sin = Math.sqrt(sqrSin),\n\t\t\t\t\t\t\t\tlen = Math.atan2(sin, cos * dir);\n\t\t\t\t\ts = Math.sin(s * len) / sin;\n\t\t\t\t\tt = Math.sin(t * len) / sin;\n\t\t\t\t}\n\n\t\t\t\tconst tDir = t * dir;\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n\t\t\t\tif (s === 1 - t) {\n\t\t\t\t\tconst f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdst[dstOffset] = x0;\n\t\t\tdst[dstOffset + 1] = y0;\n\t\t\tdst[dstOffset + 2] = z0;\n\t\t\tdst[dstOffset + 3] = w0;\n\t\t}\n\n\t\tstatic multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n\t\t\tconst x0 = src0[srcOffset0];\n\t\t\tconst y0 = src0[srcOffset0 + 1];\n\t\t\tconst z0 = src0[srcOffset0 + 2];\n\t\t\tconst w0 = src0[srcOffset0 + 3];\n\t\t\tconst x1 = src1[srcOffset1];\n\t\t\tconst y1 = src1[srcOffset1 + 1];\n\t\t\tconst z1 = src1[srcOffset1 + 2];\n\t\t\tconst w1 = src1[srcOffset1 + 3];\n\t\t\tdst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\t\tdst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\t\tdst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\t\tdst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\t\t\treturn dst;\n\t\t}\n\n\t\tget x() {\n\t\t\treturn this._x;\n\t\t}\n\n\t\tset x(value) {\n\t\t\tthis._x = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget y() {\n\t\t\treturn this._y;\n\t\t}\n\n\t\tset y(value) {\n\t\t\tthis._y = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget z() {\n\t\t\treturn this._z;\n\t\t}\n\n\t\tset z(value) {\n\t\t\tthis._z = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget w() {\n\t\t\treturn this._w;\n\t\t}\n\n\t\tset w(value) {\n\t\t\tthis._w = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tset(x, y, z, w) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._w);\n\t\t}\n\n\t\tcopy(quaternion) {\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromEuler(euler, update) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tthrow new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tconst x = euler._x,\n\t\t\t\t\t\ty = euler._y,\n\t\t\t\t\t\tz = euler._z,\n\t\t\t\t\t\torder = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tconst cos = Math.cos;\n\t\t\tconst sin = Math.sin;\n\t\t\tconst c1 = cos(x / 2);\n\t\t\tconst c2 = cos(y / 2);\n\t\t\tconst c3 = cos(z / 2);\n\t\t\tconst s1 = sin(x / 2);\n\t\t\tconst s2 = sin(y / 2);\n\t\t\tconst s3 = sin(z / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromAxisAngle(axis, angle) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\t\t// assumes axis is normalized\n\t\t\tconst halfAngle = angle / 2,\n\t\t\t\t\t\ts = Math.sin(halfAngle);\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos(halfAngle);\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tconst te = m.elements,\n\t\t\t\t\t\tm11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8],\n\t\t\t\t\t\tm21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9],\n\t\t\t\t\t\tm31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10],\n\t\t\t\t\t\ttrace = m11 + m22 + m33;\n\n\t\t\tif (trace > 0) {\n\t\t\t\tconst s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = (m32 - m23) * s;\n\t\t\t\tthis._y = (m13 - m31) * s;\n\t\t\t\tthis._z = (m21 - m12) * s;\n\t\t\t} else if (m11 > m22 && m11 > m33) {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\t\t\t\tthis._w = (m32 - m23) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = (m12 + m21) / s;\n\t\t\t\tthis._z = (m13 + m31) / s;\n\t\t\t} else if (m22 > m33) {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\t\t\t\tthis._w = (m13 - m31) / s;\n\t\t\t\tthis._x = (m12 + m21) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = (m23 + m32) / s;\n\t\t\t} else {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\t\t\t\tthis._w = (m21 - m12) / s;\n\t\t\t\tthis._x = (m13 + m31) / s;\n\t\t\t\tthis._y = (m23 + m32) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromUnitVectors(vFrom, vTo) {\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\t\t\tlet r = vFrom.dot(vTo) + 1;\n\n\t\t\tif (r < Number.EPSILON) {\n\t\t\t\t// vFrom and vTo point in opposite directions\n\t\t\t\tr = 0;\n\n\t\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t} else {\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\t\t}\n\n\t\tangleTo(q) {\n\t\t\treturn 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));\n\t\t}\n\n\t\trotateTowards(q, step) {\n\t\t\tconst angle = this.angleTo(q);\n\t\t\tif (angle === 0) return this;\n\t\t\tconst t = Math.min(1, step / angle);\n\t\t\tthis.slerp(q, t);\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\treturn this.set(0, 0, 0, 1);\n\t\t}\n\n\t\tinvert() {\n\t\t\t// quaternion is assumed to have unit length\n\t\t\treturn this.conjugate();\n\t\t}\n\n\t\tconjugate() {\n\t\t\tthis._x *= -1;\n\t\t\tthis._y *= -1;\n\t\t\tthis._z *= -1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n\t\t}\n\n\t\tnormalize() {\n\t\t\tlet l = this.length();\n\n\t\t\tif (l === 0) {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\t\t\t} else {\n\t\t\t\tl = 1 / l;\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(q, p) {\n\t\t\tif (p !== undefined) {\n\t\t\t\tconsole.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n\t\t\t\treturn this.multiplyQuaternions(q, p);\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions(this, q);\n\t\t}\n\n\t\tpremultiply(q) {\n\t\t\treturn this.multiplyQuaternions(q, this);\n\t\t}\n\n\t\tmultiplyQuaternions(a, b) {\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\t\tconst qax = a._x,\n\t\t\t\t\t\tqay = a._y,\n\t\t\t\t\t\tqaz = a._z,\n\t\t\t\t\t\tqaw = a._w;\n\t\t\tconst qbx = b._x,\n\t\t\t\t\t\tqby = b._y,\n\t\t\t\t\t\tqbz = b._z,\n\t\t\t\t\t\tqbw = b._w;\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tslerp(qb, t) {\n\t\t\tif (t === 0) return this;\n\t\t\tif (t === 1) return this.copy(qb);\n\t\t\tconst x = this._x,\n\t\t\t\t\t\ty = this._y,\n\t\t\t\t\t\tz = this._z,\n\t\t\t\t\t\tw = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif (cosHalfTheta < 0) {\n\t\t\t\tthis._w = -qb._w;\n\t\t\t\tthis._x = -qb._x;\n\t\t\t\tthis._y = -qb._y;\n\t\t\t\tthis._z = -qb._z;\n\t\t\t\tcosHalfTheta = -cosHalfTheta;\n\t\t\t} else {\n\t\t\t\tthis.copy(qb);\n\t\t\t}\n\n\t\t\tif (cosHalfTheta >= 1.0) {\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif (sqrSinHalfTheta <= Number.EPSILON) {\n\t\t\t\tconst s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\t\t\t\tthis.normalize();\n\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n\t\t\tconst halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n\t\t\tconst ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n\t\t\t\t\t\tratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\t\t\tthis._w = w * ratioA + this._w * ratioB;\n\t\t\tthis._x = x * ratioA + this._x * ratioB;\n\t\t\tthis._y = y * ratioA + this._y * ratioB;\n\t\t\tthis._z = z * ratioA + this._z * ratioB;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tslerpQuaternions(qa, qb, t) {\n\t\t\tthis.copy(qa).slerp(qb, t);\n\t\t}\n\n\t\tequals(quaternion) {\n\t\t\treturn quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis._x = array[offset];\n\t\t\tthis._y = array[offset + 1];\n\t\t\tthis._z = array[offset + 2];\n\t\t\tthis._w = array[offset + 3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._w;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index) {\n\t\t\tthis._x = attribute.getX(index);\n\t\t\tthis._y = attribute.getY(index);\n\t\t\tthis._z = attribute.getZ(index);\n\t\t\tthis._w = attribute.getW(index);\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChangeCallback() {}\n\n\t}\n\n\tQuaternion.prototype.isQuaternion = true;\n\n\tclass Vector3 {\n\t\tconstructor(x = 0, y = 0, z = 0) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t}\n\n\t\tset(x, y, z) {\n\t\t\tif (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n\t\t\t\treturn this.multiplyVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyVectors(a, b) {\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion(_quaternion$4.setFromEuler(euler));\n\t\t}\n\n\t\tapplyAxisAngle(axis, angle) {\n\t\t\treturn this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\n\t\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\treturn this.applyMatrix3(m).normalize();\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tconst w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\t\t\tthis.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n\t\t\tthis.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n\t\t\tthis.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst qx = q.x,\n\t\t\t\t\t\tqy = q.y,\n\t\t\t\t\t\tqz = q.z,\n\t\t\t\t\t\tqw = q.w; // calculate quat * vector\n\n\t\t\tconst ix = qw * x + qy * z - qz * y;\n\t\t\tconst iy = qw * y + qz * x - qx * z;\n\t\t\tconst iz = qw * z + qx * y - qy * x;\n\t\t\tconst iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t\t\treturn this;\n\t\t}\n\n\t\tproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n\t\t}\n\n\t\tunproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z;\n\t\t\treturn this.normalize();\n\t\t}\n\n\t\tdivide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\t} // TODO lengthSquared?\n\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tcross(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n\t\t\t\treturn this.crossVectors(v, w);\n\t\t\t}\n\n\t\t\treturn this.crossVectors(this, v);\n\t\t}\n\n\t\tcrossVectors(a, b) {\n\t\t\tconst ax = a.x,\n\t\t\t\t\t\tay = a.y,\n\t\t\t\t\t\taz = a.z;\n\t\t\tconst bx = b.x,\n\t\t\t\t\t\tby = b.y,\n\t\t\t\t\t\tbz = b.z;\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\t\t\treturn this;\n\t\t}\n\n\t\tprojectOnVector(v) {\n\t\t\tconst denominator = v.lengthSq();\n\t\t\tif (denominator === 0) return this.set(0, 0, 0);\n\t\t\tconst scalar = v.dot(this) / denominator;\n\t\t\treturn this.copy(v).multiplyScalar(scalar);\n\t\t}\n\n\t\tprojectOnPlane(planeNormal) {\n\t\t\t_vector$c.copy(this).projectOnVector(planeNormal);\n\n\t\t\treturn this.sub(_vector$c);\n\t\t}\n\n\t\treflect(normal) {\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\t\t\treturn this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));\n\t\t}\n\n\t\tangleTo(v) {\n\t\t\tconst denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n\t\t\tif (denominator === 0) return Math.PI / 2;\n\t\t\tconst theta = this.dot(v) / denominator; // clamp, to handle numerical problems\n\n\t\t\treturn Math.acos(clamp(theta, -1, 1));\n\t\t}\n\n\t\tdistanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t}\n\n\t\tdistanceToSquared(v) {\n\t\t\tconst dx = this.x - v.x,\n\t\t\t\t\t\tdy = this.y - v.y,\n\t\t\t\t\t\tdz = this.z - v.z;\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\t\t}\n\n\t\tmanhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n\t\t}\n\n\t\tsetFromSpherical(s) {\n\t\t\treturn this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n\t\t}\n\n\t\tsetFromSphericalCoords(radius, phi, theta) {\n\t\t\tconst sinPhiRadius = Math.sin(phi) * radius;\n\t\t\tthis.x = sinPhiRadius * Math.sin(theta);\n\t\t\tthis.y = Math.cos(phi) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos(theta);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCylindrical(c) {\n\t\t\treturn this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n\t\t}\n\n\t\tsetFromCylindricalCoords(radius, theta, y) {\n\t\t\tthis.x = radius * Math.sin(theta);\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos(theta);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixPosition(m) {\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[12];\n\t\t\tthis.y = e[13];\n\t\t\tthis.z = e[14];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixScale(m) {\n\t\t\tconst sx = this.setFromMatrixColumn(m, 0).length();\n\t\t\tconst sy = this.setFromMatrixColumn(m, 1).length();\n\t\t\tconst sz = this.setFromMatrixColumn(m, 2).length();\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixColumn(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 4);\n\t\t}\n\n\t\tsetFromMatrix3Column(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 3);\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector3.prototype.isVector3 = true;\n\n\tconst _vector$c = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n\tclass Box3 {\n\t\tconstructor(min = new Vector3(+Infinity, +Infinity, +Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tset(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromArray(array) {\n\t\t\tlet minX = +Infinity;\n\t\t\tlet minY = +Infinity;\n\t\t\tlet minZ = +Infinity;\n\t\t\tlet maxX = -Infinity;\n\t\t\tlet maxY = -Infinity;\n\t\t\tlet maxZ = -Infinity;\n\n\t\t\tfor (let i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\tconst x = array[i];\n\t\t\t\tconst y = array[i + 1];\n\t\t\t\tconst z = array[i + 2];\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromBufferAttribute(attribute) {\n\t\t\tlet minX = +Infinity;\n\t\t\tlet minY = +Infinity;\n\t\t\tlet minZ = +Infinity;\n\t\t\tlet maxX = -Infinity;\n\t\t\tlet maxY = -Infinity;\n\t\t\tlet maxZ = -Infinity;\n\n\t\t\tfor (let i = 0, l = attribute.count; i < l; i++) {\n\t\t\t\tconst x = attribute.getX(i);\n\t\t\t\tconst y = attribute.getY(i);\n\t\t\t\tconst z = attribute.getZ(i);\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCenterAndSize(center, size) {\n\t\t\tconst halfSize = _vector$b.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromObject(object) {\n\t\t\tthis.makeEmpty();\n\t\t\treturn this.expandByObject(object);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.min.x = this.min.y = this.min.z = +Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t}\n\n\t\tgetSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getSize() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByObject(object) {\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tconst geometry = object.geometry;\n\n\t\t\tif (geometry !== undefined) {\n\t\t\t\tif (geometry.boundingBox === null) {\n\t\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\t}\n\n\t\t\t\t_box$3.copy(geometry.boundingBox);\n\n\t\t\t\t_box$3.applyMatrix4(object.matrixWorld);\n\n\t\t\t\tthis.union(_box$3);\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tthis.expandByObject(children[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n\t\t}\n\n\t\tcontainsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n\t\t}\n\n\t\tgetParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint(sphere.center, _vector$b); // If that point is inside the sphere, the AABB and sphere intersect.\n\n\t\t\treturn _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\t\tlet min, max;\n\n\t\t\tif (plane.normal.x > 0) {\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\t\t\t} else {\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\t\t\t}\n\n\t\t\tif (plane.normal.y > 0) {\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\t\t\t}\n\n\t\t\tif (plane.normal.z > 0) {\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\t\t\t}\n\n\t\t\treturn min <= -plane.constant && max >= -plane.constant;\n\t\t}\n\n\t\tintersectsTriangle(triangle) {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} // compute box center and extents\n\n\n\t\t\tthis.getCenter(_center);\n\n\t\t\t_extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n\t\t\t_v0$2.subVectors(triangle.a, _center);\n\n\t\t\t_v1$7.subVectors(triangle.b, _center);\n\n\t\t\t_v2$3.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n\t\t\t_f0.subVectors(_v1$7, _v0$2);\n\n\t\t\t_f1.subVectors(_v2$3, _v1$7);\n\n\t\t\t_f2.subVectors(_v0$2, _v2$3); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n\t\t\tlet axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n\t\t\tif (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // test 3 face normals from the aabb\n\n\n\t\t\taxes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\n\n\t\t\t_triangleNormal.crossVectors(_f0, _f1);\n\n\t\t\taxes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n\t\t\treturn satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents);\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\tconst clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t}\n\n\t\tgetBoundingSphere(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\n\t\t\t}\n\n\t\t\tthis.getCenter(target.center);\n\t\t\ttarget.radius = this.getSize(_vector$b).length() * 0.5;\n\t\t\treturn target;\n\t\t}\n\n\t\tintersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n\t\t\tif (this.isEmpty()) this.makeEmpty();\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n\t\t\t_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n\t\t\t_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n\t\t\t_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n\t\t\t_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n\t\t\t_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n\t\t\t_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n\t\t\t_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n\t\t\t_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n\t\t\tthis.setFromPoints(_points);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t}\n\n\t}\n\n\tBox3.prototype.isBox3 = true;\n\tconst _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\n\tconst _vector$b = /*@__PURE__*/new Vector3();\n\n\tconst _box$3 = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\n\tconst _v0$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v1$7 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$3 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\n\tconst _f0 = /*@__PURE__*/new Vector3();\n\n\tconst _f1 = /*@__PURE__*/new Vector3();\n\n\tconst _f2 = /*@__PURE__*/new Vector3();\n\n\tconst _center = /*@__PURE__*/new Vector3();\n\n\tconst _extents = /*@__PURE__*/new Vector3();\n\n\tconst _triangleNormal = /*@__PURE__*/new Vector3();\n\n\tconst _testAxis = /*@__PURE__*/new Vector3();\n\n\tfunction satForAxes(axes, v0, v1, v2, extents) {\n\t\tfor (let i = 0, j = axes.length - 3; i <= j; i += 3) {\n\t\t\t_testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n\t\t\tconst r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n\t\t\tconst p0 = v0.dot(_testAxis);\n\t\t\tconst p1 = v1.dot(_testAxis);\n\t\t\tconst p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n\t\t\tif (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tconst _box$2 = /*@__PURE__*/new Box3();\n\n\tconst _v1$6 = /*@__PURE__*/new Vector3();\n\n\tconst _toFarthestPoint = /*@__PURE__*/new Vector3();\n\n\tconst _toPoint = /*@__PURE__*/new Vector3();\n\n\tclass Sphere {\n\t\tconstructor(center = new Vector3(), radius = -1) {\n\t\t\tthis.center = center;\n\t\t\tthis.radius = radius;\n\t\t}\n\n\t\tset(center, radius) {\n\t\t\tthis.center.copy(center);\n\t\t\tthis.radius = radius;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points, optionalCenter) {\n\t\t\tconst center = this.center;\n\n\t\t\tif (optionalCenter !== undefined) {\n\t\t\t\tcenter.copy(optionalCenter);\n\t\t\t} else {\n\t\t\t\t_box$2.setFromPoints(points).getCenter(center);\n\t\t\t}\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt(maxRadiusSq);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(sphere) {\n\t\t\tthis.center.copy(sphere.center);\n\t\t\tthis.radius = sphere.radius;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\treturn this.radius < 0;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.center.set(0, 0, 0);\n\t\t\tthis.radius = -1;\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.distanceToSquared(this.center) <= this.radius * this.radius;\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn point.distanceTo(this.center) - this.radius;\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\tconst radiusSum = this.radius + sphere.radius;\n\t\t\treturn sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsSphere(this);\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\treturn Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tconst deltaLengthSq = this.center.distanceToSquared(point);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.copy(point);\n\n\t\t\tif (deltaLengthSq > this.radius * this.radius) {\n\t\t\t\ttarget.sub(this.center).normalize();\n\t\t\t\ttarget.multiplyScalar(this.radius).add(this.center);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t}\n\n\t\tgetBoundingBox(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .getBoundingBox() target is now required');\n\t\t\t\ttarget = new Box3();\n\t\t\t}\n\n\t\t\tif (this.isEmpty()) {\n\t\t\t\t// Empty sphere produces empty bounding box\n\t\t\t\ttarget.makeEmpty();\n\t\t\t\treturn target;\n\t\t\t}\n\n\t\t\ttarget.set(this.center, this.center);\n\t\t\ttarget.expandByScalar(this.radius);\n\t\t\treturn target;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tthis.center.applyMatrix4(matrix);\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.center.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n\t\t\t_toPoint.subVectors(point, this.center);\n\n\t\t\tconst lengthSq = _toPoint.lengthSq();\n\n\t\t\tif (lengthSq > this.radius * this.radius) {\n\t\t\t\tconst length = Math.sqrt(lengthSq);\n\t\t\t\tconst missingRadiusHalf = (length - this.radius) * 0.5; // Nudge this sphere towards the target point. Add half the missing distance to radius,\n\t\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\n\t\t\t\t// the whole missing distance were just added to radius.\n\n\t\t\t\tthis.center.add(_toPoint.multiplyScalar(missingRadiusHalf / length));\n\t\t\t\tthis.radius += missingRadiusHalf;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(sphere) {\n\t\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n\t\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\n\t\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\n\t\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\n\t\t\t_toFarthestPoint.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);\n\n\t\t\tthis.expandByPoint(_v1$6.copy(sphere.center).add(_toFarthestPoint));\n\t\t\tthis.expandByPoint(_v1$6.copy(sphere.center).sub(_toFarthestPoint));\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(sphere) {\n\t\t\treturn sphere.center.equals(this.center) && sphere.radius === this.radius;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tconst _vector$a = /*@__PURE__*/new Vector3();\n\n\tconst _segCenter = /*@__PURE__*/new Vector3();\n\n\tconst _segDir = /*@__PURE__*/new Vector3();\n\n\tconst _diff = /*@__PURE__*/new Vector3();\n\n\tconst _edge1 = /*@__PURE__*/new Vector3();\n\n\tconst _edge2 = /*@__PURE__*/new Vector3();\n\n\tconst _normal$1 = /*@__PURE__*/new Vector3();\n\n\tclass Ray {\n\t\tconstructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {\n\t\t\tthis.origin = origin;\n\t\t\tthis.direction = direction;\n\t\t}\n\n\t\tset(origin, direction) {\n\t\t\tthis.origin.copy(origin);\n\t\t\tthis.direction.copy(direction);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(ray) {\n\t\t\tthis.origin.copy(ray.origin);\n\t\t\tthis.direction.copy(ray.direction);\n\t\t\treturn this;\n\t\t}\n\n\t\tat(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(t).add(this.origin);\n\t\t}\n\n\t\tlookAt(v) {\n\t\t\tthis.direction.copy(v).sub(this.origin).normalize();\n\t\t\treturn this;\n\t\t}\n\n\t\trecast(t) {\n\t\t\tthis.origin.copy(this.at(t, _vector$a));\n\t\t\treturn this;\n\t\t}\n\n\t\tclosestPointToPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(point, this.origin);\n\t\t\tconst directionDistance = target.dot(this.direction);\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn target.copy(this.origin);\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn Math.sqrt(this.distanceSqToPoint(point));\n\t\t}\n\n\t\tdistanceSqToPoint(point) {\n\t\t\tconst directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn this.origin.distanceToSquared(point);\n\t\t\t}\n\n\t\t\t_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n\t\t\treturn _vector$a.distanceToSquared(point);\n\t\t}\n\n\t\tdistanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\t\t\t_segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n\t\t\t_segDir.copy(v1).sub(v0).normalize();\n\n\t\t\t_diff.copy(this.origin).sub(_segCenter);\n\n\t\t\tconst segExtent = v0.distanceTo(v1) * 0.5;\n\t\t\tconst a01 = -this.direction.dot(_segDir);\n\n\t\t\tconst b0 = _diff.dot(this.direction);\n\n\t\t\tconst b1 = -_diff.dot(_segDir);\n\n\t\t\tconst c = _diff.lengthSq();\n\n\t\t\tconst det = Math.abs(1 - a01 * a01);\n\t\t\tlet s0, s1, sqrDist, extDet;\n\n\t\t\tif (det > 0) {\n\t\t\t\t// The ray and segment are not parallel.\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif (s0 >= 0) {\n\t\t\t\t\tif (s1 >= -extDet) {\n\t\t\t\t\t\tif (s1 <= extDet) {\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// region 1\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 5\n\t\t\t\t\t\ts1 = -segExtent;\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (s1 <= -extDet) {\n\t\t\t\t\t\t// region 4\n\t\t\t\t\t\ts0 = Math.max(0, -(-a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else if (s1 <= extDet) {\n\t\t\t\t\t\t// region 3\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 2\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Ray and segment are parallel.\n\t\t\t\ts1 = a01 > 0 ? -segExtent : segExtent;\n\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t}\n\n\t\t\tif (optionalPointOnRay) {\n\t\t\t\toptionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n\t\t\t}\n\n\t\t\tif (optionalPointOnSegment) {\n\t\t\t\toptionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\t\t}\n\n\t\tintersectSphere(sphere, target) {\n\t\t\t_vector$a.subVectors(sphere.center, this.origin);\n\n\t\t\tconst tca = _vector$a.dot(this.direction);\n\n\t\t\tconst d2 = _vector$a.dot(_vector$a) - tca * tca;\n\t\t\tconst radius2 = sphere.radius * sphere.radius;\n\t\t\tif (d2 > radius2) return null;\n\t\t\tconst thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n\t\t\tconst t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n\t\t\tconst t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n\t\t\tif (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\n\t\t\tif (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n\t\t\treturn this.at(t0, target);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\treturn this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n\t\t}\n\n\t\tdistanceToPlane(plane) {\n\t\t\tconst denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (plane.distanceToPoint(this.origin) === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} // Null is preferable to undefined since undefined means.... it is undefined\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\t\t}\n\n\t\tintersectPlane(plane, target) {\n\t\t\tconst t = this.distanceToPlane(plane);\n\n\t\t\tif (t === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this.at(t, target);\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\t// check if the ray lies on the plane first\n\t\t\tconst distToPoint = plane.distanceToPoint(this.origin);\n\n\t\t\tif (distToPoint === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator * distToPoint < 0) {\n\t\t\t\treturn true;\n\t\t\t} // ray origin is behind the plane (and is pointing behind it)\n\n\n\t\t\treturn false;\n\t\t}\n\n\t\tintersectBox(box, target) {\n\t\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\t\tconst invdirx = 1 / this.direction.x,\n\t\t\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\t\t\tinvdirz = 1 / this.direction.z;\n\t\t\tconst origin = this.origin;\n\n\t\t\tif (invdirx >= 0) {\n\t\t\t\ttmin = (box.min.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.max.x - origin.x) * invdirx;\n\t\t\t} else {\n\t\t\t\ttmin = (box.max.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.min.x - origin.x) * invdirx;\n\t\t\t}\n\n\t\t\tif (invdiry >= 0) {\n\t\t\t\ttymin = (box.min.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.max.y - origin.y) * invdiry;\n\t\t\t} else {\n\t\t\t\ttymin = (box.max.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.min.y - origin.y) * invdiry;\n\t\t\t}\n\n\t\t\tif (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif (tymin > tmin || tmin !== tmin) tmin = tymin;\n\t\t\tif (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n\t\t\tif (invdirz >= 0) {\n\t\t\t\ttzmin = (box.min.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.max.z - origin.z) * invdirz;\n\t\t\t} else {\n\t\t\t\ttzmin = (box.max.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.min.z - origin.z) * invdirz;\n\t\t\t}\n\n\t\t\tif (tmin > tzmax || tzmin > tmax) return null;\n\t\t\tif (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n\t\t\tif (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n\t\t\tif (tmax < 0) return null;\n\t\t\treturn this.at(tmin >= 0 ? tmin : tmax, target);\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn this.intersectBox(box, _vector$a) !== null;\n\t\t}\n\n\t\tintersectTriangle(a, b, c, backfaceCulling, target) {\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\t\t_edge1.subVectors(b, a);\n\n\t\t\t_edge2.subVectors(c, a);\n\n\t\t\t_normal$1.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//\t |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//\t |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//\t |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n\t\t\tlet DdN = this.direction.dot(_normal$1);\n\t\t\tlet sign;\n\n\t\t\tif (DdN > 0) {\n\t\t\t\tif (backfaceCulling) return null;\n\t\t\t\tsign = 1;\n\t\t\t} else if (DdN < 0) {\n\t\t\t\tsign = -1;\n\t\t\t\tDdN = -DdN;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_diff.subVectors(this.origin, a);\n\n\t\t\tconst DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n\t\t\tif (DdQxE2 < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n\t\t\tif (DdE1xQ < 0) {\n\t\t\t\treturn null;\n\t\t\t} // b1+b2 > 1, no intersection\n\n\n\t\t\tif (DdQxE2 + DdE1xQ > DdN) {\n\t\t\t\treturn null;\n\t\t\t} // Line intersects triangle, check if ray does.\n\n\n\t\t\tconst QdN = -sign * _diff.dot(_normal$1); // t < 0, no intersection\n\n\n\t\t\tif (QdN < 0) {\n\t\t\t\treturn null;\n\t\t\t} // Ray intersects triangle.\n\n\n\t\t\treturn this.at(QdN / DdN, target);\n\t\t}\n\n\t\tapplyMatrix4(matrix4) {\n\t\t\tthis.origin.applyMatrix4(matrix4);\n\t\t\tthis.direction.transformDirection(matrix4);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(ray) {\n\t\t\treturn ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tclass Matrix4 {\n\t\tconstructor() {\n\t\t\tthis.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tset(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[4] = n12;\n\t\t\tte[8] = n13;\n\t\t\tte[12] = n14;\n\t\t\tte[1] = n21;\n\t\t\tte[5] = n22;\n\t\t\tte[9] = n23;\n\t\t\tte[13] = n24;\n\t\t\tte[2] = n31;\n\t\t\tte[6] = n32;\n\t\t\tte[10] = n33;\n\t\t\tte[14] = n34;\n\t\t\tte[3] = n41;\n\t\t\tte[7] = n42;\n\t\t\tte[11] = n43;\n\t\t\tte[15] = n44;\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\tthis.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Matrix4().fromArray(this.elements);\n\t\t}\n\n\t\tcopy(m) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\tte[9] = me[9];\n\t\t\tte[10] = me[10];\n\t\t\tte[11] = me[11];\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\tte[15] = me[15];\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyPosition(m) {\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tme = m.elements;\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrix3(m) {\n\t\t\tconst me = m.elements;\n\t\t\tthis.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\textractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrixColumn(this, 0);\n\t\t\tyAxis.setFromMatrixColumn(this, 1);\n\t\t\tzAxis.setFromMatrixColumn(this, 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeBasis(xAxis, yAxis, zAxis) {\n\t\t\tthis.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\textractRotation(m) {\n\t\t\t// this method does not support reflection matrices\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\n\t\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();\n\n\t\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();\n\n\t\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();\n\n\t\t\tte[0] = me[0] * scaleX;\n\t\t\tte[1] = me[1] * scaleX;\n\t\t\tte[2] = me[2] * scaleX;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = me[4] * scaleY;\n\t\t\tte[5] = me[5] * scaleY;\n\t\t\tte[6] = me[6] * scaleY;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = me[8] * scaleZ;\n\t\t\tte[9] = me[9] * scaleZ;\n\t\t\tte[10] = me[10] * scaleZ;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationFromEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tconst te = this.elements;\n\t\t\tconst x = euler.x,\n\t\t\t\t\t\ty = euler.y,\n\t\t\t\t\t\tz = euler.z;\n\t\t\tconst a = Math.cos(x),\n\t\t\t\t\t\tb = Math.sin(x);\n\t\t\tconst c = Math.cos(y),\n\t\t\t\t\t\td = Math.sin(y);\n\t\t\tconst e = Math.cos(z),\n\t\t\t\t\t\tf = Math.sin(z);\n\n\t\t\tif (euler.order === 'XYZ') {\n\t\t\t\tconst ae = a * e,\n\t\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -c * f;\n\t\t\t\tte[8] = d;\n\t\t\t\tte[1] = af + be * d;\n\t\t\t\tte[5] = ae - bf * d;\n\t\t\t\tte[9] = -b * c;\n\t\t\t\tte[2] = bf - ae * d;\n\t\t\t\tte[6] = be + af * d;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YXZ') {\n\t\t\t\tconst ce = c * e,\n\t\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce + df * b;\n\t\t\t\tte[4] = de * b - cf;\n\t\t\t\tte[8] = a * d;\n\t\t\t\tte[1] = a * f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b;\n\t\t\t\tte[2] = cf * b - de;\n\t\t\t\tte[6] = df + ce * b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZXY') {\n\t\t\t\tconst ce = c * e,\n\t\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce - df * b;\n\t\t\t\tte[4] = -a * f;\n\t\t\t\tte[8] = de + cf * b;\n\t\t\t\tte[1] = cf + de * b;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = df - ce * b;\n\t\t\t\tte[2] = -a * d;\n\t\t\t\tte[6] = b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZYX') {\n\t\t\t\tconst ae = a * e,\n\t\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = be * d - af;\n\t\t\t\tte[8] = ae * d + bf;\n\t\t\t\tte[1] = c * f;\n\t\t\t\tte[5] = bf * d + ae;\n\t\t\t\tte[9] = af * d - be;\n\t\t\t\tte[2] = -d;\n\t\t\t\tte[6] = b * c;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YZX') {\n\t\t\t\tconst ac = a * c,\n\t\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = bd - ac * f;\n\t\t\t\tte[8] = bc * f + ad;\n\t\t\t\tte[1] = f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b * e;\n\t\t\t\tte[2] = -d * e;\n\t\t\t\tte[6] = ad * f + bc;\n\t\t\t\tte[10] = ac - bd * f;\n\t\t\t} else if (euler.order === 'XZY') {\n\t\t\t\tconst ac = a * c,\n\t\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -f;\n\t\t\t\tte[8] = d * e;\n\t\t\t\tte[1] = ac * f + bd;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = ad * f - bc;\n\t\t\t\tte[2] = bc * f - ad;\n\t\t\t\tte[6] = b * e;\n\t\t\t\tte[10] = bd * f + ac;\n\t\t\t} // bottom row\n\n\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0; // last column\n\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationFromQuaternion(q) {\n\t\t\treturn this.compose(_zero, q, _one);\n\t\t}\n\n\t\tlookAt(eye, target, up) {\n\t\t\tconst te = this.elements;\n\n\t\t\t_z.subVectors(eye, target);\n\n\t\t\tif (_z.lengthSq() === 0) {\n\t\t\t\t// eye and target are in the same position\n\t\t\t\t_z.z = 1;\n\t\t\t}\n\n\t\t\t_z.normalize();\n\n\t\t\t_x.crossVectors(up, _z);\n\n\t\t\tif (_x.lengthSq() === 0) {\n\t\t\t\t// up and z are parallel\n\t\t\t\tif (Math.abs(up.z) === 1) {\n\t\t\t\t\t_z.x += 0.0001;\n\t\t\t\t} else {\n\t\t\t\t\t_z.z += 0.0001;\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\n\t\t\t\t_x.crossVectors(up, _z);\n\t\t\t}\n\n\t\t\t_x.normalize();\n\n\t\t\t_y.crossVectors(_z, _x);\n\n\t\t\tte[0] = _x.x;\n\t\t\tte[4] = _y.x;\n\t\t\tte[8] = _z.x;\n\t\t\tte[1] = _x.y;\n\t\t\tte[5] = _y.y;\n\t\t\tte[9] = _z.y;\n\t\t\tte[2] = _x.z;\n\t\t\tte[6] = _y.z;\n\t\t\tte[10] = _z.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(m, n) {\n\t\t\tif (n !== undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n\t\t\t\treturn this.multiplyMatrices(m, n);\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t}\n\n\t\tpremultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t}\n\n\t\tmultiplyMatrices(a, b) {\n\t\t\tconst ae = a.elements;\n\t\t\tconst be = b.elements;\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = ae[0],\n\t\t\t\t\t\ta12 = ae[4],\n\t\t\t\t\t\ta13 = ae[8],\n\t\t\t\t\t\ta14 = ae[12];\n\t\t\tconst a21 = ae[1],\n\t\t\t\t\t\ta22 = ae[5],\n\t\t\t\t\t\ta23 = ae[9],\n\t\t\t\t\t\ta24 = ae[13];\n\t\t\tconst a31 = ae[2],\n\t\t\t\t\t\ta32 = ae[6],\n\t\t\t\t\t\ta33 = ae[10],\n\t\t\t\t\t\ta34 = ae[14];\n\t\t\tconst a41 = ae[3],\n\t\t\t\t\t\ta42 = ae[7],\n\t\t\t\t\t\ta43 = ae[11],\n\t\t\t\t\t\ta44 = ae[15];\n\t\t\tconst b11 = be[0],\n\t\t\t\t\t\tb12 = be[4],\n\t\t\t\t\t\tb13 = be[8],\n\t\t\t\t\t\tb14 = be[12];\n\t\t\tconst b21 = be[1],\n\t\t\t\t\t\tb22 = be[5],\n\t\t\t\t\t\tb23 = be[9],\n\t\t\t\t\t\tb24 = be[13];\n\t\t\tconst b31 = be[2],\n\t\t\t\t\t\tb32 = be[6],\n\t\t\t\t\t\tb33 = be[10],\n\t\t\t\t\t\tb34 = be[14];\n\t\t\tconst b41 = be[3],\n\t\t\t\t\t\tb42 = be[7],\n\t\t\t\t\t\tb43 = be[11],\n\t\t\t\t\t\tb44 = be[15];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[8] *= s;\n\t\t\tte[12] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[9] *= s;\n\t\t\tte[13] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[10] *= s;\n\t\t\tte[14] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[11] *= s;\n\t\t\tte[15] *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeterminant() {\n\t\t\tconst te = this.elements;\n\t\t\tconst n11 = te[0],\n\t\t\t\t\t\tn12 = te[4],\n\t\t\t\t\t\tn13 = te[8],\n\t\t\t\t\t\tn14 = te[12];\n\t\t\tconst n21 = te[1],\n\t\t\t\t\t\tn22 = te[5],\n\t\t\t\t\t\tn23 = te[9],\n\t\t\t\t\t\tn24 = te[13];\n\t\t\tconst n31 = te[2],\n\t\t\t\t\t\tn32 = te[6],\n\t\t\t\t\t\tn33 = te[10],\n\t\t\t\t\t\tn34 = te[14];\n\t\t\tconst n41 = te[3],\n\t\t\t\t\t\tn42 = te[7],\n\t\t\t\t\t\tn43 = te[11],\n\t\t\t\t\t\tn44 = te[15]; //TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n\t\t}\n\n\t\ttranspose() {\n\t\t\tconst te = this.elements;\n\t\t\tlet tmp;\n\t\t\ttmp = te[1];\n\t\t\tte[1] = te[4];\n\t\t\tte[4] = tmp;\n\t\t\ttmp = te[2];\n\t\t\tte[2] = te[8];\n\t\t\tte[8] = tmp;\n\t\t\ttmp = te[6];\n\t\t\tte[6] = te[9];\n\t\t\tte[9] = tmp;\n\t\t\ttmp = te[3];\n\t\t\tte[3] = te[12];\n\t\t\tte[12] = tmp;\n\t\t\ttmp = te[7];\n\t\t\tte[7] = te[13];\n\t\t\tte[13] = tmp;\n\t\t\ttmp = te[11];\n\t\t\tte[11] = te[14];\n\t\t\tte[14] = tmp;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetPosition(x, y, z) {\n\t\t\tconst te = this.elements;\n\n\t\t\tif (x.isVector3) {\n\t\t\t\tte[12] = x.x;\n\t\t\t\tte[13] = x.y;\n\t\t\t\tte[14] = x.z;\n\t\t\t} else {\n\t\t\t\tte[12] = x;\n\t\t\t\tte[13] = y;\n\t\t\t\tte[14] = z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tinvert() {\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tn11 = te[0],\n\t\t\t\t\t\tn21 = te[1],\n\t\t\t\t\t\tn31 = te[2],\n\t\t\t\t\t\tn41 = te[3],\n\t\t\t\t\t\tn12 = te[4],\n\t\t\t\t\t\tn22 = te[5],\n\t\t\t\t\t\tn32 = te[6],\n\t\t\t\t\t\tn42 = te[7],\n\t\t\t\t\t\tn13 = te[8],\n\t\t\t\t\t\tn23 = te[9],\n\t\t\t\t\t\tn33 = te[10],\n\t\t\t\t\t\tn43 = te[11],\n\t\t\t\t\t\tn14 = te[12],\n\t\t\t\t\t\tn24 = te[13],\n\t\t\t\t\t\tn34 = te[14],\n\t\t\t\t\t\tn44 = te[15],\n\t\t\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tconst detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n\t\t\tte[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n\t\t\tte[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n\t\t\tte[4] = t12 * detInv;\n\t\t\tte[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n\t\t\tte[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n\t\t\tte[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n\t\t\tte[8] = t13 * detInv;\n\t\t\tte[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n\t\t\tte[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n\t\t\tte[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n\t\t\tte[12] = t14 * detInv;\n\t\t\tte[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n\t\t\tte[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n\t\t\tte[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(v) {\n\t\t\tconst te = this.elements;\n\t\t\tconst x = v.x,\n\t\t\t\t\t\ty = v.y,\n\t\t\t\t\t\tz = v.z;\n\t\t\tte[0] *= x;\n\t\t\tte[4] *= y;\n\t\t\tte[8] *= z;\n\t\t\tte[1] *= x;\n\t\t\tte[5] *= y;\n\t\t\tte[9] *= z;\n\t\t\tte[2] *= x;\n\t\t\tte[6] *= y;\n\t\t\tte[10] *= z;\n\t\t\tte[3] *= x;\n\t\t\tte[7] *= y;\n\t\t\tte[11] *= z;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMaxScaleOnAxis() {\n\t\t\tconst te = this.elements;\n\t\t\tconst scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n\t\t\tconst scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n\t\t\tconst scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\t\t\treturn Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n\t\t}\n\n\t\tmakeTranslation(x, y, z) {\n\t\t\tthis.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationX(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationY(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationZ(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationAxis(axis, angle) {\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t\tconst c = Math.cos(angle);\n\t\t\tconst s = Math.sin(angle);\n\t\t\tconst t = 1 - c;\n\t\t\tconst x = axis.x,\n\t\t\t\t\t\ty = axis.y,\n\t\t\t\t\t\tz = axis.z;\n\t\t\tconst tx = t * x,\n\t\t\t\t\t\tty = t * y;\n\t\t\tthis.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeScale(x, y, z) {\n\t\t\tthis.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeShear(xy, xz, yx, yz, zx, zy) {\n\t\t\tthis.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tcompose(position, quaternion, scale) {\n\t\t\tconst te = this.elements;\n\t\t\tconst x = quaternion._x,\n\t\t\t\t\t\ty = quaternion._y,\n\t\t\t\t\t\tz = quaternion._z,\n\t\t\t\t\t\tw = quaternion._w;\n\t\t\tconst x2 = x + x,\n\t\t\t\t\t\ty2 = y + y,\n\t\t\t\t\t\tz2 = z + z;\n\t\t\tconst xx = x * x2,\n\t\t\t\t\t\txy = x * y2,\n\t\t\t\t\t\txz = x * z2;\n\t\t\tconst yy = y * y2,\n\t\t\t\t\t\tyz = y * z2,\n\t\t\t\t\t\tzz = z * z2;\n\t\t\tconst wx = w * x2,\n\t\t\t\t\t\twy = w * y2,\n\t\t\t\t\t\twz = w * z2;\n\t\t\tconst sx = scale.x,\n\t\t\t\t\t\tsy = scale.y,\n\t\t\t\t\t\tsz = scale.z;\n\t\t\tte[0] = (1 - (yy + zz)) * sx;\n\t\t\tte[1] = (xy + wz) * sx;\n\t\t\tte[2] = (xz - wy) * sx;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = (xy - wz) * sy;\n\t\t\tte[5] = (1 - (xx + zz)) * sy;\n\t\t\tte[6] = (yz + wx) * sy;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = (xz + wy) * sz;\n\t\t\tte[9] = (yz - wx) * sz;\n\t\t\tte[10] = (1 - (xx + yy)) * sz;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = position.x;\n\t\t\tte[13] = position.y;\n\t\t\tte[14] = position.z;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tdecompose(position, quaternion, scale) {\n\t\t\tconst te = this.elements;\n\n\t\t\tlet sx = _v1$5.set(te[0], te[1], te[2]).length();\n\n\t\t\tconst sy = _v1$5.set(te[4], te[5], te[6]).length();\n\n\t\t\tconst sz = _v1$5.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n\n\t\t\tconst det = this.determinant();\n\t\t\tif (det < 0) sx = -sx;\n\t\t\tposition.x = te[12];\n\t\t\tposition.y = te[13];\n\t\t\tposition.z = te[14]; // scale the rotation part\n\n\t\t\t_m1$2.copy(this);\n\n\t\t\tconst invSX = 1 / sx;\n\t\t\tconst invSY = 1 / sy;\n\t\t\tconst invSZ = 1 / sz;\n\t\t\t_m1$2.elements[0] *= invSX;\n\t\t\t_m1$2.elements[1] *= invSX;\n\t\t\t_m1$2.elements[2] *= invSX;\n\t\t\t_m1$2.elements[4] *= invSY;\n\t\t\t_m1$2.elements[5] *= invSY;\n\t\t\t_m1$2.elements[6] *= invSY;\n\t\t\t_m1$2.elements[8] *= invSZ;\n\t\t\t_m1$2.elements[9] *= invSZ;\n\t\t\t_m1$2.elements[10] *= invSZ;\n\t\t\tquaternion.setFromRotationMatrix(_m1$2);\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakePerspective(left, right, top, bottom, near, far) {\n\t\t\tif (far === undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n\t\t\t}\n\n\t\t\tconst te = this.elements;\n\t\t\tconst x = 2 * near / (right - left);\n\t\t\tconst y = 2 * near / (top - bottom);\n\t\t\tconst a = (right + left) / (right - left);\n\t\t\tconst b = (top + bottom) / (top - bottom);\n\t\t\tconst c = -(far + near) / (far - near);\n\t\t\tconst d = -2 * far * near / (far - near);\n\t\t\tte[0] = x;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = a;\n\t\t\tte[12] = 0;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = y;\n\t\t\tte[9] = b;\n\t\t\tte[13] = 0;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = c;\n\t\t\tte[14] = d;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = -1;\n\t\t\tte[15] = 0;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeOrthographic(left, right, top, bottom, near, far) {\n\t\t\tconst te = this.elements;\n\t\t\tconst w = 1.0 / (right - left);\n\t\t\tconst h = 1.0 / (top - bottom);\n\t\t\tconst p = 1.0 / (far - near);\n\t\t\tconst x = (right + left) * w;\n\t\t\tconst y = (top + bottom) * h;\n\t\t\tconst z = (far + near) * p;\n\t\t\tte[0] = 2 * w;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = 0;\n\t\t\tte[12] = -x;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = 2 * h;\n\t\t\tte[9] = 0;\n\t\t\tte[13] = -y;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = -2 * p;\n\t\t\tte[14] = -z;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(matrix) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = matrix.elements;\n\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\tarray[offset + 9] = te[9];\n\t\t\tarray[offset + 10] = te[10];\n\t\t\tarray[offset + 11] = te[11];\n\t\t\tarray[offset + 12] = te[12];\n\t\t\tarray[offset + 13] = te[13];\n\t\t\tarray[offset + 14] = te[14];\n\t\t\tarray[offset + 15] = te[15];\n\t\t\treturn array;\n\t\t}\n\n\t}\n\n\tMatrix4.prototype.isMatrix4 = true;\n\n\tconst _v1$5 = /*@__PURE__*/new Vector3();\n\n\tconst _m1$2 = /*@__PURE__*/new Matrix4();\n\n\tconst _zero = /*@__PURE__*/new Vector3(0, 0, 0);\n\n\tconst _one = /*@__PURE__*/new Vector3(1, 1, 1);\n\n\tconst _x = /*@__PURE__*/new Vector3();\n\n\tconst _y = /*@__PURE__*/new Vector3();\n\n\tconst _z = /*@__PURE__*/new Vector3();\n\n\tconst _matrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n\tclass Euler {\n\t\tconstructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order;\n\t\t}\n\n\t\tget x() {\n\t\t\treturn this._x;\n\t\t}\n\n\t\tset x(value) {\n\t\t\tthis._x = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget y() {\n\t\t\treturn this._y;\n\t\t}\n\n\t\tset y(value) {\n\t\t\tthis._y = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget z() {\n\t\t\treturn this._z;\n\t\t}\n\n\t\tset z(value) {\n\t\t\tthis._z = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget order() {\n\t\t\treturn this._order;\n\t\t}\n\n\t\tset order(value) {\n\t\t\tthis._order = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tset(x, y, z, order) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._order);\n\t\t}\n\n\t\tcopy(euler) {\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromRotationMatrix(m, order, update) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tconst te = m.elements;\n\t\t\tconst m11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8];\n\t\t\tconst m21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9];\n\t\t\tconst m31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10];\n\t\t\torder = order || this._order;\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._y = Math.asin(clamp(m13, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m13) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = Math.asin(-clamp(m23, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m23) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = Math.asin(clamp(m32, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m32) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._y = Math.asin(-clamp(m31, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m31) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._z = Math.asin(clamp(m21, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m21) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._z = Math.asin(-clamp(m12, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m12) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tthis._order = order;\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromQuaternion(q, order, update) {\n\t\t\t_matrix$1.makeRotationFromQuaternion(q);\n\n\t\t\treturn this.setFromRotationMatrix(_matrix$1, order, update);\n\t\t}\n\n\t\tsetFromVector3(v, order) {\n\t\t\treturn this.set(v.x, v.y, v.z, order || this._order);\n\t\t}\n\n\t\treorder(newOrder) {\n\t\t\t// WARNING: this discards revolution information -bhouston\n\t\t\t_quaternion$3.setFromEuler(this);\n\n\t\t\treturn this.setFromQuaternion(_quaternion$3, newOrder);\n\t\t}\n\n\t\tequals(euler) {\n\t\t\treturn euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n\t\t}\n\n\t\tfromArray(array) {\n\t\t\tthis._x = array[0];\n\t\t\tthis._y = array[1];\n\t\t\tthis._z = array[2];\n\t\t\tif (array[3] !== undefined) this._order = array[3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._order;\n\t\t\treturn array;\n\t\t}\n\n\t\ttoVector3(optionalResult) {\n\t\t\tif (optionalResult) {\n\t\t\t\treturn optionalResult.set(this._x, this._y, this._z);\n\t\t\t} else {\n\t\t\t\treturn new Vector3(this._x, this._y, this._z);\n\t\t\t}\n\t\t}\n\n\t\t_onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChangeCallback() {}\n\n\t}\n\n\tEuler.prototype.isEuler = true;\n\tEuler.DefaultOrder = 'XYZ';\n\tEuler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\n\n\tclass Layers {\n\t\tconstructor() {\n\t\t\tthis.mask = 1 | 0;\n\t\t}\n\n\t\tset(channel) {\n\t\t\tthis.mask = 1 << channel | 0;\n\t\t}\n\n\t\tenable(channel) {\n\t\t\tthis.mask |= 1 << channel | 0;\n\t\t}\n\n\t\tenableAll() {\n\t\t\tthis.mask = 0xffffffff | 0;\n\t\t}\n\n\t\ttoggle(channel) {\n\t\t\tthis.mask ^= 1 << channel | 0;\n\t\t}\n\n\t\tdisable(channel) {\n\t\t\tthis.mask &= ~(1 << channel | 0);\n\t\t}\n\n\t\tdisableAll() {\n\t\t\tthis.mask = 0;\n\t\t}\n\n\t\ttest(layers) {\n\t\t\treturn (this.mask & layers.mask) !== 0;\n\t\t}\n\n\t}\n\n\tlet _object3DId = 0;\n\n\tconst _v1$4 = /*@__PURE__*/new Vector3();\n\n\tconst _q1 = /*@__PURE__*/new Quaternion();\n\n\tconst _m1$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _target = /*@__PURE__*/new Vector3();\n\n\tconst _position$3 = /*@__PURE__*/new Vector3();\n\n\tconst _scale$2 = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$2 = /*@__PURE__*/new Quaternion();\n\n\tconst _xAxis = /*@__PURE__*/new Vector3(1, 0, 0);\n\n\tconst _yAxis = /*@__PURE__*/new Vector3(0, 1, 0);\n\n\tconst _zAxis = /*@__PURE__*/new Vector3(0, 0, 1);\n\n\tconst _addedEvent = {\n\t\ttype: 'added'\n\t};\n\tconst _removedEvent = {\n\t\ttype: 'removed'\n\t};\n\n\tclass Object3D extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: _object3DId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'Object3D';\n\t\t\tthis.parent = null;\n\t\t\tthis.children = [];\n\t\t\tthis.up = Object3D.DefaultUp.clone();\n\t\t\tconst position = new Vector3();\n\t\t\tconst rotation = new Euler();\n\t\t\tconst quaternion = new Quaternion();\n\t\t\tconst scale = new Vector3(1, 1, 1);\n\n\t\t\tfunction onRotationChange() {\n\t\t\t\tquaternion.setFromEuler(rotation, false);\n\t\t\t}\n\n\t\t\tfunction onQuaternionChange() {\n\t\t\t\trotation.setFromQuaternion(quaternion, undefined, false);\n\t\t\t}\n\n\t\t\trotation._onChange(onRotationChange);\n\n\t\t\tquaternion._onChange(onQuaternionChange);\n\n\t\t\tObject.defineProperties(this, {\n\t\t\t\tposition: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: position\n\t\t\t\t},\n\t\t\t\trotation: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: rotation\n\t\t\t\t},\n\t\t\t\tquaternion: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: quaternion\n\t\t\t\t},\n\t\t\t\tscale: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: scale\n\t\t\t\t},\n\t\t\t\tmodelViewMatrix: {\n\t\t\t\t\tvalue: new Matrix4()\n\t\t\t\t},\n\t\t\t\tnormalMatrix: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.matrixWorld = new Matrix4();\n\t\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\tthis.layers = new Layers();\n\t\t\tthis.visible = true;\n\t\t\tthis.castShadow = false;\n\t\t\tthis.receiveShadow = false;\n\t\t\tthis.frustumCulled = true;\n\t\t\tthis.renderOrder = 0;\n\t\t\tthis.animations = [];\n\t\t\tthis.userData = {};\n\t\t}\n\n\t\tonBeforeRender() {}\n\n\t\tonAfterRender() {}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\t\t\tthis.matrix.premultiply(matrix);\n\t\t\tthis.matrix.decompose(this.position, this.quaternion, this.scale);\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\tthis.quaternion.premultiply(q);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRotationFromAxisAngle(axis, angle) {\n\t\t\t// assumes axis is normalized\n\t\t\tthis.quaternion.setFromAxisAngle(axis, angle);\n\t\t}\n\n\t\tsetRotationFromEuler(euler) {\n\t\t\tthis.quaternion.setFromEuler(euler, true);\n\t\t}\n\n\t\tsetRotationFromMatrix(m) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tthis.quaternion.setFromRotationMatrix(m);\n\t\t}\n\n\t\tsetRotationFromQuaternion(q) {\n\t\t\t// assumes q is normalized\n\t\t\tthis.quaternion.copy(q);\n\t\t}\n\n\t\trotateOnAxis(axis, angle) {\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.multiply(_q1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateOnWorldAxis(axis, angle) {\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.premultiply(_q1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateX(angle) {\n\t\t\treturn this.rotateOnAxis(_xAxis, angle);\n\t\t}\n\n\t\trotateY(angle) {\n\t\t\treturn this.rotateOnAxis(_yAxis, angle);\n\t\t}\n\n\t\trotateZ(angle) {\n\t\t\treturn this.rotateOnAxis(_zAxis, angle);\n\t\t}\n\n\t\ttranslateOnAxis(axis, distance) {\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_v1$4.copy(axis).applyQuaternion(this.quaternion);\n\n\t\t\tthis.position.add(_v1$4.multiplyScalar(distance));\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslateX(distance) {\n\t\t\treturn this.translateOnAxis(_xAxis, distance);\n\t\t}\n\n\t\ttranslateY(distance) {\n\t\t\treturn this.translateOnAxis(_yAxis, distance);\n\t\t}\n\n\t\ttranslateZ(distance) {\n\t\t\treturn this.translateOnAxis(_zAxis, distance);\n\t\t}\n\n\t\tlocalToWorld(vector) {\n\t\t\treturn vector.applyMatrix4(this.matrixWorld);\n\t\t}\n\n\t\tworldToLocal(vector) {\n\t\t\treturn vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n\t\t}\n\n\t\tlookAt(x, y, z) {\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\t\t\tif (x.isVector3) {\n\t\t\t\t_target.copy(x);\n\t\t\t} else {\n\t\t\t\t_target.set(x, y, z);\n\t\t\t}\n\n\t\t\tconst parent = this.parent;\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_position$3.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\tif (this.isCamera || this.isLight) {\n\t\t\t\t_m1$1.lookAt(_position$3, _target, this.up);\n\t\t\t} else {\n\t\t\t\t_m1$1.lookAt(_target, _position$3, this.up);\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix(_m1$1);\n\n\t\t\tif (parent) {\n\t\t\t\t_m1$1.extractRotation(parent.matrixWorld);\n\n\t\t\t\t_q1.setFromRotationMatrix(_m1$1);\n\n\t\t\t\tthis.quaternion.premultiply(_q1.invert());\n\t\t\t}\n\t\t}\n\n\t\tadd(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.add(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object === this) {\n\t\t\t\tconsole.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object && object.isObject3D) {\n\t\t\t\tif (object.parent !== null) {\n\t\t\t\t\tobject.parent.remove(object);\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push(object);\n\t\t\t\tobject.dispatchEvent(_addedEvent);\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tremove(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.remove(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst index = this.children.indexOf(object);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice(index, 1);\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tremoveFromParent() {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tparent.remove(this);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclear() {\n\t\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\t\tconst object = this.children[i];\n\t\t\t\tobject.parent = null;\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\tthis.children.length = 0;\n\t\t\treturn this;\n\t\t}\n\n\t\tattach(object) {\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_m1$1.copy(this.matrixWorld).invert();\n\n\t\t\tif (object.parent !== null) {\n\t\t\t\tobject.parent.updateWorldMatrix(true, false);\n\n\t\t\t\t_m1$1.multiply(object.parent.matrixWorld);\n\t\t\t}\n\n\t\t\tobject.applyMatrix4(_m1$1);\n\t\t\tthis.add(object);\n\t\t\tobject.updateWorldMatrix(false, true);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetObjectById(id) {\n\t\t\treturn this.getObjectByProperty('id', id);\n\t\t}\n\n\t\tgetObjectByName(name) {\n\t\t\treturn this.getObjectByProperty('name', name);\n\t\t}\n\n\t\tgetObjectByProperty(name, value) {\n\t\t\tif (this[name] === value) return this;\n\n\t\t\tfor (let i = 0, l = this.children.length; i < l; i++) {\n\t\t\t\tconst child = this.children[i];\n\t\t\t\tconst object = child.getObjectByProperty(name, value);\n\n\t\t\t\tif (object !== undefined) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tgetWorldPosition(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldPosition() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\treturn target.setFromMatrixPosition(this.matrixWorld);\n\t\t}\n\n\t\tgetWorldQuaternion(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldQuaternion() target is now required');\n\t\t\t\ttarget = new Quaternion();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position$3, target, _scale$2);\n\t\t\treturn target;\n\t\t}\n\n\t\tgetWorldScale(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldScale() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position$3, _quaternion$2, target);\n\t\t\treturn target;\n\t\t}\n\n\t\tgetWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tconst e = this.matrixWorld.elements;\n\t\t\treturn target.set(e[8], e[9], e[10]).normalize();\n\t\t}\n\n\t\traycast() {}\n\n\t\ttraverse(callback) {\n\t\t\tcallback(this);\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverse(callback);\n\t\t\t}\n\t\t}\n\n\t\ttraverseVisible(callback) {\n\t\t\tif (this.visible === false) return;\n\t\t\tcallback(this);\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverseVisible(callback);\n\t\t\t}\n\t\t}\n\n\t\ttraverseAncestors(callback) {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tcallback(parent);\n\t\t\t\tparent.traverseAncestors(callback);\n\t\t\t}\n\t\t}\n\n\t\tupdateMatrix() {\n\t\t\tthis.matrix.compose(this.position, this.quaternion, this.scale);\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.matrixWorldNeedsUpdate || force) {\n\t\t\t\tif (this.parent === null) {\n\t\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\t\tforce = true;\n\t\t\t} // update children\n\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].updateMatrixWorld(force);\n\t\t\t}\n\t\t}\n\n\t\tupdateWorldMatrix(updateParents, updateChildren) {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (updateParents === true && parent !== null) {\n\t\t\t\tparent.updateWorldMatrix(true, false);\n\t\t\t}\n\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.parent === null) {\n\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t} else {\n\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t} // update children\n\n\n\t\t\tif (updateChildren === true) {\n\t\t\t\tconst children = this.children;\n\n\t\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateWorldMatrix(false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tconst isRootObject = meta === undefined || typeof meta === 'string';\n\t\t\tconst output = {}; // meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\n\t\t\tif (isRootObject) {\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {},\n\t\t\t\t\tskeletons: {},\n\t\t\t\t\tanimations: {}\n\t\t\t\t};\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\t\t\t} // standard Object3D serialization\n\n\n\t\t\tconst object = {};\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\t\t\tif (this.name !== '') object.name = this.name;\n\t\t\tif (this.castShadow === true) object.castShadow = true;\n\t\t\tif (this.receiveShadow === true) object.receiveShadow = true;\n\t\t\tif (this.visible === false) object.visible = false;\n\t\t\tif (this.frustumCulled === false) object.frustumCulled = false;\n\t\t\tif (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\t\t\tif (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n\t\t\tif (this.isInstancedMesh) {\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\t\tif (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();\n\t\t\t} //\n\n\n\t\t\tfunction serialize(library, element) {\n\t\t\t\tif (library[element.uuid] === undefined) {\n\t\t\t\t\tlibrary[element.uuid] = element.toJSON(meta);\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\t\t\t}\n\n\t\t\tif (this.isMesh || this.isLine || this.isPoints) {\n\t\t\t\tobject.geometry = serialize(meta.geometries, this.geometry);\n\t\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\t\tif (parameters !== undefined && parameters.shapes !== undefined) {\n\t\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\t\tif (Array.isArray(shapes)) {\n\t\t\t\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\t\t\t\tconst shape = shapes[i];\n\t\t\t\t\t\t\tserialize(meta.shapes, shape);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tserialize(meta.shapes, shapes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isSkinnedMesh) {\n\t\t\t\tobject.bindMode = this.bindMode;\n\t\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\t\tif (this.skeleton !== undefined) {\n\t\t\t\t\tserialize(meta.skeletons, this.skeleton);\n\t\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.material !== undefined) {\n\t\t\t\tif (Array.isArray(this.material)) {\n\t\t\t\t\tconst uuids = [];\n\n\t\t\t\t\tfor (let i = 0, l = this.material.length; i < l; i++) {\n\t\t\t\t\t\tuuids.push(serialize(meta.materials, this.material[i]));\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\t\t\t\t} else {\n\t\t\t\t\tobject.material = serialize(meta.materials, this.material);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.children.length > 0) {\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\t\t\tobject.children.push(this.children[i].toJSON(meta).object);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.animations.length > 0) {\n\t\t\t\tobject.animations = [];\n\n\t\t\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\t\t\tconst animation = this.animations[i];\n\t\t\t\t\tobject.animations.push(serialize(meta.animations, animation));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRootObject) {\n\t\t\t\tconst geometries = extractFromCache(meta.geometries);\n\t\t\t\tconst materials = extractFromCache(meta.materials);\n\t\t\t\tconst textures = extractFromCache(meta.textures);\n\t\t\t\tconst images = extractFromCache(meta.images);\n\t\t\t\tconst shapes = extractFromCache(meta.shapes);\n\t\t\t\tconst skeletons = extractFromCache(meta.skeletons);\n\t\t\t\tconst animations = extractFromCache(meta.animations);\n\t\t\t\tif (geometries.length > 0) output.geometries = geometries;\n\t\t\t\tif (materials.length > 0) output.materials = materials;\n\t\t\t\tif (textures.length > 0) output.textures = textures;\n\t\t\t\tif (images.length > 0) output.images = images;\n\t\t\t\tif (shapes.length > 0) output.shapes = shapes;\n\t\t\t\tif (skeletons.length > 0) output.skeletons = skeletons;\n\t\t\t\tif (animations.length > 0) output.animations = animations;\n\t\t\t}\n\n\t\t\toutput.object = object;\n\t\t\treturn output; // extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (const key in cache) {\n\t\t\t\t\tconst data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\n\t\tclone(recursive) {\n\t\t\treturn new this.constructor().copy(this, recursive);\n\t\t}\n\n\t\tcopy(source, recursive = true) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.up.copy(source.up);\n\t\t\tthis.position.copy(source.position);\n\t\t\tthis.rotation.order = source.rotation.order;\n\t\t\tthis.quaternion.copy(source.quaternion);\n\t\t\tthis.scale.copy(source.scale);\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.matrixWorld.copy(source.matrixWorld);\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\n\t\t\tif (recursive === true) {\n\t\t\t\tfor (let i = 0; i < source.children.length; i++) {\n\t\t\t\t\tconst child = source.children[i];\n\t\t\t\t\tthis.add(child.clone());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3(0, 1, 0);\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\tObject3D.prototype.isObject3D = true;\n\n\tconst _vector1 = /*@__PURE__*/new Vector3();\n\n\tconst _vector2$1 = /*@__PURE__*/new Vector3();\n\n\tconst _normalMatrix = /*@__PURE__*/new Matrix3();\n\n\tclass Plane {\n\t\tconstructor(normal = new Vector3(1, 0, 0), constant = 0) {\n\t\t\t// normal is assumed to be normalized\n\t\t\tthis.normal = normal;\n\t\t\tthis.constant = constant;\n\t\t}\n\n\t\tset(normal, constant) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = constant;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponents(x, y, z, w) {\n\t\t\tthis.normal.set(x, y, z);\n\t\t\tthis.constant = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromNormalAndCoplanarPoint(normal, point) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = -point.dot(this.normal);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCoplanarPoints(a, b, c) {\n\t\t\tconst normal = _vector1.subVectors(c, b).cross(_vector2$1.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\n\t\t\tthis.setFromNormalAndCoplanarPoint(normal, a);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(plane) {\n\t\t\tthis.normal.copy(plane.normal);\n\t\t\tthis.constant = plane.constant;\n\t\t\treturn this;\n\t\t}\n\n\t\tnormalize() {\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar(inverseNormalLength);\n\t\t\tthis.constant *= inverseNormalLength;\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.constant *= -1;\n\t\t\tthis.normal.negate();\n\t\t\treturn this;\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn this.normal.dot(point) + this.constant;\n\t\t}\n\n\t\tdistanceToSphere(sphere) {\n\t\t\treturn this.distanceToPoint(sphere.center) - sphere.radius;\n\t\t}\n\n\t\tprojectPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .projectPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n\t\t}\n\n\t\tintersectLine(line, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .intersectLine() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tconst direction = line.delta(_vector1);\n\t\t\tconst denominator = this.normal.dot(direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (this.distanceToPoint(line.start) === 0) {\n\t\t\t\t\treturn target.copy(line.start);\n\t\t\t\t} // Unsure if this is the correct method to handle this case.\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n\t\t\tif (t < 0 || t > 1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn target.copy(direction).multiplyScalar(t).add(line.start);\n\t\t}\n\n\t\tintersectsLine(line) {\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\t\tconst startSign = this.distanceToPoint(line.start);\n\t\t\tconst endSign = this.distanceToPoint(line.end);\n\t\t\treturn startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsPlane(this);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\treturn sphere.intersectsPlane(this);\n\t\t}\n\n\t\tcoplanarPoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .coplanarPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.constant);\n\t\t}\n\n\t\tapplyMatrix4(matrix, optionalNormalMatrix) {\n\t\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n\n\t\t\tconst referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n\t\t\tconst normal = this.normal.applyMatrix3(normalMatrix).normalize();\n\t\t\tthis.constant = -referencePoint.dot(normal);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.constant -= offset.dot(this.normal);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(plane) {\n\t\t\treturn plane.normal.equals(this.normal) && plane.constant === this.constant;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tPlane.prototype.isPlane = true;\n\n\tconst _v0$1 = /*@__PURE__*/new Vector3();\n\n\tconst _v1$3 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v3$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vab = /*@__PURE__*/new Vector3();\n\n\tconst _vac = /*@__PURE__*/new Vector3();\n\n\tconst _vbc = /*@__PURE__*/new Vector3();\n\n\tconst _vap = /*@__PURE__*/new Vector3();\n\n\tconst _vbp = /*@__PURE__*/new Vector3();\n\n\tconst _vcp = /*@__PURE__*/new Vector3();\n\n\tclass Triangle {\n\t\tconstructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t}\n\n\t\tstatic getNormal(a, b, c, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getNormal() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(c, b);\n\n\t\t\t_v0$1.subVectors(a, b);\n\n\t\t\ttarget.cross(_v0$1);\n\t\t\tconst targetLengthSq = target.lengthSq();\n\n\t\t\tif (targetLengthSq > 0) {\n\t\t\t\treturn target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n\t\t\t}\n\n\t\t\treturn target.set(0, 0, 0);\n\t\t} // static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n\n\t\tstatic getBarycoord(point, a, b, c, target) {\n\t\t\t_v0$1.subVectors(c, a);\n\n\t\t\t_v1$3.subVectors(b, a);\n\n\t\t\t_v2$2.subVectors(point, a);\n\n\t\t\tconst dot00 = _v0$1.dot(_v0$1);\n\n\t\t\tconst dot01 = _v0$1.dot(_v1$3);\n\n\t\t\tconst dot02 = _v0$1.dot(_v2$2);\n\n\t\t\tconst dot11 = _v1$3.dot(_v1$3);\n\n\t\t\tconst dot12 = _v1$3.dot(_v2$2);\n\n\t\t\tconst denom = dot00 * dot11 - dot01 * dot01;\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getBarycoord() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t} // collinear or singular triangle\n\n\n\t\t\tif (denom === 0) {\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set(-2, -1, -1);\n\t\t\t}\n\n\t\t\tconst invDenom = 1 / denom;\n\t\t\tconst u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\t\t\tconst v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n\t\t\treturn target.set(1 - u - v, v, u);\n\t\t}\n\n\t\tstatic containsPoint(point, a, b, c) {\n\t\t\tthis.getBarycoord(point, a, b, c, _v3$1);\n\t\t\treturn _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;\n\t\t}\n\n\t\tstatic getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n\t\t\tthis.getBarycoord(point, p1, p2, p3, _v3$1);\n\t\t\ttarget.set(0, 0);\n\t\t\ttarget.addScaledVector(uv1, _v3$1.x);\n\t\t\ttarget.addScaledVector(uv2, _v3$1.y);\n\t\t\ttarget.addScaledVector(uv3, _v3$1.z);\n\t\t\treturn target;\n\t\t}\n\n\t\tstatic isFrontFacing(a, b, c, direction) {\n\t\t\t_v0$1.subVectors(c, b);\n\n\t\t\t_v1$3.subVectors(a, b); // strictly front facing\n\n\n\t\t\treturn _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n\t\t}\n\n\t\tset(a, b, c) {\n\t\t\tthis.a.copy(a);\n\t\t\tthis.b.copy(b);\n\t\t\tthis.c.copy(c);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPointsAndIndices(points, i0, i1, i2) {\n\t\t\tthis.a.copy(points[i0]);\n\t\t\tthis.b.copy(points[i1]);\n\t\t\tthis.c.copy(points[i2]);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(triangle) {\n\t\t\tthis.a.copy(triangle.a);\n\t\t\tthis.b.copy(triangle.b);\n\t\t\tthis.c.copy(triangle.c);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetArea() {\n\t\t\t_v0$1.subVectors(this.c, this.b);\n\n\t\t\t_v1$3.subVectors(this.a, this.b);\n\n\t\t\treturn _v0$1.cross(_v1$3).length() * 0.5;\n\t\t}\n\n\t\tgetMidpoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getMidpoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n\t\t}\n\n\t\tgetNormal(target) {\n\t\t\treturn Triangle.getNormal(this.a, this.b, this.c, target);\n\t\t}\n\n\t\tgetPlane(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getPlane() target is now required');\n\t\t\t\ttarget = new Plane();\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints(this.a, this.b, this.c);\n\t\t}\n\n\t\tgetBarycoord(point, target) {\n\t\t\treturn Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n\t\t}\n\n\t\tgetUV(point, uv1, uv2, uv3, target) {\n\t\t\treturn Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn Triangle.containsPoint(point, this.a, this.b, this.c);\n\t\t}\n\n\t\tisFrontFacing(direction) {\n\t\t\treturn Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsTriangle(this);\n\t\t}\n\n\t\tclosestPointToPoint(p, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tconst a = this.a,\n\t\t\t\t\t\tb = this.b,\n\t\t\t\t\t\tc = this.c;\n\t\t\tlet v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors(b, a);\n\n\t\t\t_vac.subVectors(c, a);\n\n\t\t\t_vap.subVectors(p, a);\n\n\t\t\tconst d1 = _vab.dot(_vap);\n\n\t\t\tconst d2 = _vac.dot(_vap);\n\n\t\t\tif (d1 <= 0 && d2 <= 0) {\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy(a);\n\t\t\t}\n\n\t\t\t_vbp.subVectors(p, b);\n\n\t\t\tconst d3 = _vab.dot(_vbp);\n\n\t\t\tconst d4 = _vac.dot(_vbp);\n\n\t\t\tif (d3 >= 0 && d4 <= d3) {\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy(b);\n\t\t\t}\n\n\t\t\tconst vc = d1 * d4 - d3 * d2;\n\n\t\t\tif (vc <= 0 && d1 >= 0 && d3 <= 0) {\n\t\t\t\tv = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vab, v);\n\t\t\t}\n\n\t\t\t_vcp.subVectors(p, c);\n\n\t\t\tconst d5 = _vab.dot(_vcp);\n\n\t\t\tconst d6 = _vac.dot(_vcp);\n\n\t\t\tif (d6 >= 0 && d5 <= d6) {\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy(c);\n\t\t\t}\n\n\t\t\tconst vb = d5 * d2 - d1 * d6;\n\n\t\t\tif (vb <= 0 && d2 >= 0 && d6 <= 0) {\n\t\t\t\tw = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vac, w);\n\t\t\t}\n\n\t\t\tconst va = d3 * d6 - d5 * d4;\n\n\t\t\tif (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n\t\t\t\t_vbc.subVectors(c, b);\n\n\t\t\t\tw = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n\t\t\t\treturn target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n\t\t\t} // face region\n\n\n\t\t\tconst denom = 1 / (va + vb + vc); // u = va * denom\n\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\t\t\treturn target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n\t\t}\n\n\t\tequals(triangle) {\n\t\t\treturn triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n\t\t}\n\n\t}\n\n\tlet materialId = 0;\n\n\tclass Material extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: materialId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'Material';\n\t\t\tthis.fog = true;\n\t\t\tthis.blending = NormalBlending;\n\t\t\tthis.side = FrontSide;\n\t\t\tthis.vertexColors = false;\n\t\t\tthis.opacity = 1;\n\t\t\tthis.transparent = false;\n\t\t\tthis.blendSrc = SrcAlphaFactor;\n\t\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\t\tthis.blendEquation = AddEquation;\n\t\t\tthis.blendSrcAlpha = null;\n\t\t\tthis.blendDstAlpha = null;\n\t\t\tthis.blendEquationAlpha = null;\n\t\t\tthis.depthFunc = LessEqualDepth;\n\t\t\tthis.depthTest = true;\n\t\t\tthis.depthWrite = true;\n\t\t\tthis.stencilWriteMask = 0xff;\n\t\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\t\tthis.stencilRef = 0;\n\t\t\tthis.stencilFuncMask = 0xff;\n\t\t\tthis.stencilFail = KeepStencilOp;\n\t\t\tthis.stencilZFail = KeepStencilOp;\n\t\t\tthis.stencilZPass = KeepStencilOp;\n\t\t\tthis.stencilWrite = false;\n\t\t\tthis.clippingPlanes = null;\n\t\t\tthis.clipIntersection = false;\n\t\t\tthis.clipShadows = false;\n\t\t\tthis.shadowSide = null;\n\t\t\tthis.colorWrite = true;\n\t\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\t\tthis.polygonOffset = false;\n\t\t\tthis.polygonOffsetFactor = 0;\n\t\t\tthis.polygonOffsetUnits = 0;\n\t\t\tthis.dithering = false;\n\t\t\tthis.alphaTest = 0;\n\t\t\tthis.alphaToCoverage = false;\n\t\t\tthis.premultipliedAlpha = false;\n\t\t\tthis.visible = true;\n\t\t\tthis.toneMapped = true;\n\t\t\tthis.userData = {};\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tonBuild()\n\t\t/* shaderobject, renderer */\n\t\t{}\n\n\t\tonBeforeCompile()\n\t\t/* shaderobject, renderer */\n\t\t{}\n\n\t\tcustomProgramCacheKey() {\n\t\t\treturn this.onBeforeCompile.toString();\n\t\t}\n\n\t\tsetValues(values) {\n\t\t\tif (values === undefined) return;\n\n\t\t\tfor (const key in values) {\n\t\t\t\tconst newValue = values[key];\n\n\t\t\t\tif (newValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Material: \\'' + key + '\\' parameter is undefined.');\n\t\t\t\t\tcontinue;\n\t\t\t\t} // for backward compatability if shading is set in the constructor\n\n\n\t\t\t\tif (key === 'shading') {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\t\tthis.flatShading = newValue === FlatShading ? true : false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst currentValue = this[key];\n\n\t\t\t\tif (currentValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue && currentValue.isColor) {\n\t\t\t\t\tcurrentValue.set(newValue);\n\t\t\t\t} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n\t\t\t\t\tcurrentValue.copy(newValue);\n\t\t\t\t} else {\n\t\t\t\t\tthis[key] = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst isRoot = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (isRoot) {\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard Material serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.color && this.color.isColor) data.color = this.color.getHex();\n\t\t\tif (this.roughness !== undefined) data.roughness = this.roughness;\n\t\t\tif (this.metalness !== undefined) data.metalness = this.metalness;\n\t\t\tif (this.sheen && this.sheen.isColor) data.sheen = this.sheen.getHex();\n\t\t\tif (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n\t\t\tif (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n\t\t\tif (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n\t\t\tif (this.shininess !== undefined) data.shininess = this.shininess;\n\t\t\tif (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n\t\t\tif (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\t\tif (this.clearcoatMap && this.clearcoatMap.isTexture) {\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n\t\t\tif (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n\t\t\tif (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n\n\t\t\tif (this.lightMap && this.lightMap.isTexture) {\n\t\t\t\tdata.lightMap = this.lightMap.toJSON(meta).uuid;\n\t\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.aoMap && this.aoMap.isTexture) {\n\t\t\t\tdata.aoMap = this.aoMap.toJSON(meta).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.bumpMap && this.bumpMap.isTexture) {\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON(meta).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\t\t\t}\n\n\t\t\tif (this.normalMap && this.normalMap.isTexture) {\n\t\t\t\tdata.normalMap = this.normalMap.toJSON(meta).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.displacementMap && this.displacementMap.isTexture) {\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON(meta).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\t\t\t}\n\n\t\t\tif (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n\t\t\tif (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n\t\t\tif (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n\t\t\tif (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n\t\t\tif (this.envMap && this.envMap.isTexture) {\n\t\t\t\tdata.envMap = this.envMap.toJSON(meta).uuid;\n\t\t\t\tif (this.combine !== undefined) data.combine = this.combine;\n\t\t\t}\n\n\t\t\tif (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n\t\t\tif (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;\n\t\t\tif (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;\n\n\t\t\tif (this.gradientMap && this.gradientMap.isTexture) {\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.transmission !== undefined) data.transmission = this.transmission;\n\t\t\tif (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;\n\t\t\tif (this.thickness !== undefined) data.thickness = this.thickness;\n\t\t\tif (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;\n\t\t\tif (this.attenuationDistance !== undefined) data.attenuationDistance = this.attenuationDistance;\n\t\t\tif (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();\n\t\t\tif (this.size !== undefined) data.size = this.size;\n\t\t\tif (this.shadowSide !== null) data.shadowSide = this.shadowSide;\n\t\t\tif (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n\t\t\tif (this.blending !== NormalBlending) data.blending = this.blending;\n\t\t\tif (this.side !== FrontSide) data.side = this.side;\n\t\t\tif (this.vertexColors) data.vertexColors = true;\n\t\t\tif (this.opacity < 1) data.opacity = this.opacity;\n\t\t\tif (this.transparent === true) data.transparent = this.transparent;\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\t\t\tdata.colorWrite = this.colorWrite;\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n\t\t\tif (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n\t\t\tif (this.polygonOffset === true) data.polygonOffset = true;\n\t\t\tif (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\t\tif (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\t\t\tif (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n\t\t\tif (this.dashSize !== undefined) data.dashSize = this.dashSize;\n\t\t\tif (this.gapSize !== undefined) data.gapSize = this.gapSize;\n\t\t\tif (this.scale !== undefined) data.scale = this.scale;\n\t\t\tif (this.dithering === true) data.dithering = true;\n\t\t\tif (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n\t\t\tif (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;\n\t\t\tif (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif (this.wireframe === true) data.wireframe = this.wireframe;\n\t\t\tif (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n\t\t\tif (this.morphTargets === true) data.morphTargets = true;\n\t\t\tif (this.morphNormals === true) data.morphNormals = true;\n\t\t\tif (this.flatShading === true) data.flatShading = this.flatShading;\n\t\t\tif (this.visible === false) data.visible = false;\n\t\t\tif (this.toneMapped === false) data.toneMapped = false;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (const key in cache) {\n\t\t\t\t\tconst data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\n\t\t\tif (isRoot) {\n\t\t\t\tconst textures = extractFromCache(meta.textures);\n\t\t\t\tconst images = extractFromCache(meta.images);\n\t\t\t\tif (textures.length > 0) data.textures = textures;\n\t\t\t\tif (images.length > 0) data.images = images;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.vertexColors = source.vertexColors;\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\t\t\tconst srcPlanes = source.clippingPlanes;\n\t\t\tlet dstPlanes = null;\n\n\t\t\tif (srcPlanes !== null) {\n\t\t\t\tconst n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array(n);\n\n\t\t\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\t\t\tdstPlanes[i] = srcPlanes[i].clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.shadowSide = source.shadowSide;\n\t\t\tthis.colorWrite = source.colorWrite;\n\t\t\tthis.precision = source.precision;\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\t\tthis.dithering = source.dithering;\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.toneMapped = source.toneMapped;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t}\n\n\tMaterial.prototype.isMaterial = true;\n\n\tconst _colorKeywords = {\n\t\t'aliceblue': 0xF0F8FF,\n\t\t'antiquewhite': 0xFAEBD7,\n\t\t'aqua': 0x00FFFF,\n\t\t'aquamarine': 0x7FFFD4,\n\t\t'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC,\n\t\t'bisque': 0xFFE4C4,\n\t\t'black': 0x000000,\n\t\t'blanchedalmond': 0xFFEBCD,\n\t\t'blue': 0x0000FF,\n\t\t'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A,\n\t\t'burlywood': 0xDEB887,\n\t\t'cadetblue': 0x5F9EA0,\n\t\t'chartreuse': 0x7FFF00,\n\t\t'chocolate': 0xD2691E,\n\t\t'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED,\n\t\t'cornsilk': 0xFFF8DC,\n\t\t'crimson': 0xDC143C,\n\t\t'cyan': 0x00FFFF,\n\t\t'darkblue': 0x00008B,\n\t\t'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B,\n\t\t'darkgray': 0xA9A9A9,\n\t\t'darkgreen': 0x006400,\n\t\t'darkgrey': 0xA9A9A9,\n\t\t'darkkhaki': 0xBDB76B,\n\t\t'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F,\n\t\t'darkorange': 0xFF8C00,\n\t\t'darkorchid': 0x9932CC,\n\t\t'darkred': 0x8B0000,\n\t\t'darksalmon': 0xE9967A,\n\t\t'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B,\n\t\t'darkslategray': 0x2F4F4F,\n\t\t'darkslategrey': 0x2F4F4F,\n\t\t'darkturquoise': 0x00CED1,\n\t\t'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493,\n\t\t'deepskyblue': 0x00BFFF,\n\t\t'dimgray': 0x696969,\n\t\t'dimgrey': 0x696969,\n\t\t'dodgerblue': 0x1E90FF,\n\t\t'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0,\n\t\t'forestgreen': 0x228B22,\n\t\t'fuchsia': 0xFF00FF,\n\t\t'gainsboro': 0xDCDCDC,\n\t\t'ghostwhite': 0xF8F8FF,\n\t\t'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520,\n\t\t'gray': 0x808080,\n\t\t'green': 0x008000,\n\t\t'greenyellow': 0xADFF2F,\n\t\t'grey': 0x808080,\n\t\t'honeydew': 0xF0FFF0,\n\t\t'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C,\n\t\t'indigo': 0x4B0082,\n\t\t'ivory': 0xFFFFF0,\n\t\t'khaki': 0xF0E68C,\n\t\t'lavender': 0xE6E6FA,\n\t\t'lavenderblush': 0xFFF0F5,\n\t\t'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD,\n\t\t'lightblue': 0xADD8E6,\n\t\t'lightcoral': 0xF08080,\n\t\t'lightcyan': 0xE0FFFF,\n\t\t'lightgoldenrodyellow': 0xFAFAD2,\n\t\t'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90,\n\t\t'lightgrey': 0xD3D3D3,\n\t\t'lightpink': 0xFFB6C1,\n\t\t'lightsalmon': 0xFFA07A,\n\t\t'lightseagreen': 0x20B2AA,\n\t\t'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899,\n\t\t'lightslategrey': 0x778899,\n\t\t'lightsteelblue': 0xB0C4DE,\n\t\t'lightyellow': 0xFFFFE0,\n\t\t'lime': 0x00FF00,\n\t\t'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6,\n\t\t'magenta': 0xFF00FF,\n\t\t'maroon': 0x800000,\n\t\t'mediumaquamarine': 0x66CDAA,\n\t\t'mediumblue': 0x0000CD,\n\t\t'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB,\n\t\t'mediumseagreen': 0x3CB371,\n\t\t'mediumslateblue': 0x7B68EE,\n\t\t'mediumspringgreen': 0x00FA9A,\n\t\t'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585,\n\t\t'midnightblue': 0x191970,\n\t\t'mintcream': 0xF5FFFA,\n\t\t'mistyrose': 0xFFE4E1,\n\t\t'moccasin': 0xFFE4B5,\n\t\t'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080,\n\t\t'oldlace': 0xFDF5E6,\n\t\t'olive': 0x808000,\n\t\t'olivedrab': 0x6B8E23,\n\t\t'orange': 0xFFA500,\n\t\t'orangered': 0xFF4500,\n\t\t'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA,\n\t\t'palegreen': 0x98FB98,\n\t\t'paleturquoise': 0xAFEEEE,\n\t\t'palevioletred': 0xDB7093,\n\t\t'papayawhip': 0xFFEFD5,\n\t\t'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F,\n\t\t'pink': 0xFFC0CB,\n\t\t'plum': 0xDDA0DD,\n\t\t'powderblue': 0xB0E0E6,\n\t\t'purple': 0x800080,\n\t\t'rebeccapurple': 0x663399,\n\t\t'red': 0xFF0000,\n\t\t'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1,\n\t\t'saddlebrown': 0x8B4513,\n\t\t'salmon': 0xFA8072,\n\t\t'sandybrown': 0xF4A460,\n\t\t'seagreen': 0x2E8B57,\n\t\t'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D,\n\t\t'silver': 0xC0C0C0,\n\t\t'skyblue': 0x87CEEB,\n\t\t'slateblue': 0x6A5ACD,\n\t\t'slategray': 0x708090,\n\t\t'slategrey': 0x708090,\n\t\t'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F,\n\t\t'steelblue': 0x4682B4,\n\t\t'tan': 0xD2B48C,\n\t\t'teal': 0x008080,\n\t\t'thistle': 0xD8BFD8,\n\t\t'tomato': 0xFF6347,\n\t\t'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE,\n\t\t'wheat': 0xF5DEB3,\n\t\t'white': 0xFFFFFF,\n\t\t'whitesmoke': 0xF5F5F5,\n\t\t'yellow': 0xFFFF00,\n\t\t'yellowgreen': 0x9ACD32\n\t};\n\tconst _hslA = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\tconst _hslB = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\n\tfunction hue2rgb(p, q, t) {\n\t\tif (t < 0) t += 1;\n\t\tif (t > 1) t -= 1;\n\t\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\t\tif (t < 1 / 2) return q;\n\t\tif (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n\t\treturn p;\n\t}\n\n\tfunction SRGBToLinear(c) {\n\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t}\n\n\tfunction LinearToSRGB(c) {\n\t\treturn c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n\t}\n\n\tclass Color {\n\t\tconstructor(r, g, b) {\n\t\t\tif (g === undefined && b === undefined) {\n\t\t\t\t// r is THREE.Color, hex or string\n\t\t\t\treturn this.set(r);\n\t\t\t}\n\n\t\t\treturn this.setRGB(r, g, b);\n\t\t}\n\n\t\tset(value) {\n\t\t\tif (value && value.isColor) {\n\t\t\t\tthis.copy(value);\n\t\t\t} else if (typeof value === 'number') {\n\t\t\t\tthis.setHex(value);\n\t\t\t} else if (typeof value === 'string') {\n\t\t\t\tthis.setStyle(value);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetHex(hex) {\n\t\t\thex = Math.floor(hex);\n\t\t\tthis.r = (hex >> 16 & 255) / 255;\n\t\t\tthis.g = (hex >> 8 & 255) / 255;\n\t\t\tthis.b = (hex & 255) / 255;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRGB(r, g, b) {\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetHSL(h, s, l) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = euclideanModulo(h, 1);\n\t\t\ts = clamp(s, 0, 1);\n\t\t\tl = clamp(l, 0, 1);\n\n\t\t\tif (s === 0) {\n\t\t\t\tthis.r = this.g = this.b = l;\n\t\t\t} else {\n\t\t\t\tconst p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\t\tconst q = 2 * l - p;\n\t\t\t\tthis.r = hue2rgb(q, p, h + 1 / 3);\n\t\t\t\tthis.g = hue2rgb(q, p, h);\n\t\t\t\tthis.b = hue2rgb(q, p, h - 1 / 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetStyle(style) {\n\t\t\tfunction handleAlpha(string) {\n\t\t\t\tif (string === undefined) return;\n\n\t\t\t\tif (parseFloat(string) < 1) {\n\t\t\t\t\tconsole.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet m;\n\n\t\t\tif (m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(style)) {\n\t\t\t\t// rgb / hsl\n\t\t\t\tlet color;\n\t\t\t\tconst name = m[1];\n\t\t\t\tconst components = m[2];\n\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(255, parseInt(color[1], 10)) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min(255, parseInt(color[2], 10)) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min(255, parseInt(color[3], 10)) / 255;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(100, parseInt(color[1], 10)) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min(100, parseInt(color[2], 10)) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min(100, parseInt(color[3], 10)) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\t\t\t\t\t\tif (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tconst h = parseFloat(color[1]) / 360;\n\t\t\t\t\t\t\tconst s = parseInt(color[2], 10) / 100;\n\t\t\t\t\t\t\tconst l = parseInt(color[3], 10) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this.setHSL(h, s, l);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n\t\t\t\t// hex color\n\t\t\t\tconst hex = m[1];\n\t\t\t\tconst size = hex.length;\n\n\t\t\t\tif (size === 3) {\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t} else if (size === 6) {\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style && style.length > 0) {\n\t\t\t\treturn this.setColorName(style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetColorName(style) {\n\t\t\t// color keywords\n\t\t\tconst hex = _colorKeywords[style.toLowerCase()];\n\n\t\t\tif (hex !== undefined) {\n\t\t\t\t// red\n\t\t\t\tthis.setHex(hex);\n\t\t\t} else {\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn('THREE.Color: Unknown color ' + style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.r, this.g, this.b);\n\t\t}\n\n\t\tcopy(color) {\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyGammaToLinear(color, gammaFactor = 2.0) {\n\t\t\tthis.r = Math.pow(color.r, gammaFactor);\n\t\t\tthis.g = Math.pow(color.g, gammaFactor);\n\t\t\tthis.b = Math.pow(color.b, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyLinearToGamma(color, gammaFactor = 2.0) {\n\t\t\tconst safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n\t\t\tthis.r = Math.pow(color.r, safeInverse);\n\t\t\tthis.g = Math.pow(color.g, safeInverse);\n\t\t\tthis.b = Math.pow(color.b, safeInverse);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertGammaToLinear(gammaFactor) {\n\t\t\tthis.copyGammaToLinear(this, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertLinearToGamma(gammaFactor) {\n\t\t\tthis.copyLinearToGamma(this, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopySRGBToLinear(color) {\n\t\t\tthis.r = SRGBToLinear(color.r);\n\t\t\tthis.g = SRGBToLinear(color.g);\n\t\t\tthis.b = SRGBToLinear(color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyLinearToSRGB(color) {\n\t\t\tthis.r = LinearToSRGB(color.r);\n\t\t\tthis.g = LinearToSRGB(color.g);\n\t\t\tthis.b = LinearToSRGB(color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertSRGBToLinear() {\n\t\t\tthis.copySRGBToLinear(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertLinearToSRGB() {\n\t\t\tthis.copyLinearToSRGB(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetHex() {\n\t\t\treturn this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n\t\t}\n\n\t\tgetHexString() {\n\t\t\treturn ('000000' + this.getHex().toString(16)).slice(-6);\n\t\t}\n\n\t\tgetHSL(target) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Color: .getHSL() target is now required');\n\t\t\t\ttarget = {\n\t\t\t\t\th: 0,\n\t\t\t\t\ts: 0,\n\t\t\t\t\tl: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst r = this.r,\n\t\t\t\t\t\tg = this.g,\n\t\t\t\t\t\tb = this.b;\n\t\t\tconst max = Math.max(r, g, b);\n\t\t\tconst min = Math.min(r, g, b);\n\t\t\tlet hue, saturation;\n\t\t\tconst lightness = (min + max) / 2.0;\n\n\t\t\tif (min === max) {\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\t\t\t} else {\n\t\t\t\tconst delta = max - min;\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase r:\n\t\t\t\t\t\thue = (g - b) / delta + (g < b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase g:\n\t\t\t\t\t\thue = (b - r) / delta + 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase b:\n\t\t\t\t\t\thue = (r - g) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\t\t\treturn target;\n\t\t}\n\n\t\tgetStyle() {\n\t\t\treturn 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n\t\t}\n\n\t\toffsetHSL(h, s, l) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\t_hslA.h += h;\n\t\t\t_hslA.s += s;\n\t\t\t_hslA.l += l;\n\t\t\tthis.setHSL(_hslA.h, _hslA.s, _hslA.l);\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(color) {\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\taddColors(color1, color2) {\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(color) {\n\t\t\tthis.r = Math.max(0, this.r - color.r);\n\t\t\tthis.g = Math.max(0, this.g - color.g);\n\t\t\tthis.b = Math.max(0, this.b - color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(color) {\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerp(color, alpha) {\n\t\t\tthis.r += (color.r - this.r) * alpha;\n\t\t\tthis.g += (color.g - this.g) * alpha;\n\t\t\tthis.b += (color.b - this.b) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpColors(color1, color2, alpha) {\n\t\t\tthis.r = color1.r + (color2.r - color1.r) * alpha;\n\t\t\tthis.g = color1.g + (color2.g - color1.g) * alpha;\n\t\t\tthis.b = color1.b + (color2.b - color1.b) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpHSL(color, alpha) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\tcolor.getHSL(_hslB);\n\t\t\tconst h = lerp(_hslA.h, _hslB.h, alpha);\n\t\t\tconst s = lerp(_hslA.s, _hslB.s, alpha);\n\t\t\tconst l = lerp(_hslA.l, _hslB.l, alpha);\n\t\t\tthis.setHSL(h, s, l);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(c) {\n\t\t\treturn c.r === this.r && c.g === this.g && c.b === this.b;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.r = array[offset];\n\t\t\tthis.g = array[offset + 1];\n\t\t\tthis.b = array[offset + 2];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.r;\n\t\t\tarray[offset + 1] = this.g;\n\t\t\tarray[offset + 2] = this.b;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index) {\n\t\t\tthis.r = attribute.getX(index);\n\t\t\tthis.g = attribute.getY(index);\n\t\t\tthis.b = attribute.getZ(index);\n\n\t\t\tif (attribute.normalized === true) {\n\t\t\t\t// assuming Uint8Array\n\t\t\t\tthis.r /= 255;\n\t\t\t\tthis.g /= 255;\n\t\t\t\tthis.b /= 255;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn this.getHex();\n\t\t}\n\n\t}\n\n\tColor.NAMES = _colorKeywords;\n\tColor.prototype.isColor = true;\n\tColor.prototype.r = 1;\n\tColor.prototype.g = 1;\n\tColor.prototype.b = 1;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\tdepthTest: <bool>,\n\t *\tdepthWrite: <bool>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tclass MeshBasicMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshBasicMaterial';\n\t\t\tthis.color = new Color(0xffffff); // emissive\n\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tconst _vector$9 = /*@__PURE__*/new Vector3();\n\n\tconst _vector2 = /*@__PURE__*/new Vector2();\n\n\tclass BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tif (Array.isArray(array)) {\n\t\t\t\tthrow new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n\t\t\t}\n\n\t\t\tthis.name = '';\n\t\t\tthis.array = array;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\t\tthis.normalized = normalized === true;\n\t\t\tthis.usage = StaticDrawUsage;\n\t\t\tthis.updateRange = {\n\t\t\t\toffset: 0,\n\t\t\t\tcount: -1\n\t\t\t};\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tonUploadCallback() {}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor (let i = 0, l = this.itemSize; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyArray(array) {\n\t\t\tthis.array.set(array);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyColorsArray(colors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = colors.length; i < l; i++) {\n\t\t\t\tlet color = colors[i];\n\n\t\t\t\tif (color === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n\t\t\t\t\tcolor = new Color();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = color.r;\n\t\t\t\tarray[offset++] = color.g;\n\t\t\t\tarray[offset++] = color.b;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector2sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector2();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector3sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector3();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector4sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector4();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t\tarray[offset++] = vector.w;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tif (this.itemSize === 2) {\n\t\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector2.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector2.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXY(i, _vector2.x, _vector2.y);\n\t\t\t\t}\n\t\t\t} else if (this.itemSize === 3) {\n\t\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector$9.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector$9.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(value, offset = 0) {\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetX(index) {\n\t\t\treturn this.array[index * this.itemSize];\n\t\t}\n\n\t\tsetX(index, x) {\n\t\t\tthis.array[index * this.itemSize] = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetY(index) {\n\t\t\treturn this.array[index * this.itemSize + 1];\n\t\t}\n\n\t\tsetY(index, y) {\n\t\t\tthis.array[index * this.itemSize + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetZ(index) {\n\t\t\treturn this.array[index * this.itemSize + 2];\n\t\t}\n\n\t\tsetZ(index, z) {\n\t\t\tthis.array[index * this.itemSize + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetW(index) {\n\t\t\treturn this.array[index * this.itemSize + 3];\n\t\t}\n\n\t\tsetW(index, w) {\n\t\t\tthis.array[index * this.itemSize + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXY(index, x, y) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZ(index, x, y, z) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZW(index, x, y, z, w) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\tthis.array[index + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tonUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.array, this.itemSize).copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call(this.array),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.usage !== StaticDrawUsage) data.usage = this.usage;\n\t\t\tif (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tBufferAttribute.prototype.isBufferAttribute = true; //\n\n\tclass Int8BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int8Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint8BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint8Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint8ClampedArray(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Int16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Int32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Float16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tFloat16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\n\tclass Float32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Float32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Float64BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Float64Array(array), itemSize, normalized);\n\t\t}\n\n\t} //\n\n\tfunction arrayMax(array) {\n\t\tif (array.length === 0) return -Infinity;\n\t\tlet max = array[0];\n\n\t\tfor (let i = 1, l = array.length; i < l; ++i) {\n\t\t\tif (array[i] > max) max = array[i];\n\t\t}\n\n\t\treturn max;\n\t}\n\n\tconst TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\tUint8ClampedArray: Uint8ClampedArray,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\tfunction getTypedArray(type, buffer) {\n\t\treturn new TYPED_ARRAYS[type](buffer);\n\t}\n\n\tlet _id = 0;\n\n\tconst _m1 = /*@__PURE__*/new Matrix4();\n\n\tconst _obj = /*@__PURE__*/new Object3D();\n\n\tconst _offset = /*@__PURE__*/new Vector3();\n\n\tconst _box$1 = /*@__PURE__*/new Box3();\n\n\tconst _boxMorphTargets = /*@__PURE__*/new Box3();\n\n\tconst _vector$8 = /*@__PURE__*/new Vector3();\n\n\tclass BufferGeometry extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: _id++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'BufferGeometry';\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.morphTargetsRelative = false;\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\t\t\tthis.drawRange = {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: Infinity\n\t\t\t};\n\t\t\tthis.userData = {};\n\t\t}\n\n\t\tgetIndex() {\n\t\t\treturn this.index;\n\t\t}\n\n\t\tsetIndex(index) {\n\t\t\tif (Array.isArray(index)) {\n\t\t\t\tthis.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n\t\t\t} else {\n\t\t\t\tthis.index = index;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetAttribute(name) {\n\t\t\treturn this.attributes[name];\n\t\t}\n\n\t\tsetAttribute(name, attribute) {\n\t\t\tthis.attributes[name] = attribute;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeleteAttribute(name) {\n\t\t\tdelete this.attributes[name];\n\t\t\treturn this;\n\t\t}\n\n\t\thasAttribute(name) {\n\t\t\treturn this.attributes[name] !== undefined;\n\t\t}\n\n\t\taddGroup(start, count, materialIndex = 0) {\n\t\t\tthis.groups.push({\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex\n\t\t\t});\n\t\t}\n\n\t\tclearGroups() {\n\t\t\tthis.groups = [];\n\t\t}\n\n\t\tsetDrawRange(start, count) {\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tconst position = this.attributes.position;\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tposition.needsUpdate = true;\n\t\t\t}\n\n\t\t\tconst normal = this.attributes.normal;\n\n\t\t\tif (normal !== undefined) {\n\t\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\t\t\t\tnormal.applyNormalMatrix(normalMatrix);\n\t\t\t\tnormal.needsUpdate = true;\n\t\t\t}\n\n\t\t\tconst tangent = this.attributes.tangent;\n\n\t\t\tif (tangent !== undefined) {\n\t\t\t\ttangent.transformDirection(matrix);\n\t\t\t\ttangent.needsUpdate = true;\n\t\t\t}\n\n\t\t\tif (this.boundingBox !== null) {\n\t\t\t\tthis.computeBoundingBox();\n\t\t\t}\n\n\t\t\tif (this.boundingSphere !== null) {\n\t\t\t\tthis.computeBoundingSphere();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\t_m1.makeRotationFromQuaternion(q);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateX(angle) {\n\t\t\t// rotate geometry around world x-axis\n\t\t\t_m1.makeRotationX(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateY(angle) {\n\t\t\t// rotate geometry around world y-axis\n\t\t\t_m1.makeRotationY(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateZ(angle) {\n\t\t\t// rotate geometry around world z-axis\n\t\t\t_m1.makeRotationZ(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(x, y, z) {\n\t\t\t// translate geometry\n\t\t\t_m1.makeTranslation(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(x, y, z) {\n\t\t\t// scale geometry\n\t\t\t_m1.makeScale(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\tlookAt(vector) {\n\t\t\t_obj.lookAt(vector);\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4(_obj.matrix);\n\t\t\treturn this;\n\t\t}\n\n\t\tcenter() {\n\t\t\tthis.computeBoundingBox();\n\t\t\tthis.boundingBox.getCenter(_offset).negate();\n\t\t\tthis.translate(_offset.x, _offset.y, _offset.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tconst position = [];\n\n\t\t\tfor (let i = 0, l = points.length; i < l; i++) {\n\t\t\t\tconst point = points[i];\n\t\t\t\tposition.push(point.x, point.y, point.z || 0);\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(position, 3));\n\t\t\treturn this;\n\t\t}\n\n\t\tcomputeBoundingBox() {\n\t\t\tif (this.boundingBox === null) {\n\t\t\t\tthis.boundingBox = new Box3();\n\t\t\t}\n\n\t\t\tconst position = this.attributes.position;\n\t\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tthis.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_box$1.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$8.addVectors(this.boundingBox.min, _box$1.min);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$8);\n\n\t\t\t\t\t\t\t_vector$8.addVectors(this.boundingBox.max, _box$1.max);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$8);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$1.min);\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$1.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.boundingBox.makeEmpty();\n\t\t\t}\n\n\t\t\tif (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t}\n\t\t}\n\n\t\tcomputeBoundingSphere() {\n\t\t\tif (this.boundingSphere === null) {\n\t\t\t\tthis.boundingSphere = new Sphere();\n\t\t\t}\n\n\t\t\tconst position = this.attributes.position;\n\t\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingSphere.set(new Vector3(), Infinity);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position) {\n\t\t\t\t// first, find the center of the bounding sphere\n\t\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t\t_box$1.setFromBufferAttribute(position); // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$8.addVectors(_box$1.min, _boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_vector$8);\n\n\t\t\t\t\t\t\t_vector$8.addVectors(_box$1.max, _boxMorphTargets.max);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_vector$8);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_box$1.expandByPoint(_boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_boxMorphTargets.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_box$1.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\n\t\t\t\tlet maxRadiusSq = 0;\n\n\t\t\t\tfor (let i = 0, il = position.count; i < il; i++) {\n\t\t\t\t\t_vector$8.fromBufferAttribute(position, i);\n\n\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n\t\t\t\t} // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\t\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor (let j = 0, jl = morphAttribute.count; j < jl; j++) {\n\t\t\t\t\t\t\t_vector$8.fromBufferAttribute(morphAttribute, j);\n\n\t\t\t\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute(position, j);\n\n\t\t\t\t\t\t\t\t_vector$8.add(_offset);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n\t\t\t\tif (isNaN(this.boundingSphere.radius)) {\n\t\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcomputeFaceNormals() {// backwards compatibility\n\t\t}\n\n\t\tcomputeTangents() {\n\t\t\tconst index = this.index;\n\t\t\tconst attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html\n\t\t\t// (per vertex tangents)\n\n\t\t\tif (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst indices = index.array;\n\t\t\tconst positions = attributes.position.array;\n\t\t\tconst normals = attributes.normal.array;\n\t\t\tconst uvs = attributes.uv.array;\n\t\t\tconst nVertices = positions.length / 3;\n\n\t\t\tif (attributes.tangent === undefined) {\n\t\t\t\tthis.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));\n\t\t\t}\n\n\t\t\tconst tangents = attributes.tangent.array;\n\t\t\tconst tan1 = [],\n\t\t\t\t\t\ttan2 = [];\n\n\t\t\tfor (let i = 0; i < nVertices; i++) {\n\t\t\t\ttan1[i] = new Vector3();\n\t\t\t\ttan2[i] = new Vector3();\n\t\t\t}\n\n\t\t\tconst vA = new Vector3(),\n\t\t\t\t\t\tvB = new Vector3(),\n\t\t\t\t\t\tvC = new Vector3(),\n\t\t\t\t\t\tuvA = new Vector2(),\n\t\t\t\t\t\tuvB = new Vector2(),\n\t\t\t\t\t\tuvC = new Vector2(),\n\t\t\t\t\t\tsdir = new Vector3(),\n\t\t\t\t\t\ttdir = new Vector3();\n\n\t\t\tfunction handleTriangle(a, b, c) {\n\t\t\t\tvA.fromArray(positions, a * 3);\n\t\t\t\tvB.fromArray(positions, b * 3);\n\t\t\t\tvC.fromArray(positions, c * 3);\n\t\t\t\tuvA.fromArray(uvs, a * 2);\n\t\t\t\tuvB.fromArray(uvs, b * 2);\n\t\t\t\tuvC.fromArray(uvs, c * 2);\n\t\t\t\tvB.sub(vA);\n\t\t\t\tvC.sub(vA);\n\t\t\t\tuvB.sub(uvA);\n\t\t\t\tuvC.sub(uvA);\n\t\t\t\tconst r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\t\tif (!isFinite(r)) return;\n\t\t\t\tsdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n\t\t\t\ttdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n\t\t\t\ttan1[a].add(sdir);\n\t\t\t\ttan1[b].add(sdir);\n\t\t\t\ttan1[c].add(sdir);\n\t\t\t\ttan2[a].add(tdir);\n\t\t\t\ttan2[b].add(tdir);\n\t\t\t\ttan2[c].add(tdir);\n\t\t\t}\n\n\t\t\tlet groups = this.groups;\n\n\t\t\tif (groups.length === 0) {\n\t\t\t\tgroups = [{\n\t\t\t\t\tstart: 0,\n\t\t\t\t\tcount: indices.length\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tfor (let i = 0, il = groups.length; i < il; ++i) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst start = group.start;\n\t\t\t\tconst count = group.count;\n\n\t\t\t\tfor (let j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst tmp = new Vector3(),\n\t\t\t\t\t\ttmp2 = new Vector3();\n\t\t\tconst n = new Vector3(),\n\t\t\t\t\t\tn2 = new Vector3();\n\n\t\t\tfunction handleVertex(v) {\n\t\t\t\tn.fromArray(normals, v * 3);\n\t\t\t\tn2.copy(n);\n\t\t\t\tconst t = tan1[v]; // Gram-Schmidt orthogonalize\n\n\t\t\t\ttmp.copy(t);\n\t\t\t\ttmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness\n\n\t\t\t\ttmp2.crossVectors(n2, t);\n\t\t\t\tconst test = tmp2.dot(tan2[v]);\n\t\t\t\tconst w = test < 0.0 ? -1.0 : 1.0;\n\t\t\t\ttangents[v * 4] = tmp.x;\n\t\t\t\ttangents[v * 4 + 1] = tmp.y;\n\t\t\t\ttangents[v * 4 + 2] = tmp.z;\n\t\t\t\ttangents[v * 4 + 3] = w;\n\t\t\t}\n\n\t\t\tfor (let i = 0, il = groups.length; i < il; ++i) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst start = group.start;\n\t\t\t\tconst count = group.count;\n\n\t\t\t\tfor (let j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleVertex(indices[j + 0]);\n\t\t\t\t\thandleVertex(indices[j + 1]);\n\t\t\t\t\thandleVertex(indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcomputeVertexNormals() {\n\t\t\tconst index = this.index;\n\t\t\tconst positionAttribute = this.getAttribute('position');\n\n\t\t\tif (positionAttribute !== undefined) {\n\t\t\t\tlet normalAttribute = this.getAttribute('normal');\n\n\t\t\t\tif (normalAttribute === undefined) {\n\t\t\t\t\tnormalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n\t\t\t\t\tthis.setAttribute('normal', normalAttribute);\n\t\t\t\t} else {\n\t\t\t\t\t// reset existing normals to zero\n\t\t\t\t\tfor (let i = 0, il = normalAttribute.count; i < il; i++) {\n\t\t\t\t\t\tnormalAttribute.setXYZ(i, 0, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst pA = new Vector3(),\n\t\t\t\t\t\t\tpB = new Vector3(),\n\t\t\t\t\t\t\tpC = new Vector3();\n\t\t\t\tconst nA = new Vector3(),\n\t\t\t\t\t\t\tnB = new Vector3(),\n\t\t\t\t\t\t\tnC = new Vector3();\n\t\t\t\tconst cb = new Vector3(),\n\t\t\t\t\t\t\tab = new Vector3(); // indexed elements\n\n\t\t\t\tif (index) {\n\t\t\t\t\tfor (let i = 0, il = index.count; i < il; i += 3) {\n\t\t\t\t\t\tconst vA = index.getX(i + 0);\n\t\t\t\t\t\tconst vB = index.getX(i + 1);\n\t\t\t\t\t\tconst vC = index.getX(i + 2);\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, vA);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, vB);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, vC);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnA.fromBufferAttribute(normalAttribute, vA);\n\t\t\t\t\t\tnB.fromBufferAttribute(normalAttribute, vB);\n\t\t\t\t\t\tnC.fromBufferAttribute(normalAttribute, vC);\n\t\t\t\t\t\tnA.add(cb);\n\t\t\t\t\t\tnB.add(cb);\n\t\t\t\t\t\tnC.add(cb);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\t\t\t\tfor (let i = 0, il = positionAttribute.count; i < il; i += 3) {\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, i + 0);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, i + 1);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, i + 2);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tmerge(geometry, offset) {\n\t\t\tif (!(geometry && geometry.isBufferGeometry)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (offset === undefined) {\n\t\t\t\toffset = 0;\n\t\t\t\tconsole.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');\n\t\t\t}\n\n\t\t\tconst attributes = this.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tif (geometry.attributes[key] === undefined) continue;\n\t\t\t\tconst attribute1 = attributes[key];\n\t\t\t\tconst attributeArray1 = attribute1.array;\n\t\t\t\tconst attribute2 = geometry.attributes[key];\n\t\t\t\tconst attributeArray2 = attribute2.array;\n\t\t\t\tconst attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tconst length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\n\n\t\t\t\tfor (let i = 0, j = attributeOffset; i < length; i++, j++) {\n\t\t\t\t\tattributeArray1[j] = attributeArray2[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tnormalizeNormals() {\n\t\t\tconst normals = this.attributes.normal;\n\n\t\t\tfor (let i = 0, il = normals.count; i < il; i++) {\n\t\t\t\t_vector$8.fromBufferAttribute(normals, i);\n\n\t\t\t\t_vector$8.normalize();\n\n\t\t\t\tnormals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);\n\t\t\t}\n\t\t}\n\n\t\ttoNonIndexed() {\n\t\t\tfunction convertBufferAttribute(attribute, indices) {\n\t\t\t\tconst array = attribute.array;\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst normalized = attribute.normalized;\n\t\t\t\tconst array2 = new array.constructor(indices.length * itemSize);\n\t\t\t\tlet index = 0,\n\t\t\t\t\t\tindex2 = 0;\n\n\t\t\t\tfor (let i = 0, l = indices.length; i < l; i++) {\n\t\t\t\t\tindex = indices[i] * itemSize;\n\n\t\t\t\t\tfor (let j = 0; j < itemSize; j++) {\n\t\t\t\t\t\tarray2[index2++] = array[index++];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(array2, itemSize, normalized);\n\t\t\t} //\n\n\n\t\t\tif (this.index === null) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst geometry2 = new BufferGeometry();\n\t\t\tconst indices = this.index.array;\n\t\t\tconst attributes = this.attributes; // attributes\n\n\t\t\tfor (const name in attributes) {\n\t\t\t\tconst attribute = attributes[name];\n\t\t\t\tconst newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\tgeometry2.setAttribute(name, newAttribute);\n\t\t\t} // morph attributes\n\n\n\t\t\tconst morphAttributes = this.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst morphArray = [];\n\t\t\t\tconst morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (let i = 0, il = morphAttribute.length; i < il; i++) {\n\t\t\t\t\tconst attribute = morphAttribute[i];\n\t\t\t\t\tconst newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\t\tmorphArray.push(newAttribute);\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[name] = morphArray;\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative; // groups\n\n\t\t\tconst groups = this.groups;\n\n\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tgeometry2.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t}\n\n\t\t\treturn geometry2;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n\t\t\tif (this.parameters !== undefined) {\n\t\t\t\tconst parameters = this.parameters;\n\n\t\t\t\tfor (const key in parameters) {\n\t\t\t\t\tif (parameters[key] !== undefined) data[key] = parameters[key];\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t} // for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\n\t\t\tdata.data = {\n\t\t\t\tattributes: {}\n\t\t\t};\n\t\t\tconst index = this.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call(index.array)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst attributes = this.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tdata.data.attributes[key] = attribute.toJSON(data.data);\n\t\t\t}\n\n\t\t\tconst morphAttributes = {};\n\t\t\tlet hasMorphAttributes = false;\n\n\t\t\tfor (const key in this.morphAttributes) {\n\t\t\t\tconst attributeArray = this.morphAttributes[key];\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\tconst attribute = attributeArray[i];\n\t\t\t\t\tarray.push(attribute.toJSON(data.data));\n\t\t\t\t}\n\n\t\t\t\tif (array.length > 0) {\n\t\t\t\t\tmorphAttributes[key] = array;\n\t\t\t\t\thasMorphAttributes = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasMorphAttributes) {\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\t\t\t}\n\n\t\t\tconst groups = this.groups;\n\n\t\t\tif (groups.length > 0) {\n\t\t\t\tdata.data.groups = JSON.parse(JSON.stringify(groups));\n\t\t\t}\n\n\t\t\tconst boundingSphere = this.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tclone() {\n\t\t\t/*\n\t\t\t // Handle primitives\n\t\t\t\t const parameters = this.parameters;\n\t\t\t\t if ( parameters !== undefined ) {\n\t\t\t\t const values = [];\n\t\t\t\t for ( const key in parameters ) {\n\t\t\t\t values.push( parameters[ key ] );\n\t\t\t\t }\n\t\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\t\t\t\t }\n\t\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\t\t\treturn new BufferGeometry().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\t// reset\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // used for storing cloned, shared data\n\n\t\t\tconst data = {}; // name\n\n\t\t\tthis.name = source.name; // index\n\n\t\t\tconst index = source.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tthis.setIndex(index.clone(data));\n\t\t\t} // attributes\n\n\n\t\t\tconst attributes = source.attributes;\n\n\t\t\tfor (const name in attributes) {\n\t\t\t\tconst attribute = attributes[name];\n\t\t\t\tthis.setAttribute(name, attribute.clone(data));\n\t\t\t} // morph attributes\n\n\n\t\t\tconst morphAttributes = source.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst array = [];\n\t\t\t\tconst morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (let i = 0, l = morphAttribute.length; i < l; i++) {\n\t\t\t\t\tarray.push(morphAttribute[i].clone(data));\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[name] = array;\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative; // groups\n\n\t\t\tconst groups = source.groups;\n\n\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tthis.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t} // bounding box\n\n\n\t\t\tconst boundingBox = source.boundingBox;\n\n\t\t\tif (boundingBox !== null) {\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\t\t\t} // bounding sphere\n\n\n\t\t\tconst boundingSphere = source.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\t\t\t} // draw range\n\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count; // user data\n\n\t\t\tthis.userData = source.userData;\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tBufferGeometry.prototype.isBufferGeometry = true;\n\n\tconst _inverseMatrix$2 = /*@__PURE__*/new Matrix4();\n\n\tconst _ray$2 = /*@__PURE__*/new Ray();\n\n\tconst _sphere$3 = /*@__PURE__*/new Sphere();\n\n\tconst _vA$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vB$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vC$1 = /*@__PURE__*/new Vector3();\n\n\tconst _tempA = /*@__PURE__*/new Vector3();\n\n\tconst _tempB = /*@__PURE__*/new Vector3();\n\n\tconst _tempC = /*@__PURE__*/new Vector3();\n\n\tconst _morphA = /*@__PURE__*/new Vector3();\n\n\tconst _morphB = /*@__PURE__*/new Vector3();\n\n\tconst _morphC = /*@__PURE__*/new Vector3();\n\n\tconst _uvA$1 = /*@__PURE__*/new Vector2();\n\n\tconst _uvB$1 = /*@__PURE__*/new Vector2();\n\n\tconst _uvC$1 = /*@__PURE__*/new Vector2();\n\n\tconst _intersectionPoint = /*@__PURE__*/new Vector3();\n\n\tconst _intersectionPointWorld = /*@__PURE__*/new Vector3();\n\n\tclass Mesh extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Mesh';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\n\t\t\tif (source.morphTargetInfluences !== undefined) {\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\t\t\t}\n\n\t\t\tif (source.morphTargetDictionary !== undefined) {\n\t\t\t\tthis.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst material = this.material;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tif (material === undefined) return; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$3.applyMatrix4(matrixWorld);\n\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //\n\n\t\t\t_inverseMatrix$2.copy(matrixWorld).invert();\n\n\t\t\t_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2); // Check boundingBox before continuing\n\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tif (_ray$2.intersectsBox(geometry.boundingBox) === false) return;\n\t\t\t}\n\n\t\t\tlet intersection;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tconst uv = geometry.attributes.uv;\n\t\t\t\tconst uv2 = geometry.attributes.uv2;\n\t\t\t\tconst groups = geometry.groups;\n\t\t\t\tconst drawRange = geometry.drawRange;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\t// indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tconst start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tconst end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (let j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tconst a = index.getX(j);\n\t\t\t\t\t\t\t\tconst b = index.getX(j + 1);\n\t\t\t\t\t\t\t\tconst c = index.getX(j + 2);\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (let i = start, il = end; i < il; i += 3) {\n\t\t\t\t\t\t\tconst a = index.getX(i);\n\t\t\t\t\t\t\tconst b = index.getX(i + 1);\n\t\t\t\t\t\t\tconst c = index.getX(i + 2);\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (position !== undefined) {\n\t\t\t\t\t// non-indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tconst start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tconst end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (let j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\t\t\tconst c = j + 2;\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\t\tconst end = Math.min(position.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (let i = start, il = end; i < il; i += 3) {\n\t\t\t\t\t\t\tconst a = i;\n\t\t\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\t\t\tconst c = i + 2;\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t}\n\n\tMesh.prototype.isMesh = true;\n\n\tfunction checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n\t\tlet intersect;\n\n\t\tif (material.side === BackSide) {\n\t\t\tintersect = ray.intersectTriangle(pC, pB, pA, true, point);\n\t\t} else {\n\t\t\tintersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n\t\t}\n\n\t\tif (intersect === null) return null;\n\n\t\t_intersectionPointWorld.copy(point);\n\n\t\t_intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n\t\tconst distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n\t\tif (distance < raycaster.near || distance > raycaster.far) return null;\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\t}\n\n\tfunction checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n\t\t_vA$1.fromBufferAttribute(position, a);\n\n\t\t_vB$1.fromBufferAttribute(position, b);\n\n\t\t_vC$1.fromBufferAttribute(position, c);\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif (material.morphTargets && morphPosition && morphInfluences) {\n\t\t\t_morphA.set(0, 0, 0);\n\n\t\t\t_morphB.set(0, 0, 0);\n\n\t\t\t_morphC.set(0, 0, 0);\n\n\t\t\tfor (let i = 0, il = morphPosition.length; i < il; i++) {\n\t\t\t\tconst influence = morphInfluences[i];\n\t\t\t\tconst morphAttribute = morphPosition[i];\n\t\t\t\tif (influence === 0) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute(morphAttribute, a);\n\n\t\t\t\t_tempB.fromBufferAttribute(morphAttribute, b);\n\n\t\t\t\t_tempC.fromBufferAttribute(morphAttribute, c);\n\n\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t_morphA.addScaledVector(_tempA, influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB, influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC, influence);\n\t\t\t\t} else {\n\t\t\t\t\t_morphA.addScaledVector(_tempA.sub(_vA$1), influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB.sub(_vB$1), influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC.sub(_vC$1), influence);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_vA$1.add(_morphA);\n\n\t\t\t_vB$1.add(_morphB);\n\n\t\t\t_vC$1.add(_morphC);\n\t\t}\n\n\t\tif (object.isSkinnedMesh) {\n\t\t\tobject.boneTransform(a, _vA$1);\n\t\t\tobject.boneTransform(b, _vB$1);\n\t\t\tobject.boneTransform(c, _vC$1);\n\t\t}\n\n\t\tconst intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);\n\n\t\tif (intersection) {\n\t\t\tif (uv) {\n\t\t\t\t_uvA$1.fromBufferAttribute(uv, a);\n\n\t\t\t\t_uvB$1.fromBufferAttribute(uv, b);\n\n\t\t\t\t_uvC$1.fromBufferAttribute(uv, c);\n\n\t\t\t\tintersection.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n\t\t\t}\n\n\t\t\tif (uv2) {\n\t\t\t\t_uvA$1.fromBufferAttribute(uv2, a);\n\n\t\t\t\t_uvB$1.fromBufferAttribute(uv2, b);\n\n\t\t\t\t_uvC$1.fromBufferAttribute(uv2, c);\n\n\t\t\t\tintersection.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n\t\t\t}\n\n\t\t\tconst face = {\n\t\t\t\ta: a,\n\t\t\t\tb: b,\n\t\t\t\tc: c,\n\t\t\t\tnormal: new Vector3(),\n\t\t\t\tmaterialIndex: 0\n\t\t\t};\n\t\t\tTriangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);\n\t\t\tintersection.face = face;\n\t\t}\n\n\t\treturn intersection;\n\t}\n\n\tclass BoxGeometry extends BufferGeometry {\n\t\tconstructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'BoxGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\t\t\tconst scope = this; // segments\n\n\t\t\twidthSegments = Math.floor(widthSegments);\n\t\t\theightSegments = Math.floor(heightSegments);\n\t\t\tdepthSegments = Math.floor(depthSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet numberOfVertices = 0;\n\t\t\tlet groupStart = 0; // build each side of the box geometry\n\n\t\t\tbuildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n\t\t\tbuildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n\t\t\tbuildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n\t\t\tbuildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n\t\t\t\tconst segmentWidth = width / gridX;\n\t\t\t\tconst segmentHeight = height / gridY;\n\t\t\t\tconst widthHalf = width / 2;\n\t\t\t\tconst heightHalf = height / 2;\n\t\t\t\tconst depthHalf = depth / 2;\n\t\t\t\tconst gridX1 = gridX + 1;\n\t\t\t\tconst gridY1 = gridY + 1;\n\t\t\t\tlet vertexCounter = 0;\n\t\t\t\tlet groupCount = 0;\n\t\t\t\tconst vector = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\t\tfor (let iy = 0; iy < gridY1; iy++) {\n\t\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor (let ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\t\tconst x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = x * udir;\n\t\t\t\t\t\tvector[v] = y * vdir;\n\t\t\t\t\t\tvector[w] = depthHalf; // now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push(vector.x, vector.y, vector.z); // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = 0;\n\t\t\t\t\t\tvector[v] = 0;\n\t\t\t\t\t\tvector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push(vector.x, vector.y, vector.z); // uvs\n\n\t\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\t\tuvs.push(1 - iy / gridY); // counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\t\t\t\t\t}\n\t\t\t\t} // indices\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\n\t\t\t\tfor (let iy = 0; iy < gridY; iy++) {\n\t\t\t\t\tfor (let ix = 0; ix < gridX; ix++) {\n\t\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * (iy + 1);\n\t\t\t\t\t\tconst c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n\t\t\t\t\t\tconst d = numberOfVertices + (ix + 1) + gridX1 * iy; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount; // update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Uniform Utilities\n\t */\n\tfunction cloneUniforms(src) {\n\t\tconst dst = {};\n\n\t\tfor (const u in src) {\n\t\t\tdst[u] = {};\n\n\t\t\tfor (const p in src[u]) {\n\t\t\t\tconst property = src[u][p];\n\n\t\t\t\tif (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {\n\t\t\t\t\tdst[u][p] = property.clone();\n\t\t\t\t} else if (Array.isArray(property)) {\n\t\t\t\t\tdst[u][p] = property.slice();\n\t\t\t\t} else {\n\t\t\t\t\tdst[u][p] = property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\tfunction mergeUniforms(uniforms) {\n\t\tconst merged = {};\n\n\t\tfor (let u = 0; u < uniforms.length; u++) {\n\t\t\tconst tmp = cloneUniforms(uniforms[u]);\n\n\t\t\tfor (const p in tmp) {\n\t\t\t\tmerged[p] = tmp[p];\n\t\t\t}\n\t\t}\n\n\t\treturn merged;\n\t} // Legacy\n\n\tconst UniformsUtils = {\n\t\tclone: cloneUniforms,\n\t\tmerge: mergeUniforms\n\t};\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * parameters = {\n\t *\tdefines: { \"label\" : \"value\" },\n\t *\tuniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *\tfragmentShader: <string>,\n\t *\tvertexShader: <string>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tlights: <bool>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tclass ShaderMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShaderMaterial';\n\t\t\tthis.defines = {};\n\t\t\tthis.uniforms = {};\n\t\t\tthis.vertexShader = default_vertex;\n\t\t\tthis.fragmentShader = default_fragment;\n\t\t\tthis.linewidth = 1;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false; // set to use scene fog\n\n\t\t\tthis.lights = false; // set to use scene lights\n\n\t\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\t\tthis.morphTargets = false; // set to use morph targets\n\n\t\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\t\tthis.extensions = {\n\t\t\t\tderivatives: false,\n\t\t\t\t// set to use derivatives\n\t\t\t\tfragDepth: false,\n\t\t\t\t// set to use fragment depth values\n\t\t\t\tdrawBuffers: false,\n\t\t\t\t// set to use draw buffers\n\t\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\n\t\t\t}; // When rendered geometry doesn't include these attributes but the material does,\n\t\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\n\t\t\tthis.defaultAttributeValues = {\n\t\t\t\t'color': [1, 1, 1],\n\t\t\t\t'uv': [0, 0],\n\t\t\t\t'uv2': [0, 0]\n\t\t\t};\n\t\t\tthis.index0AttributeName = undefined;\n\t\t\tthis.uniformsNeedUpdate = false;\n\t\t\tthis.glslVersion = null;\n\n\t\t\tif (parameters !== undefined) {\n\t\t\t\tif (parameters.attributes !== undefined) {\n\t\t\t\t\tconsole.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n\t\t\t\t}\n\n\t\t\t\tthis.setValues(parameters);\n\t\t\t}\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.fragmentShader = source.fragmentShader;\n\t\t\tthis.vertexShader = source.vertexShader;\n\t\t\tthis.uniforms = cloneUniforms(source.uniforms);\n\t\t\tthis.defines = Object.assign({}, source.defines);\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.lights = source.lights;\n\t\t\tthis.clipping = source.clipping;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.extensions = Object.assign({}, source.extensions);\n\t\t\tthis.glslVersion = source.glslVersion;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.glslVersion = this.glslVersion;\n\t\t\tdata.uniforms = {};\n\n\t\t\tfor (const name in this.uniforms) {\n\t\t\t\tconst uniform = this.uniforms[name];\n\t\t\t\tconst value = uniform.value;\n\n\t\t\t\tif (value && value.isTexture) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 't',\n\t\t\t\t\t\tvalue: value.toJSON(meta).uuid\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isColor) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'c',\n\t\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector2) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v2',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector3) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v3',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector4) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v4',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isMatrix3) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'm3',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isMatrix4) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'm4',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Object.keys(this.defines).length > 0) data.defines = this.defines;\n\t\t\tdata.vertexShader = this.vertexShader;\n\t\t\tdata.fragmentShader = this.fragmentShader;\n\t\t\tconst extensions = {};\n\n\t\t\tfor (const key in this.extensions) {\n\t\t\t\tif (this.extensions[key] === true) extensions[key] = true;\n\t\t\t}\n\n\t\t\tif (Object.keys(extensions).length > 0) data.extensions = extensions;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tclass Camera extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Camera';\n\t\t\tthis.matrixWorldInverse = new Matrix4();\n\t\t\tthis.projectionMatrix = new Matrix4();\n\t\t\tthis.projectionMatrixInverse = new Matrix4();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.matrixWorldInverse.copy(source.matrixWorldInverse);\n\t\t\tthis.projectionMatrix.copy(source.projectionMatrix);\n\t\t\tthis.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Camera: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tconst e = this.matrixWorld.elements;\n\t\t\treturn target.set(-e[8], -e[9], -e[10]).normalize();\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t}\n\n\t\tupdateWorldMatrix(updateParents, updateChildren) {\n\t\t\tsuper.updateWorldMatrix(updateParents, updateChildren);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tCamera.prototype.isCamera = true;\n\n\tclass PerspectiveCamera extends Camera {\n\t\tconstructor(fov = 50, aspect = 1, near = 0.1, far = 2000) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PerspectiveCamera';\n\t\t\tthis.fov = fov;\n\t\t\tthis.zoom = 1;\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.focus = 10;\n\t\t\tthis.aspect = aspect;\n\t\t\tthis.view = null;\n\t\t\tthis.filmGauge = 35; // width of the film (default in millimeters)\n\n\t\t\tthis.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\n\n\t\tsetFocalLength(focalLength) {\n\t\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\t\tthis.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\n\n\t\tgetFocalLength() {\n\t\t\tconst vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\t}\n\n\t\tgetEffectiveFOV() {\n\t\t\treturn RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);\n\t\t}\n\n\t\tgetFilmWidth() {\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min(this.aspect, 1);\n\t\t}\n\n\t\tgetFilmHeight() {\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max(this.aspect, 1);\n\t\t}\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *\t +---+---+---+\n\t\t *\t | A | B | C |\n\t\t *\t +---+---+---+\n\t\t *\t | D | E | F |\n\t\t *\t +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *\t const w = 1920;\n\t\t *\t const h = 1080;\n\t\t *\t const fullWidth = w * 3;\n\t\t *\t const fullHeight = h * 2;\n\t\t *\n\t\t *\t --A--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *\t --B--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *\t --C--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *\t --D--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *\t --E--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *\t --F--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *\t Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\n\n\t\tsetViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tclearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tupdateProjectionMatrix() {\n\t\t\tconst near = this.near;\n\t\t\tlet top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;\n\t\t\tlet height = 2 * top;\n\t\t\tlet width = this.aspect * height;\n\t\t\tlet left = -0.5 * width;\n\t\t\tconst view = this.view;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\t\t\t\tfullHeight = view.fullHeight;\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\t\t\t}\n\n\t\t\tconst skew = this.filmOffset;\n\t\t\tif (skew !== 0) left += near * skew / this.getFilmWidth();\n\t\t\tthis.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\t\t\tdata.object.aspect = this.aspect;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tPerspectiveCamera.prototype.isPerspectiveCamera = true;\n\n\tconst fov = 90,\n\t\t\t\taspect = 1;\n\n\tclass CubeCamera extends Object3D {\n\t\tconstructor(near, far, renderTarget) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubeCamera';\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget !== true) {\n\t\t\t\tconsole.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.renderTarget = renderTarget;\n\t\t\tconst cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPX.layers = this.layers;\n\t\t\tcameraPX.up.set(0, -1, 0);\n\t\t\tcameraPX.lookAt(new Vector3(1, 0, 0));\n\t\t\tthis.add(cameraPX);\n\t\t\tconst cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNX.layers = this.layers;\n\t\t\tcameraNX.up.set(0, -1, 0);\n\t\t\tcameraNX.lookAt(new Vector3(-1, 0, 0));\n\t\t\tthis.add(cameraNX);\n\t\t\tconst cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPY.layers = this.layers;\n\t\t\tcameraPY.up.set(0, 0, 1);\n\t\t\tcameraPY.lookAt(new Vector3(0, 1, 0));\n\t\t\tthis.add(cameraPY);\n\t\t\tconst cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNY.layers = this.layers;\n\t\t\tcameraNY.up.set(0, 0, -1);\n\t\t\tcameraNY.lookAt(new Vector3(0, -1, 0));\n\t\t\tthis.add(cameraNY);\n\t\t\tconst cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPZ.layers = this.layers;\n\t\t\tcameraPZ.up.set(0, -1, 0);\n\t\t\tcameraPZ.lookAt(new Vector3(0, 0, 1));\n\t\t\tthis.add(cameraPZ);\n\t\t\tconst cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNZ.layers = this.layers;\n\t\t\tcameraNZ.up.set(0, -1, 0);\n\t\t\tcameraNZ.lookAt(new Vector3(0, 0, -1));\n\t\t\tthis.add(cameraNZ);\n\t\t}\n\n\t\tupdate(renderer, scene) {\n\t\t\tif (this.parent === null) this.updateMatrixWorld();\n\t\t\tconst renderTarget = this.renderTarget;\n\t\t\tconst [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;\n\t\t\tconst currentXrEnabled = renderer.xr.enabled;\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\trenderer.xr.enabled = false;\n\t\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\t\t\trenderer.setRenderTarget(renderTarget, 0);\n\t\t\trenderer.render(scene, cameraPX);\n\t\t\trenderer.setRenderTarget(renderTarget, 1);\n\t\t\trenderer.render(scene, cameraNX);\n\t\t\trenderer.setRenderTarget(renderTarget, 2);\n\t\t\trenderer.render(scene, cameraPY);\n\t\t\trenderer.setRenderTarget(renderTarget, 3);\n\t\t\trenderer.render(scene, cameraNY);\n\t\t\trenderer.setRenderTarget(renderTarget, 4);\n\t\t\trenderer.render(scene, cameraPZ);\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\t\trenderer.setRenderTarget(renderTarget, 5);\n\t\t\trenderer.render(scene, cameraNZ);\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t}\n\n\t}\n\n\tclass CubeTexture extends Texture {\n\t\tconstructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\t\timages = images !== undefined ? images : [];\n\t\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\t\tformat = format !== undefined ? format : RGBFormat;\n\t\t\tsuper(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding); // Why CubeTexture._needsFlipEnvMap is necessary:\n\t\t\t//\n\t\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\t\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t\t// and the flag _needsFlipEnvMap controls this conversion. The flip is not required (and thus _needsFlipEnvMap is set to false)\n\t\t\t// when using WebGLCubeRenderTarget.texture as a cube texture.\n\n\t\t\tthis._needsFlipEnvMap = true;\n\t\t\tthis.flipY = false;\n\t\t}\n\n\t\tget images() {\n\t\t\treturn this.image;\n\t\t}\n\n\t\tset images(value) {\n\t\t\tthis.image = value;\n\t\t}\n\n\t}\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\t\tconstructor(size, options, dummy) {\n\t\t\tif (Number.isInteger(options)) {\n\t\t\t\tconsole.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');\n\t\t\t\toptions = dummy;\n\t\t\t}\n\n\t\t\tsuper(size, size, options);\n\t\t\toptions = options || {};\n\t\t\tthis.texture = new CubeTexture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\tthis.texture._needsFlipEnvMap = false;\n\t\t}\n\n\t\tfromEquirectangularTexture(renderer, texture) {\n\t\t\tthis.texture.type = texture.type;\n\t\t\tthis.texture.format = RGBAFormat; // see #18859\n\n\t\t\tthis.texture.encoding = texture.encoding;\n\t\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\t\tthis.texture.minFilter = texture.minFilter;\n\t\t\tthis.texture.magFilter = texture.magFilter;\n\t\t\tconst shader = {\n\t\t\t\tuniforms: {\n\t\t\t\t\ttEquirect: {\n\t\t\t\t\t\tvalue: null\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tvertexShader:\n\t\t\t\t/* glsl */\n\t\t\t\t`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\tfragmentShader:\n\t\t\t\t/* glsl */\n\t\t\t\t`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t\t};\n\t\t\tconst geometry = new BoxGeometry(5, 5, 5);\n\t\t\tconst material = new ShaderMaterial({\n\t\t\t\tname: 'CubemapFromEquirect',\n\t\t\t\tuniforms: cloneUniforms(shader.uniforms),\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\t\tside: BackSide,\n\t\t\t\tblending: NoBlending\n\t\t\t});\n\t\t\tmaterial.uniforms.tEquirect.value = texture;\n\t\t\tconst mesh = new Mesh(geometry, material);\n\t\t\tconst currentMinFilter = texture.minFilter; // Avoid blurred poles\n\n\t\t\tif (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n\t\t\tconst camera = new CubeCamera(1, 10, this);\n\t\t\tcamera.update(renderer, mesh);\n\t\t\ttexture.minFilter = currentMinFilter;\n\t\t\tmesh.geometry.dispose();\n\t\t\tmesh.material.dispose();\n\t\t\treturn this;\n\t\t}\n\n\t\tclear(renderer, color, depth, stencil) {\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\trenderer.setRenderTarget(this, i);\n\t\t\t\trenderer.clear(color, depth, stencil);\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t}\n\n\t}\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tconst _sphere$2 = /*@__PURE__*/new Sphere();\n\n\tconst _vector$7 = /*@__PURE__*/new Vector3();\n\n\tclass Frustum {\n\t\tconstructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {\n\t\t\tthis.planes = [p0, p1, p2, p3, p4, p5];\n\t\t}\n\n\t\tset(p0, p1, p2, p3, p4, p5) {\n\t\t\tconst planes = this.planes;\n\t\t\tplanes[0].copy(p0);\n\t\t\tplanes[1].copy(p1);\n\t\t\tplanes[2].copy(p2);\n\t\t\tplanes[3].copy(p3);\n\t\t\tplanes[4].copy(p4);\n\t\t\tplanes[5].copy(p5);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(frustum) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tplanes[i].copy(frustum.planes[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromProjectionMatrix(m) {\n\t\t\tconst planes = this.planes;\n\t\t\tconst me = m.elements;\n\t\t\tconst me0 = me[0],\n\t\t\t\t\t\tme1 = me[1],\n\t\t\t\t\t\tme2 = me[2],\n\t\t\t\t\t\tme3 = me[3];\n\t\t\tconst me4 = me[4],\n\t\t\t\t\t\tme5 = me[5],\n\t\t\t\t\t\tme6 = me[6],\n\t\t\t\t\t\tme7 = me[7];\n\t\t\tconst me8 = me[8],\n\t\t\t\t\t\tme9 = me[9],\n\t\t\t\t\t\tme10 = me[10],\n\t\t\t\t\t\tme11 = me[11];\n\t\t\tconst me12 = me[12],\n\t\t\t\t\t\tme13 = me[13],\n\t\t\t\t\t\tme14 = me[14],\n\t\t\t\t\t\tme15 = me[15];\n\t\t\tplanes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n\t\t\tplanes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n\t\t\tplanes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n\t\t\tplanes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n\t\t\tplanes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n\t\t\tplanes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n\t\t\treturn this;\n\t\t}\n\n\t\tintersectsObject(object) {\n\t\t\tconst geometry = object.geometry;\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$2);\n\t\t}\n\n\t\tintersectsSprite(sprite) {\n\t\t\t_sphere$2.center.set(0, 0, 0);\n\n\t\t\t_sphere$2.radius = 0.7071067811865476;\n\n\t\t\t_sphere$2.applyMatrix4(sprite.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$2);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\tconst planes = this.planes;\n\t\t\tconst center = sphere.center;\n\t\t\tconst negRadius = -sphere.radius;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst distance = planes[i].distanceToPoint(center);\n\n\t\t\t\tif (distance < negRadius) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst plane = planes[i]; // corner at max distance\n\n\t\t\t\t_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif (plane.distanceToPoint(_vector$7) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tif (planes[i].distanceToPoint(point) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tfunction WebGLAnimation() {\n\t\tlet context = null;\n\t\tlet isAnimating = false;\n\t\tlet animationLoop = null;\n\t\tlet requestId = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tanimationLoop(time, frame);\n\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t}\n\n\t\treturn {\n\t\t\tstart: function () {\n\t\t\t\tif (isAnimating === true) return;\n\t\t\t\tif (animationLoop === null) return;\n\t\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t\t\tisAnimating = true;\n\t\t\t},\n\t\t\tstop: function () {\n\t\t\t\tcontext.cancelAnimationFrame(requestId);\n\t\t\t\tisAnimating = false;\n\t\t\t},\n\t\t\tsetAnimationLoop: function (callback) {\n\t\t\t\tanimationLoop = callback;\n\t\t\t},\n\t\t\tsetContext: function (value) {\n\t\t\t\tcontext = value;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLAttributes(gl, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst buffers = new WeakMap();\n\n\t\tfunction createBuffer(attribute, bufferType) {\n\t\t\tconst array = attribute.array;\n\t\t\tconst usage = attribute.usage;\n\t\t\tconst buffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\t\t\tgl.bufferData(bufferType, array, usage);\n\t\t\tattribute.onUploadCallback();\n\t\t\tlet type = gl.FLOAT;\n\n\t\t\tif (array instanceof Float32Array) {\n\t\t\t\ttype = gl.FLOAT;\n\t\t\t} else if (array instanceof Float64Array) {\n\t\t\t\tconsole.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\n\t\t\t} else if (array instanceof Uint16Array) {\n\t\t\t\tif (attribute.isFloat16BufferAttribute) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\ttype = gl.HALF_FLOAT;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\t\t\t\t}\n\t\t\t} else if (array instanceof Int16Array) {\n\t\t\t\ttype = gl.SHORT;\n\t\t\t} else if (array instanceof Uint32Array) {\n\t\t\t\ttype = gl.UNSIGNED_INT;\n\t\t\t} else if (array instanceof Int32Array) {\n\t\t\t\ttype = gl.INT;\n\t\t\t} else if (array instanceof Int8Array) {\n\t\t\t\ttype = gl.BYTE;\n\t\t\t} else if (array instanceof Uint8Array) {\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\t\t\t} else if (array instanceof Uint8ClampedArray) {\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\t\t}\n\n\t\tfunction updateBuffer(buffer, attribute, bufferType) {\n\t\t\tconst array = attribute.array;\n\t\t\tconst updateRange = attribute.updateRange;\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\n\t\t\tif (updateRange.count === -1) {\n\t\t\t\t// Not using update ranges\n\t\t\t\tgl.bufferSubData(bufferType, 0, array);\n\t\t\t} else {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = -1; // reset range\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction get(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\treturn buffers.get(attribute);\n\t\t}\n\n\t\tfunction remove(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tconst data = buffers.get(attribute);\n\n\t\t\tif (data) {\n\t\t\t\tgl.deleteBuffer(data.buffer);\n\t\t\t\tbuffers.delete(attribute);\n\t\t\t}\n\t\t}\n\n\t\tfunction update(attribute, bufferType) {\n\t\t\tif (attribute.isGLBufferAttribute) {\n\t\t\t\tconst cached = buffers.get(attribute);\n\n\t\t\t\tif (!cached || cached.version < attribute.version) {\n\t\t\t\t\tbuffers.set(attribute, {\n\t\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\t\tversion: attribute.version\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tconst data = buffers.get(attribute);\n\n\t\t\tif (data === undefined) {\n\t\t\t\tbuffers.set(attribute, createBuffer(attribute, bufferType));\n\t\t\t} else if (data.version < attribute.version) {\n\t\t\t\tupdateBuffer(data.buffer, attribute, bufferType);\n\t\t\t\tdata.version = attribute.version;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tclass PlaneGeometry extends BufferGeometry {\n\t\tconstructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PlaneGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\t\t\tconst width_half = width / 2;\n\t\t\tconst height_half = height / 2;\n\t\t\tconst gridX = Math.floor(widthSegments);\n\t\t\tconst gridY = Math.floor(heightSegments);\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\t\t\tconst segment_width = width / gridX;\n\t\t\tconst segment_height = height / gridY; //\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\n\t\t\tfor (let iy = 0; iy < gridY1; iy++) {\n\t\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\t\tfor (let ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\tconst x = ix * segment_width - width_half;\n\t\t\t\t\tvertices.push(x, -y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\tuvs.push(1 - iy / gridY);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let iy = 0; iy < gridY; iy++) {\n\t\t\t\tfor (let ix = 0; ix < gridX; ix++) {\n\t\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\t\tconst b = ix + gridX1 * (iy + 1);\n\t\t\t\t\tconst c = ix + 1 + gridX1 * (iy + 1);\n\t\t\t\t\tconst d = ix + 1 + gridX1 * iy;\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = - mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), rawDiffuseColor, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), rawDiffuseColor, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularRoughness;\\n\\tvec3 specularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(\t\t0, 1,\t\t0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(\t1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,\t1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,\t1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSNMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition.xyz / vWorldPosition.w;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n\\tfloat ior = ( 1.0 + 0.4 * reflectivity ) / ( 1.0 - 0.4 * reflectivity );\\n\\tvec3 f0 = vec3( pow( ior - 1.0, 2.0 ) / pow( ior + 1.0, 2.0 ) );\\n\\tvec3 f90 = vec3( 1.0 );\\n\\tvec3 f_transmission = totalTransmission * getIBLVolumeRefraction(\\n\\t\\tnormal, v, viewDir, roughnessFactor, diffuseColor.rgb, f0, f90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationColor, attenuationDistance);\\n\\tdiffuseColor.rgb = mix( diffuseColor.rgb, f_transmission, totalTransmission );\\n#endif\";\n\n\tvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec4 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay(vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix) {\\n\\t\\tvec3 refractionVector = refract(-v, normalize(n), 1.0 / ior);\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length(vec3(modelMatrix[0].xyz));\\n\\t\\tmodelScale.y = length(vec3(modelMatrix[1].xyz));\\n\\t\\tmodelScale.z = length(vec3(modelMatrix[2].xyz));\\n\\t\\treturn normalize(refractionVector) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness(float roughness, float ior) {\\n\\t\\treturn roughness * clamp(ior * 2.0 - 2.0, 0.0, 1.0);\\n\\t}\\n\\tvec3 getTransmissionSample(vec2 fragCoord, float roughness, float ior) {\\n\\t\\tfloat framebufferLod = log2(transmissionSamplerSize.x) * applyIorToRoughness(roughness, ior);\\n\\t\\treturn texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod).rgb;\\n\\t}\\n\\tvec3 applyVolumeAttenuation(vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance) {\\n\\t\\tif (attenuationDistance == 0.0) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log(attenuationColor) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp(-attenuationCoefficient * transmissionDistance);\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec3 getIBLVolumeRefraction(vec3 n, vec3 v, vec3 viewDir, float perceptualRoughness, vec3 baseColor, vec3 f0, vec3 f90,\\n\\t\\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness, vec3 attenuationColor, float attenuationDistance) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay(n, v, thickness, ior, modelMatrix);\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4(refractedRayExit, 1.0);\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec3 transmittedLight = getTransmissionSample(refractionCoords, perceptualRoughness, ior);\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation(transmittedLight, length(transmissionRay), attenuationColor, attenuationDistance);\\n\\t\\tfloat NdotV = saturate(dot(n, viewDir));\\n\\t\\tvec2 brdf = integrateSpecularBRDF(NdotV, perceptualRoughness);\\n\\t\\tvec3 specularColor = f0 * brdf.x + f90 * brdf.y;\\n\\t\\treturn (1.0 - specularColor) * attenuatedColor * baseColor;\\n\\t}\\n#endif\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform vec3 attenuationColor;\\n\\tuniform float attenuationDistance;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <transmission_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#ifdef USE_TRANSMISSION\\n\\t\\tfloat totalTransmission = transmission;\\n\\t\\tfloat thicknessFactor = thickness;\\n\\t#endif\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\tvec3 rawDiffuseColor = diffuseColor.rgb;\\n\\t#include <transmission_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec4 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition;\\n#endif\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tconst ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\ttransmission_fragment: transmission_fragment,\n\t\ttransmission_pars_fragment: transmission_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tconst UniformsLib = {\n\t\tcommon: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\tuv2Transform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tspecularmap: {\n\t\t\tspecularMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tenvmap: {\n\t\t\tenvMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tflipEnvMap: {\n\t\t\t\tvalue: -1\n\t\t\t},\n\t\t\treflectivity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\trefractionRatio: {\n\t\t\t\tvalue: 0.98\n\t\t\t},\n\t\t\tmaxMipLevel: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\taomap: {\n\t\t\taoMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\taoMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tlightmap: {\n\t\t\tlightMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tlightMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\temissivemap: {\n\t\t\temissiveMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tbumpmap: {\n\t\t\tbumpMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tbumpScale: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tnormalmap: {\n\t\t\tnormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tnormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t}\n\t\t},\n\t\tdisplacementmap: {\n\t\t\tdisplacementMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tdisplacementScale: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tdisplacementBias: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\troughnessmap: {\n\t\t\troughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tmetalnessmap: {\n\t\t\tmetalnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tgradientmap: {\n\t\t\tgradientMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tfog: {\n\t\t\tfogDensity: {\n\t\t\t\tvalue: 0.00025\n\t\t\t},\n\t\t\tfogNear: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tfogFar: {\n\t\t\t\tvalue: 2000\n\t\t\t},\n\t\t\tfogColor: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t}\n\t\t},\n\t\tlights: {\n\t\t\tambientLightColor: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tlightProbe: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tcolor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tdistance: {},\n\t\t\t\t\tconeCos: {},\n\t\t\t\t\tpenumbraCos: {},\n\t\t\t\t\tdecay: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdecay: {},\n\t\t\t\t\tdistance: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {},\n\t\t\t\t\tshadowCameraNear: {},\n\t\t\t\t\tshadowCameraFar: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\themisphereLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tskyColor: {},\n\t\t\t\t\tgroundColor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\twidth: {},\n\t\t\t\t\theight: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tltc_1: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tltc_2: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tpoints: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t},\n\t\tsprite: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tcenter: {\n\t\t\t\tvalue: new Vector2(0.5, 0.5)\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tvalue: 0.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t}\n\t};\n\n\tconst ShaderLib = {\n\t\tbasic: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\t},\n\t\tlambert: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\t},\n\t\tphong: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\tspecular: {\n\t\t\t\t\tvalue: new Color(0x111111)\n\t\t\t\t},\n\t\t\t\tshininess: {\n\t\t\t\t\tvalue: 30\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\t},\n\t\tstandard: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\troughness: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t},\n\t\t\t\tmetalness: {\n\t\t\t\t\tvalue: 0.0\n\t\t\t\t},\n\t\t\t\tenvMapIntensity: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t} // temporary\n\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\t},\n\t\ttoon: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\t\t},\n\t\tmatcap: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {\n\t\t\t\tmatcap: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\t\t},\n\t\tpoints: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\t\t},\n\t\tdashed: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {\n\t\t\t\tscale: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tdashSize: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\ttotalSize: {\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\t},\n\t\tdepth: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\t\t},\n\t\tnormal: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\t\t},\n\t\tsprite: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\t\t},\n\t\tbackground: {\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t},\n\t\t\t\tt2D: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\t\tcube: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.envmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\t\t},\n\t\tequirect: {\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\t\t},\n\t\tdistanceRGBA: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {\n\t\t\t\treferencePosition: {\n\t\t\t\t\tvalue: new Vector3()\n\t\t\t\t},\n\t\t\t\tnearDistance: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tfarDistance: {\n\t\t\t\t\tvalue: 1000\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\t},\n\t\tshadow: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {\n\t\t\t\tcolor: {\n\t\t\t\t\tvalue: new Color(0x00000)\n\t\t\t\t},\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\t\t}\n\t};\n\tShaderLib.physical = {\n\t\tuniforms: mergeUniforms([ShaderLib.standard.uniforms, {\n\t\t\tclearcoat: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatRoughness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatRoughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatNormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t},\n\t\t\tclearcoatNormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tsheen: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t},\n\t\t\ttransmission: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\ttransmissionMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\ttransmissionSamplerSize: {\n\t\t\t\tvalue: new Vector2()\n\t\t\t},\n\t\t\ttransmissionSamplerMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tthickness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tthicknessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tattenuationDistance: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tattenuationColor: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t}\n\t\t}]),\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t};\n\n\tfunction WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\n\t\tconst clearColor = new Color(0x000000);\n\t\tlet clearAlpha = 0;\n\t\tlet planeMesh;\n\t\tlet boxMesh;\n\t\tlet currentBackground = null;\n\t\tlet currentBackgroundVersion = 0;\n\t\tlet currentTonemapping = null;\n\n\t\tfunction render(renderList, scene) {\n\t\t\tlet forceClear = false;\n\t\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\t\tif (background && background.isTexture) {\n\t\t\t\tbackground = cubemaps.get(background);\n\t\t\t} // Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\n\t\t\tconst xr = renderer.xr;\n\t\t\tconst session = xr.getSession && xr.getSession();\n\n\t\t\tif (session && session.environmentBlendMode === 'additive') {\n\t\t\t\tbackground = null;\n\t\t\t}\n\n\t\t\tif (background === null) {\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t} else if (background && background.isColor) {\n\t\t\t\tsetClear(background, 1);\n\t\t\t\tforceClear = true;\n\t\t\t}\n\n\t\t\tif (renderer.autoClear || forceClear) {\n\t\t\t\trenderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\t}\n\n\t\t\tif (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {\n\t\t\t\tif (boxMesh === undefined) {\n\t\t\t\t\tboxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.cube.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('normal');\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('uv');\n\n\t\t\t\t\tboxMesh.onBeforeRender = function (renderer, scene, camera) {\n\t\t\t\t\t\tthis.matrixWorld.copyPosition(camera.matrixWorld);\n\t\t\t\t\t}; // enable code injection for non-built-in material\n\n\n\t\t\t\t\tObject.defineProperty(boxMesh.material, 'envMap', {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(boxMesh);\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n\t\t\t} else if (background && background.isTexture) {\n\t\t\t\tif (planeMesh === undefined) {\n\t\t\t\t\tplaneMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.background.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n\t\t\t\t\tObject.defineProperty(planeMesh.material, 'map', {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(planeMesh);\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif (background.matrixAutoUpdate === true) {\n\t\t\t\t\tbackground.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction setClear(color, alpha) {\n\t\t\tstate.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n\t\t}\n\n\t\treturn {\n\t\t\tgetClearColor: function () {\n\t\t\t\treturn clearColor;\n\t\t\t},\n\t\t\tsetClearColor: function (color, alpha = 1) {\n\t\t\t\tclearColor.set(color);\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\t\t\t\treturn clearAlpha;\n\t\t\t},\n\t\t\tsetClearAlpha: function (alpha) {\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\trender: render\n\t\t};\n\t}\n\n\tfunction WebGLBindingStates(gl, extensions, attributes, capabilities) {\n\t\tconst maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\t\tconst extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');\n\t\tconst vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\t\tconst bindingStates = {};\n\t\tconst defaultState = createBindingState(null);\n\t\tlet currentState = defaultState;\n\n\t\tfunction setup(object, material, program, geometry, index) {\n\t\t\tlet updateBuffers = false;\n\n\t\t\tif (vaoAvailable) {\n\t\t\t\tconst state = getBindingState(geometry, program, material);\n\n\t\t\t\tif (currentState !== state) {\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject(currentState.object);\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate(geometry, index);\n\t\t\t\tif (updateBuffers) saveCache(geometry, index);\n\t\t\t} else {\n\t\t\t\tconst wireframe = material.wireframe === true;\n\n\t\t\t\tif (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\t\t\t\t\tupdateBuffers = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh === true) {\n\t\t\t\tupdateBuffers = true;\n\t\t\t}\n\n\t\t\tif (index !== null) {\n\t\t\t\tattributes.update(index, gl.ELEMENT_ARRAY_BUFFER);\n\t\t\t}\n\n\t\t\tif (updateBuffers) {\n\t\t\t\tsetupVertexAttributes(object, material, program, geometry);\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\t\t\tif (capabilities.isWebGL2) return gl.createVertexArray();\n\t\t\treturn extension.createVertexArrayOES();\n\t\t}\n\n\t\tfunction bindVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.bindVertexArray(vao);\n\t\t\treturn extension.bindVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction deleteVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.deleteVertexArray(vao);\n\t\t\treturn extension.deleteVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction getBindingState(geometry, program, material) {\n\t\t\tconst wireframe = material.wireframe === true;\n\t\t\tlet programMap = bindingStates[geometry.id];\n\n\t\t\tif (programMap === undefined) {\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[geometry.id] = programMap;\n\t\t\t}\n\n\t\t\tlet stateMap = programMap[program.id];\n\n\t\t\tif (stateMap === undefined) {\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[program.id] = stateMap;\n\t\t\t}\n\n\t\t\tlet state = stateMap[wireframe];\n\n\t\t\tif (state === undefined) {\n\t\t\t\tstate = createBindingState(createVertexArrayObject());\n\t\t\t\tstateMap[wireframe] = state;\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\tfunction createBindingState(vao) {\n\t\t\tconst newAttributes = [];\n\t\t\tconst enabledAttributes = [];\n\t\t\tconst attributeDivisors = [];\n\n\t\t\tfor (let i = 0; i < maxVertexAttributes; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\tattributeDivisors[i] = 0;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {},\n\t\t\t\tindex: null\n\t\t\t};\n\t\t}\n\n\t\tfunction needsUpdate(geometry, index) {\n\t\t\tconst cachedAttributes = currentState.attributes;\n\t\t\tconst geometryAttributes = geometry.attributes;\n\t\t\tlet attributesNum = 0;\n\n\t\t\tfor (const key in geometryAttributes) {\n\t\t\t\tconst cachedAttribute = cachedAttributes[key];\n\t\t\t\tconst geometryAttribute = geometryAttributes[key];\n\t\t\t\tif (cachedAttribute === undefined) return true;\n\t\t\t\tif (cachedAttribute.attribute !== geometryAttribute) return true;\n\t\t\t\tif (cachedAttribute.data !== geometryAttribute.data) return true;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tif (currentState.attributesNum !== attributesNum) return true;\n\t\t\tif (currentState.index !== index) return true;\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction saveCache(geometry, index) {\n\t\t\tconst cache = {};\n\t\t\tconst attributes = geometry.attributes;\n\t\t\tlet attributesNum = 0;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tconst data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif (attribute.data) {\n\t\t\t\t\tdata.data = attribute.data;\n\t\t\t\t}\n\n\t\t\t\tcache[key] = data;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\t\t\tcurrentState.attributesNum = attributesNum;\n\t\t\tcurrentState.index = index;\n\t\t}\n\n\t\tfunction initAttributes() {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\n\t\t\tfor (let i = 0, il = newAttributes.length; i < il; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\tfunction enableAttribute(attribute) {\n\t\t\tenableAttributeAndDivisor(attribute, 0);\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor(attribute, meshPerAttribute) {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\t\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\t\tconst attributeDivisors = currentState.attributeDivisors;\n\t\t\tnewAttributes[attribute] = 1;\n\n\t\t\tif (enabledAttributes[attribute] === 0) {\n\t\t\t\tgl.enableVertexAttribArray(attribute);\n\t\t\t\tenabledAttributes[attribute] = 1;\n\t\t\t}\n\n\t\t\tif (attributeDivisors[attribute] !== meshPerAttribute) {\n\t\t\t\tconst extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\n\t\t\t\textension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);\n\t\t\t\tattributeDivisors[attribute] = meshPerAttribute;\n\t\t\t}\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\t\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor (let i = 0, il = enabledAttributes.length; i < il; i++) {\n\t\t\t\tif (enabledAttributes[i] !== newAttributes[i]) {\n\t\t\t\t\tgl.disableVertexAttribArray(i);\n\t\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction vertexAttribPointer(index, size, type, normalized, stride, offset) {\n\t\t\tif (capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT)) {\n\t\t\t\tgl.vertexAttribIPointer(index, size, type, stride, offset);\n\t\t\t} else {\n\t\t\t\tgl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\t}\n\t\t}\n\n\t\tfunction setupVertexAttributes(object, material, program, geometry) {\n\t\t\tif (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {\n\t\t\t\tif (extensions.get('ANGLE_instanced_arrays') === null) return;\n\t\t\t}\n\n\t\t\tinitAttributes();\n\t\t\tconst geometryAttributes = geometry.attributes;\n\t\t\tconst programAttributes = program.getAttributes();\n\t\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor (const name in programAttributes) {\n\t\t\t\tconst programAttribute = programAttributes[name];\n\n\t\t\t\tif (programAttribute >= 0) {\n\t\t\t\t\tconst geometryAttribute = geometryAttributes[name];\n\n\t\t\t\t\tif (geometryAttribute !== undefined) {\n\t\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\t\t\t\t\t\tconst attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif (geometryAttribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif (data && data.isInstancedInterleavedBuffer) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, data.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (geometryAttribute.isInstancedBufferAttribute) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, 0, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (name === 'instanceMatrix') {\n\t\t\t\t\t\tconst attribute = attributes.get(object.instanceMatrix); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 0, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 1, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 2, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 3, 1);\n\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 0, 4, type, false, 64, 0);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 1, 4, type, false, 64, 16);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 2, 4, type, false, 64, 32);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 3, 4, type, false, 64, 48);\n\t\t\t\t\t} else if (name === 'instanceColor') {\n\t\t\t\t\t\tconst attribute = attributes.get(object.instanceColor); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, 1);\n\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute, 3, type, false, 12, 0);\n\t\t\t\t\t} else if (materialDefaultAttributeValues !== undefined) {\n\t\t\t\t\t\tconst value = materialDefaultAttributeValues[name];\n\n\t\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\t\tswitch (value.length) {\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv(programAttribute, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\treset();\n\n\t\t\tfor (const geometryId in bindingStates) {\n\t\t\t\tconst programMap = bindingStates[geometryId];\n\n\t\t\t\tfor (const programId in programMap) {\n\t\t\t\t\tconst stateMap = programMap[programId];\n\n\t\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[programId];\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[geometryId];\n\t\t\t}\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry(geometry) {\n\t\t\tif (bindingStates[geometry.id] === undefined) return;\n\t\t\tconst programMap = bindingStates[geometry.id];\n\n\t\t\tfor (const programId in programMap) {\n\t\t\t\tconst stateMap = programMap[programId];\n\n\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[programId];\n\t\t\t}\n\n\t\t\tdelete bindingStates[geometry.id];\n\t\t}\n\n\t\tfunction releaseStatesOfProgram(program) {\n\t\t\tfor (const geometryId in bindingStates) {\n\t\t\t\tconst programMap = bindingStates[geometryId];\n\t\t\t\tif (programMap[program.id] === undefined) continue;\n\t\t\t\tconst stateMap = programMap[program.id];\n\n\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[program.id];\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\tresetDefaultState();\n\t\t\tif (currentState === defaultState) return;\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject(currentState.object);\n\t\t} // for backward-compatilibity\n\n\n\t\tfunction resetDefaultState() {\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\t\t};\n\t}\n\n\tfunction WebGLBufferRenderer(gl, extensions, info, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tlet mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawArrays(mode, start, count);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tlet extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, start, count, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLCapabilities(gl, extensions, parameters) {\n\t\tlet maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\t\t\tif (maxAnisotropy !== undefined) return maxAnisotropy;\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tconst extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tmaxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n\t\t\t} else {\n\t\t\t\tmaxAnisotropy = 0;\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\t\t}\n\n\t\tfunction getMaxPrecision(precision) {\n\t\t\tif (precision === 'highp') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n\t\t\t\t\treturn 'highp';\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\t\t\t}\n\n\t\t\tif (precision === 'mediump') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n\t\t\t\t\treturn 'mediump';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\t\t}\n\t\t/* eslint-disable no-undef */\n\n\n\t\tconst isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;\n\t\t/* eslint-enable no-undef */\n\n\t\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tconst maxPrecision = getMaxPrecision(precision);\n\n\t\tif (maxPrecision !== precision) {\n\t\t\tconsole.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n\t\t\tprecision = maxPrecision;\n\t\t}\n\n\t\tconst drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');\n\t\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\t\tconst maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\t\tconst maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n\t\tconst maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\t\tconst maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n\t\tconst maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\t\tconst maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n\t\tconst maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n\t\tconst maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n\t\tconst vertexTextures = maxVertexTextures > 0;\n\t\tconst floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');\n\t\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\tconst maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;\n\t\treturn {\n\t\t\tisWebGL2: isWebGL2,\n\t\t\tdrawBuffers: drawBuffers,\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\t\t\tmaxSamples: maxSamples\n\t\t};\n\t}\n\n\tfunction WebGLClipping(properties) {\n\t\tconst scope = this;\n\t\tlet globalState = null,\n\t\t\t\tnumGlobalPlanes = 0,\n\t\t\t\tlocalClippingEnabled = false,\n\t\t\t\trenderingShadows = false;\n\t\tconst plane = new Plane(),\n\t\t\t\t\tviewNormalMatrix = new Matrix3(),\n\t\t\t\t\tuniform = {\n\t\t\tvalue: null,\n\t\t\tneedsUpdate: false\n\t\t};\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function (planes, enableLocalClipping, camera) {\n\t\t\tconst enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 || localClippingEnabled;\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\t\t\tglobalState = projectPlanes(planes, camera, 0);\n\t\t\tnumGlobalPlanes = planes.length;\n\t\t\treturn enabled;\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes(null);\n\t\t};\n\n\t\tthis.endShadows = function () {\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\t\t};\n\n\t\tthis.setState = function (material, camera, useCache) {\n\t\t\tconst planes = material.clippingPlanes,\n\t\t\t\t\t\tclipIntersection = material.clipIntersection,\n\t\t\t\t\t\tclipShadows = material.clipShadows;\n\t\t\tconst materialProperties = properties.get(material);\n\n\t\t\tif (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n\t\t\t\t// there's no local clipping\n\t\t\t\tif (renderingShadows) {\n\t\t\t\t\t// there's no global clipping\n\t\t\t\t\tprojectPlanes(null);\n\t\t\t\t} else {\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\t\t\tlGlobal = nGlobal * 4;\n\t\t\t\tlet dstArray = materialProperties.clippingState || null;\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes(planes, camera, lGlobal, useCache);\n\n\t\t\t\tfor (let i = 0; i !== lGlobal; ++i) {\n\t\t\t\t\tdstArray[i] = globalState[i];\n\t\t\t\t}\n\n\t\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\t\t\t}\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\t\t\tif (uniform.value !== globalState) {\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t}\n\n\t\tfunction projectPlanes(planes, camera, dstOffset, skipTransform) {\n\t\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\t\tlet dstArray = null;\n\n\t\t\tif (nPlanes !== 0) {\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif (skipTransform !== true || dstArray === null) {\n\t\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix(viewMatrix);\n\n\t\t\t\t\tif (dstArray === null || dstArray.length < flatSize) {\n\t\t\t\t\t\tdstArray = new Float32Array(flatSize);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n\t\t\t\t\t\tplane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n\t\t\t\t\t\tplane.normal.toArray(dstArray, i4);\n\t\t\t\t\t\tdstArray[i4 + 3] = plane.constant;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t\treturn dstArray;\n\t\t}\n\t}\n\n\tfunction WebGLCubeMaps(renderer) {\n\t\tlet cubemaps = new WeakMap();\n\n\t\tfunction mapTextureMapping(texture, mapping) {\n\t\t\tif (mapping === EquirectangularReflectionMapping) {\n\t\t\t\ttexture.mapping = CubeReflectionMapping;\n\t\t\t} else if (mapping === EquirectangularRefractionMapping) {\n\t\t\t\ttexture.mapping = CubeRefractionMapping;\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction get(texture) {\n\t\t\tif (texture && texture.isTexture) {\n\t\t\t\tconst mapping = texture.mapping;\n\n\t\t\t\tif (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n\t\t\t\t\tif (cubemaps.has(texture)) {\n\t\t\t\t\t\tconst cubemap = cubemaps.get(texture).texture;\n\t\t\t\t\t\treturn mapTextureMapping(cubemap, texture.mapping);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif (image && image.height > 0) {\n\t\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget(image.height / 2);\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture(renderer, texture);\n\t\t\t\t\t\t\tcubemaps.set(texture, renderTarget);\n\t\t\t\t\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\t\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\t\t\t\treturn mapTextureMapping(renderTarget.texture, texture.mapping);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tconst cubemap = cubemaps.get(texture);\n\n\t\t\tif (cubemap !== undefined) {\n\t\t\t\tcubemaps.delete(texture);\n\t\t\t\tcubemap.dispose();\n\t\t\t}\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tcubemaps = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction WebGLExtensions(gl) {\n\t\tconst extensions = {};\n\n\t\tfunction getExtension(name) {\n\t\t\tif (extensions[name] !== undefined) {\n\t\t\t\treturn extensions[name];\n\t\t\t}\n\n\t\t\tlet extension;\n\n\t\t\tswitch (name) {\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension(name);\n\t\t\t}\n\n\t\t\textensions[name] = extension;\n\t\t\treturn extension;\n\t\t}\n\n\t\treturn {\n\t\t\thas: function (name) {\n\t\t\t\treturn getExtension(name) !== null;\n\t\t\t},\n\t\t\tinit: function (capabilities) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\tgetExtension('EXT_color_buffer_float');\n\t\t\t\t} else {\n\t\t\t\t\tgetExtension('WEBGL_depth_texture');\n\t\t\t\t\tgetExtension('OES_texture_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float_linear');\n\t\t\t\t\tgetExtension('OES_standard_derivatives');\n\t\t\t\t\tgetExtension('OES_element_index_uint');\n\t\t\t\t\tgetExtension('OES_vertex_array_object');\n\t\t\t\t\tgetExtension('ANGLE_instanced_arrays');\n\t\t\t\t}\n\n\t\t\t\tgetExtension('OES_texture_float_linear');\n\t\t\t\tgetExtension('EXT_color_buffer_half_float');\n\t\t\t},\n\t\t\tget: function (name) {\n\t\t\t\tconst extension = getExtension(name);\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n\t\t\t\t}\n\n\t\t\t\treturn extension;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLGeometries(gl, attributes, info, bindingStates) {\n\t\tconst geometries = {};\n\t\tconst wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose(event) {\n\t\t\tconst geometry = event.target;\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\tattributes.remove(geometry.index);\n\t\t\t}\n\n\t\t\tfor (const name in geometry.attributes) {\n\t\t\t\tattributes.remove(geometry.attributes[name]);\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener('dispose', onGeometryDispose);\n\t\t\tdelete geometries[geometry.id];\n\t\t\tconst attribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (attribute) {\n\t\t\t\tattributes.remove(attribute);\n\t\t\t\twireframeAttributes.delete(geometry);\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry(geometry);\n\n\t\t\tif (geometry.isInstancedBufferGeometry === true) {\n\t\t\t\tdelete geometry._maxInstanceCount;\n\t\t\t} //\n\n\n\t\t\tinfo.memory.geometries--;\n\t\t}\n\n\t\tfunction get(object, geometry) {\n\t\t\tif (geometries[geometry.id] === true) return geometry;\n\t\t\tgeometry.addEventListener('dispose', onGeometryDispose);\n\t\t\tgeometries[geometry.id] = true;\n\t\t\tinfo.memory.geometries++;\n\t\t\treturn geometry;\n\t\t}\n\n\t\tfunction update(geometry) {\n\t\t\tconst geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor (const name in geometryAttributes) {\n\t\t\t\tattributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);\n\t\t\t} // morph targets\n\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst array = morphAttributes[name];\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tattributes.update(array[i], gl.ARRAY_BUFFER);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateWireframeAttribute(geometry) {\n\t\t\tconst indices = [];\n\t\t\tconst geometryIndex = geometry.index;\n\t\t\tconst geometryPosition = geometry.attributes.position;\n\t\t\tlet version = 0;\n\n\t\t\tif (geometryIndex !== null) {\n\t\t\t\tconst array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\t\tconst a = array[i + 0];\n\t\t\t\t\tconst b = array[i + 1];\n\t\t\t\t\tconst c = array[i + 2];\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {\n\t\t\t\t\tconst a = i + 0;\n\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\tconst c = i + 2;\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n\t\t\tattribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\n\t\t\t//\n\n\t\t\tconst previousAttribute = wireframeAttributes.get(geometry);\n\t\t\tif (previousAttribute) attributes.remove(previousAttribute); //\n\n\t\t\twireframeAttributes.set(geometry, attribute);\n\t\t}\n\n\t\tfunction getWireframeAttribute(geometry) {\n\t\t\tconst currentAttribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (currentAttribute) {\n\t\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\t\tif (geometryIndex !== null) {\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\t\t\t\t\tif (currentAttribute.version < geometryIndex.version) {\n\t\t\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get(geometry);\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tupdate: update,\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\t\t};\n\t}\n\n\tfunction WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tlet mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tlet type, bytesPerElement;\n\n\t\tfunction setIndex(value) {\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawElements(mode, count, type, start * bytesPerElement);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tlet extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, count, type, start * bytesPerElement, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLInfo(gl) {\n\t\tconst memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\t\tconst render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update(count, mode, instanceCount) {\n\t\t\trender.calls++;\n\n\t\t\tswitch (mode) {\n\t\t\t\tcase gl.TRIANGLES:\n\t\t\t\t\trender.triangles += instanceCount * (count / 3);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINES:\n\t\t\t\t\trender.lines += instanceCount * (count / 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_STRIP:\n\t\t\t\t\trender.lines += instanceCount * (count - 1);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_LOOP:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.POINTS:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error('THREE.WebGLInfo: Unknown draw mode:', mode);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\trender.frame++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction numericalSort(a, b) {\n\t\treturn a[0] - b[0];\n\t}\n\n\tfunction absNumericalSort(a, b) {\n\t\treturn Math.abs(b[1]) - Math.abs(a[1]);\n\t}\n\n\tfunction WebGLMorphtargets(gl) {\n\t\tconst influencesList = {};\n\t\tconst morphInfluences = new Float32Array(8);\n\t\tconst workInfluences = [];\n\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tworkInfluences[i] = [i, 0];\n\t\t}\n\n\t\tfunction update(object, geometry, material, program) {\n\t\t\tconst objectInfluences = object.morphTargetInfluences; // When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tconst length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\t\t\tlet influences = influencesList[geometry.id];\n\n\t\t\tif (influences === undefined) {\n\t\t\t\t// initialise list\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tinfluences[i] = [i, 0];\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[geometry.id] = influences;\n\t\t\t} // Collect influences\n\n\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tconst influence = influences[i];\n\t\t\t\tinfluence[0] = i;\n\t\t\t\tinfluence[1] = objectInfluences[i];\n\t\t\t}\n\n\t\t\tinfluences.sort(absNumericalSort);\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tif (i < length && influences[i][1]) {\n\t\t\t\t\tworkInfluences[i][0] = influences[i][0];\n\t\t\t\t\tworkInfluences[i][1] = influences[i][1];\n\t\t\t\t} else {\n\t\t\t\t\tworkInfluences[i][0] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[i][1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tworkInfluences.sort(numericalSort);\n\t\t\tconst morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tconst morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tconst influence = workInfluences[i];\n\t\t\t\tconst index = influence[0];\n\t\t\t\tconst value = influence[1];\n\n\t\t\t\tif (index !== Number.MAX_SAFE_INTEGER && value) {\n\t\t\t\t\tif (morphTargets && geometry.getAttribute('morphTarget' + i) !== morphTargets[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphTarget' + i, morphTargets[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.getAttribute('morphNormal' + i) !== morphNormals[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphNormal' + i, morphNormals[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[i] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t} else {\n\t\t\t\t\tif (morphTargets && geometry.hasAttribute('morphTarget' + i) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphTarget' + i);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.hasAttribute('morphNormal' + i) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphNormal' + i);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[i] = 0;\n\t\t\t\t}\n\t\t\t} // GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\n\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction WebGLObjects(gl, geometries, attributes, info) {\n\t\tlet updateMap = new WeakMap();\n\n\t\tfunction update(object) {\n\t\t\tconst frame = info.render.frame;\n\t\t\tconst geometry = object.geometry;\n\t\t\tconst buffergeometry = geometries.get(object, geometry); // Update once per frame\n\n\t\t\tif (updateMap.get(buffergeometry) !== frame) {\n\t\t\t\tgeometries.update(buffergeometry);\n\t\t\t\tupdateMap.set(buffergeometry, frame);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\tif (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {\n\t\t\t\t\tobject.addEventListener('dispose', onInstancedMeshDispose);\n\t\t\t\t}\n\n\t\t\t\tattributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);\n\n\t\t\t\tif (object.instanceColor !== null) {\n\t\t\t\t\tattributes.update(object.instanceColor, gl.ARRAY_BUFFER);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tupdateMap = new WeakMap();\n\t\t}\n\n\t\tfunction onInstancedMeshDispose(event) {\n\t\t\tconst instancedMesh = event.target;\n\t\t\tinstancedMesh.removeEventListener('dispose', onInstancedMeshDispose);\n\t\t\tattributes.remove(instancedMesh.instanceMatrix);\n\t\t\tif (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tclass DataTexture2DArray extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, depth = 1) {\n\t\t\tsuper(null);\n\t\t\tthis.image = {\n\t\t\t\tdata,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdepth\n\t\t\t};\n\t\t\tthis.magFilter = NearestFilter;\n\t\t\tthis.minFilter = NearestFilter;\n\t\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\tclass DataTexture3D extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, depth = 1) {\n\t\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t\t// Users can still set in DataTexture3D directly.\n\t\t\t//\n\t\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t\t// \ttexture.anisotropy = 16;\n\t\t\t//\n\t\t\t// See #14839\n\t\t\tsuper(null);\n\t\t\tthis.image = {\n\t\t\t\tdata,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdepth\n\t\t\t};\n\t\t\tthis.magFilter = NearestFilter;\n\t\t\tthis.minFilter = NearestFilter;\n\t\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *\t\tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with\tname 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\tconst emptyTexture = new Texture();\n\tconst emptyTexture2dArray = new DataTexture2DArray();\n\tconst emptyTexture3d = new DataTexture3D();\n\tconst emptyCubeTexture = new CubeTexture(); // --- Utilities ---\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tconst arrayCacheF32 = [];\n\tconst arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms\n\n\tconst mat4array = new Float32Array(16);\n\tconst mat3array = new Float32Array(9);\n\tconst mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices\n\n\tfunction flatten(array, nBlocks, blockSize) {\n\t\tconst firstElem = array[0];\n\t\tif (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tconst n = nBlocks * blockSize;\n\t\tlet r = arrayCacheF32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Float32Array(n);\n\t\t\tarrayCacheF32[n] = r;\n\t\t}\n\n\t\tif (nBlocks !== 0) {\n\t\t\tfirstElem.toArray(r, 0);\n\n\t\t\tfor (let i = 1, offset = 0; i !== nBlocks; ++i) {\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[i].toArray(r, offset);\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tfunction arraysEqual(a, b) {\n\t\tif (a.length !== b.length) return false;\n\n\t\tfor (let i = 0, l = a.length; i < l; i++) {\n\t\t\tif (a[i] !== b[i]) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction copyArray(a, b) {\n\t\tfor (let i = 0, l = b.length; i < l; i++) {\n\t\t\ta[i] = b[i];\n\t\t}\n\t} // Texture unit allocation\n\n\n\tfunction allocTexUnits(textures, n) {\n\t\tlet r = arrayCacheI32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Int32Array(n);\n\t\t\tarrayCacheI32[n] = r;\n\t\t}\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\tr[i] = textures.allocateTextureUnit();\n\t\t}\n\n\t\treturn r;\n\t} // --- Setters ---\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\t// Single scalar\n\n\n\tfunction setValueV1f(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1f(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single float vector (from flat array or THREE.VectorN)\n\n\n\tfunction setValueV2f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y) {\n\t\t\t\tgl.uniform2f(this.addr, v.x, v.y);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform2fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV3f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n\t\t\t\tgl.uniform3f(this.addr, v.x, v.y, v.z);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t}\n\t\t} else if (v.r !== undefined) {\n\t\t\tif (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n\t\t\t\tgl.uniform3f(this.addr, v.r, v.g, v.b);\n\t\t\t\tcache[0] = v.r;\n\t\t\t\tcache[1] = v.g;\n\t\t\t\tcache[2] = v.b;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform3fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV4f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n\t\t\t\tgl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t\tcache[3] = v.w;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform4fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t} // Single matrix (from flat array or THREE.MatrixN)\n\n\n\tfunction setValueM2(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix2fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat2array.set(elements);\n\t\t\tgl.uniformMatrix2fv(this.addr, false, mat2array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM3(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix3fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat3array.set(elements);\n\t\t\tgl.uniformMatrix3fv(this.addr, false, mat3array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM4(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix4fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat4array.set(elements);\n\t\t\tgl.uniformMatrix4fv(this.addr, false, mat4array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t} // Single integer / boolean\n\n\n\tfunction setValueV1i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1i(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single integer / boolean vector (from flat array)\n\n\n\tfunction setValueV2i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // Single unsigned integer\n\n\n\tfunction setValueV1ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1ui(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single unsigned integer vector (from flat array)\n\n\n\tfunction setValueV2ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // Single texture (2D / Cube)\n\n\n\tfunction setValueT1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTexture2D(v || emptyTexture, unit);\n\t}\n\n\tfunction setValueT3D1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture3D(v || emptyTexture3d, unit);\n\t}\n\n\tfunction setValueT6(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTextureCube(v || emptyCubeTexture, unit);\n\t}\n\n\tfunction setValueT2DArray1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture2DArray(v || emptyTexture2dArray, unit);\n\t} // Helper to pick the right setter for the singular case\n\n\n\tfunction getSingularSetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1f;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2f;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3f;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4f;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1i;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2i;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3i;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4i;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1ui;\n\t\t\t// UINT\n\n\t\t\tcase 0x8dc6:\n\t\t\t\treturn setValueV2ui;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8dc7:\n\t\t\t\treturn setValueV3ui;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8dc8:\n\t\t\t\treturn setValueV4ui;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\n\t\t\tcase 0x8dd3:\n\t\t\t\t// UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dc4:\n\t\t\t\t// SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\t\t}\n\t} // Array of scalars\n\n\n\tfunction setValueV1fArray(gl, v) {\n\t\tgl.uniform1fv(this.addr, v);\n\t} // Array of vectors (from flat array or array of THREE.VectorN)\n\n\n\tfunction setValueV2fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 2);\n\t\tgl.uniform2fv(this.addr, data);\n\t}\n\n\tfunction setValueV3fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 3);\n\t\tgl.uniform3fv(this.addr, data);\n\t}\n\n\tfunction setValueV4fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 4);\n\t\tgl.uniform4fv(this.addr, data);\n\t} // Array of matrices (from flat array or array of THREE.MatrixN)\n\n\n\tfunction setValueM2Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 4);\n\t\tgl.uniformMatrix2fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM3Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 9);\n\t\tgl.uniformMatrix3fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM4Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 16);\n\t\tgl.uniformMatrix4fv(this.addr, false, data);\n\t} // Array of integer / boolean\n\n\n\tfunction setValueV1iArray(gl, v) {\n\t\tgl.uniform1iv(this.addr, v);\n\t} // Array of integer / boolean vectors (from flat array)\n\n\n\tfunction setValueV2iArray(gl, v) {\n\t\tgl.uniform2iv(this.addr, v);\n\t}\n\n\tfunction setValueV3iArray(gl, v) {\n\t\tgl.uniform3iv(this.addr, v);\n\t}\n\n\tfunction setValueV4iArray(gl, v) {\n\t\tgl.uniform4iv(this.addr, v);\n\t} // Array of unsigned integer\n\n\n\tfunction setValueV1uiArray(gl, v) {\n\t\tgl.uniform1uiv(this.addr, v);\n\t} // Array of unsigned integer vectors (from flat array)\n\n\n\tfunction setValueV2uiArray(gl, v) {\n\t\tgl.uniform2uiv(this.addr, v);\n\t}\n\n\tfunction setValueV3uiArray(gl, v) {\n\t\tgl.uniform3uiv(this.addr, v);\n\t}\n\n\tfunction setValueV4uiArray(gl, v) {\n\t\tgl.uniform4uiv(this.addr, v);\n\t} // Array of textures (2D / Cube)\n\n\n\tfunction setValueT1Array(gl, v, textures) {\n\t\tconst n = v.length;\n\t\tconst units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTexture2D(v[i] || emptyTexture, units[i]);\n\t\t}\n\t}\n\n\tfunction setValueT6Array(gl, v, textures) {\n\t\tconst n = v.length;\n\t\tconst units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);\n\t\t}\n\t} // Helper to pick the right setter for a pure (bottom-level) array\n\n\n\tfunction getPureArraySetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1fArray;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2fArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3fArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4fArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2Array;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3Array;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4Array;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1iArray;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2iArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3iArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4iArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1uiArray;\n\t\t\t// UINT\n\n\t\t\tcase 0x8dc6:\n\t\t\t\treturn setValueV2uiArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8dc7:\n\t\t\t\treturn setValueV3uiArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8dc8:\n\t\t\t\treturn setValueV4uiArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\t\t}\n\t} // --- Uniform Classes ---\n\n\n\tfunction SingleUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tfunction PureArrayUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function (data) {\n\t\tconst cache = this.cache;\n\n\t\tif (data instanceof Float32Array && cache.length !== data.length) {\n\t\t\tthis.cache = new Float32Array(data.length);\n\t\t}\n\n\t\tcopyArray(cache, data);\n\t};\n\n\tfunction StructuredUniform(id) {\n\t\tthis.id = id;\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t}\n\n\tStructuredUniform.prototype.setValue = function (gl, value, textures) {\n\t\tconst seq = this.seq;\n\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i];\n\t\t\tu.setValue(gl, value[u.id], textures);\n\t\t}\n\t}; // --- Top-level ---\n\t// Parser - builds up the property tree from the path strings\n\n\n\tconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g; // extracts\n\t// \t- the identifier (member name or array index)\n\t//\t- followed by an optional right bracket (found when array index)\n\t//\t- followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform(container, uniformObject) {\n\t\tcontainer.seq.push(uniformObject);\n\t\tcontainer.map[uniformObject.id] = uniformObject;\n\t}\n\n\tfunction parseUniform(activeInfo, addr, container) {\n\t\tconst path = activeInfo.name,\n\t\t\t\t\tpathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile (true) {\n\t\t\tconst match = RePathPart.exec(path),\n\t\t\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\t\t\tlet id = match[1];\n\t\t\tconst idIsIndex = match[2] === ']',\n\t\t\t\t\t\tsubscript = match[3];\n\t\t\tif (idIsIndex) id = id | 0; // convert to integer\n\n\t\t\tif (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\t\t\taddUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\t\t\t\tconst map = container.map;\n\t\t\t\tlet next = map[id];\n\n\t\t\t\tif (next === undefined) {\n\t\t\t\t\tnext = new StructuredUniform(id);\n\t\t\t\t\taddUniform(container, next);\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\t\t\t}\n\t\t}\n\t} // Root Container\n\n\n\tfunction WebGLUniforms(gl, program) {\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t\tconst n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n\t\tfor (let i = 0; i < n; ++i) {\n\t\t\tconst info = gl.getActiveUniform(program, i),\n\t\t\t\t\t\taddr = gl.getUniformLocation(program, info.name);\n\t\t\tparseUniform(info, addr, this);\n\t\t}\n\t}\n\n\tWebGLUniforms.prototype.setValue = function (gl, name, value, textures) {\n\t\tconst u = this.map[name];\n\t\tif (u !== undefined) u.setValue(gl, value, textures);\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function (gl, object, name) {\n\t\tconst v = object[name];\n\t\tif (v !== undefined) this.setValue(gl, name, v);\n\t}; // Static interface\n\n\n\tWebGLUniforms.upload = function (gl, seq, values, textures) {\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i],\n\t\t\t\t\t\tv = values[u.id];\n\n\t\t\tif (v.needsUpdate !== false) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue(gl, v.value, textures);\n\t\t\t}\n\t\t}\n\t};\n\n\tWebGLUniforms.seqWithValue = function (seq, values) {\n\t\tconst r = [];\n\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i];\n\t\t\tif (u.id in values) r.push(u);\n\t\t}\n\n\t\treturn r;\n\t};\n\n\tfunction WebGLShader(gl, type, string) {\n\t\tconst shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, string);\n\t\tgl.compileShader(shader);\n\t\treturn shader;\n\t}\n\n\tlet programIdCount = 0;\n\n\tfunction addLineNumbers(string) {\n\t\tconst lines = string.split('\\n');\n\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tlines[i] = i + 1 + ': ' + lines[i];\n\t\t}\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tfunction getEncodingComponents(encoding) {\n\t\tswitch (encoding) {\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn ['Linear', '( value )'];\n\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn ['sRGB', '( value )'];\n\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn ['RGBE', '( value )'];\n\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn ['RGBM', '( value, 7.0 )'];\n\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn ['RGBM', '( value, 16.0 )'];\n\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn ['RGBD', '( value, 256.0 )'];\n\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn ['LogLuv', '( value )'];\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);\n\t\t\t\treturn ['Linear', '( value )'];\n\t\t}\n\t}\n\n\tfunction getShaderErrors(gl, shader, type) {\n\t\tconst status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\t\tconst log = gl.getShaderInfoLog(shader).trim();\n\t\tif (status && log === '') return ''; // --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tconst source = gl.getShaderSource(shader);\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers(source);\n\t}\n\n\tfunction getTexelDecodingFunction(functionName, encoding) {\n\t\tconst components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';\n\t}\n\n\tfunction getTexelEncodingFunction(functionName, encoding) {\n\t\tconst components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';\n\t}\n\n\tfunction getToneMappingFunction(functionName, toneMapping) {\n\t\tlet toneMappingName;\n\n\t\tswitch (toneMapping) {\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\t}\n\n\tfunction generateExtensions(parameters) {\n\t\tconst chunks = [parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission > 0.0) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n\t\treturn chunks.filter(filterEmptyLine).join('\\n');\n\t}\n\n\tfunction generateDefines(defines) {\n\t\tconst chunks = [];\n\n\t\tfor (const name in defines) {\n\t\t\tconst value = defines[name];\n\t\t\tif (value === false) continue;\n\t\t\tchunks.push('#define ' + name + ' ' + value);\n\t\t}\n\n\t\treturn chunks.join('\\n');\n\t}\n\n\tfunction fetchAttributeLocations(gl, program) {\n\t\tconst attributes = {};\n\t\tconst n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst info = gl.getActiveAttrib(program, i);\n\t\t\tconst name = info.name; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[name] = gl.getAttribLocation(program, name);\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tfunction filterEmptyLine(string) {\n\t\treturn string !== '';\n\t}\n\n\tfunction replaceLightNums(string, parameters) {\n\t\treturn string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\n\t}\n\n\tfunction replaceClippingPlaneNums(string, parameters) {\n\t\treturn string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);\n\t} // Resolve Includes\n\n\n\tconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes(string) {\n\t\treturn string.replace(includePattern, includeReplacer);\n\t}\n\n\tfunction includeReplacer(match, include) {\n\t\tconst string = ShaderChunk[include];\n\n\t\tif (string === undefined) {\n\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t\t}\n\n\t\treturn resolveIncludes(string);\n\t} // Unroll Loops\n\n\n\tconst deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops(string) {\n\t\treturn string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);\n\t}\n\n\tfunction deprecatedLoopReplacer(match, start, end, snippet) {\n\t\tconsole.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');\n\t\treturn loopReplacer(match, start, end, snippet);\n\t}\n\n\tfunction loopReplacer(match, start, end, snippet) {\n\t\tlet string = '';\n\n\t\tfor (let i = parseInt(start); i < parseInt(end); i++) {\n\t\t\tstring += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\n\t\t}\n\n\t\treturn string;\n\t} //\n\n\n\tfunction generatePrecision(parameters) {\n\t\tlet precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\t\tif (parameters.precision === 'highp') {\n\t\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\t\t} else if (parameters.precision === 'mediump') {\n\t\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\t\t} else if (parameters.precision === 'lowp') {\n\t\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\t\t}\n\n\t\treturn precisionstring;\n\t}\n\n\tfunction generateShadowMapTypeDefine(parameters) {\n\t\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif (parameters.shadowMapType === PCFShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\t} else if (parameters.shadowMapType === PCFSoftShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\t} else if (parameters.shadowMapType === VSMShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapTypeDefine(parameters) {\n\t\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapModeDefine(parameters) {\n\t\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapModeDefine;\n\t}\n\n\tfunction generateEnvMapBlendingDefine(parameters) {\n\t\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.combine) {\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\t}\n\n\tfunction WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\n\t\tconst gl = renderer.getContext();\n\t\tconst defines = parameters.defines;\n\t\tlet vertexShader = parameters.vertexShader;\n\t\tlet fragmentShader = parameters.fragmentShader;\n\t\tconst shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\n\t\tconst envMapTypeDefine = generateEnvMapTypeDefine(parameters);\n\t\tconst envMapModeDefine = generateEnvMapModeDefine(parameters);\n\t\tconst envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\n\t\tconst gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n\t\tconst customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);\n\t\tconst customDefines = generateDefines(defines);\n\t\tconst program = gl.createProgram();\n\t\tlet prefixVertex, prefixFragment;\n\t\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\t\tif (parameters.isRawShaderMaterial) {\n\t\t\tprefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixVertex.length > 0) {\n\t\t\t\tprefixVertex += '\\n';\n\t\t\t}\n\n\t\t\tprefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixFragment.length > 0) {\n\t\t\t\tprefixFragment += '\\n';\n\t\t\t}\n\t\t} else {\n\t\t\tprefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '\tattribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '\tattribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '\tattribute vec4 tangent;', '#endif', '#if defined( USE_COLOR_ALPHA )', '\tattribute vec4 color;', '#elif defined( USE_COLOR )', '\tattribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t\tprefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + (parameters.alphaTest % 1 ? '' : '.0') : '', // add '.0' if integer\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\tparameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '', getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t}\n\n\t\tvertexShader = resolveIncludes(vertexShader);\n\t\tvertexShader = replaceLightNums(vertexShader, parameters);\n\t\tvertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n\t\tfragmentShader = resolveIncludes(fragmentShader);\n\t\tfragmentShader = replaceLightNums(fragmentShader, parameters);\n\t\tfragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n\t\tvertexShader = unrollLoops(vertexShader);\n\t\tfragmentShader = unrollLoops(fragmentShader);\n\n\t\tif (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {\n\t\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\t\t\tversionString = '#version 300 es\\n';\n\t\t\tprefixVertex = ['#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') + '\\n' + prefixVertex;\n\t\t\tprefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\\n') + '\\n' + prefixFragment;\n\t\t}\n\n\t\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\t\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tconst glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);\n\t\tconst glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);\n\t\tgl.attachShader(program, glVertexShader);\n\t\tgl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n\t\tif (parameters.index0AttributeName !== undefined) {\n\t\t\tgl.bindAttribLocation(program, 0, parameters.index0AttributeName);\n\t\t} else if (parameters.morphTargets === true) {\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation(program, 0, 'position');\n\t\t}\n\n\t\tgl.linkProgram(program); // check for link errors\n\n\t\tif (renderer.debug.checkShaderErrors) {\n\t\t\tconst programLog = gl.getProgramInfoLog(program).trim();\n\t\t\tconst vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n\t\t\tconst fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n\t\t\tlet runnable = true;\n\t\t\tlet haveDiagnostics = true;\n\n\t\t\tif (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n\t\t\t\trunnable = false;\n\t\t\t\tconst vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\n\t\t\t\tconst fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\n\t\t\t\tconsole.error('THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors);\n\t\t\t} else if (programLog !== '') {\n\t\t\t\tconsole.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);\n\t\t\t} else if (vertexLog === '' || fragmentLog === '') {\n\t\t\t\thaveDiagnostics = false;\n\t\t\t}\n\n\t\t\tif (haveDiagnostics) {\n\t\t\t\tthis.diagnostics = {\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tprogramLog: programLog,\n\t\t\t\t\tvertexShader: {\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\t\t\t\t\t},\n\t\t\t\t\tfragmentShader: {\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} // Clean up\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\n\t\tgl.deleteShader(glVertexShader);\n\t\tgl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n\t\tlet cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\t\t\tif (cachedUniforms === undefined) {\n\t\t\t\tcachedUniforms = new WebGLUniforms(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\t\t}; // set up caching for attribute locations\n\n\n\t\tlet cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\t\t\tif (cachedAttributes === undefined) {\n\t\t\t\tcachedAttributes = fetchAttributeLocations(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\t\t}; // free resource\n\n\n\t\tthis.destroy = function () {\n\t\t\tbindingStates.releaseStatesOfProgram(this);\n\t\t\tgl.deleteProgram(program);\n\t\t\tthis.program = undefined;\n\t\t}; //\n\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\treturn this;\n\t}\n\n\tfunction WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {\n\t\tconst programs = [];\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tconst floatVertexTextures = capabilities.floatVertexTextures;\n\t\tconst maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tconst vertexTextures = capabilities.vertexTextures;\n\t\tlet precision = capabilities.precision;\n\t\tconst shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\t\tconst parameterNames = ['precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor', 'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV', 'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap', 'objectSpaceNormalMap', 'tangentSpaceNormalMap', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap', 'displacementMap', 'specularMap', 'roughnessMap', 'metalnessMap', 'gradientMap', 'alphaMap', 'combine', 'vertexColors', 'vertexAlphas', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2', 'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning', 'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'premultipliedAlpha', 'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights', 'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows', 'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights', 'alphaTest', 'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'sheen', 'transmission', 'transmissionMap', 'thicknessMap'];\n\n\t\tfunction getMaxBones(object) {\n\t\t\tconst skeleton = object.skeleton;\n\t\t\tconst bones = skeleton.bones;\n\n\t\t\tif (floatVertexTextures) {\n\t\t\t\treturn 1024;\n\t\t\t} else {\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//\t- leave some extra space for other uniforms\n\t\t\t\t//\t- limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//\t\t(up to 54 should be safe)\n\t\t\t\tconst nVertexUniforms = maxVertexUniforms;\n\t\t\t\tconst nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n\t\t\t\tconst maxBones = Math.min(nVertexMatrices, bones.length);\n\n\t\t\t\tif (maxBones < bones.length) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\t\t\t}\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap(map) {\n\t\t\tlet encoding;\n\n\t\t\tif (map && map.isTexture) {\n\t\t\t\tencoding = map.encoding;\n\t\t\t} else if (map && map.isWebGLRenderTarget) {\n\t\t\t\tconsole.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\tencoding = map.texture.encoding;\n\t\t\t} else {\n\t\t\t\tencoding = LinearEncoding;\n\t\t\t}\n\n\t\t\treturn encoding;\n\t\t}\n\n\t\tfunction getParameters(material, lights, shadows, scene, object) {\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst envMap = cubemaps.get(material.envMap || environment);\n\t\t\tconst shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tconst maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n\t\t\tif (material.precision !== null) {\n\t\t\t\tprecision = capabilities.getMaxPrecision(material.precision);\n\n\t\t\t\tif (precision !== material.precision) {\n\t\t\t\t\tconsole.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet vertexShader, fragmentShader;\n\n\t\t\tif (shaderID) {\n\t\t\t\tconst shader = ShaderLib[shaderID];\n\t\t\t\tvertexShader = shader.vertexShader;\n\t\t\t\tfragmentShader = shader.fragmentShader;\n\t\t\t} else {\n\t\t\t\tvertexShader = material.vertexShader;\n\t\t\t\tfragmentShader = material.fragmentShader;\n\t\t\t}\n\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\tconst parameters = {\n\t\t\t\tisWebGL2: isWebGL2,\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: material.type,\n\t\t\t\tvertexShader: vertexShader,\n\t\t\t\tfragmentShader: fragmentShader,\n\t\t\t\tdefines: material.defines,\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\t\tglslVersion: material.glslVersion,\n\t\t\t\tprecision: precision,\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n\t\t\t\tmap: !!material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap(material.map),\n\t\t\t\tmatcap: !!material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap(material.matcap),\n\t\t\t\tenvMap: !!envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap(envMap),\n\t\t\t\tenvMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n\t\t\t\tlightMap: !!material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n\t\t\t\taoMap: !!material.aoMap,\n\t\t\t\temissiveMap: !!material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n\t\t\t\tbumpMap: !!material.bumpMap,\n\t\t\t\tnormalMap: !!material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !!material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !!material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !!material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !!material.displacementMap,\n\t\t\t\troughnessMap: !!material.roughnessMap,\n\t\t\t\tmetalnessMap: !!material.metalnessMap,\n\t\t\t\tspecularMap: !!material.specularMap,\n\t\t\t\talphaMap: !!material.alphaMap,\n\t\t\t\tgradientMap: !!material.gradientMap,\n\t\t\t\tsheen: !!material.sheen,\n\t\t\t\ttransmission: !!material.transmission,\n\t\t\t\ttransmissionMap: !!material.transmissionMap,\n\t\t\t\tthicknessMap: !!material.thicknessMap,\n\t\t\t\tcombine: material.combine,\n\t\t\t\tvertexTangents: material.normalMap && material.vertexTangents,\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexAlphas: material.vertexColors === true && object.geometry && object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,\n\t\t\t\tvertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmission || !!material.transmissionMap || !!material.thicknessMap,\n\t\t\t\tuvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmission || !!material.transmissionMap || !!material.thicknessMap) && !!material.displacementMap,\n\t\t\t\tfog: !!fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: fog && fog.isFogExp2,\n\t\t\t\tflatShading: !!material.flatShading,\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\t\tskinning: object.isSkinnedMesh === true && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\t\tnumClipIntersection: clipping.numIntersection,\n\t\t\t\tdithering: material.dithering,\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\t\t\t\tdepthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\t\t\t};\n\t\t\treturn parameters;\n\t\t}\n\n\t\tfunction getProgramCacheKey(parameters) {\n\t\t\tconst array = [];\n\n\t\t\tif (parameters.shaderID) {\n\t\t\t\tarray.push(parameters.shaderID);\n\t\t\t} else {\n\t\t\t\tarray.push(parameters.fragmentShader);\n\t\t\t\tarray.push(parameters.vertexShader);\n\t\t\t}\n\n\t\t\tif (parameters.defines !== undefined) {\n\t\t\t\tfor (const name in parameters.defines) {\n\t\t\t\t\tarray.push(name);\n\t\t\t\t\tarray.push(parameters.defines[name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parameters.isRawShaderMaterial === false) {\n\t\t\t\tfor (let i = 0; i < parameterNames.length; i++) {\n\t\t\t\t\tarray.push(parameters[parameterNames[i]]);\n\t\t\t\t}\n\n\t\t\t\tarray.push(renderer.outputEncoding);\n\t\t\t\tarray.push(renderer.gammaFactor);\n\t\t\t}\n\n\t\t\tarray.push(parameters.customProgramCacheKey);\n\t\t\treturn array.join();\n\t\t}\n\n\t\tfunction getUniforms(material) {\n\t\t\tconst shaderID = shaderIDs[material.type];\n\t\t\tlet uniforms;\n\n\t\t\tif (shaderID) {\n\t\t\t\tconst shader = ShaderLib[shaderID];\n\t\t\t\tuniforms = UniformsUtils.clone(shader.uniforms);\n\t\t\t} else {\n\t\t\t\tuniforms = material.uniforms;\n\t\t\t}\n\n\t\t\treturn uniforms;\n\t\t}\n\n\t\tfunction acquireProgram(parameters, cacheKey) {\n\t\t\tlet program; // Check if code has been already compiled\n\n\t\t\tfor (let p = 0, pl = programs.length; p < pl; p++) {\n\t\t\t\tconst preexistingProgram = programs[p];\n\n\t\t\t\tif (preexistingProgram.cacheKey === cacheKey) {\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++program.usedTimes;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (program === undefined) {\n\t\t\t\tprogram = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n\t\t\t\tprograms.push(program);\n\t\t\t}\n\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction releaseProgram(program) {\n\t\t\tif (--program.usedTimes === 0) {\n\t\t\t\t// Remove from unordered set\n\t\t\t\tconst i = programs.indexOf(program);\n\t\t\t\tprograms[i] = programs[programs.length - 1];\n\t\t\t\tprograms.pop(); // Free WebGL resources\n\n\t\t\t\tprogram.destroy();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tgetUniforms: getUniforms,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\t}\n\n\tfunction WebGLProperties() {\n\t\tlet properties = new WeakMap();\n\n\t\tfunction get(object) {\n\t\t\tlet map = properties.get(object);\n\n\t\t\tif (map === undefined) {\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set(object, map);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}\n\n\t\tfunction remove(object) {\n\t\t\tproperties.delete(object);\n\t\t}\n\n\t\tfunction update(object, key, value) {\n\t\t\tproperties.get(object)[key] = value;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tproperties = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction painterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.program !== b.program) {\n\t\t\treturn a.program.id - b.program.id;\n\t\t} else if (a.material.id !== b.material.id) {\n\t\t\treturn a.material.id - b.material.id;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn a.z - b.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction reversePainterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn b.z - a.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction WebGLRenderList(properties) {\n\t\tconst renderItems = [];\n\t\tlet renderItemsIndex = 0;\n\t\tconst opaque = [];\n\t\tconst transmissive = [];\n\t\tconst transparent = [];\n\t\tconst defaultProgram = {\n\t\t\tid: -1\n\t\t};\n\n\t\tfunction init() {\n\t\t\trenderItemsIndex = 0;\n\t\t\topaque.length = 0;\n\t\t\ttransmissive.length = 0;\n\t\t\ttransparent.length = 0;\n\t\t}\n\n\t\tfunction getNextRenderItem(object, geometry, material, groupOrder, z, group) {\n\t\t\tlet renderItem = renderItems[renderItemsIndex];\n\t\t\tconst materialProperties = properties.get(material);\n\n\t\t\tif (renderItem === undefined) {\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\t\t\t\trenderItems[renderItemsIndex] = renderItem;\n\t\t\t} else {\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\t\t\t}\n\n\t\t\trenderItemsIndex++;\n\t\t\treturn renderItem;\n\t\t}\n\n\t\tfunction push(object, geometry, material, groupOrder, z, group) {\n\t\t\tconst renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\ttransmissive.push(renderItem);\n\t\t\t} else if (material.transparent === true) {\n\t\t\t\ttransparent.push(renderItem);\n\t\t\t} else {\n\t\t\t\topaque.push(renderItem);\n\t\t\t}\n\t\t}\n\n\t\tfunction unshift(object, geometry, material, groupOrder, z, group) {\n\t\t\tconst renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\ttransmissive.unshift(renderItem);\n\t\t\t} else if (material.transparent === true) {\n\t\t\t\ttransparent.unshift(renderItem);\n\t\t\t} else {\n\t\t\t\topaque.unshift(renderItem);\n\t\t\t}\n\t\t}\n\n\t\tfunction sort(customOpaqueSort, customTransparentSort) {\n\t\t\tif (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\n\t\t\tif (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);\n\t\t\tif (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);\n\t\t}\n\n\t\tfunction finish() {\n\t\t\t// Clear references from inactive renderItems in the list\n\t\t\tfor (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {\n\t\t\t\tconst renderItem = renderItems[i];\n\t\t\t\tif (renderItem.id === null) break;\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransmissive: transmissive,\n\t\t\ttransparent: transparent,\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\t\t\tsort: sort\n\t\t};\n\t}\n\n\tfunction WebGLRenderLists(properties) {\n\t\tlet lists = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth) {\n\t\t\tlet list;\n\n\t\t\tif (lists.has(scene) === false) {\n\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\tlists.set(scene, [list]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= lists.get(scene).length) {\n\t\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\t\tlists.get(scene).push(list);\n\t\t\t\t} else {\n\t\t\t\t\tlist = lists.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tlists = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction UniformsCache() {\n\t\tconst lights = {};\n\t\treturn {\n\t\t\tget: function (light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tlet uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction ShadowUniformsCache() {\n\t\tconst lights = {};\n\t\treturn {\n\t\t\tget: function (light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tlet uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tlet nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst(lightA, lightB) {\n\t\treturn (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n\t}\n\n\tfunction WebGLLights(extensions, capabilities) {\n\t\tconst cache = new UniformsCache();\n\t\tconst shadowCache = ShadowUniformsCache();\n\t\tconst state = {\n\t\t\tversion: 0,\n\t\t\thash: {\n\t\t\t\tdirectionalLength: -1,\n\t\t\t\tpointLength: -1,\n\t\t\t\tspotLength: -1,\n\t\t\t\trectAreaLength: -1,\n\t\t\t\themiLength: -1,\n\t\t\t\tnumDirectionalShadows: -1,\n\t\t\t\tnumPointShadows: -1,\n\t\t\t\tnumSpotShadows: -1\n\t\t\t},\n\t\t\tambient: [0, 0, 0],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\trectAreaLTC1: null,\n\t\t\trectAreaLTC2: null,\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\t\t};\n\n\t\tfor (let i = 0; i < 9; i++) state.probe.push(new Vector3());\n\n\t\tconst vector3 = new Vector3();\n\t\tconst matrix4 = new Matrix4();\n\t\tconst matrix42 = new Matrix4();\n\n\t\tfunction setup(lights) {\n\t\t\tlet r = 0,\n\t\t\t\t\tg = 0,\n\t\t\t\t\tb = 0;\n\n\t\t\tfor (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);\n\n\t\t\tlet directionalLength = 0;\n\t\t\tlet pointLength = 0;\n\t\t\tlet spotLength = 0;\n\t\t\tlet rectAreaLength = 0;\n\t\t\tlet hemiLength = 0;\n\t\t\tlet numDirectionalShadows = 0;\n\t\t\tlet numPointShadows = 0;\n\t\t\tlet numSpotShadows = 0;\n\t\t\tlights.sort(shadowCastingLightsFirst);\n\n\t\t\tfor (let i = 0, l = lights.length; i < l; i++) {\n\t\t\t\tconst light = lights[i];\n\t\t\t\tconst color = light.color;\n\t\t\t\tconst intensity = light.intensity;\n\t\t\t\tconst distance = light.distance;\n\t\t\t\tconst shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n\t\t\t\tif (light.isAmbientLight) {\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\t\t\t\t} else if (light.isLightProbe) {\n\t\t\t\t\tfor (let j = 0; j < 9; j++) {\n\t\t\t\t\t\tstate.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n\t\t\t\t\t}\n\t\t\t\t} else if (light.isDirectionalLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.directionalShadow[directionalLength] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[directionalLength] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumDirectionalShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[directionalLength] = uniforms;\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.color.copy(color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.distance = distance;\n\t\t\t\t\tuniforms.coneCos = Math.cos(light.angle);\n\t\t\t\t\tuniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.spotShadow[spotLength] = shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[spotLength] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[spotLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumSpotShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[spotLength] = uniforms;\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tconst uniforms = cache.get(light); // (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\n\t\t\t\t\tuniforms.color.copy(color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\t\t\t\t\tuniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\t\t\t\t\tstate.rectArea[rectAreaLength] = uniforms;\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\t\t\t\t\t\tstate.pointShadow[pointLength] = shadowUniforms;\n\t\t\t\t\t\tstate.pointShadowMap[pointLength] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[pointLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumPointShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[pointLength] = uniforms;\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.skyColor.copy(light.color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n\t\t\t\t\tstate.hemi[hemiLength] = uniforms;\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rectAreaLength > 0) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t// WebGL 2\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t} else {\n\t\t\t\t\t// WebGL 1\n\t\t\t\t\tif (extensions.has('OES_texture_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t\t} else if (extensions.has('OES_texture_half_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.ambient[0] = r;\n\t\t\tstate.ambient[1] = g;\n\t\t\tstate.ambient[2] = b;\n\t\t\tconst hash = state.hash;\n\n\t\t\tif (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\t\tstate.version = nextVersion++;\n\t\t\t}\n\t\t}\n\n\t\tfunction setupView(lights, camera) {\n\t\t\tlet directionalLength = 0;\n\t\t\tlet pointLength = 0;\n\t\t\tlet spotLength = 0;\n\t\t\tlet rectAreaLength = 0;\n\t\t\tlet hemiLength = 0;\n\t\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tfor (let i = 0, l = lights.length; i < l; i++) {\n\t\t\t\tconst light = lights[i];\n\n\t\t\t\tif (light.isDirectionalLight) {\n\t\t\t\t\tconst uniforms = state.directional[directionalLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tconst uniforms = state.spot[spotLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix);\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tconst uniforms = state.rectArea[rectAreaLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy(light.matrixWorld);\n\t\t\t\t\tmatrix4.premultiply(viewMatrix);\n\t\t\t\t\tmatrix42.extractRotation(matrix4);\n\t\t\t\t\tuniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\t\t\t\t\tuniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4(matrix42);\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4(matrix42);\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tconst uniforms = state.point[pointLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix);\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tconst uniforms = state.hemi[hemiLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tuniforms.direction.normalize();\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tsetupView: setupView,\n\t\t\tstate: state\n\t\t};\n\t}\n\n\tfunction WebGLRenderState(extensions, capabilities) {\n\t\tconst lights = new WebGLLights(extensions, capabilities);\n\t\tconst lightsArray = [];\n\t\tconst shadowsArray = [];\n\n\t\tfunction init() {\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\t\t}\n\n\t\tfunction pushLight(light) {\n\t\t\tlightsArray.push(light);\n\t\t}\n\n\t\tfunction pushShadow(shadowLight) {\n\t\t\tshadowsArray.push(shadowLight);\n\t\t}\n\n\t\tfunction setupLights() {\n\t\t\tlights.setup(lightsArray);\n\t\t}\n\n\t\tfunction setupLightsView(camera) {\n\t\t\tlights.setupView(lightsArray, camera);\n\t\t}\n\n\t\tconst state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\t\t\tlights: lights\n\t\t};\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\t\t\tsetupLightsView: setupLightsView,\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\t}\n\n\tfunction WebGLRenderStates(extensions, capabilities) {\n\t\tlet renderStates = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth = 0) {\n\t\t\tlet renderState;\n\n\t\t\tif (renderStates.has(scene) === false) {\n\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\trenderStates.set(scene, [renderState]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= renderStates.get(scene).length) {\n\t\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\t\trenderStates.get(scene).push(renderState);\n\t\t\t\t} else {\n\t\t\t\t\trenderState = renderStates.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn renderState;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\trenderStates = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\t/**\n\t * parameters = {\n\t *\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t * }\n\t */\n\n\tclass MeshDepthMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshDepthMaterial';\n\t\t\tthis.depthPacking = BasicDepthPacking;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.depthPacking = source.depthPacking;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\n\t *\treferencePosition: <float>,\n\t *\tnearDistance: <float>,\n\t *\tfarDistance: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tclass MeshDistanceMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshDistanceMaterial';\n\t\t\tthis.referencePosition = new Vector3();\n\t\t\tthis.nearDistance = 1;\n\t\t\tthis.farDistance = 1000;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.fog = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.referencePosition.copy(source.referencePosition);\n\t\t\tthis.nearDistance = source.nearDistance;\n\t\t\tthis.farDistance = source.farDistance;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\\n\\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean * HALF_SAMPLE_RATE;\\n\\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\tfunction WebGLShadowMap(_renderer, _objects, _capabilities) {\n\t\tlet _frustum = new Frustum();\n\n\t\tconst _shadowMapSize = new Vector2(),\n\t\t\t\t\t_viewportSize = new Vector2(),\n\t\t\t\t\t_viewport = new Vector4(),\n\t\t\t\t\t_depthMaterials = [],\n\t\t\t\t\t_distanceMaterials = [],\n\t\t\t\t\t_materialCache = {},\n\t\t\t\t\t_maxTextureSize = _capabilities.maxTextureSize;\n\n\t\tconst shadowSide = {\n\t\t\t0: BackSide,\n\t\t\t1: FrontSide,\n\t\t\t2: DoubleSide\n\t\t};\n\t\tconst shadowMaterialVertical = new ShaderMaterial({\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\tresolution: {\n\t\t\t\t\tvalue: new Vector2()\n\t\t\t\t},\n\t\t\t\tradius: {\n\t\t\t\t\tvalue: 4.0\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: vsm_vert,\n\t\t\tfragmentShader: vsm_frag\n\t\t});\n\t\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\t\tconst fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));\n\t\tconst fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\n\t\tconst scope = this;\n\t\tthis.enabled = false;\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function (lights, scene, camera) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (scope.autoUpdate === false && scope.needsUpdate === false) return;\n\t\t\tif (lights.length === 0) return;\n\n\t\t\tconst currentRenderTarget = _renderer.getRenderTarget();\n\n\t\t\tconst activeCubeFace = _renderer.getActiveCubeFace();\n\n\t\t\tconst activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tconst _state = _renderer.state; // Set GL state for depth map.\n\n\t\t\t_state.setBlending(NoBlending);\n\n\t\t\t_state.buffers.color.setClear(1, 1, 1, 1);\n\n\t\t\t_state.buffers.depth.setTest(true);\n\n\t\t\t_state.setScissorTest(false); // render depth map\n\n\n\t\t\tfor (let i = 0, il = lights.length; i < il; i++) {\n\t\t\t\tconst light = lights[i];\n\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\tif (shadow === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\n\n\t\t\t\t_shadowMapSize.copy(shadow.mapSize);\n\n\t\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply(shadowFrameExtents);\n\n\t\t\t\t_viewportSize.copy(shadow.mapSize);\n\n\t\t\t\tif (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {\n\t\t\t\t\tif (_shadowMapSize.x > _maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_shadowMapSize.y > _maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tconst pars = {\n\t\t\t\t\t\tminFilter: LinearFilter,\n\t\t\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null) {\n\t\t\t\t\tconst pars = {\n\t\t\t\t\t\tminFilter: NearestFilter,\n\t\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor (let vp = 0; vp < viewportCount; vp++) {\n\t\t\t\t\tconst viewport = shadow.getViewport(vp);\n\n\t\t\t\t\t_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);\n\n\t\t\t\t\t_state.viewport(_viewport);\n\n\t\t\t\t\tshadow.updateMatrices(light, vp);\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\t\t\t\t\trenderObject(scene, camera, shadow.camera, light, this.type);\n\t\t\t\t} // do blur pass for VSM\n\n\n\t\t\t\tif (!shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tVSMPass(shadow, camera);\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\n\t\t};\n\n\t\tfunction VSMPass(shadow, camera) {\n\t\t\tconst geometry = _objects.update(fullScreenMesh); // vertical pass\n\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.mapPass);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass\n\n\n\t\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);\n\t\t}\n\n\t\tfunction getDepthMaterialVariant(useMorphing) {\n\t\t\tconst index = useMorphing << 0;\n\t\t\tlet material = _depthMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDepthMaterial({\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\t\t\t\t\tmorphTargets: useMorphing\n\t\t\t\t});\n\t\t\t\t_depthMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant(useMorphing) {\n\t\t\tconst index = useMorphing << 0;\n\t\t\tlet material = _distanceMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDistanceMaterial({\n\t\t\t\t\tmorphTargets: useMorphing\n\t\t\t\t});\n\t\t\t\t_distanceMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {\n\t\t\tlet result = null;\n\t\t\tlet getMaterialVariant = getDepthMaterialVariant;\n\t\t\tlet customMaterial = object.customDepthMaterial;\n\n\t\t\tif (light.isPointLight === true) {\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\t\t}\n\n\t\t\tif (customMaterial === undefined) {\n\t\t\t\tlet useMorphing = false;\n\n\t\t\t\tif (material.morphTargets === true) {\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\t\t\t}\n\n\t\t\t\tresult = getMaterialVariant(useMorphing);\n\t\t\t} else {\n\t\t\t\tresult = customMaterial;\n\t\t\t}\n\n\t\t\tif (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\t\t\t\tconst keyA = result.uuid,\n\t\t\t\t\t\t\tkeyB = material.uuid;\n\t\t\t\tlet materialsForVariant = _materialCache[keyA];\n\n\t\t\t\tif (materialsForVariant === undefined) {\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[keyA] = materialsForVariant;\n\t\t\t\t}\n\n\t\t\t\tlet cachedMaterial = materialsForVariant[keyB];\n\n\t\t\t\tif (cachedMaterial === undefined) {\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[keyB] = cachedMaterial;\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif (type === VSMShadowMap) {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : material.side;\n\t\t\t} else {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\n\t\t\t\tresult.referencePosition.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction renderObject(object, camera, shadowCamera, light, type) {\n\t\t\tif (object.visible === false) return;\n\t\t\tconst visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible && (object.isMesh || object.isLine || object.isPoints)) {\n\t\t\t\tif ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n\t\t\t\t\tconst geometry = _objects.update(object);\n\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor (let k = 0, kl = groups.length; k < kl; k++) {\n\t\t\t\t\t\t\tconst group = groups[k];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\tconst depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\trenderObject(children[i], camera, shadowCamera, light, type);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction WebGLState(gl, extensions, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\t\t\tlet locked = false;\n\t\t\tconst color = new Vector4();\n\t\t\tlet currentColorMask = null;\n\t\t\tconst currentColorClear = new Vector4(0, 0, 0, 0);\n\t\t\treturn {\n\t\t\t\tsetMask: function (colorMask) {\n\t\t\t\t\tif (currentColorMask !== colorMask && !locked) {\n\t\t\t\t\t\tgl.colorMask(colorMask, colorMask, colorMask, colorMask);\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (r, g, b, a, premultipliedAlpha) {\n\t\t\t\t\tif (premultipliedAlpha === true) {\n\t\t\t\t\t\tr *= a;\n\t\t\t\t\t\tg *= a;\n\t\t\t\t\t\tb *= a;\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set(r, g, b, a);\n\n\t\t\t\t\tif (currentColorClear.equals(color) === false) {\n\t\t\t\t\t\tgl.clearColor(r, g, b, a);\n\t\t\t\t\t\tcurrentColorClear.copy(color);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set(-1, 0, 0, 0); // set to invalid state\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\t\t\tlet locked = false;\n\t\t\tlet currentDepthMask = null;\n\t\t\tlet currentDepthFunc = null;\n\t\t\tlet currentDepthClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function (depthTest) {\n\t\t\t\t\tif (depthTest) {\n\t\t\t\t\t\tenable(gl.DEPTH_TEST);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdisable(gl.DEPTH_TEST);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function (depthMask) {\n\t\t\t\t\tif (currentDepthMask !== depthMask && !locked) {\n\t\t\t\t\t\tgl.depthMask(depthMask);\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function (depthFunc) {\n\t\t\t\t\tif (currentDepthFunc !== depthFunc) {\n\t\t\t\t\t\tif (depthFunc) {\n\t\t\t\t\t\t\tswitch (depthFunc) {\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.NEVER);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.ALWAYS);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LESS);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.EQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.GEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.GREATER);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.NOTEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (depth) {\n\t\t\t\t\tif (currentDepthClear !== depth) {\n\t\t\t\t\t\tgl.clearDepth(depth);\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\t\t\tlet locked = false;\n\t\t\tlet currentStencilMask = null;\n\t\t\tlet currentStencilFunc = null;\n\t\t\tlet currentStencilRef = null;\n\t\t\tlet currentStencilFuncMask = null;\n\t\t\tlet currentStencilFail = null;\n\t\t\tlet currentStencilZFail = null;\n\t\t\tlet currentStencilZPass = null;\n\t\t\tlet currentStencilClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function (stencilTest) {\n\t\t\t\t\tif (!locked) {\n\t\t\t\t\t\tif (stencilTest) {\n\t\t\t\t\t\t\tenable(gl.STENCIL_TEST);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisable(gl.STENCIL_TEST);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function (stencilMask) {\n\t\t\t\t\tif (currentStencilMask !== stencilMask && !locked) {\n\t\t\t\t\t\tgl.stencilMask(stencilMask);\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function (stencilFunc, stencilRef, stencilMask) {\n\t\t\t\t\tif (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n\t\t\t\t\t\tgl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetOp: function (stencilFail, stencilZFail, stencilZPass) {\n\t\t\t\t\tif (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n\t\t\t\t\t\tgl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (stencil) {\n\t\t\t\t\tif (currentStencilClear !== stencil) {\n\t\t\t\t\t\tgl.clearStencil(stencil);\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t} //\n\n\n\t\tconst colorBuffer = new ColorBuffer();\n\t\tconst depthBuffer = new DepthBuffer();\n\t\tconst stencilBuffer = new StencilBuffer();\n\t\tlet enabledCapabilities = {};\n\t\tlet xrFramebuffer = null;\n\t\tlet currentBoundFramebuffers = {};\n\t\tlet currentProgram = null;\n\t\tlet currentBlendingEnabled = false;\n\t\tlet currentBlending = null;\n\t\tlet currentBlendEquation = null;\n\t\tlet currentBlendSrc = null;\n\t\tlet currentBlendDst = null;\n\t\tlet currentBlendEquationAlpha = null;\n\t\tlet currentBlendSrcAlpha = null;\n\t\tlet currentBlendDstAlpha = null;\n\t\tlet currentPremultipledAlpha = false;\n\t\tlet currentFlipSided = null;\n\t\tlet currentCullFace = null;\n\t\tlet currentLineWidth = null;\n\t\tlet currentPolygonOffsetFactor = null;\n\t\tlet currentPolygonOffsetUnits = null;\n\t\tconst maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n\t\tlet lineWidthAvailable = false;\n\t\tlet version = 0;\n\t\tconst glVersion = gl.getParameter(gl.VERSION);\n\n\t\tif (glVersion.indexOf('WebGL') !== -1) {\n\t\t\tversion = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 1.0;\n\t\t} else if (glVersion.indexOf('OpenGL ES') !== -1) {\n\t\t\tversion = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 2.0;\n\t\t}\n\n\t\tlet currentTextureSlot = null;\n\t\tlet currentBoundTextures = {};\n\t\tconst scissorParam = gl.getParameter(gl.SCISSOR_BOX);\n\t\tconst viewportParam = gl.getParameter(gl.VIEWPORT);\n\t\tconst currentScissor = new Vector4().fromArray(scissorParam);\n\t\tconst currentViewport = new Vector4().fromArray(viewportParam);\n\n\t\tfunction createTexture(type, target, count) {\n\t\t\tconst data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n\t\t\tconst texture = gl.createTexture();\n\t\t\tgl.bindTexture(type, texture);\n\t\t\tgl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\tgl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tgl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tconst emptyTextures = {};\n\t\temptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);\n\t\temptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); // init\n\n\t\tcolorBuffer.setClear(0, 0, 0, 1);\n\t\tdepthBuffer.setClear(1);\n\t\tstencilBuffer.setClear(0);\n\t\tenable(gl.DEPTH_TEST);\n\t\tdepthBuffer.setFunc(LessEqualDepth);\n\t\tsetFlipSided(false);\n\t\tsetCullFace(CullFaceBack);\n\t\tenable(gl.CULL_FACE);\n\t\tsetBlending(NoBlending); //\n\n\t\tfunction enable(id) {\n\t\t\tif (enabledCapabilities[id] !== true) {\n\t\t\t\tgl.enable(id);\n\t\t\t\tenabledCapabilities[id] = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction disable(id) {\n\t\t\tif (enabledCapabilities[id] !== false) {\n\t\t\t\tgl.disable(id);\n\t\t\t\tenabledCapabilities[id] = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindXRFramebuffer(framebuffer) {\n\t\t\tif (framebuffer !== xrFramebuffer) {\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\t\t\t\txrFramebuffer = framebuffer;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindFramebuffer(target, framebuffer) {\n\t\t\tif (framebuffer === null && xrFramebuffer !== null) framebuffer = xrFramebuffer; // use active XR framebuffer if available\n\n\t\t\tif (currentBoundFramebuffers[target] !== framebuffer) {\n\t\t\t\tgl.bindFramebuffer(target, framebuffer);\n\t\t\t\tcurrentBoundFramebuffers[target] = framebuffer;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\n\t\t\t\t\tif (target === gl.DRAW_FRAMEBUFFER) {\n\t\t\t\t\t\tcurrentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (target === gl.FRAMEBUFFER) {\n\t\t\t\t\t\tcurrentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction useProgram(program) {\n\t\t\tif (currentProgram !== program) {\n\t\t\t\tgl.useProgram(program);\n\t\t\t\tcurrentProgram = program;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tconst equationToGL = {\n\t\t\t[AddEquation]: gl.FUNC_ADD,\n\t\t\t[SubtractEquation]: gl.FUNC_SUBTRACT,\n\t\t\t[ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT\n\t\t};\n\n\t\tif (isWebGL2) {\n\t\t\tequationToGL[MinEquation] = gl.MIN;\n\t\t\tequationToGL[MaxEquation] = gl.MAX;\n\t\t} else {\n\t\t\tconst extension = extensions.get('EXT_blend_minmax');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tequationToGL[MinEquation] = extension.MIN_EXT;\n\t\t\t\tequationToGL[MaxEquation] = extension.MAX_EXT;\n\t\t\t}\n\t\t}\n\n\t\tconst factorToGL = {\n\t\t\t[ZeroFactor]: gl.ZERO,\n\t\t\t[OneFactor]: gl.ONE,\n\t\t\t[SrcColorFactor]: gl.SRC_COLOR,\n\t\t\t[SrcAlphaFactor]: gl.SRC_ALPHA,\n\t\t\t[SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,\n\t\t\t[DstColorFactor]: gl.DST_COLOR,\n\t\t\t[DstAlphaFactor]: gl.DST_ALPHA,\n\t\t\t[OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,\n\t\t\t[OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,\n\t\t\t[OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,\n\t\t\t[OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA\n\t\t};\n\n\t\tfunction setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n\t\t\tif (blending === NoBlending) {\n\t\t\t\tif (currentBlendingEnabled === true) {\n\t\t\t\t\tdisable(gl.BLEND);\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentBlendingEnabled === false) {\n\t\t\t\tenable(gl.BLEND);\n\t\t\t\tcurrentBlendingEnabled = true;\n\t\t\t}\n\n\t\t\tif (blending !== CustomBlending) {\n\t\t\t\tif (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n\t\t\t\t\tif (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n\t\t\t\t\t\tgl.blendEquation(gl.FUNC_ADD);\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (premultipliedAlpha) {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ONE, gl.ONE);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t} // custom blending\n\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n\t\t\t\tgl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\t\t}\n\n\t\t\tif (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n\t\t\t\tgl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\t\t}\n\n\t\tfunction setMaterial(material, frontFaceCW) {\n\t\t\tmaterial.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);\n\t\t\tlet flipSided = material.side === BackSide;\n\t\t\tif (frontFaceCW) flipSided = !flipSided;\n\t\t\tsetFlipSided(flipSided);\n\t\t\tmaterial.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n\t\t\tdepthBuffer.setFunc(material.depthFunc);\n\t\t\tdepthBuffer.setTest(material.depthTest);\n\t\t\tdepthBuffer.setMask(material.depthWrite);\n\t\t\tcolorBuffer.setMask(material.colorWrite);\n\t\t\tconst stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest(stencilWrite);\n\n\t\t\tif (stencilWrite) {\n\t\t\t\tstencilBuffer.setMask(material.stencilWriteMask);\n\t\t\t\tstencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n\t\t\t\tstencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n\t\t\t}\n\n\t\t\tsetPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n\t\t\tmaterial.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\t\t} //\n\n\n\t\tfunction setFlipSided(flipSided) {\n\t\t\tif (currentFlipSided !== flipSided) {\n\t\t\t\tif (flipSided) {\n\t\t\t\t\tgl.frontFace(gl.CW);\n\t\t\t\t} else {\n\t\t\t\t\tgl.frontFace(gl.CCW);\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\t\t\t}\n\t\t}\n\n\t\tfunction setCullFace(cullFace) {\n\t\t\tif (cullFace !== CullFaceNone) {\n\t\t\t\tenable(gl.CULL_FACE);\n\n\t\t\t\tif (cullFace !== currentCullFace) {\n\t\t\t\t\tif (cullFace === CullFaceBack) {\n\t\t\t\t\t\tgl.cullFace(gl.BACK);\n\t\t\t\t\t} else if (cullFace === CullFaceFront) {\n\t\t\t\t\t\tgl.cullFace(gl.FRONT);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgl.cullFace(gl.FRONT_AND_BACK);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(gl.CULL_FACE);\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\t\t}\n\n\t\tfunction setLineWidth(width) {\n\t\t\tif (width !== currentLineWidth) {\n\t\t\t\tif (lineWidthAvailable) gl.lineWidth(width);\n\t\t\t\tcurrentLineWidth = width;\n\t\t\t}\n\t\t}\n\n\t\tfunction setPolygonOffset(polygonOffset, factor, units) {\n\t\t\tif (polygonOffset) {\n\t\t\t\tenable(gl.POLYGON_OFFSET_FILL);\n\n\t\t\t\tif (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n\t\t\t\t\tgl.polygonOffset(factor, units);\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(gl.POLYGON_OFFSET_FILL);\n\t\t\t}\n\t\t}\n\n\t\tfunction setScissorTest(scissorTest) {\n\t\t\tif (scissorTest) {\n\t\t\t\tenable(gl.SCISSOR_TEST);\n\t\t\t} else {\n\t\t\t\tdisable(gl.SCISSOR_TEST);\n\t\t\t}\n\t\t} // texture\n\n\n\t\tfunction activeTexture(webglSlot) {\n\t\t\tif (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\tif (currentTextureSlot !== webglSlot) {\n\t\t\t\tgl.activeTexture(webglSlot);\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindTexture(webglType, webglTexture) {\n\t\t\tif (currentTextureSlot === null) {\n\t\t\t\tactiveTexture();\n\t\t\t}\n\n\t\t\tlet boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture === undefined) {\n\t\t\t\tboundTexture = {\n\t\t\t\t\ttype: undefined,\n\t\t\t\t\ttexture: undefined\n\t\t\t\t};\n\t\t\t\tcurrentBoundTextures[currentTextureSlot] = boundTexture;\n\t\t\t}\n\n\t\t\tif (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n\t\t\t\tgl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\t\t\t}\n\t\t}\n\n\t\tfunction unbindTexture() {\n\t\t\tconst boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture !== undefined && boundTexture.type !== undefined) {\n\t\t\t\tgl.bindTexture(boundTexture.type, null);\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\t\t\t}\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.compressedTexImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage3D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage3D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction scissor(scissor) {\n\t\t\tif (currentScissor.equals(scissor) === false) {\n\t\t\t\tgl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n\t\t\t\tcurrentScissor.copy(scissor);\n\t\t\t}\n\t\t}\n\n\t\tfunction viewport(viewport) {\n\t\t\tif (currentViewport.equals(viewport) === false) {\n\t\t\t\tgl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n\t\t\t\tcurrentViewport.copy(viewport);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction reset() {\n\t\t\t// reset state\n\t\t\tgl.disable(gl.BLEND);\n\t\t\tgl.disable(gl.CULL_FACE);\n\t\t\tgl.disable(gl.DEPTH_TEST);\n\t\t\tgl.disable(gl.POLYGON_OFFSET_FILL);\n\t\t\tgl.disable(gl.SCISSOR_TEST);\n\t\t\tgl.disable(gl.STENCIL_TEST);\n\t\t\tgl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\t\t\tgl.blendEquation(gl.FUNC_ADD);\n\t\t\tgl.blendFunc(gl.ONE, gl.ZERO);\n\t\t\tgl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);\n\t\t\tgl.colorMask(true, true, true, true);\n\t\t\tgl.clearColor(0, 0, 0, 0);\n\t\t\tgl.depthMask(true);\n\t\t\tgl.depthFunc(gl.LESS);\n\t\t\tgl.clearDepth(1);\n\t\t\tgl.stencilMask(0xffffffff);\n\t\t\tgl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);\n\t\t\tgl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n\t\t\tgl.clearStencil(0);\n\t\t\tgl.cullFace(gl.BACK);\n\t\t\tgl.frontFace(gl.CCW);\n\t\t\tgl.polygonOffset(0, 0);\n\t\t\tgl.activeTexture(gl.TEXTURE0);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\t\t\tif (isWebGL2 === true) {\n\t\t\t\tgl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n\t\t\t\tgl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n\t\t\t}\n\n\t\t\tgl.useProgram(null);\n\t\t\tgl.lineWidth(1);\n\t\t\tgl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals\n\n\t\t\tenabledCapabilities = {};\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\t\t\txrFramebuffer = null;\n\t\t\tcurrentBoundFramebuffers = {};\n\t\t\tcurrentProgram = null;\n\t\t\tcurrentBlendingEnabled = false;\n\t\t\tcurrentBlending = null;\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\t\t\tcurrentPremultipledAlpha = false;\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\t\t\tcurrentLineWidth = null;\n\t\t\tcurrentPolygonOffsetFactor = null;\n\t\t\tcurrentPolygonOffsetUnits = null;\n\t\t\tcurrentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tcurrentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\t\t}\n\n\t\treturn {\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tbindFramebuffer: bindFramebuffer,\n\t\t\tbindXRFramebuffer: bindXRFramebuffer,\n\t\t\tuseProgram: useProgram,\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\t\t\tsetScissorTest: setScissorTest,\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\t\t\treset: reset\n\t\t};\n\t}\n\n\tfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst maxTextures = capabilities.maxTextures;\n\t\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\t\tconst maxTextureSize = capabilities.maxTextureSize;\n\t\tconst maxSamples = capabilities.maxSamples;\n\n\t\tconst _videoTextures = new WeakMap();\n\n\t\tlet _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n\t\tlet useOffscreenCanvas = false;\n\n\t\ttry {\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n\t\t} catch (err) {// Ignore any errors\n\t\t}\n\n\t\tfunction createCanvas(width, height) {\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\t\t\treturn useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t}\n\n\t\tfunction resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n\t\t\tlet scale = 1; // handle case if texture exceeds max size\n\n\t\t\tif (image.width > maxSize || image.height > maxSize) {\n\t\t\t\tscale = maxSize / Math.max(image.width, image.height);\n\t\t\t} // only perform resize if necessary\n\n\n\t\t\tif (scale < 1 || needsPowerOfTwo === true) {\n\t\t\t\t// only perform resize for certain image types\n\t\t\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t\t\tconst floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n\t\t\t\t\tconst width = floor(scale * image.width);\n\t\t\t\t\tconst height = floor(scale * image.height);\n\t\t\t\t\tif (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n\t\t\t\t\tconst canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t\tconst context = canvas.getContext('2d');\n\t\t\t\t\tcontext.drawImage(image, 0, 0, width, height);\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n\t\t\t\t\treturn canvas;\n\t\t\t\t} else {\n\t\t\t\t\tif ('data' in image) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn image;\n\t\t}\n\n\t\tfunction isPowerOfTwo$1(image) {\n\t\t\treturn isPowerOfTwo(image.width) && isPowerOfTwo(image.height);\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo(texture) {\n\t\t\tif (isWebGL2) return false;\n\t\t\treturn texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps(texture, supportsMips) {\n\t\t\treturn texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction generateMipmap(target, texture, width, height) {\n\t\t\t_gl.generateMipmap(target);\n\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\ttextureProperties.__maxMipLevel = Math.log2(Math.max(width, height));\n\t\t}\n\n\t\tfunction getInternalFormat(internalFormatName, glFormat, glType) {\n\t\t\tif (isWebGL2 === false) return glFormat;\n\n\t\t\tif (internalFormatName !== null) {\n\t\t\t\tif (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n\t\t\t}\n\n\t\t\tlet internalFormat = glFormat;\n\n\t\t\tif (glFormat === _gl.RED) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.R32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\n\t\t\t}\n\n\t\t\tif (glFormat === _gl.RGB) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.RGB32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGB16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8;\n\t\t\t}\n\n\t\t\tif (glFormat === _gl.RGBA) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGBA8;\n\t\t\t}\n\n\t\t\tif (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {\n\t\t\t\textensions.get('EXT_color_buffer_float');\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\t\t} // Fallback filters for non-power-of-2 textures\n\n\n\t\tfunction filterFallback(f) {\n\t\t\tif (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n\t\t\t\treturn _gl.NEAREST;\n\t\t\t}\n\n\t\t\treturn _gl.LINEAR;\n\t\t} //\n\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tdeallocateTexture(texture);\n\n\t\t\tif (texture.isVideoTexture) {\n\t\t\t\t_videoTextures.delete(texture);\n\t\t\t}\n\n\t\t\tinfo.memory.textures--;\n\t\t}\n\n\t\tfunction onRenderTargetDispose(event) {\n\t\t\tconst renderTarget = event.target;\n\t\t\trenderTarget.removeEventListener('dispose', onRenderTargetDispose);\n\t\t\tdeallocateRenderTarget(renderTarget);\n\t\t} //\n\n\n\t\tfunction deallocateTexture(texture) {\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (textureProperties.__webglInit === undefined) return;\n\n\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\tproperties.remove(texture);\n\t\t}\n\n\t\tfunction deallocateRenderTarget(renderTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (!renderTarget) return;\n\n\t\t\tif (textureProperties.__webglTexture !== undefined) {\n\t\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\t\tinfo.memory.textures--;\n\t\t\t}\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\trenderTarget.depthTexture.dispose();\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n\t\t\t\tif (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\tif (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n\t\t\t\tif (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLMultipleRenderTargets) {\n\t\t\t\tfor (let i = 0, il = texture.length; i < il; i++) {\n\t\t\t\t\tconst attachmentProperties = properties.get(texture[i]);\n\n\t\t\t\t\tif (attachmentProperties.__webglTexture) {\n\t\t\t\t\t\t_gl.deleteTexture(attachmentProperties.__webglTexture);\n\n\t\t\t\t\t\tinfo.memory.textures--;\n\t\t\t\t\t}\n\n\t\t\t\t\tproperties.remove(texture[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tproperties.remove(texture);\n\t\t\tproperties.remove(renderTarget);\n\t\t} //\n\n\n\t\tlet textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\t\t\ttextureUnits = 0;\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\t\t\tconst textureUnit = textureUnits;\n\n\t\t\tif (textureUnit >= maxTextures) {\n\t\t\t\tconsole.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\t\t\treturn textureUnit;\n\t\t} //\n\n\n\t\tfunction setTexture2D(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (texture.isVideoTexture) updateVideoTexture(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tconst image = texture.image;\n\n\t\t\t\tif (image === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n\t\t\t\t} else if (image.complete === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n\t\t\t\t} else {\n\t\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture2DArray(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture3D(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTextureCube(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadCubeTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\t\t}\n\n\t\tconst wrappingToGL = {\n\t\t\t[RepeatWrapping]: _gl.REPEAT,\n\t\t\t[ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,\n\t\t\t[MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT\n\t\t};\n\t\tconst filterToGL = {\n\t\t\t[NearestFilter]: _gl.NEAREST,\n\t\t\t[NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,\n\t\t\t[NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,\n\t\t\t[LinearFilter]: _gl.LINEAR,\n\t\t\t[LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,\n\t\t\t[LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR\n\t\t};\n\n\t\tfunction setTextureParameters(textureType, texture, supportsMips) {\n\t\t\tif (supportsMips) {\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n\n\t\t\t\tif (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n\t\t\t} else {\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n\t\t\t\tif (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);\n\t\t\t\t}\n\n\t\t\t\tif (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n\n\t\t\t\tif (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tconst extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tif (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n\n\t\t\t\tif (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only\n\n\t\t\t\tif (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n\t\t\t\t\t_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n\t\t\t\t\tproperties.get(texture).__currentAnisotropy = texture.anisotropy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction initTexture(textureProperties, texture) {\n\t\t\tif (textureProperties.__webglInit === undefined) {\n\t\t\t\ttextureProperties.__webglInit = true;\n\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\t\t}\n\n\t\tfunction uploadTexture(textureProperties, texture, slot) {\n\t\t\tlet textureType = _gl.TEXTURE_2D;\n\t\t\tif (texture.isDataTexture2DArray) textureType = _gl.TEXTURE_2D_ARRAY;\n\t\t\tif (texture.isDataTexture3D) textureType = _gl.TEXTURE_3D;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(textureType, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n\t\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;\n\t\t\tconst image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n\t\t\tconst supportsMips = isPowerOfTwo$1(image) || isWebGL2,\n\t\t\t\t\t\tglFormat = utils.convert(texture.format);\n\t\t\tlet glType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(textureType, texture, supportsMips);\n\t\t\tlet mipmap;\n\t\t\tconst mipmaps = texture.mipmaps;\n\n\t\t\tif (texture.isDepthTexture) {\n\t\t\t\t// populate depth texture with dummy data\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\t\t\t\t} else if (texture.type === UnsignedIntType) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\t\t\t\t\t} else if (texture.type === UnsignedInt248Type) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tconsole.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} // validation checks for WebGL 1\n\n\n\t\t\t\tif (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n\t\t\t\t\tif (texture.type !== UnsignedInt248Type) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n\t\t\t} else if (texture.isDataTexture) {\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t} else if (texture.isCompressedTexture) {\n\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\tmipmap = mipmaps[i];\n\n\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\tstate.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else if (texture.isDataTexture2DArray) {\n\t\t\t\tstate.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else if (texture.isDataTexture3D) {\n\t\t\t\tstate.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else {\n\t\t\t\t// regular Texture (image, video, canvas)\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tgenerateMipmap(textureType, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t}\n\n\t\tfunction uploadCubeTexture(textureProperties, texture, slot) {\n\t\t\tif (texture.image.length !== 6) return;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n\t\t\tconst isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n\t\t\tconst isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n\t\t\tconst cubeImage = [];\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tif (!isCompressed && !isDataTexture) {\n\t\t\t\t\tcubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n\t\t\t\t} else {\n\t\t\t\t\tcubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst image = cubeImage[0],\n\t\t\t\t\t\tsupportsMips = isPowerOfTwo$1(image) || isWebGL2,\n\t\t\t\t\t\tglFormat = utils.convert(texture.format),\n\t\t\t\t\t\tglType = utils.convert(texture.type),\n\t\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\t\t\tlet mipmaps;\n\n\t\t\tif (isCompressed) {\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tmipmaps = cubeImage[i].mipmaps;\n\n\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\n\t\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else {\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tif (isDataTexture) {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n\n\t\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[i].image;\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);\n\n\t\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap(_gl.TEXTURE_CUBE_MAP, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t} // Render targets\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\n\n\t\tfunction setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {\n\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\tconst glType = utils.convert(texture.type);\n\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\tif (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\tstate.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);\n\t\t\t} else {\n\t\t\t\tstate.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n\t\tfunction setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n\t\t\tif (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n\t\t\t\tlet glInternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif (depthTexture && depthTexture.isDepthTexture) {\n\t\t\t\t\t\tif (depthTexture.type === FloatType) {\n\t\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\t\t\t\t\t} else if (depthTexture.type === UnsignedIntType) {\n\t\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n\t\t\t} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n\t\t\t} else {\n\t\t\t\t// Use the first texture for MRT so far\n\t\t\t\tconst texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[0] : renderTarget.texture;\n\t\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\t\tconst glType = utils.convert(texture.type);\n\t\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\t\t} // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n\t\tfunction setupDepthTexture(framebuffer, renderTarget) {\n\t\t\tconst isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n\t\t\tif (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\tif (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\t\t} // upload an empty depth texture with framebuffer size\n\n\n\t\t\tif (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D(renderTarget.depthTexture, 0);\n\n\t\t\tconst webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n\t\t\tif (renderTarget.depthTexture.format === DepthFormat) {\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n\t\t\t} else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown depthTexture format');\n\t\t\t}\n\t\t} // Setup GL resources for a non-texture depth buffer\n\n\n\t\tfunction setupDepthRenderbuffer(renderTarget) {\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\tif (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\t\t\tsetupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n\t\t\t} else {\n\t\t\t\tif (isCube) {\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t} // Set up GL resources for the render target\n\n\n\t\tfunction setupRenderTarget(renderTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\trenderTarget.addEventListener('dispose', onRenderTargetDispose);\n\n\t\t\tif (renderTarget.isWebGLMultipleRenderTargets !== true) {\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\ttextureProperties.__version = texture.version;\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\t\t\tconst isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;\n\t\t\tconst isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n\t\t\tconst isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\n\t\t\tconst supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif (isWebGL2 && texture.format === RGBFormat && (texture.type === FloatType || texture.type === HalfFloatType)) {\n\t\t\t\ttexture.format = RGBAFormat;\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');\n\t\t\t} // Setup framebuffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif (isMultipleRenderTargets) {\n\t\t\t\t\tif (capabilities.drawBuffers) {\n\t\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\t\t\tconst attachmentProperties = properties.get(textures[i]);\n\n\t\t\t\t\t\t\tif (attachmentProperties.__webglTexture === undefined) {\n\t\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\t\t\t\t\t\t\t\tinfo.memory.textures++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');\n\t\t\t\t\t}\n\t\t\t\t} else if (isMultisample) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\t\t\t\tconst glType = utils.convert(texture.type);\n\t\t\t\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\n\t\t\t\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Setup color buffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n\t\t\t\t}\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_CUBE_MAP, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\n\t\t\t} else if (isMultipleRenderTargets) {\n\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\tconst attachment = textures[i];\n\t\t\t\t\tconst attachmentProperties = properties.get(attachment);\n\t\t\t\t\tstate.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);\n\t\t\t\t\tsetTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);\n\n\t\t\t\t\tif (textureNeedsGenerateMipmaps(attachment, supportsMips)) {\n\t\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_2D, attachment, renderTarget.width, renderTarget.height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_2D, null);\n\t\t\t} else {\n\t\t\t\tlet glTextureType = _gl.TEXTURE_2D;\n\n\t\t\t\tif (isRenderTarget3D) {\n\t\t\t\t\t// Render targets containing layers, i.e: Texture 3D and 2d arrays\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\tconst isTexture3D = texture.isDataTexture3D;\n\t\t\t\t\t\tglTextureType = isTexture3D ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(glTextureType, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(glTextureType, texture, supportsMips);\n\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_2D, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_2D, null);\n\t\t\t} // Setup depth and stencil buffers\n\n\n\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\tsetupDepthRenderbuffer(renderTarget);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap(renderTarget) {\n\t\t\tconst supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];\n\n\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\tconst texture = textures[i];\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\n\t\t\t\t\tconst webglTexture = properties.get(texture).__webglTexture;\n\n\t\t\t\t\tstate.bindTexture(target, webglTexture);\n\t\t\t\t\tgenerateMipmap(target, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t\tstate.bindTexture(target, null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget(renderTarget) {\n\t\t\tif (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tconst width = renderTarget.width;\n\t\t\t\t\tconst height = renderTarget.height;\n\t\t\t\t\tlet mask = _gl.COLOR_BUFFER_BIT;\n\t\t\t\t\tif (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\n\t\t\t\t\tif (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\n\t\t\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\t\t\tstate.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\t\tstate.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\t_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\n\n\t\t\t\t\tstate.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);\n\t\t\t\t\tstate.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction getRenderTargetSamples(renderTarget) {\n\t\t\treturn isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n\t\t}\n\n\t\tfunction updateVideoTexture(texture) {\n\t\t\tconst frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n\t\t\tif (_videoTextures.get(texture) !== frame) {\n\t\t\t\t_videoTextures.set(texture, frame);\n\n\t\t\t\ttexture.update();\n\t\t\t}\n\t\t} // backwards compatibility\n\n\n\t\tlet warnedTexture2D = false;\n\t\tlet warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D(texture, slot) {\n\t\t\tif (texture && texture.isWebGLRenderTarget) {\n\t\t\t\tif (warnedTexture2D === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTexture2D = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTexture2D(texture, slot);\n\t\t}\n\n\t\tfunction safeSetTextureCube(texture, slot) {\n\t\t\tif (texture && texture.isWebGLCubeRenderTarget) {\n\t\t\t\tif (warnedTextureCube === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTextureCube = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTextureCube(texture, slot);\n\t\t} //\n\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\t}\n\n\tfunction WebGLUtils(gl, extensions, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert(p) {\n\t\t\tlet extension;\n\t\t\tif (p === UnsignedByteType) return gl.UNSIGNED_BYTE;\n\t\t\tif (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\tif (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\tif (p === UnsignedShort565Type) return gl.UNSIGNED_SHORT_5_6_5;\n\t\t\tif (p === ByteType) return gl.BYTE;\n\t\t\tif (p === ShortType) return gl.SHORT;\n\t\t\tif (p === UnsignedShortType) return gl.UNSIGNED_SHORT;\n\t\t\tif (p === IntType) return gl.INT;\n\t\t\tif (p === UnsignedIntType) return gl.UNSIGNED_INT;\n\t\t\tif (p === FloatType) return gl.FLOAT;\n\n\t\t\tif (p === HalfFloatType) {\n\t\t\t\tif (isWebGL2) return gl.HALF_FLOAT;\n\t\t\t\textension = extensions.get('OES_texture_half_float');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === AlphaFormat) return gl.ALPHA;\n\t\t\tif (p === RGBFormat) return gl.RGB;\n\t\t\tif (p === RGBAFormat) return gl.RGBA;\n\t\t\tif (p === LuminanceFormat) return gl.LUMINANCE;\n\t\t\tif (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;\n\t\t\tif (p === DepthFormat) return gl.DEPTH_COMPONENT;\n\t\t\tif (p === DepthStencilFormat) return gl.DEPTH_STENCIL;\n\t\t\tif (p === RedFormat) return gl.RED; // WebGL2 formats.\n\n\t\t\tif (p === RedIntegerFormat) return gl.RED_INTEGER;\n\t\t\tif (p === RGFormat) return gl.RG;\n\t\t\tif (p === RGIntegerFormat) return gl.RG_INTEGER;\n\t\t\tif (p === RGBIntegerFormat) return gl.RGB_INTEGER;\n\t\t\tif (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;\n\n\t\t\tif (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc1');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\t\tif (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_astc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_BPTC_Format) {\n\t\t\t\textension = extensions.get('EXT_texture_compression_bptc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === UnsignedInt248Type) {\n\t\t\t\tif (isWebGL2) return gl.UNSIGNED_INT_24_8;\n\t\t\t\textension = extensions.get('WEBGL_depth_texture');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tconvert: convert\n\t\t};\n\t}\n\n\tclass ArrayCamera extends PerspectiveCamera {\n\t\tconstructor(array = []) {\n\t\t\tsuper();\n\t\t\tthis.cameras = array;\n\t\t}\n\n\t}\n\n\tArrayCamera.prototype.isArrayCamera = true;\n\n\tclass Group extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Group';\n\t\t}\n\n\t}\n\n\tGroup.prototype.isGroup = true;\n\n\tconst _moveEvent = {\n\t\ttype: 'move'\n\t};\n\n\tclass WebXRController {\n\t\tconstructor() {\n\t\t\tthis._targetRay = null;\n\t\t\tthis._grip = null;\n\t\t\tthis._hand = null;\n\t\t}\n\n\t\tgetHandSpace() {\n\t\t\tif (this._hand === null) {\n\t\t\t\tthis._hand = new Group();\n\t\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\t\tthis._hand.visible = false;\n\t\t\t\tthis._hand.joints = {};\n\t\t\t\tthis._hand.inputState = {\n\t\t\t\t\tpinching: false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn this._hand;\n\t\t}\n\n\t\tgetTargetRaySpace() {\n\t\t\tif (this._targetRay === null) {\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\t\t}\n\n\t\tgetGripSpace() {\n\t\t\tif (this._grip === null) {\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\t\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\t\tthis._grip.angularVelocity = new Vector3();\n\t\t\t}\n\n\t\t\treturn this._grip;\n\t\t}\n\n\t\tdispatchEvent(event) {\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.dispatchEvent(event);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tdisconnect(inputSource) {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'disconnected',\n\t\t\t\tdata: inputSource\n\t\t\t});\n\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.visible = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tupdate(inputSource, frame, referenceSpace) {\n\t\t\tlet inputPose = null;\n\t\t\tlet gripPose = null;\n\t\t\tlet handPose = null;\n\t\t\tconst targetRay = this._targetRay;\n\t\t\tconst grip = this._grip;\n\t\t\tconst hand = this._hand;\n\n\t\t\tif (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n\t\t\t\tif (targetRay !== null) {\n\t\t\t\t\tinputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n\t\t\t\t\tif (inputPose !== null) {\n\t\t\t\t\t\ttargetRay.matrix.fromArray(inputPose.transform.matrix);\n\t\t\t\t\t\ttargetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n\n\t\t\t\t\t\tif (inputPose.linearVelocity) {\n\t\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\t\ttargetRay.linearVelocity.copy(inputPose.linearVelocity);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inputPose.angularVelocity) {\n\t\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\t\ttargetRay.angularVelocity.copy(inputPose.angularVelocity);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.dispatchEvent(_moveEvent);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hand && inputSource.hand) {\n\t\t\t\t\thandPose = true;\n\n\t\t\t\t\tfor (const inputjoint of inputSource.hand.values()) {\n\t\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\t\tconst jointPose = frame.getJointPose(inputjoint, referenceSpace);\n\n\t\t\t\t\t\tif (hand.joints[inputjoint.jointName] === undefined) {\n\t\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\t\tconst joint = new Group();\n\t\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\t\t\tjoint.visible = false;\n\t\t\t\t\t\t\thand.joints[inputjoint.jointName] = joint; // ??\n\n\t\t\t\t\t\t\thand.add(joint);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst joint = hand.joints[inputjoint.jointName];\n\n\t\t\t\t\t\tif (jointPose !== null) {\n\t\t\t\t\t\t\tjoint.matrix.fromArray(jointPose.transform.matrix);\n\t\t\t\t\t\t\tjoint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n\t\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjoint.visible = jointPose !== null;\n\t\t\t\t\t} // Custom events\n\t\t\t\t\t// Check pinchz\n\n\n\t\t\t\t\tconst indexTip = hand.joints['index-finger-tip'];\n\t\t\t\t\tconst thumbTip = hand.joints['thumb-tip'];\n\t\t\t\t\tconst distance = indexTip.position.distanceTo(thumbTip.position);\n\t\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\t\tif (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n\t\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n\t\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (grip !== null && inputSource.gripSpace) {\n\t\t\t\t\t\tgripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n\t\t\t\t\t\tif (gripPose !== null) {\n\t\t\t\t\t\t\tgrip.matrix.fromArray(gripPose.transform.matrix);\n\t\t\t\t\t\t\tgrip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n\n\t\t\t\t\t\t\tif (gripPose.linearVelocity) {\n\t\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\t\tgrip.linearVelocity.copy(gripPose.linearVelocity);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (gripPose.angularVelocity) {\n\t\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\t\tgrip.angularVelocity.copy(gripPose.angularVelocity);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetRay !== null) {\n\t\t\t\ttargetRay.visible = inputPose !== null;\n\t\t\t}\n\n\t\t\tif (grip !== null) {\n\t\t\t\tgrip.visible = gripPose !== null;\n\t\t\t}\n\n\t\t\tif (hand !== null) {\n\t\t\t\thand.visible = handPose !== null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass WebXRManager extends EventDispatcher {\n\t\tconstructor(renderer, gl) {\n\t\t\tsuper();\n\t\t\tconst scope = this;\n\t\t\tconst state = renderer.state;\n\t\t\tlet session = null;\n\t\t\tlet framebufferScaleFactor = 1.0;\n\t\t\tlet referenceSpace = null;\n\t\t\tlet referenceSpaceType = 'local-floor';\n\t\t\tlet pose = null;\n\t\t\tconst controllers = [];\n\t\t\tconst inputSourcesMap = new Map(); //\n\n\t\t\tconst cameraL = new PerspectiveCamera();\n\t\t\tcameraL.layers.enable(1);\n\t\t\tcameraL.viewport = new Vector4();\n\t\t\tconst cameraR = new PerspectiveCamera();\n\t\t\tcameraR.layers.enable(2);\n\t\t\tcameraR.viewport = new Vector4();\n\t\t\tconst cameras = [cameraL, cameraR];\n\t\t\tconst cameraVR = new ArrayCamera();\n\t\t\tcameraVR.layers.enable(1);\n\t\t\tcameraVR.layers.enable(2);\n\t\t\tlet _currentDepthNear = null;\n\t\t\tlet _currentDepthFar = null; //\n\n\t\t\tthis.cameraAutoUpdate = true;\n\t\t\tthis.enabled = false;\n\t\t\tthis.isPresenting = false;\n\n\t\t\tthis.getController = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getTargetRaySpace();\n\t\t\t};\n\n\t\t\tthis.getControllerGrip = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getGripSpace();\n\t\t\t};\n\n\t\t\tthis.getHand = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getHandSpace();\n\t\t\t}; //\n\n\n\t\t\tfunction onSessionEvent(event) {\n\t\t\t\tconst controller = inputSourcesMap.get(event.inputSource);\n\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\ttype: event.type,\n\t\t\t\t\t\tdata: event.inputSource\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction onSessionEnd() {\n\t\t\t\tinputSourcesMap.forEach(function (controller, inputSource) {\n\t\t\t\t\tcontroller.disconnect(inputSource);\n\t\t\t\t});\n\t\t\t\tinputSourcesMap.clear();\n\t\t\t\t_currentDepthNear = null;\n\t\t\t\t_currentDepthFar = null; // restore framebuffer/rendering state\n\n\t\t\t\tstate.bindXRFramebuffer(null);\n\t\t\t\trenderer.setRenderTarget(renderer.getRenderTarget()); //\n\n\t\t\t\tanimation.stop();\n\t\t\t\tscope.isPresenting = false;\n\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\ttype: 'sessionend'\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.setFramebufferScaleFactor = function (value) {\n\t\t\t\tframebufferScaleFactor = value;\n\n\t\t\t\tif (scope.isPresenting === true) {\n\t\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.setReferenceSpaceType = function (value) {\n\t\t\t\treferenceSpaceType = value;\n\n\t\t\t\tif (scope.isPresenting === true) {\n\t\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.getReferenceSpace = function () {\n\t\t\t\treturn referenceSpace;\n\t\t\t};\n\n\t\t\tthis.getSession = function () {\n\t\t\t\treturn session;\n\t\t\t};\n\n\t\t\tthis.setSession = async function (value) {\n\t\t\t\tsession = value;\n\n\t\t\t\tif (session !== null) {\n\t\t\t\t\tsession.addEventListener('select', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('selectstart', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('selectend', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeeze', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeezestart', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeezeend', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('end', onSessionEnd);\n\t\t\t\t\tsession.addEventListener('inputsourceschange', onInputSourcesChange);\n\t\t\t\t\tconst attributes = gl.getContextAttributes();\n\n\t\t\t\t\tif (attributes.xrCompatible !== true) {\n\t\t\t\t\t\tawait gl.makeXRCompatible();\n\t\t\t\t\t}\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t}; // eslint-disable-next-line no-undef\n\n\t\t\t\t\tconst baseLayer = new XRWebGLLayer(session, gl, layerInit);\n\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\tbaseLayer: baseLayer\n\t\t\t\t\t});\n\t\t\t\t\treferenceSpace = await session.requestReferenceSpace(referenceSpaceType);\n\t\t\t\t\tanimation.setContext(session);\n\t\t\t\t\tanimation.start();\n\t\t\t\t\tscope.isPresenting = true;\n\t\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\t\ttype: 'sessionstart'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfunction onInputSourcesChange(event) {\n\t\t\t\tconst inputSources = session.inputSources; // Assign inputSources to available controllers\n\n\t\t\t\tfor (let i = 0; i < controllers.length; i++) {\n\t\t\t\t\tinputSourcesMap.set(inputSources[i], controllers[i]);\n\t\t\t\t} // Notify disconnected\n\n\n\t\t\t\tfor (let i = 0; i < event.removed.length; i++) {\n\t\t\t\t\tconst inputSource = event.removed[i];\n\t\t\t\t\tconst controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\t\tif (controller) {\n\t\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'disconnected',\n\t\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t\t});\n\t\t\t\t\t\tinputSourcesMap.delete(inputSource);\n\t\t\t\t\t}\n\t\t\t\t} // Notify connected\n\n\n\t\t\t\tfor (let i = 0; i < event.added.length; i++) {\n\t\t\t\t\tconst inputSource = event.added[i];\n\t\t\t\t\tconst controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\t\tif (controller) {\n\t\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'connected',\n\t\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tconst cameraLPos = new Vector3();\n\t\t\tconst cameraRPos = new Vector3();\n\t\t\t/**\n\t\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t\t * the cameras' projection and world matrices have already been set.\n\t\t\t * And that near and far planes are identical for both cameras.\n\t\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t\t */\n\n\t\t\tfunction setProjectionFromUnion(camera, cameraL, cameraR) {\n\t\t\t\tcameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n\t\t\t\tcameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n\t\t\t\tconst ipd = cameraLPos.distanceTo(cameraRPos);\n\t\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\t\tconst projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n\t\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t\t// Use the left camera for these values.\n\n\t\t\t\tconst near = projL[14] / (projL[10] - 1);\n\t\t\t\tconst far = projL[14] / (projL[10] + 1);\n\t\t\t\tconst topFov = (projL[9] + 1) / projL[5];\n\t\t\t\tconst bottomFov = (projL[9] - 1) / projL[5];\n\t\t\t\tconst leftFov = (projL[8] - 1) / projL[0];\n\t\t\t\tconst rightFov = (projR[8] + 1) / projR[0];\n\t\t\t\tconst left = near * leftFov;\n\t\t\t\tconst right = near * rightFov; // Calculate the new camera's position offset from the\n\t\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\n\t\t\t\tconst zOffset = ipd / (-leftFov + rightFov);\n\t\t\t\tconst xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n\t\t\t\tcameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tcamera.translateX(xOffset);\n\t\t\t\tcamera.translateZ(zOffset);\n\t\t\t\tcamera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale\n\t\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t\t// although must now be relative to the new union camera.\n\n\t\t\t\tconst near2 = near + zOffset;\n\t\t\t\tconst far2 = far + zOffset;\n\t\t\t\tconst left2 = left - xOffset;\n\t\t\t\tconst right2 = right + (ipd - xOffset);\n\t\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\t\t\t\tcamera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n\t\t\t}\n\n\t\t\tfunction updateCamera(camera, parent) {\n\t\t\t\tif (parent === null) {\n\t\t\t\t\tcamera.matrixWorld.copy(camera.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tcamera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n\t\t\t\t}\n\n\t\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert();\n\t\t\t}\n\n\t\t\tthis.updateCamera = function (camera) {\n\t\t\t\tif (session === null) return;\n\t\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\t\tif (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n\t\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t\t});\n\t\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t\t_currentDepthFar = cameraVR.far;\n\t\t\t\t}\n\n\t\t\t\tconst parent = camera.parent;\n\t\t\t\tconst cameras = cameraVR.cameras;\n\t\t\t\tupdateCamera(cameraVR, parent);\n\n\t\t\t\tfor (let i = 0; i < cameras.length; i++) {\n\t\t\t\t\tupdateCamera(cameras[i], parent);\n\t\t\t\t} // update camera and its children\n\n\n\t\t\t\tcamera.matrixWorld.copy(cameraVR.matrixWorld);\n\t\t\t\tcamera.matrix.copy(cameraVR.matrix);\n\t\t\t\tcamera.matrix.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tconst children = camera.children;\n\n\t\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateMatrixWorld(true);\n\t\t\t\t} // update projection matrix for proper view frustum culling\n\n\n\t\t\t\tif (cameras.length === 2) {\n\t\t\t\t\tsetProjectionFromUnion(cameraVR, cameraL, cameraR);\n\t\t\t\t} else {\n\t\t\t\t\t// assume single camera setup (AR)\n\t\t\t\t\tcameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.getCamera = function () {\n\t\t\t\treturn cameraVR;\n\t\t\t}; // Animation Loop\n\n\n\t\t\tlet onAnimationFrameCallback = null;\n\n\t\t\tfunction onAnimationFrame(time, frame) {\n\t\t\t\tpose = frame.getViewerPose(referenceSpace);\n\n\t\t\t\tif (pose !== null) {\n\t\t\t\t\tconst views = pose.views;\n\t\t\t\t\tconst baseLayer = session.renderState.baseLayer;\n\t\t\t\t\tstate.bindXRFramebuffer(baseLayer.framebuffer);\n\t\t\t\t\tlet cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\t\tif (views.length !== cameraVR.cameras.length) {\n\t\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\t\tcameraVRNeedsUpdate = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0; i < views.length; i++) {\n\t\t\t\t\t\tconst view = views[i];\n\t\t\t\t\t\tconst viewport = baseLayer.getViewport(view);\n\t\t\t\t\t\tconst camera = cameras[i];\n\t\t\t\t\t\tcamera.matrix.fromArray(view.transform.matrix);\n\t\t\t\t\t\tcamera.projectionMatrix.fromArray(view.projectionMatrix);\n\t\t\t\t\t\tcamera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\tcameraVR.matrix.copy(camera.matrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (cameraVRNeedsUpdate === true) {\n\t\t\t\t\t\t\tcameraVR.cameras.push(camera);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tconst inputSources = session.inputSources;\n\n\t\t\t\tfor (let i = 0; i < controllers.length; i++) {\n\t\t\t\t\tconst controller = controllers[i];\n\t\t\t\t\tconst inputSource = inputSources[i];\n\t\t\t\t\tcontroller.update(inputSource, frame, referenceSpace);\n\t\t\t\t}\n\n\t\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n\t\t\t}\n\n\t\t\tconst animation = new WebGLAnimation();\n\t\t\tanimation.setAnimationLoop(onAnimationFrame);\n\n\t\t\tthis.setAnimationLoop = function (callback) {\n\t\t\t\tonAnimationFrameCallback = callback;\n\t\t\t};\n\n\t\t\tthis.dispose = function () {};\n\t\t}\n\n\t}\n\n\tfunction WebGLMaterials(properties) {\n\t\tfunction refreshFogUniforms(uniforms, fog) {\n\t\t\tuniforms.fogColor.value.copy(fog.color);\n\n\t\t\tif (fog.isFog) {\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\t\t\t} else if (fog.isFogExp2) {\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {\n\t\t\tif (material.isMeshBasicMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t} else if (material.isMeshLambertMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsLambert(uniforms, material);\n\t\t\t} else if (material.isMeshToonMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsToon(uniforms, material);\n\t\t\t} else if (material.isMeshPhongMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsPhong(uniforms, material);\n\t\t\t} else if (material.isMeshStandardMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\n\t\t\t\tif (material.isMeshPhysicalMaterial) {\n\t\t\t\t\trefreshUniformsPhysical(uniforms, material, transmissionRenderTarget);\n\t\t\t\t} else {\n\t\t\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isMeshMatcapMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsMatcap(uniforms, material);\n\t\t\t} else if (material.isMeshDepthMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDepth(uniforms, material);\n\t\t\t} else if (material.isMeshDistanceMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDistance(uniforms, material);\n\t\t\t} else if (material.isMeshNormalMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsNormal(uniforms, material);\n\t\t\t} else if (material.isLineBasicMaterial) {\n\t\t\t\trefreshUniformsLine(uniforms, material);\n\n\t\t\t\tif (material.isLineDashedMaterial) {\n\t\t\t\t\trefreshUniformsDash(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isPointsMaterial) {\n\t\t\t\trefreshUniformsPoints(uniforms, material, pixelRatio, height);\n\t\t\t} else if (material.isSpriteMaterial) {\n\t\t\t\trefreshUniformsSprites(uniforms, material);\n\t\t\t} else if (material.isShadowMaterial) {\n\t\t\t\tuniforms.color.value.copy(material.color);\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\t} else if (material.isShaderMaterial) {\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsCommon(uniforms, material) {\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif (material.color) {\n\t\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\t}\n\n\t\t\tif (material.emissive) {\n\t\t\t\tuniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n\t\t\t}\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.specularMap) {\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t}\n\n\t\t\tconst envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\tuniforms.envMap.value = envMap;\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tconst maxMipLevel = properties.get(envMap).__maxMipLevel;\n\n\t\t\t\tif (maxMipLevel !== undefined) {\n\t\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.lightMap) {\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. displacementMap map\n\t\t\t// 4. normal map\n\t\t\t// 5. bump map\n\t\t\t// 6. roughnessMap map\n\t\t\t// 7. metalnessMap map\n\t\t\t// 8. alphaMap map\n\t\t\t// 9. emissiveMap map\n\t\t\t// 10. clearcoat map\n\t\t\t// 11. clearcoat normal map\n\t\t\t// 12. clearcoat roughnessMap map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.specularMap) {\n\t\t\t\tuvScaleMap = material.specularMap;\n\t\t\t} else if (material.displacementMap) {\n\t\t\t\tuvScaleMap = material.displacementMap;\n\t\t\t} else if (material.normalMap) {\n\t\t\t\tuvScaleMap = material.normalMap;\n\t\t\t} else if (material.bumpMap) {\n\t\t\t\tuvScaleMap = material.bumpMap;\n\t\t\t} else if (material.roughnessMap) {\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\t\t\t} else if (material.metalnessMap) {\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t} else if (material.emissiveMap) {\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\t\t\t} else if (material.clearcoatMap) {\n\t\t\t\tuvScaleMap = material.clearcoatMap;\n\t\t\t} else if (material.clearcoatNormalMap) {\n\t\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\t\t\t} else if (material.clearcoatRoughnessMap) {\n\t\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uvScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t} // uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\n\t\t\tlet uv2ScaleMap;\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\t\t\t} else if (material.lightMap) {\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\t\t\t}\n\n\t\t\tif (uv2ScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uv2ScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uv2ScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLine(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t}\n\n\t\tfunction refreshUniformsDash(uniforms, material) {\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\t\t}\n\n\t\tfunction refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsSprites(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLambert(uniforms, material) {\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhong(uniforms, material) {\n\t\t\tuniforms.specular.value.copy(material.specular);\n\t\t\tuniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsToon(uniforms, material) {\n\t\t\tif (material.gradientMap) {\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsStandard(uniforms, material) {\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif (material.roughnessMap) {\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\t\t}\n\n\t\t\tif (material.metalnessMap) {\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tconst envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {\n\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif (material.sheen) uniforms.sheen.value.copy(material.sheen);\n\n\t\t\tif (material.clearcoatMap) {\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatRoughnessMap) {\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatNormalMap) {\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif (material.side === BackSide) {\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\n\t\t\tif (material.transmissionMap) {\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\t\t\t}\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\t\tuniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);\n\t\t\t}\n\n\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\tif (material.thicknessMap) {\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\t\t\t}\n\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\tuniforms.attenuationColor.value.copy(material.attenuationColor);\n\t\t}\n\n\t\tfunction refreshUniformsMatcap(uniforms, material) {\n\t\t\tif (material.matcap) {\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDepth(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDistance(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy(material.referencePosition);\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\t\t}\n\n\t\tfunction refreshUniformsNormal(uniforms, material) {\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\t}\n\n\tfunction createCanvasElement() {\n\t\tconst canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\tcanvas.style.display = 'block';\n\t\treturn canvas;\n\t}\n\n\tfunction WebGLRenderer(parameters) {\n\t\tparameters = parameters || {};\n\n\t\tconst _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\t\t\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tlet currentRenderList = null;\n\t\tlet currentRenderState = null; // render() can be called from within a callback triggered by another render.\n\t\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\t\tconst renderListStack = [];\n\t\tconst renderStateStack = []; // public properties\n\n\t\tthis.domElement = _canvas; // Debug configuration container\n\n\t\tthis.debug = {\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t}; // clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true; // scene graph\n\n\t\tthis.sortObjects = true; // user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false; // physically based shading\n\n\t\tthis.gammaFactor = 2.0; // for backwards compatibility\n\n\t\tthis.outputEncoding = LinearEncoding; // physical lights\n\n\t\tthis.physicallyCorrectLights = false; // tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0; // internal properties\n\n\t\tconst _this = this;\n\n\t\tlet _isContextLost = false; // internal state cache\n\n\t\tlet _currentActiveCubeFace = 0;\n\t\tlet _currentActiveMipmapLevel = 0;\n\t\tlet _currentRenderTarget = null;\n\n\t\tlet _currentMaterialId = -1;\n\n\t\tlet _currentCamera = null;\n\n\t\tconst _currentViewport = new Vector4();\n\n\t\tconst _currentScissor = new Vector4();\n\n\t\tlet _currentScissorTest = null; //\n\n\t\tlet _width = _canvas.width;\n\t\tlet _height = _canvas.height;\n\t\tlet _pixelRatio = 1;\n\t\tlet _opaqueSort = null;\n\t\tlet _transparentSort = null;\n\n\t\tconst _viewport = new Vector4(0, 0, _width, _height);\n\n\t\tconst _scissor = new Vector4(0, 0, _width, _height);\n\n\t\tlet _scissorTest = false; //\n\n\t\tconst _currentDrawBuffers = []; // frustum\n\n\t\tconst _frustum = new Frustum(); // clipping\n\n\n\t\tlet _clippingEnabled = false;\n\t\tlet _localClippingEnabled = false; // transmission\n\n\t\tlet _transmissionRenderTarget = null; // camera matrices cache\n\n\t\tconst _projScreenMatrix = new Matrix4();\n\n\t\tconst _vector3 = new Vector3();\n\n\t\tconst _emptyScene = {\n\t\t\tbackground: null,\n\t\t\tfog: null,\n\t\t\tenvironment: null,\n\t\t\toverrideMaterial: null,\n\t\t\tisScene: true\n\t\t};\n\n\t\tfunction getTargetPixelRatio() {\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\t} // initialize\n\n\n\t\tlet _gl = _context;\n\n\t\tfunction getContext(contextNames, contextAttributes) {\n\t\t\tfor (let i = 0; i < contextNames.length; i++) {\n\t\t\t\tconst contextName = contextNames[i];\n\n\t\t\t\tconst context = _canvas.getContext(contextName, contextAttributes);\n\n\t\t\t\tif (context !== null) return context;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tconst contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t}; // event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\tif (_gl === null) {\n\t\t\t\tconst contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\n\n\t\t\t\tif (_this.isWebGL1Renderer === true) {\n\t\t\t\t\tcontextNames.shift();\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext(contextNames, contextAttributes);\n\n\t\t\t\tif (_gl === null) {\n\t\t\t\t\tif (getContext(contextNames)) {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context with your selected attributes.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n\t\t\tif (_gl.getShaderPrecisionFormat === undefined) {\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'rangeMin': 1,\n\t\t\t\t\t\t'rangeMax': 1,\n\t\t\t\t\t\t'precision': 1\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('THREE.WebGLRenderer: ' + error.message);\n\t\t\tthrow error;\n\t\t}\n\n\t\tlet extensions, capabilities, state, info;\n\t\tlet properties, textures, cubemaps, attributes, geometries, objects;\n\t\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\t\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\t\tlet utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\t\t\textensions = new WebGLExtensions(_gl);\n\t\t\tcapabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\t\t\textensions.init(capabilities);\n\t\t\tutils = new WebGLUtils(_gl, extensions, capabilities);\n\t\t\tstate = new WebGLState(_gl, extensions, capabilities);\n\t\t\t_currentDrawBuffers[0] = _gl.BACK;\n\t\t\tinfo = new WebGLInfo(_gl);\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n\t\t\tcubemaps = new WebGLCubeMaps(_this);\n\t\t\tattributes = new WebGLAttributes(_gl, capabilities);\n\t\t\tbindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\n\t\t\tgeometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n\t\t\tobjects = new WebGLObjects(_gl, geometries, attributes, info);\n\t\t\tmorphtargets = new WebGLMorphtargets(_gl);\n\t\t\tclipping = new WebGLClipping(properties);\n\t\t\tprogramCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);\n\t\t\tmaterials = new WebGLMaterials(properties);\n\t\t\trenderLists = new WebGLRenderLists(properties);\n\t\t\trenderStates = new WebGLRenderStates(extensions, capabilities);\n\t\t\tbackground = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\n\t\t\tshadowMap = new WebGLShadowMap(_this, objects, capabilities);\n\t\t\tbufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tinfo.programs = programCache.programs;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.shadowMap = shadowMap;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\t\t}\n\n\t\tinitGLContext(); // xr\n\n\t\tconst xr = new WebXRManager(_this, _gl);\n\t\tthis.xr = xr; // API\n\n\t\tthis.getContext = function () {\n\t\t\treturn _gl;\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\t\t\treturn _gl.getContextAttributes();\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\t\t\tconst extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.loseContext();\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\t\t\tconst extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.restoreContext();\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\t\t\treturn _pixelRatio;\n\t\t};\n\n\t\tthis.setPixelRatio = function (value) {\n\t\t\tif (value === undefined) return;\n\t\t\t_pixelRatio = value;\n\t\t\tthis.setSize(_width, _height, false);\n\t\t};\n\n\t\tthis.getSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width, _height);\n\t\t};\n\n\t\tthis.setSize = function (width, height, updateStyle) {\n\t\t\tif (xr.isPresenting) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_canvas.width = Math.floor(width * _pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * _pixelRatio);\n\n\t\t\tif (updateStyle !== false) {\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\t\t}\n\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function (width, height, pixelRatio) {\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_pixelRatio = pixelRatio;\n\t\t\t_canvas.width = Math.floor(width * pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * pixelRatio);\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getCurrentViewport = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');\n\t\t\t\ttarget = new Vector4();\n\t\t\t}\n\n\t\t\treturn target.copy(_currentViewport);\n\t\t};\n\n\t\tthis.getViewport = function (target) {\n\t\t\treturn target.copy(_viewport);\n\t\t};\n\n\t\tthis.setViewport = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_viewport.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_viewport.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissor = function (target) {\n\t\t\treturn target.copy(_scissor);\n\t\t};\n\n\t\tthis.setScissor = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_scissor.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_scissor.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\t\t\treturn _scissorTest;\n\t\t};\n\n\t\tthis.setScissorTest = function (boolean) {\n\t\t\tstate.setScissorTest(_scissorTest = boolean);\n\t\t};\n\n\t\tthis.setOpaqueSort = function (method) {\n\t\t\t_opaqueSort = method;\n\t\t};\n\n\t\tthis.setTransparentSort = function (method) {\n\t\t\t_transparentSort = method;\n\t\t}; // Clearing\n\n\n\t\tthis.getClearColor = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getClearColor() now requires a Color as an argument');\n\t\t\t\ttarget = new Color();\n\t\t\t}\n\n\t\t\treturn target.copy(background.getClearColor());\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\t\t\tbackground.setClearColor.apply(background, arguments);\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\t\t\treturn background.getClearAlpha();\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\t\t\tbackground.setClearAlpha.apply(background, arguments);\n\t\t};\n\n\t\tthis.clear = function (color, depth, stencil) {\n\t\t\tlet bits = 0;\n\t\t\tif (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\tif (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t_gl.clear(bits);\n\t\t};\n\n\t\tthis.clearColor = function () {\n\t\t\tthis.clear(true, false, false);\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\t\t\tthis.clear(false, true, false);\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\t\t\tthis.clear(false, false, true);\n\t\t}; //\n\n\n\t\tthis.dispose = function () {\n\t\t\t_canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\txr.dispose();\n\t\t\txr.removeEventListener('sessionstart', onXRSessionStart);\n\t\t\txr.removeEventListener('sessionend', onXRSessionEnd);\n\n\t\t\tif (_transmissionRenderTarget) {\n\t\t\t\t_transmissionRenderTarget.dispose();\n\n\t\t\t\t_transmissionRenderTarget = null;\n\t\t\t}\n\n\t\t\tanimation.stop();\n\t\t}; // Events\n\n\n\t\tfunction onContextLost(event) {\n\t\t\tevent.preventDefault();\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Lost.');\n\t\t\t_isContextLost = true;\n\t\t}\n\n\t\tfunction onContextRestore()\n\t\t/* event */\n\t\t{\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Restored.');\n\t\t\t_isContextLost = false;\n\t\t\tconst infoAutoReset = info.autoReset;\n\t\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\t\tconst shadowMapType = shadowMap.type;\n\t\t\tinitGLContext();\n\t\t\tinfo.autoReset = infoAutoReset;\n\t\t\tshadowMap.enabled = shadowMapEnabled;\n\t\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\t\tshadowMap.type = shadowMapType;\n\t\t}\n\n\t\tfunction onMaterialDispose(event) {\n\t\t\tconst material = event.target;\n\t\t\tmaterial.removeEventListener('dispose', onMaterialDispose);\n\t\t\tdeallocateMaterial(material);\n\t\t} // Buffer deallocation\n\n\n\t\tfunction deallocateMaterial(material) {\n\t\t\treleaseMaterialProgramReferences(material);\n\t\t\tproperties.remove(material);\n\t\t}\n\n\t\tfunction releaseMaterialProgramReferences(material) {\n\t\t\tconst programs = properties.get(material).programs;\n\n\t\t\tif (programs !== undefined) {\n\t\t\t\tprograms.forEach(function (program) {\n\t\t\t\t\tprogramCache.releaseProgram(program);\n\t\t\t\t});\n\t\t\t}\n\t\t} // Buffer rendering\n\n\n\t\tfunction renderObjectImmediate(object, program) {\n\t\t\tobject.render(function (object) {\n\t\t\t\t_this.renderBufferImmediate(object, program);\n\t\t\t});\n\t\t}\n\n\t\tthis.renderBufferImmediate = function (object, program) {\n\t\t\tbindingStates.initAttributes();\n\t\t\tconst buffers = properties.get(object);\n\t\t\tif (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n\t\t\tif (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n\t\t\tif (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n\t\t\tif (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n\t\t\tconst programAttributes = program.getAttributes();\n\n\t\t\tif (object.hasPositions) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.position);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.position, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasNormals) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.normal);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.normal, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasUvs) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.uv);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.uv, 2, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasColors) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.color);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.color, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tbindingStates.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays(_gl.TRIANGLES, 0, object.count);\n\n\t\t\tobject.count = 0;\n\t\t};\n\n\t\tthis.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n\t\t\tif (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tconst frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n\t\t\tconst program = setProgram(camera, scene, material, object);\n\t\t\tstate.setMaterial(material, frontFaceCW); //\n\n\t\t\tlet index = geometry.index;\n\t\t\tconst position = geometry.attributes.position; //\n\n\t\t\tif (index === null) {\n\t\t\t\tif (position === undefined || position.count === 0) return;\n\t\t\t} else if (index.count === 0) {\n\t\t\t\treturn;\n\t\t\t} //\n\n\n\t\t\tlet rangeFactor = 1;\n\n\t\t\tif (material.wireframe === true) {\n\t\t\t\tindex = geometries.getWireframeAttribute(geometry);\n\t\t\t\trangeFactor = 2;\n\t\t\t}\n\n\t\t\tif (material.morphTargets || material.morphNormals) {\n\t\t\t\tmorphtargets.update(object, geometry, material, program);\n\t\t\t}\n\n\t\t\tbindingStates.setup(object, material, program, geometry, index);\n\t\t\tlet attribute;\n\t\t\tlet renderer = bufferRenderer;\n\n\t\t\tif (index !== null) {\n\t\t\t\tattribute = attributes.get(index);\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex(attribute);\n\t\t\t} //\n\n\n\t\t\tconst dataCount = index !== null ? index.count : position.count;\n\t\t\tconst rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tconst rangeCount = geometry.drawRange.count * rangeFactor;\n\t\t\tconst groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tconst groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\t\tconst drawStart = Math.max(rangeStart, groupStart);\n\t\t\tconst drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n\t\t\tconst drawCount = Math.max(0, drawEnd - drawStart + 1);\n\t\t\tif (drawCount === 0) return; //\n\n\t\t\tif (object.isMesh) {\n\t\t\t\tif (material.wireframe === true) {\n\t\t\t\t\tstate.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n\t\t\t\t\trenderer.setMode(_gl.LINES);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(_gl.TRIANGLES);\n\t\t\t\t}\n\t\t\t} else if (object.isLine) {\n\t\t\t\tlet lineWidth = material.linewidth;\n\t\t\t\tif (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth(lineWidth * getTargetPixelRatio());\n\n\t\t\t\tif (object.isLineSegments) {\n\t\t\t\t\trenderer.setMode(_gl.LINES);\n\t\t\t\t} else if (object.isLineLoop) {\n\t\t\t\t\trenderer.setMode(_gl.LINE_LOOP);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(_gl.LINE_STRIP);\n\t\t\t\t}\n\t\t\t} else if (object.isPoints) {\n\t\t\t\trenderer.setMode(_gl.POINTS);\n\t\t\t} else if (object.isSprite) {\n\t\t\t\trenderer.setMode(_gl.TRIANGLES);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, object.count);\n\t\t\t} else if (geometry.isInstancedBufferGeometry) {\n\t\t\t\tconst instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, instanceCount);\n\t\t\t} else {\n\t\t\t\trenderer.render(drawStart, drawCount);\n\t\t\t}\n\t\t}; // Compile\n\n\n\t\tthis.compile = function (scene, camera) {\n\t\t\tcurrentRenderState = renderStates.get(scene);\n\t\t\tcurrentRenderState.init();\n\t\t\tscene.traverseVisible(function (object) {\n\t\t\t\tif (object.isLight && object.layers.test(camera.layers)) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tscene.traverse(function (object) {\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif (material) {\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0; i < material.length; i++) {\n\t\t\t\t\t\t\tconst material2 = material[i];\n\t\t\t\t\t\t\tgetProgram(material2, scene, object);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetProgram(material, scene, object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}; // Animation Loop\n\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time) {\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time);\n\t\t}\n\n\t\tfunction onXRSessionStart() {\n\t\t\tanimation.stop();\n\t\t}\n\n\t\tfunction onXRSessionEnd() {\n\t\t\tanimation.start();\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\t\tif (typeof window !== 'undefined') animation.setContext(window);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop(callback);\n\t\t\tcallback === null ? animation.stop() : animation.start();\n\t\t};\n\n\t\txr.addEventListener('sessionstart', onXRSessionStart);\n\t\txr.addEventListener('sessionend', onXRSessionEnd); // Rendering\n\n\t\tthis.render = function (scene, camera) {\n\t\t\tif (camera !== undefined && camera.isCamera !== true) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_isContextLost === true) return; // update scene graph\n\n\t\t\tif (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n\t\t\tif (camera.parent === null) camera.updateMatrixWorld();\n\n\t\t\tif (xr.enabled === true && xr.isPresenting === true) {\n\t\t\t\tif (xr.cameraAutoUpdate === true) xr.updateCamera(camera);\n\t\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);\n\t\t\tcurrentRenderState = renderStates.get(scene, renderStateStack.length);\n\t\t\tcurrentRenderState.init();\n\t\t\trenderStateStack.push(currentRenderState);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\t_frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n\t\t\tcurrentRenderList = renderLists.get(scene, renderListStack.length);\n\t\t\tcurrentRenderList.init();\n\t\t\trenderListStack.push(currentRenderList);\n\t\t\tprojectObject(scene, camera, 0, _this.sortObjects);\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif (_this.sortObjects === true) {\n\t\t\t\tcurrentRenderList.sort(_opaqueSort, _transparentSort);\n\t\t\t} //\n\n\n\t\t\tif (_clippingEnabled === true) clipping.beginShadows();\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tshadowMap.render(shadowsArray, scene, camera);\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tcurrentRenderState.setupLightsView(camera);\n\t\t\tif (_clippingEnabled === true) clipping.endShadows(); //\n\n\t\t\tif (this.info.autoReset === true) this.info.reset(); //\n\n\t\t\tbackground.render(currentRenderList, scene); // render scene\n\n\t\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\t\t\tconst transparentObjects = currentRenderList.transparent;\n\t\t\tif (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n\t\t\tif (transmissiveObjects.length > 0) renderTransmissiveObjects(opaqueObjects, transmissiveObjects, scene, camera);\n\t\t\tif (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); //\n\n\t\t\tif (_currentRenderTarget !== null) {\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\t\t\ttextures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget(_currentRenderTarget);\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onAfterRender(_this, scene, camera); // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest(true);\n\t\t\tstate.buffers.depth.setMask(true);\n\t\t\tstate.buffers.color.setMask(true);\n\t\t\tstate.setPolygonOffset(false); // _gl.finish();\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = -1;\n\t\t\t_currentCamera = null;\n\t\t\trenderStateStack.pop();\n\n\t\t\tif (renderStateStack.length > 0) {\n\t\t\t\tcurrentRenderState = renderStateStack[renderStateStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderState = null;\n\t\t\t}\n\n\t\t\trenderListStack.pop();\n\n\t\t\tif (renderListStack.length > 0) {\n\t\t\t\tcurrentRenderList = renderListStack[renderListStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderList = null;\n\t\t\t}\n\t\t};\n\n\t\tfunction projectObject(object, camera, groupOrder, sortObjects) {\n\t\t\tif (object.visible === false) return;\n\t\t\tconst visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible) {\n\t\t\t\tif (object.isGroup) {\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\t\t\t\t} else if (object.isLOD) {\n\t\t\t\t\tif (object.autoUpdate === true) object.update(camera);\n\t\t\t\t} else if (object.isLight) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isSprite) {\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update(object);\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isImmediateRenderObject) {\n\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);\n\t\t\t\t} else if (object.isMesh || object.isLine || object.isPoints) {\n\t\t\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\t\t\t// update skeleton only once in a frame\n\t\t\t\t\t\tif (object.skeleton.frame !== info.render.frame) {\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsObject(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update(object);\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tprojectObject(children[i], camera, groupOrder, sortObjects);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderTransmissiveObjects(opaqueObjects, transmissiveObjects, scene, camera) {\n\t\t\tif (_transmissionRenderTarget === null) {\n\t\t\t\t_transmissionRenderTarget = new WebGLRenderTarget(1024, 1024, {\n\t\t\t\t\tgenerateMipmaps: true,\n\t\t\t\t\tminFilter: LinearMipmapLinearFilter,\n\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\twrapS: ClampToEdgeWrapping,\n\t\t\t\t\twrapT: ClampToEdgeWrapping\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst currentRenderTarget = _this.getRenderTarget();\n\n\t\t\t_this.setRenderTarget(_transmissionRenderTarget);\n\n\t\t\t_this.clear();\n\n\t\t\trenderObjects(opaqueObjects, scene, camera);\n\t\t\ttextures.updateRenderTargetMipmap(_transmissionRenderTarget);\n\n\t\t\t_this.setRenderTarget(currentRenderTarget);\n\n\t\t\trenderObjects(transmissiveObjects, scene, camera);\n\t\t}\n\n\t\tfunction renderObjects(renderList, scene, camera) {\n\t\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor (let i = 0, l = renderList.length; i < l; i++) {\n\t\t\t\tconst renderItem = renderList[i];\n\t\t\t\tconst object = renderItem.object;\n\t\t\t\tconst geometry = renderItem.geometry;\n\t\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tconst group = renderItem.group;\n\n\t\t\t\tif (camera.isArrayCamera) {\n\t\t\t\t\tconst cameras = camera.cameras;\n\n\t\t\t\t\tfor (let j = 0, jl = cameras.length; j < jl; j++) {\n\t\t\t\t\t\tconst camera2 = cameras[j];\n\n\t\t\t\t\t\tif (object.layers.test(camera2.layers)) {\n\t\t\t\t\t\t\tstate.viewport(_currentViewport.copy(camera2.viewport));\n\t\t\t\t\t\t\tcurrentRenderState.setupLightsView(camera2);\n\t\t\t\t\t\t\trenderObject(object, scene, camera2, geometry, material, group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trenderObject(object, scene, camera, geometry, material, group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObject(object, scene, camera, geometry, material, group) {\n\t\t\tobject.onBeforeRender(_this, scene, camera, geometry, material, group);\n\t\t\tobject.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\t\t\tobject.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n\t\t\tif (object.isImmediateRenderObject) {\n\t\t\t\tconst program = setProgram(camera, scene, material, object);\n\t\t\t\tstate.setMaterial(material);\n\t\t\t\tbindingStates.reset();\n\t\t\t\trenderObjectImmediate(object, program);\n\t\t\t} else {\n\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\t\t\t}\n\n\t\t\tobject.onAfterRender(_this, scene, camera, geometry, material, group);\n\t\t}\n\n\t\tfunction getProgram(material, scene, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tconst lights = currentRenderState.state.lights;\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tconst lightsStateVersion = lights.state.version;\n\t\t\tconst parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n\t\t\tconst programCacheKey = programCache.getProgramCacheKey(parameters);\n\t\t\tlet programs = materialProperties.programs; // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment);\n\n\t\t\tif (programs === undefined) {\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener('dispose', onMaterialDispose);\n\t\t\t\tprograms = new Map();\n\t\t\t\tmaterialProperties.programs = programs;\n\t\t\t}\n\n\t\t\tlet program = programs.get(programCacheKey);\n\n\t\t\tif (program !== undefined) {\n\t\t\t\t// early out if program and light state is identical\n\t\t\t\tif (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {\n\t\t\t\t\tupdateCommonMaterialProperties(material, parameters);\n\t\t\t\t\treturn program;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparameters.uniforms = programCache.getUniforms(material);\n\t\t\t\tmaterial.onBuild(parameters, _this);\n\t\t\t\tmaterial.onBeforeCompile(parameters, _this);\n\t\t\t\tprogram = programCache.acquireProgram(parameters, programCacheKey);\n\t\t\t\tprograms.set(programCacheKey, program);\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t}\n\n\t\t\tconst uniforms = materialProperties.uniforms;\n\n\t\t\tif (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\t\t\t}\n\n\t\t\tupdateCommonMaterialProperties(material, parameters); // store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights(material);\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t// wire up the material to this renderer's lighting state\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n\t\t\t}\n\n\t\t\tconst progUniforms = program.getUniforms();\n\t\t\tconst uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n\t\t\tmaterialProperties.currentProgram = program;\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction updateCommonMaterialProperties(material, parameters) {\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\t\tmaterialProperties.instancing = parameters.instancing;\n\t\t\tmaterialProperties.skinning = parameters.skinning;\n\t\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\t}\n\n\t\tfunction setProgram(camera, scene, material, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\t\tconst envMap = cubemaps.get(material.envMap || environment);\n\t\t\tconst vertexAlphas = material.vertexColors === true && object.geometry && object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4;\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tconst lights = currentRenderState.state.lights;\n\n\t\t\tif (_clippingEnabled === true) {\n\t\t\t\tif (_localClippingEnabled === true || camera !== _currentCamera) {\n\t\t\t\t\tconst useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\n\t\t\t\t\tclipping.setState(material, camera, useCache);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tlet needsProgramChange = false;\n\n\t\t\tif (material.version === materialProperties.__version) {\n\t\t\t\tif (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.outputEncoding !== encoding) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (object.isInstancedMesh && materialProperties.instancing === false) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (!object.isInstancedMesh && materialProperties.instancing === true) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (object.isSkinnedMesh && materialProperties.skinning === false) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (!object.isSkinnedMesh && materialProperties.skinning === true) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.envMap !== envMap) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (material.fog && materialProperties.fog !== fog) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.vertexAlphas !== vertexAlphas) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tneedsProgramChange = true;\n\t\t\t\tmaterialProperties.__version = material.version;\n\t\t\t} //\n\n\n\t\t\tlet program = materialProperties.currentProgram;\n\n\t\t\tif (needsProgramChange === true) {\n\t\t\t\tprogram = getProgram(material, scene, object);\n\t\t\t}\n\n\t\t\tlet refreshProgram = false;\n\t\t\tlet refreshMaterial = false;\n\t\t\tlet refreshLights = false;\n\t\t\tconst p_uniforms = program.getUniforms(),\n\t\t\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif (state.useProgram(program.program)) {\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\t\t\t}\n\n\t\t\tif (material.id !== _currentMaterialId) {\n\t\t\t\t_currentMaterialId = material.id;\n\t\t\t\trefreshMaterial = true;\n\t\t\t}\n\n\t\t\tif (refreshProgram || _currentCamera !== camera) {\n\t\t\t\tp_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n\t\t\t\tif (capabilities.logarithmicDepthBuffer) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n\t\t\t\t}\n\n\t\t\t\tif (_currentCamera !== camera) {\n\t\t\t\t\t_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true; // set to true on material change\n\n\t\t\t\t\trefreshLights = true; // remains set until update done\n\t\t\t\t} // load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\n\t\t\t\tif (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n\t\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif (uCamPos !== undefined) {\n\t\t\t\t\t\tuCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n\t\t\t\t}\n\t\t\t} // skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\n\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrix');\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n\t\t\t\tconst skeleton = object.skeleton;\n\n\t\t\t\tif (skeleton) {\n\t\t\t\t\tif (capabilities.floatVertexTextures) {\n\t\t\t\t\t\tif (skeleton.boneTexture === null) skeleton.computeBoneTexture();\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n\t\t\t}\n\n\t\t\tif (refreshMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n\n\t\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t\t// the current material requires lighting info\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n\t\t\t\t} // refresh uniforms common to several materials\n\n\n\t\t\t\tif (fog && material.fog) {\n\t\t\t\t\tmaterials.refreshFogUniforms(m_uniforms, fog);\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t}\n\n\t\t\tif (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (material.isSpriteMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'center', object.center);\n\t\t\t} // common matrices\n\n\n\t\t\tp_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n\t\t\treturn program;\n\t\t} // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n\t\tfunction markUniformsLightsNeedsUpdate(uniforms, value) {\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\t}\n\n\t\tfunction materialNeedsLights(material) {\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n\t\t}\n\n\t\tthis.getActiveCubeFace = function () {\n\t\t\treturn _currentActiveCubeFace;\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\t\t\treturn _currentActiveMipmapLevel;\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\t\t\treturn _currentRenderTarget;\n\t\t};\n\n\t\tthis.setRenderTarget = function (renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n\t\t\t\ttextures.setupRenderTarget(renderTarget);\n\t\t\t}\n\n\t\t\tlet framebuffer = null;\n\t\t\tlet isCube = false;\n\t\t\tlet isRenderTarget3D = false;\n\n\t\t\tif (renderTarget) {\n\t\t\t\tconst texture = renderTarget.texture;\n\n\t\t\t\tif (texture.isDataTexture3D || texture.isDataTexture2DArray) {\n\t\t\t\t\tisRenderTarget3D = true;\n\t\t\t\t}\n\n\t\t\t\tconst __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\t\tframebuffer = __webglFramebuffer[activeCubeFace];\n\t\t\t\t\tisCube = true;\n\t\t\t\t} else if (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\t\tframebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n\t\t\t\t} else {\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy(renderTarget.viewport);\n\n\t\t\t\t_currentScissor.copy(renderTarget.scissor);\n\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\t\t} else {\n\t\t\t\t_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissorTest = _scissorTest;\n\t\t\t}\n\n\t\t\tconst framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\tif (framebufferBound && capabilities.drawBuffers) {\n\t\t\t\tlet needsUpdate = false;\n\n\t\t\t\tif (renderTarget) {\n\t\t\t\t\tif (renderTarget.isWebGLMultipleRenderTargets) {\n\t\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\t\tif (_currentDrawBuffers.length !== textures.length || _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0) {\n\t\t\t\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\t\t\t\t_currentDrawBuffers[i] = _gl.COLOR_ATTACHMENT0 + i;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_currentDrawBuffers.length = textures.length;\n\t\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0) {\n\t\t\t\t\t\t\t_currentDrawBuffers[0] = _gl.COLOR_ATTACHMENT0;\n\t\t\t\t\t\t\t_currentDrawBuffers.length = 1;\n\t\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== _gl.BACK) {\n\t\t\t\t\t\t_currentDrawBuffers[0] = _gl.BACK;\n\t\t\t\t\t\t_currentDrawBuffers.length = 1;\n\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (needsUpdate) {\n\t\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t\t_gl.drawBuffers(_currentDrawBuffers);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(_currentDrawBuffers);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport);\n\t\t\tstate.scissor(_currentScissor);\n\t\t\tstate.setScissorTest(_currentScissorTest);\n\n\t\t\tif (isCube) {\n\t\t\t\tconst textureProperties = properties.get(renderTarget.texture);\n\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n\t\t\t} else if (isRenderTarget3D) {\n\t\t\t\tconst textureProperties = properties.get(renderTarget.texture);\n\t\t\t\tconst layer = activeCubeFace || 0;\n\n\t\t\t\t_gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);\n\t\t\t}\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n\t\t\tif (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n\t\t\t\tframebuffer = framebuffer[activeCubeFaceIndex];\n\t\t\t}\n\n\t\t\tif (framebuffer) {\n\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\t\tif (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));\n\n\t\t\t\t\tif (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t!halfFloatSupportedByExt) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\t\t\t\t\tif (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n\t\t\t\t\t\t\t_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\t// restore framebuffer of current render target if necessary\n\t\t\t\t\tconst framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;\n\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function (position, texture, level = 0) {\n\t\t\tconst levelScale = Math.pow(2, -level);\n\t\t\tconst width = Math.floor(texture.image.width * levelScale);\n\t\t\tconst height = Math.floor(texture.image.height * levelScale);\n\t\t\tlet glFormat = utils.convert(texture.format);\n\n\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1120100\n\t\t\t\tif (glFormat === _gl.RGB) glFormat = _gl.RGB8;\n\t\t\t\tif (glFormat === _gl.RGBA) glFormat = _gl.RGBA8;\n\t\t\t}\n\n\t\t\ttextures.setTexture2D(texture, 0);\n\n\t\t\t_gl.copyTexImage2D(_gl.TEXTURE_2D, level, glFormat, position.x, position.y, width, height, 0);\n\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture = function (position, srcTexture, dstTexture, level = 0) {\n\t\t\tconst width = srcTexture.image.width;\n\t\t\tconst height = srcTexture.image.height;\n\t\t\tconst glFormat = utils.convert(dstTexture.format);\n\t\t\tconst glType = utils.convert(dstTexture.type);\n\t\t\ttextures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n\t\t\tif (srcTexture.isDataTexture) {\n\t\t\t\t_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n\t\t\t} else {\n\t\t\t\tif (srcTexture.isCompressedTexture) {\n\t\t\t\t\t_gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);\n\t\t\t\t}\n\t\t\t} // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture, level = 0) {\n\t\t\tif (_this.isWebGL1Renderer) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdata\n\t\t\t} = srcTexture.image;\n\t\t\tconst glFormat = utils.convert(dstTexture.format);\n\t\t\tconst glType = utils.convert(dstTexture.type);\n\t\t\tlet glTarget;\n\n\t\t\tif (dstTexture.isDataTexture3D) {\n\t\t\t\ttextures.setTexture3D(dstTexture, 0);\n\t\t\t\tglTarget = _gl.TEXTURE_3D;\n\t\t\t} else if (dstTexture.isDataTexture2DArray) {\n\t\t\t\ttextures.setTexture2DArray(dstTexture, 0);\n\t\t\t\tglTarget = _gl.TEXTURE_2D_ARRAY;\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n\t\t\tconst unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);\n\n\t\t\tconst unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);\n\n\t\t\tconst unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);\n\n\t\t\tconst unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);\n\n\t\t\tconst unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, width);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, height);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);\n\n\t\t\t_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, sourceBox.max.x - sourceBox.min.x + 1, sourceBox.max.y - sourceBox.min.y + 1, sourceBox.max.z - sourceBox.min.z + 1, glFormat, glType, data);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages); // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.initTexture = function (texture) {\n\t\t\ttextures.setTexture2D(texture, 0);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.resetState = function () {\n\t\t\t_currentActiveCubeFace = 0;\n\t\t\t_currentActiveMipmapLevel = 0;\n\t\t\t_currentRenderTarget = null;\n\t\t\tstate.reset();\n\t\t\tbindingStates.reset();\n\t\t};\n\n\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\tdetail: this\n\t\t\t})); // eslint-disable-line no-undef\n\n\t\t}\n\t}\n\n\tclass WebGL1Renderer extends WebGLRenderer {}\n\n\tWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\n\tclass FogExp2 {\n\t\tconstructor(color, density = 0.00025) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.density = density;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new FogExp2(this.color, this.density);\n\t\t}\n\n\t\ttoJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\t\t}\n\n\t}\n\n\tFogExp2.prototype.isFogExp2 = true;\n\n\tclass Fog {\n\t\tconstructor(color, near = 1, far = 1000) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Fog(this.color, this.near, this.far);\n\t\t}\n\n\t\ttoJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\t\t}\n\n\t}\n\n\tFog.prototype.isFog = true;\n\n\tclass Scene extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Scene';\n\t\t\tthis.background = null;\n\t\t\tthis.environment = null;\n\t\t\tthis.fog = null;\n\t\t\tthis.overrideMaterial = null;\n\t\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\t\tdetail: this\n\t\t\t\t})); // eslint-disable-line no-undef\n\n\t\t\t}\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tif (source.background !== null) this.background = source.background.clone();\n\t\t\tif (source.environment !== null) this.environment = source.environment.clone();\n\t\t\tif (source.fog !== null) this.fog = source.fog.clone();\n\t\t\tif (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tif (this.background !== null) data.object.background = this.background.toJSON(meta);\n\t\t\tif (this.environment !== null) data.object.environment = this.environment.toJSON(meta);\n\t\t\tif (this.fog !== null) data.object.fog = this.fog.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tScene.prototype.isScene = true;\n\n\tclass InterleavedBuffer {\n\t\tconstructor(array, stride) {\n\t\t\tthis.array = array;\n\t\t\tthis.stride = stride;\n\t\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\t\t\tthis.usage = StaticDrawUsage;\n\t\t\tthis.updateRange = {\n\t\t\t\toffset: 0,\n\t\t\t\tcount: -1\n\t\t\t};\n\t\t\tthis.version = 0;\n\t\t\tthis.uuid = generateUUID();\n\t\t}\n\n\t\tonUploadCallback() {}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor (let i = 0, l = this.stride; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(value, offset = 0) {\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t}\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n\t\t\t}\n\n\t\t\tconst array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n\t\t\tconst ib = new this.constructor(array, this.stride);\n\t\t\tib.setUsage(this.usage);\n\t\t\treturn ib;\n\t\t}\n\n\t\tonUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t} // generate UUID for array buffer if necessary\n\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));\n\t\t\t} //\n\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\t\t}\n\n\t}\n\n\tInterleavedBuffer.prototype.isInterleavedBuffer = true;\n\n\tconst _vector$6 = /*@__PURE__*/new Vector3();\n\n\tclass InterleavedBufferAttribute {\n\t\tconstructor(interleavedBuffer, itemSize, offset, normalized) {\n\t\t\tthis.name = '';\n\t\t\tthis.data = interleavedBuffer;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.offset = offset;\n\t\t\tthis.normalized = normalized === true;\n\t\t}\n\n\t\tget count() {\n\t\t\treturn this.data.count;\n\t\t}\n\n\t\tget array() {\n\t\t\treturn this.data.array;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tthis.data.needsUpdate = value;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tfor (let i = 0, l = this.data.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(index, x) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset] = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(index, y) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(index, z) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetW(index, w) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetX(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset];\n\t\t}\n\n\t\tgetY(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 1];\n\t\t}\n\n\t\tgetZ(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 2];\n\t\t}\n\n\t\tgetW(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 3];\n\t\t}\n\n\t\tsetXY(index, x, y) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZ(index, x, y, z) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZW(index, x, y, z, w) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\tthis.data.array[index + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0; i < this.count; i++) {\n\t\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (let j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n\t\t\t} else {\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0; i < this.count; i++) {\n\t\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (let j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t} // deinterleave data and save it as an ordinary buffer attribute for now\n\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// save as true interlaved attribtue\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t}\n\n\tInterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\trotation: <float>,\n\t *\tsizeAttenuation: <bool>\n\t * }\n\t */\n\n\tclass SpriteMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SpriteMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.rotation = 0;\n\t\t\tthis.sizeAttenuation = true;\n\t\t\tthis.transparent = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tlet _geometry;\n\n\tconst _intersectPoint = /*@__PURE__*/new Vector3();\n\n\tconst _worldScale = /*@__PURE__*/new Vector3();\n\n\tconst _mvPosition = /*@__PURE__*/new Vector3();\n\n\tconst _alignedPosition = /*@__PURE__*/new Vector2();\n\n\tconst _rotatedPosition = /*@__PURE__*/new Vector2();\n\n\tconst _viewWorldMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _vA = /*@__PURE__*/new Vector3();\n\n\tconst _vB = /*@__PURE__*/new Vector3();\n\n\tconst _vC = /*@__PURE__*/new Vector3();\n\n\tconst _uvA = /*@__PURE__*/new Vector2();\n\n\tconst _uvB = /*@__PURE__*/new Vector2();\n\n\tconst _uvC = /*@__PURE__*/new Vector2();\n\n\tclass Sprite extends Object3D {\n\t\tconstructor(material) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Sprite';\n\n\t\t\tif (_geometry === undefined) {\n\t\t\t\t_geometry = new BufferGeometry();\n\t\t\t\tconst float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n\t\t\t\tconst interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n\t\t\t\t_geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n\t\t\t\t_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n\t\t\t\t_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n\t\t\t}\n\n\t\t\tthis.geometry = _geometry;\n\t\t\tthis.material = material !== undefined ? material : new SpriteMaterial();\n\t\t\tthis.center = new Vector2(0.5, 0.5);\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tif (raycaster.camera === null) {\n\t\t\t\tconsole.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale(this.matrixWorld);\n\n\t\t\t_viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n\t\t\tthis.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n\t\t\t_mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n\t\t\tif (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n\t\t\t\t_worldScale.multiplyScalar(-_mvPosition.z);\n\t\t\t}\n\n\t\t\tconst rotation = this.material.rotation;\n\t\t\tlet sin, cos;\n\n\t\t\tif (rotation !== 0) {\n\t\t\t\tcos = Math.cos(rotation);\n\t\t\t\tsin = Math.sin(rotation);\n\t\t\t}\n\n\t\t\tconst center = this.center;\n\t\t\ttransformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t_uvA.set(0, 0);\n\n\t\t\t_uvB.set(1, 0);\n\n\t\t\t_uvC.set(1, 1); // check first triangle\n\n\n\t\t\tlet intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);\n\n\t\t\tif (intersect === null) {\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t\t_uvB.set(0, 1);\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);\n\n\t\t\t\tif (intersect === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\t\t\t});\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tif (source.center !== undefined) this.center.copy(source.center);\n\t\t\tthis.material = source.material;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSprite.prototype.isSprite = true;\n\n\tfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n\t\tif (sin !== undefined) {\n\t\t\t_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n\t\t\t_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n\t\t} else {\n\t\t\t_rotatedPosition.copy(_alignedPosition);\n\t\t}\n\n\t\tvertexPosition.copy(mvPosition);\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y; // transform to world space\n\n\t\tvertexPosition.applyMatrix4(_viewWorldMatrix);\n\t}\n\n\tconst _v1$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$1 = /*@__PURE__*/new Vector3();\n\n\tclass LOD extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis._currentLevel = 0;\n\t\t\tthis.type = 'LOD';\n\t\t\tObject.defineProperties(this, {\n\t\t\t\tlevels: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: []\n\t\t\t\t},\n\t\t\t\tisLOD: {\n\t\t\t\t\tvalue: true\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.autoUpdate = true;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source, false);\n\t\t\tconst levels = source.levels;\n\n\t\t\tfor (let i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tconst level = levels[i];\n\t\t\t\tthis.addLevel(level.object.clone(), level.distance);\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\treturn this;\n\t\t}\n\n\t\taddLevel(object, distance = 0) {\n\t\t\tdistance = Math.abs(distance);\n\t\t\tconst levels = this.levels;\n\t\t\tlet l;\n\n\t\t\tfor (l = 0; l < levels.length; l++) {\n\t\t\t\tif (distance < levels[l].distance) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlevels.splice(l, 0, {\n\t\t\t\tdistance: distance,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetCurrentLevel() {\n\t\t\treturn this._currentLevel;\n\t\t}\n\n\t\tgetObjectForDistance(distance) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\tlet i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance < levels[i].distance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn levels[i - 1].object;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\t_v1$2.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(_v1$2);\n\t\t\t\tthis.getObjectForDistance(distance).raycast(raycaster, intersects);\n\t\t\t}\n\t\t}\n\n\t\tupdate(camera) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 1) {\n\t\t\t\t_v1$2.setFromMatrixPosition(camera.matrixWorld);\n\n\t\t\t\t_v2$1.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tconst distance = _v1$2.distanceTo(_v2$1) / camera.zoom;\n\t\t\t\tlevels[0].object.visible = true;\n\t\t\t\tlet i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance >= levels[i].distance) {\n\t\t\t\t\t\tlevels[i - 1].object.visible = false;\n\t\t\t\t\t\tlevels[i].object.visible = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tlevels[i].object.visible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tif (this.autoUpdate === false) data.object.autoUpdate = false;\n\t\t\tdata.object.levels = [];\n\t\t\tconst levels = this.levels;\n\n\t\t\tfor (let i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tconst level = levels[i];\n\t\t\t\tdata.object.levels.push({\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tconst _basePosition = /*@__PURE__*/new Vector3();\n\n\tconst _skinIndex = /*@__PURE__*/new Vector4();\n\n\tconst _skinWeight = /*@__PURE__*/new Vector4();\n\n\tconst _vector$5 = /*@__PURE__*/new Vector3();\n\n\tconst _matrix = /*@__PURE__*/new Matrix4();\n\n\tclass SkinnedMesh extends Mesh {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'SkinnedMesh';\n\t\t\tthis.bindMode = 'attached';\n\t\t\tthis.bindMatrix = new Matrix4();\n\t\t\tthis.bindMatrixInverse = new Matrix4();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy(source.bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(source.bindMatrixInverse);\n\t\t\tthis.skeleton = source.skeleton;\n\t\t\treturn this;\n\t\t}\n\n\t\tbind(skeleton, bindMatrix) {\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif (bindMatrix === undefined) {\n\t\t\t\tthis.updateMatrixWorld(true);\n\t\t\t\tthis.skeleton.calculateInverses();\n\t\t\t\tbindMatrix = this.matrixWorld;\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy(bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(bindMatrix).invert();\n\t\t}\n\n\t\tpose() {\n\t\t\tthis.skeleton.pose();\n\t\t}\n\n\t\tnormalizeSkinWeights() {\n\t\t\tconst vector = new Vector4();\n\t\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor (let i = 0, l = skinWeight.count; i < l; i++) {\n\t\t\t\tvector.x = skinWeight.getX(i);\n\t\t\t\tvector.y = skinWeight.getY(i);\n\t\t\t\tvector.z = skinWeight.getZ(i);\n\t\t\t\tvector.w = skinWeight.getW(i);\n\t\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif (scale !== Infinity) {\n\t\t\t\t\tvector.multiplyScalar(scale);\n\t\t\t\t} else {\n\t\t\t\t\tvector.set(1, 0, 0, 0); // do something reasonable\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n\t\t\t}\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\n\t\t\tif (this.bindMode === 'attached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.matrixWorld).invert();\n\t\t\t} else if (this.bindMode === 'detached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.bindMatrix).invert();\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n\t\t\t}\n\t\t}\n\n\t\tboneTransform(index, target) {\n\t\t\tconst skeleton = this.skeleton;\n\t\t\tconst geometry = this.geometry;\n\n\t\t\t_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n\n\t\t\t_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n\n\t\t\t_basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);\n\n\t\t\ttarget.set(0, 0, 0);\n\n\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\tconst weight = _skinWeight.getComponent(i);\n\n\t\t\t\tif (weight !== 0) {\n\t\t\t\t\tconst boneIndex = _skinIndex.getComponent(i);\n\n\t\t\t\t\t_matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n\n\t\t\t\t\ttarget.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn target.applyMatrix4(this.bindMatrixInverse);\n\t\t}\n\n\t}\n\n\tSkinnedMesh.prototype.isSkinnedMesh = true;\n\n\tclass Bone extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Bone';\n\t\t}\n\n\t}\n\n\tBone.prototype.isBone = true;\n\n\tclass DataTexture extends Texture {\n\t\tconstructor(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.image = {\n\t\t\t\tdata: data || null,\n\t\t\t\twidth: width || 1,\n\t\t\t\theight: height || 1\n\t\t\t};\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\tconst _offsetMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _identityMatrix = /*@__PURE__*/new Matrix4();\n\n\tclass Skeleton {\n\t\tconstructor(bones = [], boneInverses = []) {\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.bones = bones.slice(0);\n\t\t\tthis.boneInverses = boneInverses;\n\t\t\tthis.boneMatrices = null;\n\t\t\tthis.boneTexture = null;\n\t\t\tthis.boneTextureSize = 0;\n\t\t\tthis.frame = -1;\n\t\t\tthis.init();\n\t\t}\n\n\t\tinit() {\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\t\t\tthis.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary\n\n\t\t\tif (boneInverses.length === 0) {\n\t\t\t\tthis.calculateInverses();\n\t\t\t} else {\n\t\t\t\t// handle special case\n\t\t\t\tif (bones.length !== boneInverses.length) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n\t\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\t\t\tthis.boneInverses.push(new Matrix4());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcalculateInverses() {\n\t\t\tthis.boneInverses.length = 0;\n\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst inverse = new Matrix4();\n\n\t\t\t\tif (this.bones[i]) {\n\t\t\t\t\tinverse.copy(this.bones[i].matrixWorld).invert();\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push(inverse);\n\t\t\t}\n\t\t}\n\n\t\tpose() {\n\t\t\t// recover the bind-time world matrices\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tbone.matrixWorld.copy(this.boneInverses[i]).invert();\n\t\t\t\t}\n\t\t\t} // compute the local matrices, positions, rotations and scales\n\n\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t\tbone.matrix.copy(bone.parent.matrixWorld).invert();\n\t\t\t\t\t\tbone.matrix.multiply(bone.matrixWorld);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbone.matrix.copy(bone.matrixWorld);\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\t\t\tconst boneMatrices = this.boneMatrices;\n\t\t\tconst boneTexture = this.boneTexture; // flatten bone matrices to array\n\n\t\t\tfor (let i = 0, il = bones.length; i < il; i++) {\n\t\t\t\t// compute the offset between the current and the original transform\n\t\t\t\tconst matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n\n\t\t\t\t_offsetMatrix.toArray(boneMatrices, i * 16);\n\t\t\t}\n\n\t\t\tif (boneTexture !== null) {\n\t\t\t\tboneTexture.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Skeleton(this.bones, this.boneInverses);\n\t\t}\n\n\t\tcomputeBoneTexture() {\n\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t//\t\t\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t//\twith\t8x8\tpixel texture max\t 16 bones * 4 pixels =\t(8 * 8)\n\t\t\t//\t\t\t 16x16 pixel texture max\t 64 bones * 4 pixels = (16 * 16)\n\t\t\t//\t\t\t 32x32 pixel texture max\t256 bones * 4 pixels = (32 * 32)\n\t\t\t//\t\t\t 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\t\tlet size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix\n\n\t\t\tsize = ceilPowerOfTwo(size);\n\t\t\tsize = Math.max(size, 4);\n\t\t\tconst boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n\t\t\tboneMatrices.set(this.boneMatrices); // copy current values\n\n\t\t\tconst boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n\t\t\tthis.boneMatrices = boneMatrices;\n\t\t\tthis.boneTexture = boneTexture;\n\t\t\tthis.boneTextureSize = size;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetBoneByName(name) {\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone.name === name) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tdispose() {\n\t\t\tif (this.boneTexture !== null) {\n\t\t\t\tthis.boneTexture.dispose();\n\t\t\t\tthis.boneTexture = null;\n\t\t\t}\n\t\t}\n\n\t\tfromJSON(json, bones) {\n\t\t\tthis.uuid = json.uuid;\n\n\t\t\tfor (let i = 0, l = json.bones.length; i < l; i++) {\n\t\t\t\tconst uuid = json.bones[i];\n\t\t\t\tlet bone = bones[uuid];\n\n\t\t\t\tif (bone === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push(bone);\n\t\t\t\tthis.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n\t\t\t}\n\n\t\t\tthis.init();\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Skeleton',\n\t\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t\t},\n\t\t\t\tbones: [],\n\t\t\t\tboneInverses: []\n\t\t\t};\n\t\t\tdata.uuid = this.uuid;\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\n\t\t\tfor (let i = 0, l = bones.length; i < l; i++) {\n\t\t\t\tconst bone = bones[i];\n\t\t\t\tdata.bones.push(bone.uuid);\n\t\t\t\tconst boneInverse = boneInverses[i];\n\t\t\t\tdata.boneInverses.push(boneInverse.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tconst _instanceLocalMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _instanceWorldMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _instanceIntersects = [];\n\n\tconst _mesh = /*@__PURE__*/new Mesh();\n\n\tclass InstancedMesh extends Mesh {\n\t\tconstructor(geometry, material, count) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);\n\t\t\tthis.instanceColor = null;\n\t\t\tthis.count = count;\n\t\t\tthis.frustumCulled = false;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.instanceMatrix.copy(source.instanceMatrix);\n\t\t\tif (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\n\t\t\tthis.count = source.count;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetColorAt(index, color) {\n\t\t\tcolor.fromArray(this.instanceColor.array, index * 3);\n\t\t}\n\n\t\tgetMatrixAt(index, matrix) {\n\t\t\tmatrix.fromArray(this.instanceMatrix.array, index * 16);\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst raycastTimes = this.count;\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\t\t\tif (_mesh.material === undefined) return;\n\n\t\t\tfor (let instanceId = 0; instanceId < raycastTimes; instanceId++) {\n\t\t\t\t// calculate the world matrix for each instance\n\t\t\t\tthis.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n\t\t\t\tfor (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n\t\t\t\t\tconst intersect = _instanceIntersects[i];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push(intersect);\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\t\t\t}\n\t\t}\n\n\t\tsetColorAt(index, color) {\n\t\t\tif (this.instanceColor === null) {\n\t\t\t\tthis.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);\n\t\t\t}\n\n\t\t\tcolor.toArray(this.instanceColor.array, index * 3);\n\t\t}\n\n\t\tsetMatrixAt(index, matrix) {\n\t\t\tmatrix.toArray(this.instanceMatrix.array, index * 16);\n\t\t}\n\n\t\tupdateMorphTargets() {}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tInstancedMesh.prototype.isInstancedMesh = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\tlinecap: \"round\",\n\t *\tlinejoin: \"round\"\n\t * }\n\t */\n\n\tclass LineBasicMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineBasicMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.linewidth = 1;\n\t\t\tthis.linecap = 'round';\n\t\t\tthis.linejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.linewidth = source.linewidth;\n\t\t\tthis.linecap = source.linecap;\n\t\t\tthis.linejoin = source.linejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tconst _start$1 = /*@__PURE__*/new Vector3();\n\n\tconst _end$1 = /*@__PURE__*/new Vector3();\n\n\tconst _inverseMatrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _ray$1 = /*@__PURE__*/new Ray();\n\n\tconst _sphere$1 = /*@__PURE__*/new Sphere();\n\n\tclass Line extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Line';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\tcomputeLineDistances() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\t\tconst lineDistances = [0];\n\n\t\t\t\t\tfor (let i = 1, l = positionAttribute.count; i < l; i++) {\n\t\t\t\t\t\t_start$1.fromBufferAttribute(positionAttribute, i - 1);\n\n\t\t\t\t\t\t_end$1.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\tlineDistances[i] = lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i] += _start$1.distanceTo(_end$1);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst threshold = raycaster.params.Line.threshold;\n\t\t\tconst drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$1.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$1.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$1.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$1) === false) return; //\n\n\t\t\t_inverseMatrix$1.copy(matrixWorld).invert();\n\n\t\t\t_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n\n\t\t\tconst localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tconst localThresholdSq = localThreshold * localThreshold;\n\t\t\tconst vStart = new Vector3();\n\t\t\tconst vEnd = new Vector3();\n\t\t\tconst interSegment = new Vector3();\n\t\t\tconst interRay = new Vector3();\n\t\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end - 1; i < l; i += step) {\n\t\t\t\t\t\tconst a = index.getX(i);\n\t\t\t\t\t\tconst b = index.getX(i + 1);\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, a);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, b);\n\n\t\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end - 1; i < l; i += step) {\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, i);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tLine.prototype.isLine = true;\n\n\tconst _start = /*@__PURE__*/new Vector3();\n\n\tconst _end = /*@__PURE__*/new Vector3();\n\n\tclass LineSegments extends Line {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'LineSegments';\n\t\t}\n\n\t\tcomputeLineDistances() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\t\tconst lineDistances = [];\n\n\t\t\t\t\tfor (let i = 0, l = positionAttribute.count; i < l; i += 2) {\n\t\t\t\t\t\t_start.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\t_end.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tlineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineSegments.prototype.isLineSegments = true;\n\n\tclass LineLoop extends Line {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'LineLoop';\n\t\t}\n\n\t}\n\n\tLineLoop.prototype.isLineLoop = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tsize: <float>,\n\t *\tsizeAttenuation: <bool>\n\t *\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tclass PointsMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PointsMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.size = 1;\n\t\t\tthis.sizeAttenuation = true;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.size = source.size;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tconst _inverseMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _ray = /*@__PURE__*/new Ray();\n\n\tconst _sphere = /*@__PURE__*/new Sphere();\n\n\tconst _position$2 = /*@__PURE__*/new Vector3();\n\n\tclass Points extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new PointsMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Points';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst threshold = raycaster.params.Points.threshold;\n\t\t\tconst drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy(geometry.boundingSphere);\n\n\t\t\t_sphere.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n\t\t\t_inverseMatrix.copy(matrixWorld).invert();\n\n\t\t\t_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);\n\n\t\t\tconst localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, il = end; i < il; i++) {\n\t\t\t\t\t\tconst a = index.getX(i);\n\n\t\t\t\t\t\t_position$2.fromBufferAttribute(positionAttribute, a);\n\n\t\t\t\t\t\ttestPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end; i < l; i++) {\n\t\t\t\t\t\t_position$2.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\ttestPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tPoints.prototype.isPoints = true;\n\n\tfunction testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n\t\tconst rayPointDistanceSq = _ray.distanceSqToPoint(point);\n\n\t\tif (rayPointDistanceSq < localThresholdSq) {\n\t\t\tconst intersectPoint = new Vector3();\n\n\t\t\t_ray.closestPointToPoint(point, intersectPoint);\n\n\t\t\tintersectPoint.applyMatrix4(matrixWorld);\n\t\t\tconst distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt(rayPointDistanceSq),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t}\n\t}\n\n\tclass VideoTexture extends Texture {\n\t\tconstructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tsuper(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.format = format !== undefined ? format : RGBFormat;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tconst scope = this;\n\n\t\t\tfunction updateVideo() {\n\t\t\t\tscope.needsUpdate = true;\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\n\t\t\tif ('requestVideoFrameCallback' in video) {\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.image).copy(this);\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst video = this.image;\n\t\t\tconst hasVideoFrameCallback = ('requestVideoFrameCallback' in video);\n\n\t\t\tif (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tVideoTexture.prototype.isVideoTexture = true;\n\n\tclass CompressedTexture extends Texture {\n\t\tconstructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.mipmaps = mipmaps; // no flipping for cube textures\n\t\t\t// (also flipping doesn't work for compressed textures )\n\n\t\t\tthis.flipY = false; // can't generate mipmaps for compressed textures\n\t\t\t// mips must be embedded in DDS files\n\n\t\t\tthis.generateMipmaps = false;\n\t\t}\n\n\t}\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\tclass CanvasTexture extends Texture {\n\t\tconstructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tsuper(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\tclass DepthTexture extends Texture {\n\t\tconstructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {\n\t\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\t\tif (format !== DepthFormat && format !== DepthStencilFormat) {\n\t\t\t\tthrow new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n\t\t\t}\n\n\t\t\tif (type === undefined && format === DepthFormat) type = UnsignedShortType;\n\t\t\tif (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\tthis.flipY = false;\n\t\t\tthis.generateMipmaps = false;\n\t\t}\n\n\t}\n\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\tclass CircleGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CircleGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tsegments = Math.max(3, segments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // center point\n\n\t\t\tvertices.push(0, 0, 0);\n\t\t\tnormals.push(0, 0, 1);\n\t\t\tuvs.push(0.5, 0.5);\n\n\t\t\tfor (let s = 0, i = 3; s <= segments; s++, i += 3) {\n\t\t\t\tconst segment = thetaStart + s / segments * thetaLength; // vertex\n\n\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\tnormals.push(0, 0, 1); // uvs\n\n\t\t\t\tuv.x = (vertices[i] / radius + 1) / 2;\n\t\t\t\tuv.y = (vertices[i + 1] / radius + 1) / 2;\n\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t} // indices\n\n\n\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\tindices.push(i, i + 1, 0);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass CylinderGeometry extends BufferGeometry {\n\t\tconstructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CylinderGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tconst scope = this;\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\theightSegments = Math.floor(heightSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet index = 0;\n\t\t\tconst indexArray = [];\n\t\t\tconst halfHeight = height / 2;\n\t\t\tlet groupStart = 0; // generate geometry\n\n\t\t\tgenerateTorso();\n\n\t\t\tif (openEnded === false) {\n\t\t\t\tif (radiusTop > 0) generateCap(true);\n\t\t\t\tif (radiusBottom > 0) generateCap(false);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction generateTorso() {\n\t\t\t\tconst normal = new Vector3();\n\t\t\t\tconst vertex = new Vector3();\n\t\t\t\tlet groupCount = 0; // this will be used to calculate the normal\n\n\t\t\t\tconst slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n\t\t\t\tfor (let y = 0; y <= heightSegments; y++) {\n\t\t\t\t\tconst indexRow = [];\n\t\t\t\t\tconst v = y / heightSegments; // calculate the radius of the current row\n\n\t\t\t\t\tconst radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n\t\t\t\t\tfor (let x = 0; x <= radialSegments; x++) {\n\t\t\t\t\t\tconst u = x / radialSegments;\n\t\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\t\t\t\t\t\tconst sinTheta = Math.sin(theta);\n\t\t\t\t\t\tconst cosTheta = Math.cos(theta); // vertex\n\n\t\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\t\tvertex.y = -v * height + halfHeight;\n\t\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\t\tnormal.set(sinTheta, slope, cosTheta).normalize();\n\t\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\t\tuvs.push(u, 1 - v); // save index of vertex in respective row\n\n\t\t\t\t\t\tindexRow.push(index++);\n\t\t\t\t\t} // now save vertices of the row in our index array\n\n\n\t\t\t\t\tindexArray.push(indexRow);\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (let x = 0; x < radialSegments; x++) {\n\t\t\t\t\tfor (let y = 0; y < heightSegments; y++) {\n\t\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\t\tconst a = indexArray[y][x];\n\t\t\t\t\t\tconst b = indexArray[y + 1][x];\n\t\t\t\t\t\tconst c = indexArray[y + 1][x + 1];\n\t\t\t\t\t\tconst d = indexArray[y][x + 1]; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // update group counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\tfunction generateCap(top) {\n\t\t\t\t// save the index of the first center vertex\n\t\t\t\tconst centerIndexStart = index;\n\t\t\t\tconst uv = new Vector2();\n\t\t\t\tconst vertex = new Vector3();\n\t\t\t\tlet groupCount = 0;\n\t\t\t\tconst radius = top === true ? radiusTop : radiusBottom;\n\t\t\t\tconst sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.\n\t\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\t\tfor (let x = 1; x <= radialSegments; x++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertices.push(0, halfHeight * sign, 0); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuvs.push(0.5, 0.5); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // save the index of the last center vertex\n\n\n\t\t\t\tconst centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n\t\t\t\tfor (let x = 0; x <= radialSegments; x++) {\n\t\t\t\t\tconst u = x / radialSegments;\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\t\t\t\t\tconst cosTheta = Math.cos(theta);\n\t\t\t\t\tconst sinTheta = Math.sin(theta); // vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuv.x = cosTheta * 0.5 + 0.5;\n\t\t\t\t\tuv.y = sinTheta * 0.5 * sign + 0.5;\n\t\t\t\t\tuvs.push(uv.x, uv.y); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (let x = 0; x < radialSegments; x++) {\n\t\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\t\tif (top === true) {\n\t\t\t\t\t\t// face top\n\t\t\t\t\t\tindices.push(i, i + 1, c);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// face bottom\n\t\t\t\t\t\tindices.push(i + 1, i, c);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass ConeGeometry extends CylinderGeometry {\n\t\tconstructor(radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n\t\t\tthis.type = 'ConeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t}\n\n\t}\n\n\tclass PolyhedronGeometry extends BufferGeometry {\n\t\tconstructor(vertices, indices, radius = 1, detail = 0) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PolyhedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t}; // default buffer data\n\n\t\t\tconst vertexBuffer = [];\n\t\t\tconst uvBuffer = []; // the subdivision creates the vertex buffer data\n\n\t\t\tsubdivide(detail); // all vertices should lie on a conceptual sphere with a given radius\n\n\t\t\tapplyRadius(radius); // finally, create the uv data\n\n\t\t\tgenerateUVs(); // build non-indexed geometry\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n\n\t\t\tif (detail === 0) {\n\t\t\t\tthis.computeVertexNormals(); // flat normals\n\t\t\t} else {\n\t\t\t\tthis.normalizeNormals(); // smooth normals\n\t\t\t} // helper functions\n\n\n\t\t\tfunction subdivide(detail) {\n\t\t\t\tconst a = new Vector3();\n\t\t\t\tconst b = new Vector3();\n\t\t\t\tconst c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\t\tfor (let i = 0; i < indices.length; i += 3) {\n\t\t\t\t\t// get the vertices of the face\n\t\t\t\t\tgetVertexByIndex(indices[i + 0], a);\n\t\t\t\t\tgetVertexByIndex(indices[i + 1], b);\n\t\t\t\t\tgetVertexByIndex(indices[i + 2], c); // perform subdivision\n\n\t\t\t\t\tsubdivideFace(a, b, c, detail);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction subdivideFace(a, b, c, detail) {\n\t\t\t\tconst cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\t\tconst v = []; // construct all of the vertices for this subdivision\n\n\t\t\t\tfor (let i = 0; i <= cols; i++) {\n\t\t\t\t\tv[i] = [];\n\t\t\t\t\tconst aj = a.clone().lerp(c, i / cols);\n\t\t\t\t\tconst bj = b.clone().lerp(c, i / cols);\n\t\t\t\t\tconst rows = cols - i;\n\n\t\t\t\t\tfor (let j = 0; j <= rows; j++) {\n\t\t\t\t\t\tif (j === 0 && i === cols) {\n\t\t\t\t\t\t\tv[i][j] = aj;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv[i][j] = aj.clone().lerp(bj, j / rows);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // construct all of the faces\n\n\n\t\t\t\tfor (let i = 0; i < cols; i++) {\n\t\t\t\t\tfor (let j = 0; j < 2 * (cols - i) - 1; j++) {\n\t\t\t\t\t\tconst k = Math.floor(j / 2);\n\n\t\t\t\t\t\tif (j % 2 === 0) {\n\t\t\t\t\t\t\tpushVertex(v[i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k]);\n\t\t\t\t\t\t\tpushVertex(v[i][k]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpushVertex(v[i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction applyRadius(radius) {\n\t\t\t\tconst vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\t\tfor (let i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvertex.normalize().multiplyScalar(radius);\n\t\t\t\t\tvertexBuffer[i + 0] = vertex.x;\n\t\t\t\t\tvertexBuffer[i + 1] = vertex.y;\n\t\t\t\t\tvertexBuffer[i + 2] = vertex.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tconst vertex = new Vector3();\n\n\t\t\t\tfor (let i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tconst u = azimuth(vertex) / 2 / Math.PI + 0.5;\n\t\t\t\t\tconst v = inclination(vertex) / Math.PI + 0.5;\n\t\t\t\t\tuvBuffer.push(u, 1 - v);\n\t\t\t\t}\n\n\t\t\t\tcorrectUVs();\n\t\t\t\tcorrectSeam();\n\t\t\t}\n\n\t\t\tfunction correctSeam() {\n\t\t\t\t// handle case when face straddles the seam, see #3269\n\t\t\t\tfor (let i = 0; i < uvBuffer.length; i += 6) {\n\t\t\t\t\t// uv data of a single face\n\t\t\t\t\tconst x0 = uvBuffer[i + 0];\n\t\t\t\t\tconst x1 = uvBuffer[i + 2];\n\t\t\t\t\tconst x2 = uvBuffer[i + 4];\n\t\t\t\t\tconst max = Math.max(x0, x1, x2);\n\t\t\t\t\tconst min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary\n\n\t\t\t\t\tif (max > 0.9 && min < 0.1) {\n\t\t\t\t\t\tif (x0 < 0.2) uvBuffer[i + 0] += 1;\n\t\t\t\t\t\tif (x1 < 0.2) uvBuffer[i + 2] += 1;\n\t\t\t\t\t\tif (x2 < 0.2) uvBuffer[i + 4] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction pushVertex(vertex) {\n\t\t\t\tvertexBuffer.push(vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\n\t\t\tfunction getVertexByIndex(index, vertex) {\n\t\t\t\tconst stride = index * 3;\n\t\t\t\tvertex.x = vertices[stride + 0];\n\t\t\t\tvertex.y = vertices[stride + 1];\n\t\t\t\tvertex.z = vertices[stride + 2];\n\t\t\t}\n\n\t\t\tfunction correctUVs() {\n\t\t\t\tconst a = new Vector3();\n\t\t\t\tconst b = new Vector3();\n\t\t\t\tconst c = new Vector3();\n\t\t\t\tconst centroid = new Vector3();\n\t\t\t\tconst uvA = new Vector2();\n\t\t\t\tconst uvB = new Vector2();\n\t\t\t\tconst uvC = new Vector2();\n\n\t\t\t\tfor (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n\t\t\t\t\ta.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n\t\t\t\t\tb.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n\t\t\t\t\tc.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n\t\t\t\t\tuvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n\t\t\t\t\tuvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n\t\t\t\t\tuvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n\t\t\t\t\tcentroid.copy(a).add(b).add(c).divideScalar(3);\n\t\t\t\t\tconst azi = azimuth(centroid);\n\t\t\t\t\tcorrectUV(uvA, j + 0, a, azi);\n\t\t\t\t\tcorrectUV(uvB, j + 2, b, azi);\n\t\t\t\t\tcorrectUV(uvC, j + 4, c, azi);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction correctUV(uv, stride, vector, azimuth) {\n\t\t\t\tif (azimuth < 0 && uv.x === 1) {\n\t\t\t\t\tuvBuffer[stride] = uv.x - 1;\n\t\t\t\t}\n\n\t\t\t\tif (vector.x === 0 && vector.z === 0) {\n\t\t\t\t\tuvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n\t\t\t\t}\n\t\t\t} // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n\t\t\tfunction azimuth(vector) {\n\t\t\t\treturn Math.atan2(vector.z, -vector.x);\n\t\t\t} // Angle above the XZ plane.\n\n\n\t\t\tfunction inclination(vector) {\n\t\t\t\treturn Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass DodecahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst t = (1 + Math.sqrt(5)) / 2;\n\t\t\tconst r = 1 / t;\n\t\t\tconst vertices = [// (±1, ±1, ±1)\n\t\t\t-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n\t\t\t0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n\t\t\t-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n\t\t\t-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n\t\t\tconst indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'DodecahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\tconst _v0 = new Vector3();\n\n\tconst _v1$1 = new Vector3();\n\n\tconst _normal = new Vector3();\n\n\tconst _triangle = new Triangle();\n\n\tclass EdgesGeometry extends BufferGeometry {\n\t\tconstructor(geometry, thresholdAngle) {\n\t\t\tsuper();\n\t\t\tthis.type = 'EdgesGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tthresholdAngle: thresholdAngle\n\t\t\t};\n\t\t\tthresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow(10, precisionPoints);\n\t\t\tconst thresholdDot = Math.cos(DEG2RAD * thresholdAngle);\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute('position');\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\t\t\tconst indexArr = [0, 0, 0];\n\t\t\tconst vertKeys = ['a', 'b', 'c'];\n\t\t\tconst hashes = new Array(3);\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\n\t\t\tfor (let i = 0; i < indexCount; i += 3) {\n\t\t\t\tif (indexAttr) {\n\t\t\t\t\tindexArr[0] = indexAttr.getX(i);\n\t\t\t\t\tindexArr[1] = indexAttr.getX(i + 1);\n\t\t\t\t\tindexArr[2] = indexAttr.getX(i + 2);\n\t\t\t\t} else {\n\t\t\t\t\tindexArr[0] = i;\n\t\t\t\t\tindexArr[1] = i + 1;\n\t\t\t\t\tindexArr[2] = i + 2;\n\t\t\t\t}\n\n\t\t\t\tconst {\n\t\t\t\t\ta,\n\t\t\t\t\tb,\n\t\t\t\t\tc\n\t\t\t\t} = _triangle;\n\t\t\t\ta.fromBufferAttribute(positionAttr, indexArr[0]);\n\t\t\t\tb.fromBufferAttribute(positionAttr, indexArr[1]);\n\t\t\t\tc.fromBufferAttribute(positionAttr, indexArr[2]);\n\n\t\t\t\t_triangle.getNormal(_normal); // create hashes for the edge from the vertices\n\n\n\t\t\t\thashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;\n\t\t\t\thashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;\n\t\t\t\thashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`; // skip degenerate triangles\n\n\t\t\t\tif (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} // iterate over every edge\n\n\n\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = (j + 1) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[j];\n\t\t\t\t\tconst vecHash1 = hashes[jNext];\n\t\t\t\t\tconst v0 = _triangle[vertKeys[j]];\n\t\t\t\t\tconst v1 = _triangle[vertKeys[jNext]];\n\t\t\t\t\tconst hash = `${vecHash0}_${vecHash1}`;\n\t\t\t\t\tconst reverseHash = `${vecHash1}_${vecHash0}`;\n\n\t\t\t\t\tif (reverseHash in edgeData && edgeData[reverseHash]) {\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n\t\t\t\t\t\t\tvertices.push(v0.x, v0.y, v0.z);\n\t\t\t\t\t\t\tvertices.push(v1.x, v1.y, v1.z);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[reverseHash] = null;\n\t\t\t\t\t} else if (!(hash in edgeData)) {\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[hash] = {\n\t\t\t\t\t\t\tindex0: indexArr[j],\n\t\t\t\t\t\t\tindex1: indexArr[jNext],\n\t\t\t\t\t\t\tnormal: _normal.clone()\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // iterate over all remaining, unmatched edges and add them to the vertex array\n\n\n\t\t\tfor (const key in edgeData) {\n\t\t\t\tif (edgeData[key]) {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tindex0,\n\t\t\t\t\t\tindex1\n\t\t\t\t\t} = edgeData[key];\n\n\t\t\t\t\t_v0.fromBufferAttribute(positionAttr, index0);\n\n\t\t\t\t\t_v1$1.fromBufferAttribute(positionAttr, index1);\n\n\t\t\t\t\tvertices.push(_v0.x, _v0.y, _v0.z);\n\t\t\t\t\tvertices.push(_v1$1.x, _v1$1.y, _v1$1.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t}\n\n\t}\n\n\t/**\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\tconst Earcut = {\n\t\ttriangulate: function (data, holeIndices, dim) {\n\t\t\tdim = dim || 2;\n\t\t\tconst hasHoles = holeIndices && holeIndices.length;\n\t\t\tconst outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\t\t\tlet outerNode = linkedList(data, 0, outerLen, dim, true);\n\t\t\tconst triangles = [];\n\t\t\tif (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\t\t\tlet minX, minY, maxX, maxY, x, y, invSize;\n\t\t\tif (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\t\tif (data.length > 80 * dim) {\n\t\t\t\tminX = maxX = data[0];\n\t\t\t\tminY = maxY = data[1];\n\n\t\t\t\tfor (let i = dim; i < outerLen; i += dim) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t\ty = data[i + 1];\n\t\t\t\t\tif (x < minX) minX = x;\n\t\t\t\t\tif (y < minY) minY = y;\n\t\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\t} // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n\t\t\t\tinvSize = Math.max(maxX - minX, maxY - minY);\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\t\t\t}\n\n\t\t\tearcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\t\t\treturn triangles;\n\t\t}\n\t}; // create a circular doubly linked list from polygon points in the specified winding order\n\n\tfunction linkedList(data, start, end, dim, clockwise) {\n\t\tlet i, last;\n\n\t\tif (clockwise === signedArea(data, start, end, dim) > 0) {\n\t\t\tfor (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n\t\t} else {\n\t\t\tfor (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n\t\t}\n\n\t\tif (last && equals(last, last.next)) {\n\t\t\tremoveNode(last);\n\t\t\tlast = last.next;\n\t\t}\n\n\t\treturn last;\n\t} // eliminate colinear or duplicate points\n\n\n\tfunction filterPoints(start, end) {\n\t\tif (!start) return start;\n\t\tif (!end) end = start;\n\t\tlet p = start,\n\t\t\t\tagain;\n\n\t\tdo {\n\t\t\tagain = false;\n\n\t\t\tif (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n\t\t\t\tremoveNode(p);\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif (p === p.next) break;\n\t\t\t\tagain = true;\n\t\t\t} else {\n\t\t\t\tp = p.next;\n\t\t\t}\n\t\t} while (again || p !== end);\n\n\t\treturn end;\n\t} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\n\tfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n\t\tif (!ear) return; // interlink polygon nodes in z-order\n\n\t\tif (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\t\tlet stop = ear,\n\t\t\t\tprev,\n\t\t\t\tnext; // iterate through ears, slicing them one by one\n\n\t\twhile (ear.prev !== ear.next) {\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push(prev.i / dim);\n\t\t\t\ttriangles.push(ear.i / dim);\n\t\t\t\ttriangles.push(next.i / dim);\n\t\t\t\tremoveNode(ear); // skipping the next vertex leads to less sliver triangles\n\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n\t\t\tif (ear === stop) {\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif (!pass) {\n\t\t\t\t\tearcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n\t\t\t\t} else if (pass === 1) {\n\t\t\t\t\tear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n\t\t\t\t\tearcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n\t\t\t\t} else if (pass === 2) {\n\t\t\t\t\tsplitEarcut(ear, triangles, dim, minX, minY, invSize);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\n\tfunction isEar(ear) {\n\t\tconst a = ear.prev,\n\t\t\t\t\tb = ear,\n\t\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// now make sure we don't have other points inside the potential ear\n\n\t\tlet p = ear.next.next;\n\n\t\twhile (p !== ear.prev) {\n\t\t\tif (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.next;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction isEarHashed(ear, minX, minY, invSize) {\n\t\tconst a = ear.prev,\n\t\t\t\t\tb = ear,\n\t\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// triangle bbox; min & max are calculated like this for speed\n\n\t\tconst minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n\t\t\t\t\tminTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n\t\t\t\t\tmaxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n\t\t\t\t\tmaxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n\t\tconst minZ = zOrder(minTX, minTY, minX, minY, invSize),\n\t\t\t\t\tmaxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\t\tlet p = ear.prevZ,\n\t\t\t\tn = ear.nextZ; // look for points inside the triangle in both directions\n\n\t\twhile (p && p.z >= minZ && n && n.z <= maxZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t} // look for remaining points in decreasing z-order\n\n\n\t\twhile (p && p.z >= minZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t} // look for remaining points in increasing z-order\n\n\n\t\twhile (n && n.z <= maxZ) {\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t}\n\n\t\treturn true;\n\t} // go through all polygon nodes and cure small local self-intersections\n\n\n\tfunction cureLocalIntersections(start, triangles, dim) {\n\t\tlet p = start;\n\n\t\tdo {\n\t\t\tconst a = p.prev,\n\t\t\t\t\t\tb = p.next.next;\n\n\t\t\tif (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\t\t\t\ttriangles.push(a.i / dim);\n\t\t\t\ttriangles.push(p.i / dim);\n\t\t\t\ttriangles.push(b.i / dim); // remove two nodes involved\n\n\t\t\t\tremoveNode(p);\n\t\t\t\tremoveNode(p.next);\n\t\t\t\tp = start = b;\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn filterPoints(p);\n\t} // try splitting polygon into two and triangulate them independently\n\n\n\tfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tlet a = start;\n\n\t\tdo {\n\t\t\tlet b = a.next.next;\n\n\t\t\twhile (b !== a.prev) {\n\t\t\t\tif (a.i !== b.i && isValidDiagonal(a, b)) {\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tlet c = splitPolygon(a, b); // filter colinear points around the cuts\n\n\t\t\t\t\ta = filterPoints(a, a.next);\n\t\t\t\t\tc = filterPoints(c, c.next); // run earcut on each half\n\n\t\t\t\t\tearcutLinked(a, triangles, dim, minX, minY, invSize);\n\t\t\t\t\tearcutLinked(c, triangles, dim, minX, minY, invSize);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\t\t\t}\n\n\t\t\ta = a.next;\n\t\t} while (a !== start);\n\t} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\n\tfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n\t\tconst queue = [];\n\t\tlet i, len, start, end, list;\n\n\t\tfor (i = 0, len = holeIndices.length; i < len; i++) {\n\t\t\tstart = holeIndices[i] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n\t\t\tlist = linkedList(data, start, end, dim, false);\n\t\t\tif (list === list.next) list.steiner = true;\n\t\t\tqueue.push(getLeftmost(list));\n\t\t}\n\n\t\tqueue.sort(compareX); // process holes from left to right\n\n\t\tfor (i = 0; i < queue.length; i++) {\n\t\t\teliminateHole(queue[i], outerNode);\n\t\t\touterNode = filterPoints(outerNode, outerNode.next);\n\t\t}\n\n\t\treturn outerNode;\n\t}\n\n\tfunction compareX(a, b) {\n\t\treturn a.x - b.x;\n\t} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\n\tfunction eliminateHole(hole, outerNode) {\n\t\touterNode = findHoleBridge(hole, outerNode);\n\n\t\tif (outerNode) {\n\t\t\tconst b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n\t\t\tfilterPoints(outerNode, outerNode.next);\n\t\t\tfilterPoints(b, b.next);\n\t\t}\n\t} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\n\tfunction findHoleBridge(hole, outerNode) {\n\t\tlet p = outerNode;\n\t\tconst hx = hole.x;\n\t\tconst hy = hole.y;\n\t\tlet qx = -Infinity,\n\t\t\t\tm; // find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\n\t\tdo {\n\t\t\tif (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n\t\t\t\tconst x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n\t\t\t\tif (x <= hx && x > qx) {\n\t\t\t\t\tqx = x;\n\n\t\t\t\t\tif (x === hx) {\n\t\t\t\t\t\tif (hy === p.y) return p;\n\t\t\t\t\t\tif (hy === p.next.y) return p.next;\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== outerNode);\n\n\t\tif (!m) return null;\n\t\tif (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tconst stop = m,\n\t\t\t\t\tmx = m.x,\n\t\t\t\t\tmy = m.y;\n\t\tlet tanMin = Infinity,\n\t\t\t\ttan;\n\t\tp = m;\n\n\t\tdo {\n\t\t\tif (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\t\t\t\ttan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n\t\t\t\tif (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== stop);\n\n\t\treturn m;\n\t} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\n\tfunction sectorContainsSector(m, p) {\n\t\treturn area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n\t} // interlink polygon nodes in z-order\n\n\n\tfunction indexCurve(start, minX, minY, invSize) {\n\t\tlet p = start;\n\n\t\tdo {\n\t\t\tif (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\t\tsortLinked(p);\n\t} // Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\n\tfunction sortLinked(list) {\n\t\tlet i,\n\t\t\t\tp,\n\t\t\t\tq,\n\t\t\t\te,\n\t\t\t\ttail,\n\t\t\t\tnumMerges,\n\t\t\t\tpSize,\n\t\t\t\tqSize,\n\t\t\t\tinSize = 1;\n\n\t\tdo {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile (p) {\n\t\t\t\tnumMerges++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\n\t\t\t\tfor (i = 0; i < inSize; i++) {\n\t\t\t\t\tpSize++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif (!q) break;\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile (pSize > 0 || qSize > 0 && q) {\n\t\t\t\t\tif (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tail) tail.nextZ = e;else list = e;\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\t\t} while (numMerges > 1);\n\n\t\treturn list;\n\t} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\n\tfunction zOrder(x, y, minX, minY, invSize) {\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * (x - minX) * invSize;\n\t\ty = 32767 * (y - minY) * invSize;\n\t\tx = (x | x << 8) & 0x00FF00FF;\n\t\tx = (x | x << 4) & 0x0F0F0F0F;\n\t\tx = (x | x << 2) & 0x33333333;\n\t\tx = (x | x << 1) & 0x55555555;\n\t\ty = (y | y << 8) & 0x00FF00FF;\n\t\ty = (y | y << 4) & 0x0F0F0F0F;\n\t\ty = (y | y << 2) & 0x33333333;\n\t\ty = (y | y << 1) & 0x55555555;\n\t\treturn x | y << 1;\n\t} // find the leftmost node of a polygon ring\n\n\n\tfunction getLeftmost(start) {\n\t\tlet p = start,\n\t\t\t\tleftmost = start;\n\n\t\tdo {\n\t\t\tif (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn leftmost;\n\t} // check if a point lies within a convex triangle\n\n\n\tfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n\t\treturn (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n\t} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\n\tfunction isValidDiagonal(a, b) {\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n\t\tlocallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n\t\tarea(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n\t\tequals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n\t} // signed area of a triangle\n\n\n\tfunction area(p, q, r) {\n\t\treturn (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n\t} // check if two points are equal\n\n\n\tfunction equals(p1, p2) {\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\t} // check if two segments intersect\n\n\n\tfunction intersects(p1, q1, p2, q2) {\n\t\tconst o1 = sign(area(p1, q1, p2));\n\t\tconst o2 = sign(area(p1, q1, q2));\n\t\tconst o3 = sign(area(p2, q2, p1));\n\t\tconst o4 = sign(area(p2, q2, q1));\n\t\tif (o1 !== o2 && o3 !== o4) return true; // general case\n\n\t\tif (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n\t\tif (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n\t\tif (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n\t\tif (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\t} // for collinear points p, q, r, check if point q lies on segment pr\n\n\n\tfunction onSegment(p, q, r) {\n\t\treturn q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n\t}\n\n\tfunction sign(num) {\n\t\treturn num > 0 ? 1 : num < 0 ? -1 : 0;\n\t} // check if a polygon diagonal intersects any polygon segments\n\n\n\tfunction intersectsPolygon(a, b) {\n\t\tlet p = a;\n\n\t\tdo {\n\t\t\tif (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn false;\n\t} // check if a polygon diagonal is locally inside the polygon\n\n\n\tfunction locallyInside(a, b) {\n\t\treturn area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n\t} // check if the middle point of a polygon diagonal is inside the polygon\n\n\n\tfunction middleInside(a, b) {\n\t\tlet p = a,\n\t\t\t\tinside = false;\n\t\tconst px = (a.x + b.x) / 2,\n\t\t\t\t\tpy = (a.y + b.y) / 2;\n\n\t\tdo {\n\t\t\tif (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn inside;\n\t} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\n\tfunction splitPolygon(a, b) {\n\t\tconst a2 = new Node(a.i, a.x, a.y),\n\t\t\t\t\tb2 = new Node(b.i, b.x, b.y),\n\t\t\t\t\tan = a.next,\n\t\t\t\t\tbp = b.prev;\n\t\ta.next = b;\n\t\tb.prev = a;\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\t\treturn b2;\n\t} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\n\tfunction insertNode(i, x, y, last) {\n\t\tconst p = new Node(i, x, y);\n\n\t\tif (!last) {\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\t\t} else {\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\t\t}\n\n\t\treturn p;\n\t}\n\n\tfunction removeNode(p) {\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\t\tif (p.prevZ) p.prevZ.nextZ = p.nextZ;\n\t\tif (p.nextZ) p.nextZ.prevZ = p.prevZ;\n\t}\n\n\tfunction Node(i, x, y) {\n\t\t// vertex index in coordinates array\n\t\tthis.i = i; // vertex coordinates\n\n\t\tthis.x = x;\n\t\tthis.y = y; // previous and next vertex nodes in a polygon ring\n\n\t\tthis.prev = null;\n\t\tthis.next = null; // z-order curve value\n\n\t\tthis.z = null; // previous and next nodes in z-order\n\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null; // indicates whether this is a steiner point\n\n\t\tthis.steiner = false;\n\t}\n\n\tfunction signedArea(data, start, end, dim) {\n\t\tlet sum = 0;\n\n\t\tfor (let i = start, j = end - dim; i < end; i += dim) {\n\t\t\tsum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n\t\t\tj = i;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\tclass ShapeUtils {\n\t\t// calculate area of the contour polygon\n\t\tstatic area(contour) {\n\t\t\tconst n = contour.length;\n\t\t\tlet a = 0.0;\n\n\t\t\tfor (let p = n - 1, q = 0; q < n; p = q++) {\n\t\t\t\ta += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\t\t}\n\n\t\tstatic isClockWise(pts) {\n\t\t\treturn ShapeUtils.area(pts) < 0;\n\t\t}\n\n\t\tstatic triangulateShape(contour, holes) {\n\t\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\n\t\t\tconst holeIndices = []; // array of hole indices\n\n\t\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts(contour);\n\t\t\taddContour(vertices, contour); //\n\n\t\t\tlet holeIndex = contour.length;\n\t\t\tholes.forEach(removeDupEndPts);\n\n\t\t\tfor (let i = 0; i < holes.length; i++) {\n\t\t\t\tholeIndices.push(holeIndex);\n\t\t\t\tholeIndex += holes[i].length;\n\t\t\t\taddContour(vertices, holes[i]);\n\t\t\t} //\n\n\n\t\t\tconst triangles = Earcut.triangulate(vertices, holeIndices); //\n\n\t\t\tfor (let i = 0; i < triangles.length; i += 3) {\n\t\t\t\tfaces.push(triangles.slice(i, i + 3));\n\t\t\t}\n\n\t\t\treturn faces;\n\t\t}\n\n\t}\n\n\tfunction removeDupEndPts(points) {\n\t\tconst l = points.length;\n\n\t\tif (l > 2 && points[l - 1].equals(points[0])) {\n\t\t\tpoints.pop();\n\t\t}\n\t}\n\n\tfunction addContour(vertices, contour) {\n\t\tfor (let i = 0; i < contour.length; i++) {\n\t\t\tvertices.push(contour[i].x);\n\t\t\tvertices.push(contour[i].y);\n\t\t}\n\t}\n\n\t/**\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *\tcurveSegments: <int>, // number of points on the curves\n\t *\tsteps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *\tdepth: <float>, // Depth to extrude the shape\n\t *\n\t *\tbevelEnabled: <bool>, // turn on bevel\n\t *\tbevelThickness: <float>, // how deep into the original shape bevel goes\n\t *\tbevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *\tbevelOffset: <float>, // how far from shape outline does bevel start\n\t *\tbevelSegments: <int>, // number of bevel layers\n\t *\n\t *\textrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *\tUVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\tclass ExtrudeGeometry extends BufferGeometry {\n\t\tconstructor(shapes, options) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ExtrudeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t\tshapes = Array.isArray(shapes) ? shapes : [shapes];\n\t\t\tconst scope = this;\n\t\t\tconst verticesArray = [];\n\t\t\tconst uvArray = [];\n\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\taddShape(shape);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n\t\t\tthis.computeVertexNormals(); // functions\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tconst placeholder = []; // options\n\n\t\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\t\tlet depth = options.depth !== undefined ? options.depth : 100;\n\t\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\t\t\tconst extrudePath = options.extrudePath;\n\t\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options\n\n\t\t\t\tif (options.amount !== undefined) {\n\t\t\t\t\tconsole.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');\n\t\t\t\t\tdepth = options.amount;\n\t\t\t\t} //\n\n\n\t\t\t\tlet extrudePts,\n\t\t\t\t\t\textrudeByPath = false;\n\t\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\t\tif (extrudePath) {\n\t\t\t\t\textrudePts = extrudePath.getSpacedPoints(steps);\n\t\t\t\t\textrudeByPath = true;\n\t\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\t\t\t\t// SETUP TNB variables\n\t\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\t\tsplineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\t\tbinormal = new Vector3();\n\t\t\t\t\tnormal = new Vector3();\n\t\t\t\t\tposition2 = new Vector3();\n\t\t\t\t} // Safeguards if bevels are not enabled\n\n\n\t\t\t\tif (!bevelEnabled) {\n\t\t\t\t\tbevelSegments = 0;\n\t\t\t\t\tbevelThickness = 0;\n\t\t\t\t\tbevelSize = 0;\n\t\t\t\t\tbevelOffset = 0;\n\t\t\t\t} // Variables initialization\n\n\n\t\t\t\tconst shapePoints = shape.extractPoints(curveSegments);\n\t\t\t\tlet vertices = shapePoints.shape;\n\t\t\t\tconst holes = shapePoints.holes;\n\t\t\t\tconst reverse = !ShapeUtils.isClockWise(vertices);\n\n\t\t\t\tif (reverse) {\n\t\t\t\t\tvertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\n\t\t\t\t\t\tif (ShapeUtils.isClockWise(ahole)) {\n\t\t\t\t\t\t\tholes[h] = ahole.reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst faces = ShapeUtils.triangulateShape(vertices, holes);\n\t\t\t\t/* Vertices */\n\n\t\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\tvertices = vertices.concat(ahole);\n\t\t\t\t}\n\n\t\t\t\tfunction scalePt2(pt, vec, size) {\n\t\t\t\t\tif (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n\t\t\t\t\treturn vec.clone().multiplyScalar(size).add(pt);\n\t\t\t\t}\n\n\t\t\t\tconst vlen = vertices.length,\n\t\t\t\t\t\t\tflen = faces.length; // Find directions for point movement\n\n\t\t\t\tfunction getBevelVec(inPt, inPrev, inNext) {\n\t\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t\t//\t shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t\t//\n\t\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t\t//\tadjacent edges of inPt at a distance of 1 unit on the left side.\n\t\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\t\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\t\t\t\t\tconst v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n\t\t\t\t\tconst collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n\t\t\t\t\tif (Math.abs(collinear0) > Number.EPSILON) {\n\t\t\t\t\t\t// not collinear\n\t\t\t\t\t\t// length of vectors for normalizing\n\t\t\t\t\t\tconst v_prev_len = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\tconst v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n\t\t\t\t\t\tconst ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n\t\t\t\t\t\tconst ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n\t\t\t\t\t\tconst ptNextShift_x = inNext.x - v_next_y / v_next_len;\n\t\t\t\t\t\tconst ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n\t\t\t\t\t\tconst sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n\t\t\t\t\t\tv_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n\t\t\t\t\t\tv_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t\t//\tbut prevent crazy spikes\n\n\t\t\t\t\t\tconst v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n\t\t\t\t\t\tif (v_trans_lensq <= 2) {\n\t\t\t\t\t\t\treturn new Vector2(v_trans_x, v_trans_y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_trans_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// handle special case of collinear edges\n\t\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\t\tif (v_prev_x > Number.EPSILON) {\n\t\t\t\t\t\t\tif (v_next_x > Number.EPSILON) {\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (v_prev_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\tif (v_next_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (direction_eq) {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\t\tv_trans_x = -v_prev_y;\n\t\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n\t\t\t\t}\n\n\t\t\t\tconst contourMovements = [];\n\n\t\t\t\tfor (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\t\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\t\tcontourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);\n\t\t\t\t}\n\n\t\t\t\tconst holesMovements = [];\n\t\t\t\tlet oneHoleMovements,\n\t\t\t\t\t\tverticesMovements = contourMovements.concat();\n\n\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\toneHoleMovements = [];\n\n\t\t\t\t\tfor (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n\t\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\n\t\t\t\t\t\toneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);\n\t\t\t\t\t}\n\n\t\t\t\t\tholesMovements.push(oneHoleMovements);\n\t\t\t\t\tverticesMovements = verticesMovements.concat(oneHoleMovements);\n\t\t\t\t} // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n\t\t\t\tfor (let b = 0; b < bevelSegments; b++) {\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos(t * Math.PI / 2);\n\t\t\t\t\tconst bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\t\t\t\t\tfor (let i = 0, il = contour.length; i < il; i++) {\n\t\t\t\t\t\tconst vert = scalePt2(contour[i], contourMovements[i], bs);\n\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\toneHoleMovements = holesMovements[h];\n\n\t\t\t\t\t\tfor (let i = 0, il = ahole.length; i < il; i++) {\n\t\t\t\t\t\t\tconst vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\t\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst bs = bevelSize + bevelOffset; // Back facing vertices\n\n\t\t\t\tfor (let i = 0; i < vlen; i++) {\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\tv(vert.x, vert.y, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\t\t\t\t\tnormal.copy(splineTube.normals[0]).multiplyScalar(vert.x);\n\t\t\t\t\t\tbinormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);\n\t\t\t\t\t\tposition2.copy(extrudePts[0]).add(normal).add(binormal);\n\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t}\n\t\t\t\t} // Add stepped vertices...\n\t\t\t\t// Including front facing vertices\n\n\n\t\t\t\tfor (let s = 1; s <= steps; s++) {\n\t\t\t\t\tfor (let i = 0; i < vlen; i++) {\n\t\t\t\t\t\tconst vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\tv(vert.x, vert.y, depth / steps * s);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\t\t\t\t\t\tnormal.copy(splineTube.normals[s]).multiplyScalar(vert.x);\n\t\t\t\t\t\t\tbinormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);\n\t\t\t\t\t\t\tposition2.copy(extrudePts[s]).add(normal).add(binormal);\n\t\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // Add bevel segments planes\n\t\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n\t\t\t\tfor (let b = bevelSegments - 1; b >= 0; b--) {\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos(t * Math.PI / 2);\n\t\t\t\t\tconst bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\t\t\t\t\tfor (let i = 0, il = contour.length; i < il; i++) {\n\t\t\t\t\t\tconst vert = scalePt2(contour[i], contourMovements[i], bs);\n\t\t\t\t\t\tv(vert.x, vert.y, depth + z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\toneHoleMovements = holesMovements[h];\n\n\t\t\t\t\t\tfor (let i = 0, il = ahole.length; i < il; i++) {\n\t\t\t\t\t\t\tconst vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\n\t\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\t\tv(vert.x, vert.y, depth + z);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tv(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* Faces */\n\t\t\t\t// Top and bottom faces\n\n\n\t\t\t\tbuildLidFaces(); // Sides faces\n\n\t\t\t\tbuildSideFaces(); /////\tInternal functions\n\n\t\t\t\tfunction buildLidFaces() {\n\t\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\t\tif (bevelEnabled) {\n\t\t\t\t\t\tlet layer = 0; // steps + 1\n\n\t\t\t\t\t\tlet offset = vlen * layer; // Bottom faces\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[2] + offset, face[1] + offset, face[0] + offset);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\t\toffset = vlen * layer; // Top faces\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[0] + offset, face[1] + offset, face[2] + offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Bottom faces\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[2], face[1], face[0]);\n\t\t\t\t\t\t} // Top faces\n\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 0);\n\t\t\t\t} // Create faces for the z-sides of the shape\n\n\n\t\t\t\tfunction buildSideFaces() {\n\t\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\t\tlet layeroffset = 0;\n\t\t\t\t\tsidewalls(contour, layeroffset);\n\t\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\tsidewalls(ahole, layeroffset); //, true\n\n\t\t\t\t\t\tlayeroffset += ahole.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 1);\n\t\t\t\t}\n\n\t\t\t\tfunction sidewalls(contour, layeroffset) {\n\t\t\t\t\tlet i = contour.length;\n\n\t\t\t\t\twhile (--i >= 0) {\n\t\t\t\t\t\tconst j = i;\n\t\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\t\tif (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\t\tfor (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {\n\t\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\t\tconst slen2 = vlen * (s + 1);\n\t\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\t\t\t\t\t\t\tf4(a, b, c, d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction v(x, y, z) {\n\t\t\t\t\tplaceholder.push(x);\n\t\t\t\t\tplaceholder.push(y);\n\t\t\t\t\tplaceholder.push(z);\n\t\t\t\t}\n\n\t\t\t\tfunction f3(a, b, c) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\t\tconst uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t}\n\n\t\t\t\tfunction f4(a, b, c, d) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\t\tconst uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t}\n\n\t\t\t\tfunction addVertex(index) {\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 0]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 1]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 2]);\n\t\t\t\t}\n\n\t\t\t\tfunction addUV(vector2) {\n\t\t\t\t\tuvArray.push(vector2.x);\n\t\t\t\t\tuvArray.push(vector2.y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tconst shapes = this.parameters.shapes;\n\t\t\tconst options = this.parameters.options;\n\t\t\treturn toJSON$1(shapes, options, data);\n\t\t}\n\n\t}\n\n\tconst WorldUVGenerator = {\n\t\tgenerateTopUV: function (geometry, vertices, indexA, indexB, indexC) {\n\t\t\tconst a_x = vertices[indexA * 3];\n\t\t\tconst a_y = vertices[indexA * 3 + 1];\n\t\t\tconst b_x = vertices[indexB * 3];\n\t\t\tconst b_y = vertices[indexB * 3 + 1];\n\t\t\tconst c_x = vertices[indexC * 3];\n\t\t\tconst c_y = vertices[indexC * 3 + 1];\n\t\t\treturn [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n\t\t},\n\t\tgenerateSideWallUV: function (geometry, vertices, indexA, indexB, indexC, indexD) {\n\t\t\tconst a_x = vertices[indexA * 3];\n\t\t\tconst a_y = vertices[indexA * 3 + 1];\n\t\t\tconst a_z = vertices[indexA * 3 + 2];\n\t\t\tconst b_x = vertices[indexB * 3];\n\t\t\tconst b_y = vertices[indexB * 3 + 1];\n\t\t\tconst b_z = vertices[indexB * 3 + 2];\n\t\t\tconst c_x = vertices[indexC * 3];\n\t\t\tconst c_y = vertices[indexC * 3 + 1];\n\t\t\tconst c_z = vertices[indexC * 3 + 2];\n\t\t\tconst d_x = vertices[indexD * 3];\n\t\t\tconst d_y = vertices[indexD * 3 + 1];\n\t\t\tconst d_z = vertices[indexD * 3 + 2];\n\n\t\t\tif (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {\n\t\t\t\treturn [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n\t\t\t} else {\n\t\t\t\treturn [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction toJSON$1(shapes, options, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\tif (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n\t\treturn data;\n\t}\n\n\tclass IcosahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst t = (1 + Math.sqrt(5)) / 2;\n\t\t\tconst vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n\t\t\tconst indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'IcosahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\tclass LatheGeometry extends BufferGeometry {\n\t\tconstructor(points, segments = 12, phiStart = 0, phiLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LatheGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\t\t\tsegments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\t\tphiLength = clamp(phiLength, 0, Math.PI * 2); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst inverseSegments = 1.0 / segments;\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // generate vertices and uvs\n\n\t\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\t\t\t\tconst sin = Math.sin(phi);\n\t\t\t\tconst cos = Math.cos(phi);\n\n\t\t\t\tfor (let j = 0; j <= points.length - 1; j++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = points[j].x * sin;\n\t\t\t\t\tvertex.y = points[j].y;\n\t\t\t\t\tvertex.z = points[j].x * cos;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // uv\n\n\t\t\t\t\tuv.x = i / segments;\n\t\t\t\t\tuv.y = j / (points.length - 1);\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t}\n\t\t\t} // indices\n\n\n\t\t\tfor (let i = 0; i < segments; i++) {\n\t\t\t\tfor (let j = 0; j < points.length - 1; j++) {\n\t\t\t\t\tconst base = j + i * points.length;\n\t\t\t\t\tconst a = base;\n\t\t\t\t\tconst b = base + points.length;\n\t\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\t\tconst d = base + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals\n\n\t\t\tthis.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n\t\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\t\tif (phiLength === Math.PI * 2) {\n\t\t\t\tconst normals = this.attributes.normal.array;\n\t\t\t\tconst n1 = new Vector3();\n\t\t\t\tconst n2 = new Vector3();\n\t\t\t\tconst n = new Vector3(); // this is the buffer offset for the last line of vertices\n\n\t\t\t\tconst base = segments * points.length * 3;\n\n\t\t\t\tfor (let i = 0, j = 0; i < points.length; i++, j += 3) {\n\t\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\t\tn1.x = normals[j + 0];\n\t\t\t\t\tn1.y = normals[j + 1];\n\t\t\t\t\tn1.z = normals[j + 2]; // select the normal of the vertex in the last line\n\n\t\t\t\t\tn2.x = normals[base + j + 0];\n\t\t\t\t\tn2.y = normals[base + j + 1];\n\t\t\t\t\tn2.z = normals[base + j + 2]; // average normals\n\n\t\t\t\t\tn.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n\t\t\t\t\tnormals[j + 0] = normals[base + j + 0] = n.x;\n\t\t\t\t\tnormals[j + 1] = normals[base + j + 1] = n.y;\n\t\t\t\t\tnormals[j + 2] = normals[base + j + 2] = n.z;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass OctahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n\t\t\tconst indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'OctahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\t/**\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\tclass ParametricGeometry extends BufferGeometry {\n\t\tconstructor(func, slices, stacks) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ParametricGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tfunc: func,\n\t\t\t\tslices: slices,\n\t\t\t\tstacks: stacks\n\t\t\t}; // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\t\t\tconst EPS = 0.00001;\n\t\t\tconst normal = new Vector3();\n\t\t\tconst p0 = new Vector3(),\n\t\t\t\t\t\tp1 = new Vector3();\n\t\t\tconst pu = new Vector3(),\n\t\t\t\t\t\tpv = new Vector3();\n\n\t\t\tif (func.length < 3) {\n\t\t\t\tconsole.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');\n\t\t\t} // generate vertices, normals and uvs\n\n\n\t\t\tconst sliceCount = slices + 1;\n\n\t\t\tfor (let i = 0; i <= stacks; i++) {\n\t\t\t\tconst v = i / stacks;\n\n\t\t\t\tfor (let j = 0; j <= slices; j++) {\n\t\t\t\t\tconst u = j / slices; // vertex\n\n\t\t\t\t\tfunc(u, v, p0);\n\t\t\t\t\tvertices.push(p0.x, p0.y, p0.z); // normal\n\t\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\t\tif (u - EPS >= 0) {\n\t\t\t\t\t\tfunc(u - EPS, v, p1);\n\t\t\t\t\t\tpu.subVectors(p0, p1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfunc(u + EPS, v, p1);\n\t\t\t\t\t\tpu.subVectors(p1, p0);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (v - EPS >= 0) {\n\t\t\t\t\t\tfunc(u, v - EPS, p1);\n\t\t\t\t\t\tpv.subVectors(p0, p1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfunc(u, v + EPS, p1);\n\t\t\t\t\t\tpv.subVectors(p1, p0);\n\t\t\t\t\t} // cross product of tangent vectors returns surface normal\n\n\n\t\t\t\t\tnormal.crossVectors(pu, pv).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u, v);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let i = 0; i < stacks; i++) {\n\t\t\t\tfor (let j = 0; j < slices; j++) {\n\t\t\t\t\tconst a = i * sliceCount + j;\n\t\t\t\t\tconst b = i * sliceCount + j + 1;\n\t\t\t\t\tconst c = (i + 1) * sliceCount + j + 1;\n\t\t\t\t\tconst d = (i + 1) * sliceCount + j; // faces one and two\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass RingGeometry extends BufferGeometry {\n\t\tconstructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'RingGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tthetaSegments = Math.max(3, thetaSegments);\n\t\t\tphiSegments = Math.max(1, phiSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // some helper variables\n\n\t\t\tlet radius = innerRadius;\n\t\t\tconst radiusStep = (outerRadius - innerRadius) / phiSegments;\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // generate vertices, normals and uvs\n\n\t\t\tfor (let j = 0; j <= phiSegments; j++) {\n\t\t\t\tfor (let i = 0; i <= thetaSegments; i++) {\n\t\t\t\t\t// values are generate from the inside of the ring to the outside\n\t\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n\t\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, 0, 1); // uv\n\n\t\t\t\t\tuv.x = (vertex.x / outerRadius + 1) / 2;\n\t\t\t\t\tuv.y = (vertex.y / outerRadius + 1) / 2;\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t} // increase the radius for next row of vertices\n\n\n\t\t\t\tradius += radiusStep;\n\t\t\t} // indices\n\n\n\t\t\tfor (let j = 0; j < phiSegments; j++) {\n\t\t\t\tconst thetaSegmentLevel = j * (thetaSegments + 1);\n\n\t\t\t\tfor (let i = 0; i < thetaSegments; i++) {\n\t\t\t\t\tconst segment = i + thetaSegmentLevel;\n\t\t\t\t\tconst a = segment;\n\t\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\t\tconst d = segment + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass ShapeGeometry extends BufferGeometry {\n\t\tconstructor(shapes, curveSegments = 12) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShapeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t}; // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet groupStart = 0;\n\t\t\tlet groupCount = 0; // allow single and array values for \"shapes\" parameter\n\n\t\t\tif (Array.isArray(shapes) === false) {\n\t\t\t\taddShape(shapes);\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\t\taddShape(shapes[i]);\n\t\t\t\t\tthis.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n\t\t\t\t\tgroupStart += groupCount;\n\t\t\t\t\tgroupCount = 0;\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\t\tconst points = shape.extractPoints(curveSegments);\n\t\t\t\tlet shapeVertices = points.shape;\n\t\t\t\tconst shapeHoles = points.holes; // check direction of vertices\n\n\t\t\t\tif (ShapeUtils.isClockWise(shapeVertices) === false) {\n\t\t\t\t\tshapeVertices = shapeVertices.reverse();\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0, l = shapeHoles.length; i < l; i++) {\n\t\t\t\t\tconst shapeHole = shapeHoles[i];\n\n\t\t\t\t\tif (ShapeUtils.isClockWise(shapeHole) === true) {\n\t\t\t\t\t\tshapeHoles[i] = shapeHole.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array\n\n\t\t\t\tfor (let i = 0, l = shapeHoles.length; i < l; i++) {\n\t\t\t\t\tconst shapeHole = shapeHoles[i];\n\t\t\t\t\tshapeVertices = shapeVertices.concat(shapeHole);\n\t\t\t\t} // vertices, normals, uvs\n\n\n\t\t\t\tfor (let i = 0, l = shapeVertices.length; i < l; i++) {\n\t\t\t\t\tconst vertex = shapeVertices[i];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(vertex.x, vertex.y); // world uvs\n\t\t\t\t} // incides\n\n\n\t\t\t\tfor (let i = 0, l = faces.length; i < l; i++) {\n\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\tconst a = face[0] + indexOffset;\n\t\t\t\t\tconst b = face[1] + indexOffset;\n\t\t\t\t\tconst c = face[2] + indexOffset;\n\t\t\t\t\tindices.push(a, b, c);\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tconst shapes = this.parameters.shapes;\n\t\t\treturn toJSON(shapes, data);\n\t\t}\n\n\t}\n\n\tfunction toJSON(shapes, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tclass SphereGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, widthSegments = 8, heightSegments = 6, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SphereGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\twidthSegments = Math.max(3, Math.floor(widthSegments));\n\t\t\theightSegments = Math.max(2, Math.floor(heightSegments));\n\t\t\tconst thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n\t\t\tlet index = 0;\n\t\t\tconst grid = [];\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3(); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // generate vertices, normals and uvs\n\n\t\t\tfor (let iy = 0; iy <= heightSegments; iy++) {\n\t\t\t\tconst verticesRow = [];\n\t\t\t\tconst v = iy / heightSegments; // special case for the poles\n\n\t\t\t\tlet uOffset = 0;\n\n\t\t\t\tif (iy == 0 && thetaStart == 0) {\n\t\t\t\t\tuOffset = 0.5 / widthSegments;\n\t\t\t\t} else if (iy == heightSegments && thetaEnd == Math.PI) {\n\t\t\t\t\tuOffset = -0.5 / widthSegments;\n\t\t\t\t}\n\n\t\t\t\tfor (let ix = 0; ix <= widthSegments; ix++) {\n\t\t\t\t\tconst u = ix / widthSegments; // vertex\n\n\t\t\t\t\tvertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormal.copy(vertex).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u + uOffset, 1 - v);\n\t\t\t\t\tverticesRow.push(index++);\n\t\t\t\t}\n\n\t\t\t\tgrid.push(verticesRow);\n\t\t\t} // indices\n\n\n\t\t\tfor (let iy = 0; iy < heightSegments; iy++) {\n\t\t\t\tfor (let ix = 0; ix < widthSegments; ix++) {\n\t\t\t\t\tconst a = grid[iy][ix + 1];\n\t\t\t\t\tconst b = grid[iy][ix];\n\t\t\t\t\tconst c = grid[iy + 1][ix];\n\t\t\t\t\tconst d = grid[iy + 1][ix + 1];\n\t\t\t\t\tif (iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n\t\t\t\t\tif (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass TetrahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n\t\t\tconst indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'TetrahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\t/**\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *\tfont: <THREE.Font>, // font\n\t *\n\t *\tsize: <float>, // size of the text\n\t *\theight: <float>, // thickness to extrude text\n\t *\tcurveSegments: <int>, // number of points on the curves\n\t *\n\t *\tbevelEnabled: <bool>, // turn on bevel\n\t *\tbevelThickness: <float>, // how deep into text bevel goes\n\t *\tbevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *\tbevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\tclass TextGeometry extends ExtrudeGeometry {\n\t\tconstructor(text, parameters = {}) {\n\t\t\tconst font = parameters.font;\n\n\t\t\tif (!(font && font.isFont)) {\n\t\t\t\tconsole.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n\t\t\t\treturn new BufferGeometry();\n\t\t\t}\n\n\t\t\tconst shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n\t\t\tif (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n\t\t\tif (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n\t\t\tif (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n\t\t\tsuper(shapes, parameters);\n\t\t\tthis.type = 'TextGeometry';\n\t\t}\n\n\t}\n\n\tclass TorusGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TorusGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\ttubularSegments = Math.floor(tubularSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst center = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\tfor (let i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2; // vertex\n\n\t\t\t\t\tvertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n\t\t\t\t\tvertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n\t\t\t\t\tvertex.z = tube * Math.sin(v);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tcenter.x = radius * Math.cos(u);\n\t\t\t\t\tcenter.y = radius * Math.sin(u);\n\t\t\t\t\tnormal.subVectors(vertex, center).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let j = 1; j <= radialSegments; j++) {\n\t\t\t\tfor (let i = 1; i <= tubularSegments; i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tconst a = (tubularSegments + 1) * j + i - 1;\n\t\t\t\t\tconst b = (tubularSegments + 1) * (j - 1) + i - 1;\n\t\t\t\t\tconst c = (tubularSegments + 1) * (j - 1) + i;\n\t\t\t\t\tconst d = (tubularSegments + 1) * j + i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass TorusKnotGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TorusKnotGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\t\ttubularSegments = Math.floor(tubularSegments);\n\t\t\tradialSegments = Math.floor(radialSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\t\t\tconst P1 = new Vector3();\n\t\t\tconst P2 = new Vector3();\n\t\t\tconst B = new Vector3();\n\t\t\tconst T = new Vector3();\n\t\t\tconst N = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (let i = 0; i <= tubularSegments; ++i) {\n\t\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\t\t\tconst u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\t\tcalculatePositionOnCurve(u, p, q, radius, P1);\n\t\t\t\tcalculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n\t\t\t\tT.subVectors(P2, P1);\n\t\t\t\tN.addVectors(P2, P1);\n\t\t\t\tB.crossVectors(T, N);\n\t\t\t\tN.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n\t\t\t\tB.normalize();\n\t\t\t\tN.normalize();\n\n\t\t\t\tfor (let j = 0; j <= radialSegments; ++j) {\n\t\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tconst cx = -tube * Math.cos(v);\n\t\t\t\t\tconst cy = tube * Math.sin(v); // now calculate the final vertex position.\n\t\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\t\tvertex.x = P1.x + (cx * N.x + cy * B.x);\n\t\t\t\t\tvertex.y = P1.y + (cx * N.y + cy * B.y);\n\t\t\t\t\tvertex.z = P1.z + (cx * N.z + cy * B.z);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\t\tnormal.subVectors(vertex, P1).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let j = 1; j <= tubularSegments; j++) {\n\t\t\t\tfor (let i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tconst a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\tconst b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\tconst c = (radialSegments + 1) * j + i;\n\t\t\t\t\tconst d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve\n\n\t\t\tfunction calculatePositionOnCurve(u, p, q, radius, position) {\n\t\t\t\tconst cu = Math.cos(u);\n\t\t\t\tconst su = Math.sin(u);\n\t\t\t\tconst quOverP = q / p * u;\n\t\t\t\tconst cs = Math.cos(quOverP);\n\t\t\t\tposition.x = radius * (2 + cs) * 0.5 * cu;\n\t\t\t\tposition.y = radius * (2 + cs) * su * 0.5;\n\t\t\t\tposition.z = radius * Math.sin(quOverP) * 0.5;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass TubeGeometry extends BufferGeometry {\n\t\tconstructor(path, tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TubeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\t\tconst frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\n\n\t\t\tthis.tangents = frames.tangents;\n\t\t\tthis.normals = frames.normals;\n\t\t\tthis.binormals = frames.binormals; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\t\t\tconst uv = new Vector2();\n\t\t\tlet P = new Vector3(); // buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\t\t\tconst indices = []; // create buffer data\n\n\t\t\tgenerateBufferData(); // build geometry\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\n\n\t\t\tfunction generateBufferData() {\n\t\t\t\tfor (let i = 0; i < tubularSegments; i++) {\n\t\t\t\t\tgenerateSegment(i);\n\t\t\t\t} // if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t\t// at the regular position on the given path\n\t\t\t\t//\n\t\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\n\t\t\t\tgenerateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\n\t\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\t\tgenerateUVs(); // finally create faces\n\n\t\t\t\tgenerateIndices();\n\t\t\t}\n\n\t\t\tfunction generateSegment(i) {\n\t\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\t\t\t\tP = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\n\n\t\t\t\tconst N = frames.normals[i];\n\t\t\t\tconst B = frames.binormals[i]; // generate normals and vertices for the current segment\n\n\t\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tconst sin = Math.sin(v);\n\t\t\t\t\tconst cos = -Math.cos(v); // normal\n\n\t\t\t\t\tnormal.x = cos * N.x + sin * B.x;\n\t\t\t\t\tnormal.y = cos * N.y + sin * B.y;\n\t\t\t\t\tnormal.z = cos * N.z + sin * B.z;\n\t\t\t\t\tnormal.normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // vertex\n\n\t\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\t\tvertex.z = P.z + radius * normal.z;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateIndices() {\n\t\t\t\tfor (let j = 1; j <= tubularSegments; j++) {\n\t\t\t\t\tfor (let i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t\tconst a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\t\tconst b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\t\tconst c = (radialSegments + 1) * j + i;\n\t\t\t\t\t\tconst d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tfor (let i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.path = this.parameters.path.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tclass WireframeGeometry extends BufferGeometry {\n\t\tconstructor(geometry) {\n\t\t\tsuper();\n\t\t\tthis.type = 'WireframeGeometry';\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn;\n\t\t\t} // buffer\n\n\n\t\t\tconst vertices = []; // helper variables\n\n\t\t\tconst edge = [0, 0],\n\t\t\t\t\t\tedges = {};\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\t// indexed BufferGeometry\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif (groups.length === 0) {\n\t\t\t\t\tgroups = [{\n\t\t\t\t\t\tstart: 0,\n\t\t\t\t\t\tcount: indices.count,\n\t\t\t\t\t\tmaterialIndex: 0\n\t\t\t\t\t}];\n\t\t\t\t} // create a data structure that contains all eges without duplicates\n\n\n\t\t\t\tfor (let o = 0, ol = groups.length; o < ol; ++o) {\n\t\t\t\t\tconst group = groups[o];\n\t\t\t\t\tconst start = group.start;\n\t\t\t\t\tconst count = group.count;\n\n\t\t\t\t\tfor (let i = start, l = start + count; i < l; i += 3) {\n\t\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\t\tconst edge1 = indices.getX(i + j);\n\t\t\t\t\t\t\tconst edge2 = indices.getX(i + (j + 1) % 3);\n\t\t\t\t\t\t\tedge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\n\n\t\t\t\t\t\t\tedge[1] = Math.max(edge1, edge2);\n\t\t\t\t\t\t\tconst key = edge[0] + ',' + edge[1];\n\n\t\t\t\t\t\t\tif (edges[key] === undefined) {\n\t\t\t\t\t\t\t\tedges[key] = {\n\t\t\t\t\t\t\t\t\tindex1: edge[0],\n\t\t\t\t\t\t\t\t\tindex2: edge[1]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // generate vertices\n\n\n\t\t\t\tfor (const key in edges) {\n\t\t\t\t\tconst e = edges[key];\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index1);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index2);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// non-indexed BufferGeometry\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor (let i = 0, l = position.count / 3; i < l; i++) {\n\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute(position, index1);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t\tconst index2 = 3 * i + (j + 1) % 3;\n\t\t\t\t\t\tvertex.fromBufferAttribute(position, index2);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t}\n\n\t}\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeGeometry,\n\t\tWireframeGeometry: WireframeGeometry\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <THREE.Color>\n\t * }\n\t */\n\n\tclass ShadowMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShadowMaterial';\n\t\t\tthis.color = new Color(0x000000);\n\t\t\tthis.transparent = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tclass RawShaderMaterial extends ShaderMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper(parameters);\n\t\t\tthis.type = 'RawShaderMaterial';\n\t\t}\n\n\t}\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\troughness: <float>,\n\t *\tmetalness: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\troughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmetalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tenvMapIntensity: <float>\n\t *\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshStandardMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshStandardMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.roughness = 1.0;\n\t\t\tthis.metalness = 0.0;\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.roughnessMap = null;\n\t\t\tthis.metalnessMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.envMapIntensity = 1.0;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.vertexTangents = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': ''\n\t\t\t};\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.roughness = source.roughness;\n\t\t\tthis.metalness = source.metalness;\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.roughnessMap = source.roughnessMap;\n\t\t\tthis.metalnessMap = source.metalnessMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.envMapIntensity = source.envMapIntensity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexTangents = source.vertexTangents;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tclearcoat: <float>,\n\t *\tclearcoatMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatRoughness: <float>,\n\t *\tclearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatNormalScale: <Vector2>,\n\t *\tclearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *\treflectivity: <float>,\n\t *\tior: <float>,\n\t *\n\t *\tsheen: <Color>,\n\t *\n\t *\ttransmission: <float>,\n\t *\ttransmissionMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tthickness: <float>,\n\t *\tthicknessMap: new THREE.Texture( <Image> ),\n\t *\tattenuationDistance: <float>,\n\t *\tattenuationColor: <Color>\n\t * }\n\t */\n\n\tclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': '',\n\t\t\t\t'PHYSICAL': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshPhysicalMaterial';\n\t\t\tthis.clearcoat = 0.0;\n\t\t\tthis.clearcoatMap = null;\n\t\t\tthis.clearcoatRoughness = 0.0;\n\t\t\tthis.clearcoatRoughnessMap = null;\n\t\t\tthis.clearcoatNormalScale = new Vector2(1, 1);\n\t\t\tthis.clearcoatNormalMap = null;\n\t\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\t\tObject.defineProperty(this, 'ior', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);\n\t\t\t\t},\n\t\t\t\tset: function (ior) {\n\t\t\t\t\tthis.reflectivity = clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\t\tthis.transmission = 0.0;\n\t\t\tthis.transmissionMap = null;\n\t\t\tthis.thickness = 0.01;\n\t\t\tthis.thicknessMap = null;\n\t\t\tthis.attenuationDistance = 0.0;\n\t\t\tthis.attenuationColor = new Color(1, 1, 1);\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': '',\n\t\t\t\t'PHYSICAL': ''\n\t\t\t};\n\t\t\tthis.clearcoat = source.clearcoat;\n\t\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\t\tthis.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n\t\t\tthis.reflectivity = source.reflectivity;\n\n\t\t\tif (source.sheen) {\n\t\t\t\tthis.sheen = (this.sheen || new Color()).copy(source.sheen);\n\t\t\t} else {\n\t\t\t\tthis.sheen = null;\n\t\t\t}\n\n\t\t\tthis.transmission = source.transmission;\n\t\t\tthis.transmissionMap = source.transmissionMap;\n\t\t\tthis.thickness = source.thickness;\n\t\t\tthis.thicknessMap = source.thicknessMap;\n\t\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\t\tthis.attenuationColor.copy(source.attenuationColor);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tspecular: <hex>,\n\t *\tshininess: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.MultiplyOperation,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshPhongMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshPhongMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.specular = new Color(0x111111);\n\t\t\tthis.shininess = 30;\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.specular.copy(source.specular);\n\t\t\tthis.shininess = source.shininess;\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\tgradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tclass MeshToonMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'TOON': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshToonMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.gradientMap = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.gradientMap = source.gradientMap;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\topacity: <float>,\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshNormalMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshNormalMaterial';\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tclass MeshLambertMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshLambertMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmatcap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshMatcapMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshMatcapMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.matcap = null;\n\t\t\tthis.map = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.matcap = source.matcap;\n\t\t\tthis.map = source.map;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\n\t *\tscale: <float>,\n\t *\tdashSize: <float>,\n\t *\tgapSize: <float>\n\t * }\n\t */\n\n\tclass LineDashedMaterial extends LineBasicMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineDashedMaterial';\n\t\t\tthis.scale = 1;\n\t\t\tthis.dashSize = 3;\n\t\t\tthis.gapSize = 1;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.scale = source.scale;\n\t\t\tthis.dashSize = source.dashSize;\n\t\t\tthis.gapSize = source.gapSize;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\tconst AnimationUtils = {\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function (array, from, to) {\n\t\t\tif (AnimationUtils.isTypedArray(array)) {\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\n\t\t\t}\n\n\t\t\treturn array.slice(from, to);\n\t\t},\n\t\t// converts an array to a specific type\n\t\tconvertArray: function (array, type, forceClone) {\n\t\t\tif (!array || // let 'undefined' and 'null' pass\n\t\t\t!forceClone && array.constructor === type) return array;\n\n\t\t\tif (typeof type.BYTES_PER_ELEMENT === 'number') {\n\t\t\t\treturn new type(array); // create typed array\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call(array); // create Array\n\t\t},\n\t\tisTypedArray: function (object) {\n\t\t\treturn ArrayBuffer.isView(object) && !(object instanceof DataView);\n\t\t},\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function (times) {\n\t\t\tfunction compareTime(i, j) {\n\t\t\t\treturn times[i] - times[j];\n\t\t\t}\n\n\t\t\tconst n = times.length;\n\t\t\tconst result = new Array(n);\n\n\t\t\tfor (let i = 0; i !== n; ++i) result[i] = i;\n\n\t\t\tresult.sort(compareTime);\n\t\t\treturn result;\n\t\t},\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function (values, stride, order) {\n\t\t\tconst nValues = values.length;\n\t\t\tconst result = new values.constructor(nValues);\n\n\t\t\tfor (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n\t\t\t\tconst srcOffset = order[i] * stride;\n\n\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\tresult[dstOffset++] = values[srcOffset + j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function (jsonKeys, times, values, valuePropertyName) {\n\t\t\tlet i = 1,\n\t\t\t\t\tkey = jsonKeys[0];\n\n\t\t\twhile (key !== undefined && key[valuePropertyName] === undefined) {\n\t\t\t\tkey = jsonKeys[i++];\n\t\t\t}\n\n\t\t\tif (key === undefined) return; // no data\n\n\t\t\tlet value = key[valuePropertyName];\n\t\t\tif (value === undefined) return; // no data\n\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push.apply(values, value); // push all elements\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else if (value.toArray !== undefined) {\n\t\t\t\t// ...assume THREE.Math-ish\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalue.toArray(values, values.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t}\n\t\t},\n\t\tsubclip: function (sourceClip, name, startFrame, endFrame, fps = 30) {\n\t\t\tconst clip = sourceClip.clone();\n\t\t\tclip.name = name;\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tconst track = clip.tracks[i];\n\t\t\t\tconst valueSize = track.getValueSize();\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (let j = 0; j < track.times.length; ++j) {\n\t\t\t\t\tconst frame = track.times[j] * fps;\n\t\t\t\t\tif (frame < startFrame || frame >= endFrame) continue;\n\t\t\t\t\ttimes.push(track.times[j]);\n\n\t\t\t\t\tfor (let k = 0; k < valueSize; ++k) {\n\t\t\t\t\t\tvalues.push(track.values[j * valueSize + k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (times.length === 0) continue;\n\t\t\t\ttrack.times = AnimationUtils.convertArray(times, track.times.constructor);\n\t\t\t\ttrack.values = AnimationUtils.convertArray(values, track.values.constructor);\n\t\t\t\ttracks.push(track);\n\t\t\t}\n\n\t\t\tclip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tlet minStartTime = Infinity;\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tif (minStartTime > clip.tracks[i].times[0]) {\n\t\t\t\t\tminStartTime = clip.tracks[i].times[0];\n\t\t\t\t}\n\t\t\t} // shift all tracks such that clip begins at t=0\n\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tclip.tracks[i].shift(-1 * minStartTime);\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\t\t\treturn clip;\n\t\t},\n\t\tmakeClipAdditive: function (targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {\n\t\t\tif (fps <= 0) fps = 30;\n\t\t\tconst numTracks = referenceClip.tracks.length;\n\t\t\tconst referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame\n\n\t\t\tfor (let i = 0; i < numTracks; ++i) {\n\t\t\t\tconst referenceTrack = referenceClip.tracks[i];\n\t\t\t\tconst referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric\n\n\t\t\t\tif (referenceTrackType === 'bool' || referenceTrackType === 'string') continue; // Find the track in the target clip whose name and type matches the reference track\n\n\t\t\t\tconst targetTrack = targetClip.tracks.find(function (track) {\n\t\t\t\t\treturn track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n\t\t\t\t});\n\t\t\t\tif (targetTrack === undefined) continue;\n\t\t\t\tlet referenceOffset = 0;\n\t\t\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\t\tif (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\treferenceOffset = referenceValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tlet targetOffset = 0;\n\t\t\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\t\t\tif (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\ttargetOffset = targetValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tlet referenceValue; // Find the value to subtract out of the track\n\n\t\t\t\tif (referenceTime <= referenceTrack.times[0]) {\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else if (referenceTime >= referenceTrack.times[lastIndex]) {\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else {\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\tinterpolant.evaluate(referenceTime);\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);\n\t\t\t\t} // Conjugate the quaternion\n\n\n\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\tconst referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray(referenceValue);\n\t\t\t\t} // Subtract the reference value from all of the track values\n\n\n\t\t\t\tconst numTimes = targetTrack.times.length;\n\n\t\t\t\tfor (let j = 0; j < numTimes; ++j) {\n\t\t\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types\n\n\t\t\t\t\t\tfor (let k = 0; k < valueEnd; ++k) {\n\t\t\t\t\t\t\ttargetTrack.values[valueStart + k] -= referenceValue[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\t\t\treturn targetClip;\n\t\t}\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t */\n\tclass Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tthis.parameterPositions = parameterPositions;\n\t\t\tthis._cachedIndex = 0;\n\t\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n\t\t\tthis.sampleValues = sampleValues;\n\t\t\tthis.valueSize = sampleSize;\n\t\t\tthis.settings = null;\n\t\t\tthis.DefaultSettings_ = {};\n\t\t}\n\n\t\tevaluate(t) {\n\t\t\tconst pp = this.parameterPositions;\n\t\t\tlet i1 = this._cachedIndex,\n\t\t\t\t\tt1 = pp[i1],\n\t\t\t\t\tt0 = pp[i1 - 1];\n\n\t\t\tvalidate_interval: {\n\t\t\t\tseek: {\n\t\t\t\t\tlet right;\n\n\t\t\t\t\tlinear_scan: {\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if (!(t < t1)) {\n\t\t\t\t\t\t\tfor (let giveUpAt = i1 + 2;;) {\n\t\t\t\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\t\t\t\tif (t < t0) break forward_scan; // after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t, t0);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[++i1];\n\n\t\t\t\t\t\t\t\tif (t < t1) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the right side of the index\n\n\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} //- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n\t\t\t\t\t\tif (!(t >= t0)) {\n\t\t\t\t\t\t\t// looping?\n\t\t\t\t\t\t\tconst t1global = pp[1];\n\n\t\t\t\t\t\t\tif (t < t1global) {\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\n\t\t\t\t\t\t\t\tt0 = t1global;\n\t\t\t\t\t\t\t} // linear reverse scan\n\n\n\t\t\t\t\t\t\tfor (let giveUpAt = i1 - 2;;) {\n\t\t\t\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\t\t\t\t// before start\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[--i1 - 1];\n\n\t\t\t\t\t\t\t\tif (t >= t0) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the left side of the index\n\n\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} // the interval is valid\n\n\n\t\t\t\t\t\tbreak validate_interval;\n\t\t\t\t\t} // linear scan\n\t\t\t\t\t// binary search\n\n\n\t\t\t\t\twhile (i1 < right) {\n\t\t\t\t\t\tconst mid = i1 + right >>> 1;\n\n\t\t\t\t\t\tif (t < pp[mid]) {\n\t\t\t\t\t\t\tright = mid;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti1 = mid + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[i1];\n\t\t\t\t\tt0 = pp[i1 - 1]; // check boundary cases, again\n\n\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t0, t);\n\t\t\t\t\t}\n\t\t\t\t} // seek\n\n\n\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\tthis.intervalChanged_(i1, t0, t1);\n\t\t\t} // validate_interval\n\n\n\t\t\treturn this.interpolate_(i1, t0, t, t1);\n\t\t}\n\n\t\tgetSettings_() {\n\t\t\treturn this.settings || this.DefaultSettings_;\n\t\t}\n\n\t\tcopySampleValue_(index) {\n\t\t\t// copies a sample value to the result buffer\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = index * stride;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} // Template methods for derived classes:\n\n\n\t\tinterpolate_()\n\t\t/* i1, t0, t, t1 */\n\t\t{\n\t\t\tthrow new Error('call to abstract method'); // implementations shall return this.resultBuffer\n\t\t}\n\n\t\tintervalChanged_()\n\t\t/* i1, t0, t1 */\n\t\t{// empty\n\t\t}\n\n\t} // ALIAS DEFINITIONS\n\n\n\tInterpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;\n\tInterpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t */\n\n\tclass CubicInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t\tthis._weightPrev = -0;\n\t\t\tthis._offsetPrev = -0;\n\t\t\tthis._weightNext = -0;\n\t\t\tthis._offsetNext = -0;\n\t\t\tthis.DefaultSettings_ = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\t\t}\n\n\t\tintervalChanged_(i1, t0, t1) {\n\t\t\tconst pp = this.parameterPositions;\n\t\t\tlet iPrev = i1 - 2,\n\t\t\t\t\tiNext = i1 + 1,\n\t\t\t\t\ttPrev = pp[iPrev],\n\t\t\t\t\ttNext = pp[iNext];\n\n\t\t\tif (tPrev === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingStart) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tNext === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingEnd) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[1] - pp[0];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst halfDt = (t1 - t0) * 0.5,\n\t\t\t\t\t\tstride = this.valueSize;\n\t\t\tthis._weightPrev = halfDt / (t0 - tPrev);\n\t\t\tthis._weightNext = halfDt / (tNext - t1);\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\to1 = i1 * stride,\n\t\t\t\t\t\to0 = o1 - stride,\n\t\t\t\t\t\toP = this._offsetPrev,\n\t\t\t\t\t\toN = this._offsetNext,\n\t\t\t\t\t\twP = this._weightPrev,\n\t\t\t\t\t\twN = this._weightNext,\n\t\t\t\t\t\tp = (t - t0) / (t1 - t0),\n\t\t\t\t\t\tpp = p * p,\n\t\t\t\t\t\tppp = pp * p; // evaluate polynomials\n\n\t\t\tconst sP = -wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tconst s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n\t\t\tconst s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n\t\t\tconst sN = wN * ppp - wN * pp; // combine data linearly\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\tclass LinearInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset1 = i1 * stride,\n\t\t\t\t\t\toffset0 = offset1 - stride,\n\t\t\t\t\t\tweight1 = (t - t0) / (t1 - t0),\n\t\t\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t */\n\n\tclass DiscreteInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1\n\t\t/*, t0, t, t1 */\n\t\t) {\n\t\t\treturn this.copySampleValue_(i1 - 1);\n\t\t}\n\n\t}\n\n\tclass KeyframeTrack {\n\t\tconstructor(name, times, values, interpolation) {\n\t\t\tif (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n\t\t\tif (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n\t\t\tthis.name = name;\n\t\t\tthis.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n\t\t\tthis.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n\t\t\tthis.setInterpolation(interpolation || this.DefaultInterpolation);\n\t\t} // Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\n\t\tstatic toJSON(track) {\n\t\t\tconst trackType = track.constructor;\n\t\t\tlet json; // derived classes can define a static toJSON method\n\n\t\t\tif (trackType.toJSON !== this.toJSON) {\n\t\t\t\tjson = trackType.toJSON(track);\n\t\t\t} else {\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray(track.times, Array),\n\t\t\t\t\t'values': AnimationUtils.convertArray(track.values, Array)\n\t\t\t\t};\n\t\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\t\tif (interpolation !== track.DefaultInterpolation) {\n\t\t\t\t\tjson.interpolation = interpolation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\t\t}\n\n\t\tInterpolantFactoryMethodDiscrete(result) {\n\t\t\treturn new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tInterpolantFactoryMethodLinear(result) {\n\t\t\treturn new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tInterpolantFactoryMethodSmooth(result) {\n\t\t\treturn new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tsetInterpolation(interpolation) {\n\t\t\tlet factoryMethod;\n\n\t\t\tswitch (interpolation) {\n\t\t\t\tcase InterpolateDiscrete:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (factoryMethod === undefined) {\n\t\t\t\tconst message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\t\tif (this.createInterpolant === undefined) {\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif (interpolation !== this.DefaultInterpolation) {\n\t\t\t\t\t\tthis.setInterpolation(this.DefaultInterpolation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(message); // fatal, in this case\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconsole.warn('THREE.KeyframeTrack:', message);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetInterpolation() {\n\t\t\tswitch (this.createInterpolant) {\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\t\t\t\treturn InterpolateSmooth;\n\t\t\t}\n\t\t}\n\n\t\tgetValueSize() {\n\t\t\treturn this.values.length / this.times.length;\n\t\t} // move all keyframes either forwards or backwards in time\n\n\n\t\tshift(timeOffset) {\n\t\t\tif (timeOffset !== 0.0) {\n\t\t\t\tconst times = this.times;\n\n\t\t\t\tfor (let i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] += timeOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\n\n\t\tscale(timeScale) {\n\t\t\tif (timeScale !== 1.0) {\n\t\t\t\tconst times = this.times;\n\n\t\t\t\tfor (let i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] *= timeScale;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\n\n\t\ttrim(startTime, endTime) {\n\t\t\tconst times = this.times,\n\t\t\t\t\t\tnKeys = times.length;\n\t\t\tlet from = 0,\n\t\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile (from !== nKeys && times[from] < startTime) {\n\t\t\t\t++from;\n\t\t\t}\n\n\t\t\twhile (to !== -1 && times[to] > endTime) {\n\t\t\t\t--to;\n\t\t\t}\n\n\t\t\t++to; // inclusive -> exclusive bound\n\n\t\t\tif (from !== 0 || to !== nKeys) {\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif (from >= to) {\n\t\t\t\t\tto = Math.max(to, 1);\n\t\t\t\t\tfrom = to - 1;\n\t\t\t\t}\n\n\t\t\t\tconst stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, from, to);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\n\n\t\tvalidate() {\n\t\t\tlet valid = true;\n\t\t\tconst valueSize = this.getValueSize();\n\n\t\t\tif (valueSize - Math.floor(valueSize) !== 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tconst times = this.times,\n\t\t\t\t\t\tvalues = this.values,\n\t\t\t\t\t\tnKeys = times.length;\n\n\t\t\tif (nKeys === 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Track is empty.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tlet prevTime = null;\n\n\t\t\tfor (let i = 0; i !== nKeys; i++) {\n\t\t\t\tconst currTime = times[i];\n\n\t\t\t\tif (typeof currTime === 'number' && isNaN(currTime)) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (prevTime !== null && prevTime > currTime) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\t\t\t}\n\n\t\t\tif (values !== undefined) {\n\t\t\t\tif (AnimationUtils.isTypedArray(values)) {\n\t\t\t\t\tfor (let i = 0, n = values.length; i !== n; ++i) {\n\t\t\t\t\t\tconst value = values[i];\n\n\t\t\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t} // removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\n\n\t\toptimize() {\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tconst times = AnimationUtils.arraySlice(this.times),\n\t\t\t\t\t\tvalues = AnimationUtils.arraySlice(this.values),\n\t\t\t\t\t\tstride = this.getValueSize(),\n\t\t\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\t\t\t\t\tlastIndex = times.length - 1;\n\t\t\tlet writeIndex = 1;\n\n\t\t\tfor (let i = 1; i < lastIndex; ++i) {\n\t\t\t\tlet keep = false;\n\t\t\t\tconst time = times[i];\n\t\t\t\tconst timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif (time !== timeNext && (i !== 1 || time !== times[0])) {\n\t\t\t\t\tif (!smoothInterpolation) {\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tconst value = values[offset + j];\n\n\t\t\t\t\t\t\tif (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t}\n\t\t\t\t} // in-place compaction\n\n\n\t\t\t\tif (keep) {\n\t\t\t\t\tif (i !== writeIndex) {\n\t\t\t\t\t\ttimes[writeIndex] = times[i];\n\t\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tvalues[writeOffset + j] = values[readOffset + j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t++writeIndex;\n\t\t\t\t}\n\t\t\t} // flush last keyframe (compaction looks ahead)\n\n\n\t\t\tif (lastIndex > 0) {\n\t\t\t\ttimes[writeIndex] = times[lastIndex];\n\n\t\t\t\tfor (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {\n\t\t\t\t\tvalues[writeOffset + j] = values[readOffset + j];\n\t\t\t\t}\n\n\t\t\t\t++writeIndex;\n\t\t\t}\n\n\t\t\tif (writeIndex !== times.length) {\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n\t\t\t} else {\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\tconst times = AnimationUtils.arraySlice(this.times, 0);\n\t\t\tconst values = AnimationUtils.arraySlice(this.values, 0);\n\t\t\tconst TypedKeyframeTrack = this.constructor;\n\t\t\tconst track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.\n\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\t\t\treturn track;\n\t\t}\n\n\t}\n\n\tKeyframeTrack.prototype.TimeBufferType = Float32Array;\n\tKeyframeTrack.prototype.ValueBufferType = Float32Array;\n\tKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n\t/**\n\t * A Track of Boolean keyframe values.\n\t */\n\n\tclass BooleanKeyframeTrack extends KeyframeTrack {}\n\n\tBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n\tBooleanKeyframeTrack.prototype.ValueBufferType = Array;\n\tBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined; // Note: Actually this track could have a optimized / compressed\n\n\t/**\n\t * A Track of keyframe values that represent color.\n\t */\n\n\tclass ColorKeyframeTrack extends KeyframeTrack {}\n\n\tColorKeyframeTrack.prototype.ValueTypeName = 'color'; // ValueBufferType is inherited\n\n\t/**\n\t * A Track of numeric keyframe values.\n\t */\n\n\tclass NumberKeyframeTrack extends KeyframeTrack {}\n\n\tNumberKeyframeTrack.prototype.ValueTypeName = 'number'; // ValueBufferType is inherited\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t */\n\n\tclass QuaternionLinearInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\talpha = (t - t0) / (t1 - t0);\n\t\t\tlet offset = i1 * stride;\n\n\t\t\tfor (let end = offset + stride; offset !== end; offset += 4) {\n\t\t\t\tQuaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\t/**\n\t * A Track of quaternion keyframe values.\n\t */\n\n\tclass QuaternionKeyframeTrack extends KeyframeTrack {\n\t\tInterpolantFactoryMethodLinear(result) {\n\t\t\treturn new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited\n\n\tQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\tQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track that interpolates Strings\n\t */\n\n\tclass StringKeyframeTrack extends KeyframeTrack {}\n\n\tStringKeyframeTrack.prototype.ValueTypeName = 'string';\n\tStringKeyframeTrack.prototype.ValueBufferType = Array;\n\tStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track of vectored keyframe values.\n\t */\n\n\tclass VectorKeyframeTrack extends KeyframeTrack {}\n\n\tVectorKeyframeTrack.prototype.ValueTypeName = 'vector'; // ValueBufferType is inherited\n\n\tclass AnimationClip {\n\t\tconstructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {\n\t\t\tthis.name = name;\n\t\t\tthis.tracks = tracks;\n\t\t\tthis.duration = duration;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tthis.uuid = generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n\t\t\tif (this.duration < 0) {\n\t\t\t\tthis.resetDuration();\n\t\t\t}\n\t\t}\n\n\t\tstatic parse(json) {\n\t\t\tconst tracks = [],\n\t\t\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\t\t\tframeTime = 1.0 / (json.fps || 1.0);\n\n\t\t\tfor (let i = 0, n = jsonTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n\t\t\t}\n\n\t\t\tconst clip = new this(json.name, json.duration, tracks, json.blendMode);\n\t\t\tclip.uuid = json.uuid;\n\t\t\treturn clip;\n\t\t}\n\n\t\tstatic toJSON(clip) {\n\t\t\tconst tracks = [],\n\t\t\t\t\t\tclipTracks = clip.tracks;\n\t\t\tconst json = {\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\t\t\t};\n\n\t\t\tfor (let i = 0, n = clipTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n\t\t\t}\n\n\t\t\treturn json;\n\t\t}\n\n\t\tstatic CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n\t\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < numMorphTargets; i++) {\n\t\t\t\tlet times = [];\n\t\t\t\tlet values = [];\n\t\t\t\ttimes.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n\t\t\t\tvalues.push(0, 1, 0);\n\t\t\t\tconst order = AnimationUtils.getKeyframeOrder(times);\n\t\t\t\ttimes = AnimationUtils.sortedArray(times, 1, order);\n\t\t\t\tvalues = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\n\t\t\t\tif (!noLoop && times[0] === 0) {\n\t\t\t\t\ttimes.push(numMorphTargets);\n\t\t\t\t\tvalues.push(values[0]);\n\t\t\t\t}\n\n\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n\t\t\t}\n\n\t\t\treturn new this(name, -1, tracks);\n\t\t}\n\n\t\tstatic findByName(objectOrClipArray, name) {\n\t\t\tlet clipArray = objectOrClipArray;\n\n\t\t\tif (!Array.isArray(objectOrClipArray)) {\n\t\t\t\tconst o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < clipArray.length; i++) {\n\t\t\t\tif (clipArray[i].name === name) {\n\t\t\t\t\treturn clipArray[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tstatic CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n\t\t\tconst animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n\t\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\n\t\t\tfor (let i = 0, il = morphTargets.length; i < il; i++) {\n\t\t\t\tconst morphTarget = morphTargets[i];\n\t\t\t\tconst parts = morphTarget.name.match(pattern);\n\n\t\t\t\tif (parts && parts.length > 1) {\n\t\t\t\t\tconst name = parts[1];\n\t\t\t\t\tlet animationMorphTargets = animationToMorphTargets[name];\n\n\t\t\t\t\tif (!animationMorphTargets) {\n\t\t\t\t\t\tanimationToMorphTargets[name] = animationMorphTargets = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push(morphTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst clips = [];\n\n\t\t\tfor (const name in animationToMorphTargets) {\n\t\t\t\tclips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));\n\t\t\t}\n\n\t\t\treturn clips;\n\t\t} // parse the animation.hierarchy format\n\n\n\t\tstatic parseAnimation(animation, bones) {\n\t\t\tif (!animation) {\n\t\t\t\tconsole.error('THREE.AnimationClip: No animation in JSONLoader data.');\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif (animationKeys.length !== 0) {\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\t\t\t\t\tAnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n\t\t\t\t\tif (times.length !== 0) {\n\t\t\t\t\t\tdestTracks.push(new trackType(trackName, times, values));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst tracks = [];\n\t\t\tconst clipName = animation.name || 'default';\n\t\t\tconst fps = animation.fps || 30;\n\t\t\tconst blendMode = animation.blendMode; // automatic length determination in AnimationClip.\n\n\t\t\tlet duration = animation.length || -1;\n\t\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor (let h = 0; h < hierarchyTracks.length; h++) {\n\t\t\t\tconst animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n\t\t\t\tif (!animationKeys || animationKeys.length === 0) continue; // process morph targets\n\n\t\t\t\tif (animationKeys[0].morphTargets) {\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tconst morphTargetNames = {};\n\t\t\t\t\tlet k;\n\n\t\t\t\t\tfor (k = 0; k < animationKeys.length; k++) {\n\t\t\t\t\t\tif (animationKeys[k].morphTargets) {\n\t\t\t\t\t\t\tfor (let m = 0; m < animationKeys[k].morphTargets.length; m++) {\n\t\t\t\t\t\t\t\tmorphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} // create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\n\n\t\t\t\t\tfor (const morphTargetName in morphTargetNames) {\n\t\t\t\t\t\tconst times = [];\n\t\t\t\t\t\tconst values = [];\n\n\t\t\t\t\t\tfor (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {\n\t\t\t\t\t\t\tconst animationKey = animationKeys[k];\n\t\t\t\t\t\t\ttimes.push(animationKey.time);\n\t\t\t\t\t\t\tvalues.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * (fps || 1.0);\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\t\t\t\t\tconst boneName = '.bones[' + bones[h].name + ']';\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n\t\t\t\t\taddNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tracks.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst clip = new this(clipName, duration, tracks, blendMode);\n\t\t\treturn clip;\n\t\t}\n\n\t\tresetDuration() {\n\t\t\tconst tracks = this.tracks;\n\t\t\tlet duration = 0;\n\n\t\t\tfor (let i = 0, n = tracks.length; i !== n; ++i) {\n\t\t\t\tconst track = this.tracks[i];\n\t\t\t\tduration = Math.max(duration, track.times[track.times.length - 1]);\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\t\t\treturn this;\n\t\t}\n\n\t\ttrim() {\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].trim(0, this.duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidate() {\n\t\t\tlet valid = true;\n\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tvalid = valid && this.tracks[i].validate();\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t}\n\n\t\toptimize() {\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].optimize();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\ttracks.push(this.tracks[i].clone());\n\t\t\t}\n\n\t\t\treturn new this.constructor(this.name, this.duration, tracks, this.blendMode);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn this.constructor.toJSON(this);\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName(typeName) {\n\t\tswitch (typeName.toLowerCase()) {\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\t\t\t\treturn StringKeyframeTrack;\n\t\t}\n\n\t\tthrow new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n\t}\n\n\tfunction parseKeyframeTrack(json) {\n\t\tif (json.type === undefined) {\n\t\t\tthrow new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n\t\t}\n\n\t\tconst trackType = getTrackTypeForValueTypeName(json.type);\n\n\t\tif (json.times === undefined) {\n\t\t\tconst times = [],\n\t\t\t\t\t\tvalues = [];\n\t\t\tAnimationUtils.flattenJSON(json.keys, times, values, 'value');\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\t\t} // derived classes can define a static parse method\n\n\n\t\tif (trackType.parse !== undefined) {\n\t\t\treturn trackType.parse(json);\n\t\t} else {\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType(json.name, json.times, json.values, json.interpolation);\n\t\t}\n\t}\n\n\tconst Cache = {\n\t\tenabled: false,\n\t\tfiles: {},\n\t\tadd: function (key, file) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[key] = file;\n\t\t},\n\t\tget: function (key) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[key];\n\t\t},\n\t\tremove: function (key) {\n\t\t\tdelete this.files[key];\n\t\t},\n\t\tclear: function () {\n\t\t\tthis.files = {};\n\t\t}\n\t};\n\n\tclass LoadingManager {\n\t\tconstructor(onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tlet isLoading = false;\n\t\t\tlet itemsLoaded = 0;\n\t\t\tlet itemsTotal = 0;\n\t\t\tlet urlModifier = undefined;\n\t\t\tconst handlers = []; // Refer to #5689 for the reason why we don't set .onStart\n\t\t\t// in the constructor\n\n\t\t\tthis.onStart = undefined;\n\t\t\tthis.onLoad = onLoad;\n\t\t\tthis.onProgress = onProgress;\n\t\t\tthis.onError = onError;\n\n\t\t\tthis.itemStart = function (url) {\n\t\t\t\titemsTotal++;\n\n\t\t\t\tif (isLoading === false) {\n\t\t\t\t\tif (scope.onStart !== undefined) {\n\t\t\t\t\t\tscope.onStart(url, itemsLoaded, itemsTotal);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tisLoading = true;\n\t\t\t};\n\n\t\t\tthis.itemEnd = function (url) {\n\t\t\t\titemsLoaded++;\n\n\t\t\t\tif (scope.onProgress !== undefined) {\n\t\t\t\t\tscope.onProgress(url, itemsLoaded, itemsTotal);\n\t\t\t\t}\n\n\t\t\t\tif (itemsLoaded === itemsTotal) {\n\t\t\t\t\tisLoading = false;\n\n\t\t\t\t\tif (scope.onLoad !== undefined) {\n\t\t\t\t\t\tscope.onLoad();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.itemError = function (url) {\n\t\t\t\tif (scope.onError !== undefined) {\n\t\t\t\t\tscope.onError(url);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.resolveURL = function (url) {\n\t\t\t\tif (urlModifier) {\n\t\t\t\t\treturn urlModifier(url);\n\t\t\t\t}\n\n\t\t\t\treturn url;\n\t\t\t};\n\n\t\t\tthis.setURLModifier = function (transform) {\n\t\t\t\turlModifier = transform;\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.addHandler = function (regex, loader) {\n\t\t\t\thandlers.push(regex, loader);\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.removeHandler = function (regex) {\n\t\t\t\tconst index = handlers.indexOf(regex);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\thandlers.splice(index, 2);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.getHandler = function (file) {\n\t\t\t\tfor (let i = 0, l = handlers.length; i < l; i += 2) {\n\t\t\t\t\tconst regex = handlers[i];\n\t\t\t\t\tconst loader = handlers[i + 1];\n\t\t\t\t\tif (regex.global) regex.lastIndex = 0; // see #17920\n\n\t\t\t\t\tif (regex.test(file)) {\n\t\t\t\t\t\treturn loader;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t};\n\t\t}\n\n\t}\n\n\tconst DefaultLoadingManager = new LoadingManager();\n\n\tclass Loader {\n\t\tconstructor(manager) {\n\t\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\t\t\tthis.crossOrigin = 'anonymous';\n\t\t\tthis.withCredentials = false;\n\t\t\tthis.path = '';\n\t\t\tthis.resourcePath = '';\n\t\t\tthis.requestHeader = {};\n\t\t}\n\n\t\tload()\n\t\t/* url, onLoad, onProgress, onError */\n\t\t{}\n\n\t\tloadAsync(url, onProgress) {\n\t\t\tconst scope = this;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tscope.load(url, resolve, onProgress, reject);\n\t\t\t});\n\t\t}\n\n\t\tparse()\n\t\t/* data */\n\t\t{}\n\n\t\tsetCrossOrigin(crossOrigin) {\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetWithCredentials(value) {\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetPath(path) {\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetResourcePath(resourcePath) {\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRequestHeader(requestHeader) {\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tconst loading = {};\n\n\tclass FileLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t} // Check if request is duplicate\n\n\n\t\t\tif (loading[url] !== undefined) {\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} // Check for data: URI\n\n\n\t\t\tconst dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tconst dataUriRegexResult = url.match(dataUriRegex);\n\t\t\tlet request; // Safari can not handle Data URIs through XMLHttpRequest so process manually\n\n\t\t\tif (dataUriRegexResult) {\n\t\t\t\tconst mimeType = dataUriRegexResult[1];\n\t\t\t\tconst isBase64 = !!dataUriRegexResult[2];\n\t\t\t\tlet data = dataUriRegexResult[3];\n\t\t\t\tdata = decodeURIComponent(data);\n\t\t\t\tif (isBase64) data = atob(data);\n\n\t\t\t\ttry {\n\t\t\t\t\tlet response;\n\t\t\t\t\tconst responseType = (this.responseType || '').toLowerCase();\n\n\t\t\t\t\tswitch (responseType) {\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\t\t\t\t\t\t\tconst view = new Uint8Array(data.length);\n\n\t\t\t\t\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\t\t\t\t\tview[i] = data.charCodeAt(i);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (responseType === 'blob') {\n\t\t\t\t\t\t\t\tresponse = new Blob([view.buffer], {\n\t\t\t\t\t\t\t\t\ttype: mimeType\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString(data, mimeType);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = JSON.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 'text' or other\n\t\t\t\t\t\t\tresponse = data;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onLoad) onLoad(response);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onError) onError(error);\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Initialise array for duplicate requests\n\t\t\t\tloading[url] = [];\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\trequest = new XMLHttpRequest();\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.addEventListener('load', function (event) {\n\t\t\t\t\tconst response = this.response;\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tif (this.status === 200 || this.status === 0) {\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\t\t\t\t\tif (this.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.'); // Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\n\t\t\t\t\t\tCache.add(url, response);\n\n\t\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\t\tif (callback.onLoad) callback.onLoad(response);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('progress', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onProgress) callback.onProgress(event);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('error', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('abort', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\tif (this.responseType !== undefined) request.responseType = this.responseType;\n\t\t\t\tif (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;\n\t\t\t\tif (request.overrideMimeType) request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');\n\n\t\t\t\tfor (const header in this.requestHeader) {\n\t\t\t\t\trequest.setRequestHeader(header, this.requestHeader[header]);\n\t\t\t\t}\n\n\t\t\t\trequest.send(null);\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\treturn request;\n\t\t}\n\n\t\tsetResponseType(value) {\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMimeType(value) {\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AnimationLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst animations = [];\n\n\t\t\tfor (let i = 0; i < json.length; i++) {\n\t\t\t\tconst clip = AnimationClip.parse(json[i]);\n\t\t\t\tanimations.push(clip);\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\n\t}\n\n\t/**\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tclass CompressedTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst images = [];\n\t\t\tconst texture = new CompressedTexture();\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tlet loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(url[i], function (buffer) {\n\t\t\t\t\tconst texDatas = scope.parse(buffer, true);\n\t\t\t\t\timages[i] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\tif (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\tif (Array.isArray(url)) {\n\t\t\t\tfor (let i = 0, il = url.length; i < il; ++i) {\n\t\t\t\t\tloadTexture(i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\t\t\t\tloader.load(url, function (buffer) {\n\t\t\t\t\tconst texDatas = scope.parse(buffer, true);\n\n\t\t\t\t\tif (texDatas.isCubemap) {\n\t\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor (let f = 0; f < faces; f++) {\n\t\t\t\t\t\t\timages[f] = {\n\t\t\t\t\t\t\t\tmipmaps: []\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tfor (let i = 0; i < texDatas.mipmapCount; i++) {\n\t\t\t\t\t\t\t\timages[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);\n\t\t\t\t\t\t\t\timages[f].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[f].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[f].height = texDatas.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (texDatas.mipmapCount === 1) {\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\tclass ImageLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tconst image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\n\n\t\t\tfunction onImageLoad() {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tCache.add(url, this);\n\t\t\t\tif (onLoad) onLoad(this);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\tfunction onImageError(event) {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tif (onError) onError(event);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\timage.addEventListener('load', onImageLoad, false);\n\t\t\timage.addEventListener('error', onImageError, false);\n\n\t\t\tif (url.substr(0, 5) !== 'data:') {\n\t\t\t\tif (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\timage.src = url;\n\t\t\treturn image;\n\t\t}\n\n\t}\n\n\tclass CubeTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(urls, onLoad, onProgress, onError) {\n\t\t\tconst texture = new CubeTexture();\n\t\t\tconst loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tlet loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(urls[i], function (image) {\n\t\t\t\t\ttexture.images[i] = image;\n\t\t\t\t\tloaded++;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, undefined, onError);\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < urls.length; ++i) {\n\t\t\t\tloadTexture(i);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\t/**\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tclass DataTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst texture = new DataTexture();\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\tconst texData = scope.parse(buffer);\n\t\t\t\tif (!texData) return;\n\n\t\t\t\tif (texData.image !== undefined) {\n\t\t\t\t\ttexture.image = texData.image;\n\t\t\t\t} else if (texData.data !== undefined) {\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif (texData.encoding !== undefined) {\n\t\t\t\t\ttexture.encoding = texData.encoding;\n\t\t\t\t}\n\n\t\t\t\tif (texData.flipY !== undefined) {\n\t\t\t\t\ttexture.flipY = texData.flipY;\n\t\t\t\t}\n\n\t\t\t\tif (texData.format !== undefined) {\n\t\t\t\t\ttexture.format = texData.format;\n\t\t\t\t}\n\n\t\t\t\tif (texData.type !== undefined) {\n\t\t\t\t\ttexture.type = texData.type;\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmaps !== undefined) {\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmapCount === 1) {\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t}\n\n\t\t\t\tif (texData.generateMipmaps !== undefined) {\n\t\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\tif (onLoad) onLoad(texture, texData);\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\tclass TextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst texture = new Texture();\n\t\t\tconst loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.load(url, function (image) {\n\t\t\t\ttexture.image = image; // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\n\t\t\t\tconst isJPEG = url.search(/\\.jpe?g($|\\?)/i) > 0 || url.search(/^data\\:image\\/jpeg/) === 0;\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif (onLoad !== undefined) {\n\t\t\t\t\tonLoad(texture);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\t/**\n\t * Extensible curve object.\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\tclass Curve {\n\t\tconstructor() {\n\t\t\tthis.type = 'Curve';\n\t\t\tthis.arcLengthDivisions = 200;\n\t\t} // Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\n\t\tgetPoint()\n\t\t/* t, optionalTarget */\n\t\t{\n\t\t\tconsole.warn('THREE.Curve: .getPoint() not implemented.');\n\t\t\treturn null;\n\t\t} // Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\tconst t = this.getUtoTmapping(u);\n\t\t\treturn this.getPoint(t, optionalTarget);\n\t\t} // Get sequence of points using getPoint( t )\n\n\n\t\tgetPoints(divisions = 5) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPoint(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t} // Get sequence of points using getPointAt( u )\n\n\n\t\tgetSpacedPoints(divisions = 5) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPointAt(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t} // Get total curve arc length\n\n\n\t\tgetLength() {\n\t\t\tconst lengths = this.getLengths();\n\t\t\treturn lengths[lengths.length - 1];\n\t\t} // Get list of cumulative segment lengths\n\n\n\t\tgetLengths(divisions = this.arcLengthDivisions) {\n\t\t\tif (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n\t\t\t\treturn this.cacheArcLengths;\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\t\t\tconst cache = [];\n\t\t\tlet current,\n\t\t\t\t\tlast = this.getPoint(0);\n\t\t\tlet sum = 0;\n\t\t\tcache.push(0);\n\n\t\t\tfor (let p = 1; p <= divisions; p++) {\n\t\t\t\tcurrent = this.getPoint(p / divisions);\n\t\t\t\tsum += current.distanceTo(last);\n\t\t\t\tcache.push(sum);\n\t\t\t\tlast = current;\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\t\t}\n\n\t\tupdateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\t\t} // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\n\t\tgetUtoTmapping(u, distance) {\n\t\t\tconst arcLengths = this.getLengths();\n\t\t\tlet i = 0;\n\t\t\tconst il = arcLengths.length;\n\t\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\t\tif (distance) {\n\t\t\t\ttargetArcLength = distance;\n\t\t\t} else {\n\t\t\t\ttargetArcLength = u * arcLengths[il - 1];\n\t\t\t} // binary search for the index with largest value smaller than target u distance\n\n\n\t\t\tlet low = 0,\n\t\t\t\t\thigh = il - 1,\n\t\t\t\t\tcomparison;\n\n\t\t\twhile (low <= high) {\n\t\t\t\ti = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[i] - targetArcLength;\n\n\t\t\t\tif (comparison < 0) {\n\t\t\t\t\tlow = i + 1;\n\t\t\t\t} else if (comparison > 0) {\n\t\t\t\t\thigh = i - 1;\n\t\t\t\t} else {\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif (arcLengths[i] === targetArcLength) {\n\t\t\t\treturn i / (il - 1);\n\t\t\t} // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n\t\t\tconst lengthBefore = arcLengths[i];\n\t\t\tconst lengthAfter = arcLengths[i + 1];\n\t\t\tconst segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n\t\t\tconst segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n\t\t\tconst t = (i + segmentFraction) / (il - 1);\n\t\t\treturn t;\n\t\t} // Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\n\t\tgetTangent(t, optionalTarget) {\n\t\t\tconst delta = 0.0001;\n\t\t\tlet t1 = t - delta;\n\t\t\tlet t2 = t + delta; // Capping in case of danger\n\n\t\t\tif (t1 < 0) t1 = 0;\n\t\t\tif (t2 > 1) t2 = 1;\n\t\t\tconst pt1 = this.getPoint(t1);\n\t\t\tconst pt2 = this.getPoint(t2);\n\t\t\tconst tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n\t\t\ttangent.copy(pt2).sub(pt1).normalize();\n\t\t\treturn tangent;\n\t\t}\n\n\t\tgetTangentAt(u, optionalTarget) {\n\t\t\tconst t = this.getUtoTmapping(u);\n\t\t\treturn this.getTangent(t, optionalTarget);\n\t\t}\n\n\t\tcomputeFrenetFrames(segments, closed) {\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t\t\tconst normal = new Vector3();\n\t\t\tconst tangents = [];\n\t\t\tconst normals = [];\n\t\t\tconst binormals = [];\n\t\t\tconst vec = new Vector3();\n\t\t\tconst mat = new Matrix4(); // compute the tangent vectors for each segment on the curve\n\n\t\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\t\tconst u = i / segments;\n\t\t\t\ttangents[i] = this.getTangentAt(u, new Vector3());\n\t\t\t\ttangents[i].normalize();\n\t\t\t} // select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\n\t\t\tnormals[0] = new Vector3();\n\t\t\tbinormals[0] = new Vector3();\n\t\t\tlet min = Number.MAX_VALUE;\n\t\t\tconst tx = Math.abs(tangents[0].x);\n\t\t\tconst ty = Math.abs(tangents[0].y);\n\t\t\tconst tz = Math.abs(tangents[0].z);\n\n\t\t\tif (tx <= min) {\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set(1, 0, 0);\n\t\t\t}\n\n\t\t\tif (ty <= min) {\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set(0, 1, 0);\n\t\t\t}\n\n\t\t\tif (tz <= min) {\n\t\t\t\tnormal.set(0, 0, 1);\n\t\t\t}\n\n\t\t\tvec.crossVectors(tangents[0], normal).normalize();\n\t\t\tnormals[0].crossVectors(tangents[0], vec);\n\t\t\tbinormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\tnormals[i] = normals[i - 1].clone();\n\t\t\t\tbinormals[i] = binormals[i - 1].clone();\n\t\t\t\tvec.crossVectors(tangents[i - 1], tangents[i]);\n\n\t\t\t\tif (vec.length() > Number.EPSILON) {\n\t\t\t\t\tvec.normalize();\n\t\t\t\t\tconst theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n\t\t\t\t}\n\n\t\t\t\tbinormals[i].crossVectors(tangents[i], normals[i]);\n\t\t\t} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n\t\t\tif (closed === true) {\n\t\t\t\tlet theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n\t\t\t\t\ttheta = -theta;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));\n\t\t\t\t\tbinormals[i].crossVectors(tangents[i], normals[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass EllipseCurve extends Curve {\n\t\tconstructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {\n\t\t\tsuper();\n\t\t\tthis.type = 'EllipseCurve';\n\t\t\tthis.aX = aX;\n\t\t\tthis.aY = aY;\n\t\t\tthis.xRadius = xRadius;\n\t\t\tthis.yRadius = yRadius;\n\t\t\tthis.aStartAngle = aStartAngle;\n\t\t\tthis.aEndAngle = aEndAngle;\n\t\t\tthis.aClockwise = aClockwise;\n\t\t\tthis.aRotation = aRotation;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget) {\n\t\t\tconst point = optionalTarget || new Vector2();\n\t\t\tconst twoPi = Math.PI * 2;\n\t\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\t\tconst samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n\t\t\twhile (deltaAngle < 0) deltaAngle += twoPi;\n\n\t\t\twhile (deltaAngle > twoPi) deltaAngle -= twoPi;\n\n\t\t\tif (deltaAngle < Number.EPSILON) {\n\t\t\t\tif (samePoints) {\n\t\t\t\t\tdeltaAngle = 0;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.aClockwise === true && !samePoints) {\n\t\t\t\tif (deltaAngle === twoPi) {\n\t\t\t\t\tdeltaAngle = -twoPi;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\t\tlet x = this.aX + this.xRadius * Math.cos(angle);\n\t\t\tlet y = this.aY + this.yRadius * Math.sin(angle);\n\n\t\t\tif (this.aRotation !== 0) {\n\t\t\t\tconst cos = Math.cos(this.aRotation);\n\t\t\t\tconst sin = Math.sin(this.aRotation);\n\t\t\t\tconst tx = x - this.aX;\n\t\t\t\tconst ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n\t\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\t\ty = tx * sin + ty * cos + this.aY;\n\t\t\t}\n\n\t\t\treturn point.set(x, y);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.aX = source.aX;\n\t\t\tthis.aY = source.aY;\n\t\t\tthis.xRadius = source.xRadius;\n\t\t\tthis.yRadius = source.yRadius;\n\t\t\tthis.aStartAngle = source.aStartAngle;\n\t\t\tthis.aEndAngle = source.aEndAngle;\n\t\t\tthis.aClockwise = source.aClockwise;\n\t\t\tthis.aRotation = source.aRotation;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.aX = this.aX;\n\t\t\tdata.aY = this.aY;\n\t\t\tdata.xRadius = this.xRadius;\n\t\t\tdata.yRadius = this.yRadius;\n\t\t\tdata.aStartAngle = this.aStartAngle;\n\t\t\tdata.aEndAngle = this.aEndAngle;\n\t\t\tdata.aClockwise = this.aClockwise;\n\t\t\tdata.aRotation = this.aRotation;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.aX = json.aX;\n\t\t\tthis.aY = json.aY;\n\t\t\tthis.xRadius = json.xRadius;\n\t\t\tthis.yRadius = json.yRadius;\n\t\t\tthis.aStartAngle = json.aStartAngle;\n\t\t\tthis.aEndAngle = json.aEndAngle;\n\t\t\tthis.aClockwise = json.aClockwise;\n\t\t\tthis.aRotation = json.aRotation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tclass ArcCurve extends EllipseCurve {\n\t\tconstructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tsuper(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\tthis.type = 'ArcCurve';\n\t\t}\n\n\t}\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\t\tlet c0 = 0,\n\t\t\t\tc1 = 0,\n\t\t\t\tc2 = 0,\n\t\t\t\tc3 = 0;\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *\t p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *\t p(0) = x0, p(1) = x1\n\t\t *\tand\n\t\t *\t p'(0) = t0, p'(1) = t1.\n\t\t */\n\n\t\tfunction init(x0, x1, t0, t1) {\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\t}\n\n\t\treturn {\n\t\t\tinitCatmullRom: function (x0, x1, x2, x3, tension) {\n\t\t\t\tinit(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n\t\t\t},\n\t\t\tinitNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tlet t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n\t\t\t\tlet t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\t\t\t\tinit(x1, x2, t1, t2);\n\t\t\t},\n\t\t\tcalc: function (t) {\n\t\t\t\tconst t2 = t * t;\n\t\t\t\tconst t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\t\t\t}\n\t\t};\n\t} //\n\n\n\tconst tmp = new Vector3();\n\tconst px = new CubicPoly(),\n\t\t\t\tpy = new CubicPoly(),\n\t\t\t\tpz = new CubicPoly();\n\n\tclass CatmullRomCurve3 extends Curve {\n\t\tconstructor(points = [], closed = false, curveType = 'centripetal', tension = 0.5) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CatmullRomCurve3';\n\t\t\tthis.points = points;\n\t\t\tthis.closed = closed;\n\t\t\tthis.curveType = curveType;\n\t\t\tthis.tension = tension;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst points = this.points;\n\t\t\tconst l = points.length;\n\t\t\tconst p = (l - (this.closed ? 0 : 1)) * t;\n\t\t\tlet intPoint = Math.floor(p);\n\t\t\tlet weight = p - intPoint;\n\n\t\t\tif (this.closed) {\n\t\t\t\tintPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n\t\t\t} else if (weight === 0 && intPoint === l - 1) {\n\t\t\t\tintPoint = l - 2;\n\t\t\t\tweight = 1;\n\t\t\t}\n\n\t\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\t\tif (this.closed || intPoint > 0) {\n\t\t\t\tp0 = points[(intPoint - 1) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate first point\n\t\t\t\ttmp.subVectors(points[0], points[1]).add(points[0]);\n\t\t\t\tp0 = tmp;\n\t\t\t}\n\n\t\t\tconst p1 = points[intPoint % l];\n\t\t\tconst p2 = points[(intPoint + 1) % l];\n\n\t\t\tif (this.closed || intPoint + 2 < l) {\n\t\t\t\tp3 = points[(intPoint + 2) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate last point\n\t\t\t\ttmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n\t\t\t\tp3 = tmp;\n\t\t\t}\n\n\t\t\tif (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\t\tlet dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n\t\t\t\tlet dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n\t\t\t\tlet dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n\t\t\t\tif (dt1 < 1e-4) dt1 = 1.0;\n\t\t\t\tif (dt0 < 1e-4) dt0 = dt1;\n\t\t\t\tif (dt2 < 1e-4) dt2 = dt1;\n\t\t\t\tpx.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n\t\t\t\tpy.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n\t\t\t\tpz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n\t\t\t} else if (this.curveType === 'catmullrom') {\n\t\t\t\tpx.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n\t\t\t\tpy.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n\t\t\t\tpz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n\t\t\t}\n\n\t\t\tpoint.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tconst point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\tthis.closed = source.closed;\n\t\t\tthis.curveType = source.curveType;\n\t\t\tthis.tension = source.tension;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.points = [];\n\n\t\t\tfor (let i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tconst point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\tdata.closed = this.closed;\n\t\t\tdata.curveType = this.curveType;\n\t\t\tdata.tension = this.tension;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tconst point = json.points[i];\n\t\t\t\tthis.points.push(new Vector3().fromArray(point));\n\t\t\t}\n\n\t\t\tthis.closed = json.closed;\n\t\t\tthis.curveType = json.curveType;\n\t\t\tthis.tension = json.tension;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\t/**\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\tfunction CatmullRom(t, p0, p1, p2, p3) {\n\t\tconst v0 = (p2 - p0) * 0.5;\n\t\tconst v1 = (p3 - p1) * 0.5;\n\t\tconst t2 = t * t;\n\t\tconst t3 = t * t2;\n\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t} //\n\n\n\tfunction QuadraticBezierP0(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn k * k * p;\n\t}\n\n\tfunction QuadraticBezierP1(t, p) {\n\t\treturn 2 * (1 - t) * t * p;\n\t}\n\n\tfunction QuadraticBezierP2(t, p) {\n\t\treturn t * t * p;\n\t}\n\n\tfunction QuadraticBezier(t, p0, p1, p2) {\n\t\treturn QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n\t} //\n\n\n\tfunction CubicBezierP0(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn k * k * k * p;\n\t}\n\n\tfunction CubicBezierP1(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\t}\n\n\tfunction CubicBezierP2(t, p) {\n\t\treturn 3 * (1 - t) * t * t * p;\n\t}\n\n\tfunction CubicBezierP3(t, p) {\n\t\treturn t * t * t * p;\n\t}\n\n\tfunction CubicBezier(t, p0, p1, p2, p3) {\n\t\treturn CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n\t}\n\n\tclass CubicBezierCurve extends Curve {\n\t\tconstructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubicBezierCurve';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tclass CubicBezierCurve3 extends Curve {\n\t\tconstructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubicBezierCurve3';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tclass LineCurve extends Curve {\n\t\tconstructor(v1 = new Vector2(), v2 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineCurve';\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t}\n\n\t\tgetTangent(t, optionalTarget) {\n\t\t\tconst tangent = optionalTarget || new Vector2();\n\t\t\ttangent.copy(this.v2).sub(this.v1).normalize();\n\t\t\treturn tangent;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tclass LineCurve3 extends Curve {\n\t\tconstructor(v1 = new Vector3(), v2 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineCurve3';\n\t\t\tthis.isLineCurve3 = true;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass QuadraticBezierCurve extends Curve {\n\t\tconstructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'QuadraticBezierCurve';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tclass QuadraticBezierCurve3 extends Curve {\n\t\tconstructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'QuadraticBezierCurve3';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tclass SplineCurve extends Curve {\n\t\tconstructor(points = []) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SplineCurve';\n\t\t\tthis.points = points;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst points = this.points;\n\t\t\tconst p = (points.length - 1) * t;\n\t\t\tconst intPoint = Math.floor(p);\n\t\t\tconst weight = p - intPoint;\n\t\t\tconst p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n\t\t\tconst p1 = points[intPoint];\n\t\t\tconst p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n\t\t\tconst p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\t\t\tpoint.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tconst point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.points = [];\n\n\t\t\tfor (let i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tconst point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tconst point = json.points[i];\n\t\t\t\tthis.points.push(new Vector2().fromArray(point));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *\tcurves, but retains the api of a curve\n\t **************************************************************/\n\n\tclass CurvePath extends Curve {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'CurvePath';\n\t\t\tthis.curves = [];\n\t\t\tthis.autoClose = false; // Automatically closes the path\n\t\t}\n\n\t\tadd(curve) {\n\t\t\tthis.curves.push(curve);\n\t\t}\n\n\t\tclosePath() {\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tconst startPoint = this.curves[0].getPoint(0);\n\t\t\tconst endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n\t\t\tif (!startPoint.equals(endPoint)) {\n\t\t\t\tthis.curves.push(new LineCurve(endPoint, startPoint));\n\t\t\t}\n\t\t} // To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\n\t\tgetPoint(t) {\n\t\t\tconst d = t * this.getLength();\n\t\t\tconst curveLengths = this.getCurveLengths();\n\t\t\tlet i = 0; // To think about boundaries points.\n\n\t\t\twhile (i < curveLengths.length) {\n\t\t\t\tif (curveLengths[i] >= d) {\n\t\t\t\t\tconst diff = curveLengths[i] - d;\n\t\t\t\t\tconst curve = this.curves[i];\n\t\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\t\t\t\treturn curve.getPointAt(u);\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn null; // loop where sum != 0, sum > d , sum+1 <d\n\t\t} // We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\n\t\tgetLength() {\n\t\t\tconst lens = this.getCurveLengths();\n\t\t\treturn lens[lens.length - 1];\n\t\t} // cacheLengths must be recalculated.\n\n\n\t\tupdateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\t\t} // Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\n\t\tgetCurveLengths() {\n\t\t\t// We use cache values if curves and cache array are same length\n\t\t\tif (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n\t\t\t\treturn this.cacheLengths;\n\t\t\t} // Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\n\t\t\tconst lengths = [];\n\t\t\tlet sums = 0;\n\n\t\t\tfor (let i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tsums += this.curves[i].getLength();\n\t\t\t\tlengths.push(sums);\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\t\t\treturn lengths;\n\t\t}\n\n\t\tgetSpacedPoints(divisions = 40) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let i = 0; i <= divisions; i++) {\n\t\t\t\tpoints.push(this.getPoint(i / divisions));\n\t\t\t}\n\n\t\t\tif (this.autoClose) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t}\n\n\t\tgetPoints(divisions = 12) {\n\t\t\tconst points = [];\n\t\t\tlet last;\n\n\t\t\tfor (let i = 0, curves = this.curves; i < curves.length; i++) {\n\t\t\t\tconst curve = curves[i];\n\t\t\t\tconst resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;\n\t\t\t\tconst pts = curve.getPoints(resolution);\n\n\t\t\t\tfor (let j = 0; j < pts.length; j++) {\n\t\t\t\t\tconst point = pts[j];\n\t\t\t\t\tif (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t\tlast = point;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.curves = [];\n\n\t\t\tfor (let i = 0, l = source.curves.length; i < l; i++) {\n\t\t\t\tconst curve = source.curves[i];\n\t\t\t\tthis.curves.push(curve.clone());\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor (let i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tconst curve = this.curves[i];\n\t\t\t\tdata.curves.push(curve.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor (let i = 0, l = json.curves.length; i < l; i++) {\n\t\t\t\tconst curve = json.curves[i];\n\t\t\t\tthis.curves.push(new Curves[curve.type]().fromJSON(curve));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Path extends CurvePath {\n\t\tconstructor(points) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Path';\n\t\t\tthis.currentPoint = new Vector2();\n\n\t\t\tif (points) {\n\t\t\t\tthis.setFromPoints(points);\n\t\t\t}\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.moveTo(points[0].x, points[0].y);\n\n\t\t\tfor (let i = 1, l = points.length; i < l; i++) {\n\t\t\t\tthis.lineTo(points[i].x, points[i].y);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tmoveTo(x, y) {\n\t\t\tthis.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\t\t}\n\n\t\tlineTo(x, y) {\n\t\t\tconst curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tquadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tconst curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tbezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tconst curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tsplineThru(pts\n\t\t/*Array of Vector*/\n\t\t) {\n\t\t\tconst npts = [this.currentPoint.clone()].concat(pts);\n\t\t\tconst curve = new SplineCurve(npts);\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.copy(pts[pts.length - 1]);\n\t\t\treturn this;\n\t\t}\n\n\t\tarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tconst x0 = this.currentPoint.x;\n\t\t\tconst y0 = this.currentPoint.y;\n\t\t\tthis.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t}\n\n\t\tabsarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t}\n\n\t\tellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tconst x0 = this.currentPoint.x;\n\t\t\tconst y0 = this.currentPoint.y;\n\t\t\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\t\t\treturn this;\n\t\t}\n\n\t\tabsellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tconst curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n\t\t\tif (this.curves.length > 0) {\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tconst firstPoint = curve.getPoint(0);\n\n\t\t\t\tif (!firstPoint.equals(this.currentPoint)) {\n\t\t\t\t\tthis.lineTo(firstPoint.x, firstPoint.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.curves.push(curve);\n\t\t\tconst lastPoint = curve.getPoint(1);\n\t\t\tthis.currentPoint.copy(lastPoint);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.currentPoint.copy(source.currentPoint);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.currentPoint.fromArray(json.currentPoint);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Shape extends Path {\n\t\tconstructor(points) {\n\t\t\tsuper(points);\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.type = 'Shape';\n\t\t\tthis.holes = [];\n\t\t}\n\n\t\tgetPointsHoles(divisions) {\n\t\t\tconst holesPts = [];\n\n\t\t\tfor (let i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tholesPts[i] = this.holes[i].getPoints(divisions);\n\t\t\t}\n\n\t\t\treturn holesPts;\n\t\t} // get points of shape and holes (keypoints based on segments parameter)\n\n\n\t\textractPoints(divisions) {\n\t\t\treturn {\n\t\t\t\tshape: this.getPoints(divisions),\n\t\t\t\tholes: this.getPointsHoles(divisions)\n\t\t\t};\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.holes = [];\n\n\t\t\tfor (let i = 0, l = source.holes.length; i < l; i++) {\n\t\t\t\tconst hole = source.holes[i];\n\t\t\t\tthis.holes.push(hole.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor (let i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tconst hole = this.holes[i];\n\t\t\t\tdata.holes.push(hole.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor (let i = 0, l = json.holes.length; i < l; i++) {\n\t\t\t\tconst hole = json.holes[i];\n\t\t\t\tthis.holes.push(new Path().fromJSON(hole));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Light extends Object3D {\n\t\tconstructor(color, intensity = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Light';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.intensity = intensity;\n\t\t}\n\n\t\tdispose() {// Empty here in base class; some subclasses override.\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.intensity = source.intensity;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\t\t\tif (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n\t\t\tif (this.distance !== undefined) data.object.distance = this.distance;\n\t\t\tif (this.angle !== undefined) data.object.angle = this.angle;\n\t\t\tif (this.decay !== undefined) data.object.decay = this.decay;\n\t\t\tif (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n\t\t\tif (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tLight.prototype.isLight = true;\n\n\tclass HemisphereLight extends Light {\n\t\tconstructor(skyColor, groundColor, intensity) {\n\t\t\tsuper(skyColor, intensity);\n\t\t\tthis.type = 'HemisphereLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.groundColor = new Color(groundColor);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.groundColor.copy(source.groundColor);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tHemisphereLight.prototype.isHemisphereLight = true;\n\n\tconst _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _lightPositionWorld$1 = /*@__PURE__*/new Vector3();\n\n\tconst _lookTarget$1 = /*@__PURE__*/new Vector3();\n\n\tclass LightShadow {\n\t\tconstructor(camera) {\n\t\t\tthis.camera = camera;\n\t\t\tthis.bias = 0;\n\t\t\tthis.normalBias = 0;\n\t\t\tthis.radius = 1;\n\t\t\tthis.mapSize = new Vector2(512, 512);\n\t\t\tthis.map = null;\n\t\t\tthis.mapPass = null;\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.autoUpdate = true;\n\t\t\tthis.needsUpdate = false;\n\t\t\tthis._frustum = new Frustum();\n\t\t\tthis._frameExtents = new Vector2(1, 1);\n\t\t\tthis._viewportCount = 1;\n\t\t\tthis._viewports = [new Vector4(0, 0, 1, 1)];\n\t\t}\n\n\t\tgetViewportCount() {\n\t\t\treturn this._viewportCount;\n\t\t}\n\n\t\tgetFrustum() {\n\t\t\treturn this._frustum;\n\t\t}\n\n\t\tupdateMatrices(light) {\n\t\t\tconst shadowCamera = this.camera;\n\t\t\tconst shadowMatrix = this.matrix;\n\n\t\t\t_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tshadowCamera.position.copy(_lightPositionWorld$1);\n\n\t\t\t_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);\n\n\t\t\tshadowCamera.lookAt(_lookTarget$1);\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix$1);\n\n\t\t\tshadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n\t\t\tshadowMatrix.multiply(shadowCamera.projectionMatrix);\n\t\t\tshadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n\t\t}\n\n\t\tgetViewport(viewportIndex) {\n\t\t\treturn this._viewports[viewportIndex];\n\t\t}\n\n\t\tgetFrameExtents() {\n\t\t\treturn this._frameExtents;\n\t\t}\n\n\t\tdispose() {\n\t\t\tif (this.map) {\n\t\t\t\tthis.map.dispose();\n\t\t\t}\n\n\t\t\tif (this.mapPass) {\n\t\t\t\tthis.mapPass.dispose();\n\t\t\t}\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.camera = source.camera.clone();\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\t\t\tthis.mapSize.copy(source.mapSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst object = {};\n\t\t\tif (this.bias !== 0) object.bias = this.bias;\n\t\t\tif (this.normalBias !== 0) object.normalBias = this.normalBias;\n\t\t\tif (this.radius !== 1) object.radius = this.radius;\n\t\t\tif (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n\t\t\tobject.camera = this.camera.toJSON(false).object;\n\t\t\tdelete object.camera.matrix;\n\t\t\treturn object;\n\t\t}\n\n\t}\n\n\tclass SpotLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new PerspectiveCamera(50, 1, 0.5, 500));\n\t\t\tthis.focus = 1;\n\t\t}\n\n\t\tupdateMatrices(light) {\n\t\t\tconst camera = this.camera;\n\t\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tconst far = light.distance || camera.far;\n\n\t\t\tif (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\tsuper.updateMatrices(light);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.focus = source.focus;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpotLightShadow.prototype.isSpotLightShadow = true;\n\n\tclass SpotLight extends Light {\n\t\tconstructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'SpotLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.target = new Object3D();\n\t\t\tthis.distance = distance;\n\t\t\tthis.angle = angle;\n\t\t\tthis.penumbra = penumbra;\n\t\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\tthis.shadow = new SpotLightShadow();\n\t\t}\n\n\t\tget power() {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / Math.PI;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpotLight.prototype.isSpotLight = true;\n\n\tconst _projScreenMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _lightPositionWorld = /*@__PURE__*/new Vector3();\n\n\tconst _lookTarget = /*@__PURE__*/new Vector3();\n\n\tclass PointLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new PerspectiveCamera(90, 1, 0.5, 500));\n\t\t\tthis._frameExtents = new Vector2(4, 2);\n\t\t\tthis._viewportCount = 6;\n\t\t\tthis._viewports = [// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//\txzXZ\n\t\t\t//\t y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\t\t\t// positive X\n\t\t\tnew Vector4(2, 1, 1, 1), // negative X\n\t\t\tnew Vector4(0, 1, 1, 1), // positive Z\n\t\t\tnew Vector4(3, 1, 1, 1), // negative Z\n\t\t\tnew Vector4(1, 1, 1, 1), // positive Y\n\t\t\tnew Vector4(3, 0, 1, 1), // negative Y\n\t\t\tnew Vector4(1, 0, 1, 1)];\n\t\t\tthis._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n\t\t\tthis._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n\t\t}\n\n\t\tupdateMatrices(light, viewportIndex = 0) {\n\t\t\tconst camera = this.camera;\n\t\t\tconst shadowMatrix = this.matrix;\n\t\t\tconst far = light.distance || camera.far;\n\n\t\t\tif (far !== camera.far) {\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tcamera.position.copy(_lightPositionWorld);\n\n\t\t\t_lookTarget.copy(camera.position);\n\n\t\t\t_lookTarget.add(this._cubeDirections[viewportIndex]);\n\n\t\t\tcamera.up.copy(this._cubeUps[viewportIndex]);\n\t\t\tcamera.lookAt(_lookTarget);\n\t\t\tcamera.updateMatrixWorld();\n\t\t\tshadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix);\n\t\t}\n\n\t}\n\n\tPointLightShadow.prototype.isPointLightShadow = true;\n\n\tclass PointLight extends Light {\n\t\tconstructor(color, intensity, distance = 0, decay = 1) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'PointLight';\n\t\t\tthis.distance = distance;\n\t\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\tthis.shadow = new PointLightShadow();\n\t\t}\n\n\t\tget power() {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * 4 * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / (4 * Math.PI);\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tPointLight.prototype.isPointLight = true;\n\n\tclass OrthographicCamera extends Camera {\n\t\tconstructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000) {\n\t\t\tsuper();\n\t\t\tthis.type = 'OrthographicCamera';\n\t\t\tthis.zoom = 1;\n\t\t\tthis.view = null;\n\t\t\tthis.left = left;\n\t\t\tthis.right = right;\n\t\t\tthis.top = top;\n\t\t\tthis.bottom = bottom;\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tclearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tupdateProjectionMatrix() {\n\t\t\tconst dx = (this.right - this.left) / (2 * this.zoom);\n\t\t\tconst dy = (this.top - this.bottom) / (2 * this.zoom);\n\t\t\tconst cx = (this.right + this.left) / 2;\n\t\t\tconst cy = (this.top + this.bottom) / 2;\n\t\t\tlet left = cx - dx;\n\t\t\tlet right = cx + dx;\n\t\t\tlet top = cy + dy;\n\t\t\tlet bottom = cy - dy;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tconst scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n\t\t\t\tconst scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tOrthographicCamera.prototype.isOrthographicCamera = true;\n\n\tclass DirectionalLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n\t\t}\n\n\t}\n\n\tDirectionalLightShadow.prototype.isDirectionalLightShadow = true;\n\n\tclass DirectionalLight extends Light {\n\t\tconstructor(color, intensity) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'DirectionalLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.target = new Object3D();\n\t\t\tthis.shadow = new DirectionalLightShadow();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tDirectionalLight.prototype.isDirectionalLight = true;\n\n\tclass AmbientLight extends Light {\n\t\tconstructor(color, intensity) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'AmbientLight';\n\t\t}\n\n\t}\n\n\tAmbientLight.prototype.isAmbientLight = true;\n\n\tclass RectAreaLight extends Light {\n\t\tconstructor(color, intensity, width = 10, height = 10) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'RectAreaLight';\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tRectAreaLight.prototype.isRectAreaLight = true;\n\n\t/**\n\t * Primary reference:\n\t *\t https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *\t https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\t// 3-band SH defined by 9 coefficients\n\n\tclass SphericalHarmonics3 {\n\t\tconstructor() {\n\t\t\tthis.coefficients = [];\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients.push(new Vector3());\n\t\t\t}\n\t\t}\n\n\t\tset(coefficients) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].copy(coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tzero() {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\n\n\t\tgetAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z;\n\t\t\tconst coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 0.488603 * y);\n\t\t\ttarget.addScaledVector(coeff[2], 0.488603 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 0.488603 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 1.092548 * (x * y));\n\t\t\ttarget.addScaledVector(coeff[5], 1.092548 * (y * z));\n\t\t\ttarget.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n\t\t\ttarget.addScaledVector(coeff[7], 1.092548 * (x * z));\n\t\t\ttarget.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n\t\t\treturn target;\n\t\t} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\n\n\t\tgetIrradianceAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z;\n\t\t\tconst coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\t\t\t// band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n\t\t\ttarget.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n\t\t\ttarget.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n\t\t\ttarget.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n\t\t\ttarget.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n\t\t\ttarget.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\t\t}\n\n\t\tadd(sh) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].add(sh.coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledSH(sh, s) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].addScaledVector(sh.coefficients[i], s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(s) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].multiplyScalar(s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tlerp(sh, alpha) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].lerp(sh.coefficients[i], alpha);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(sh) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tif (!this.coefficients[i].equals(sh.coefficients[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tcopy(sh) {\n\t\t\treturn this.set(sh.coefficients);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tconst coefficients = this.coefficients;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].fromArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst coefficients = this.coefficients;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].toArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn array;\n\t\t} // evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\n\n\t\tstatic getBasisAt(normal, shBasis) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z; // band 0\n\n\t\t\tshBasis[0] = 0.282095; // band 1\n\n\t\t\tshBasis[1] = 0.488603 * y;\n\t\t\tshBasis[2] = 0.488603 * z;\n\t\t\tshBasis[3] = 0.488603 * x; // band 2\n\n\t\t\tshBasis[4] = 1.092548 * x * y;\n\t\t\tshBasis[5] = 1.092548 * y * z;\n\t\t\tshBasis[6] = 0.315392 * (3 * z * z - 1);\n\t\t\tshBasis[7] = 1.092548 * x * z;\n\t\t\tshBasis[8] = 0.546274 * (x * x - y * y);\n\t\t}\n\n\t}\n\n\tSphericalHarmonics3.prototype.isSphericalHarmonics3 = true;\n\n\tclass LightProbe extends Light {\n\t\tconstructor(sh = new SphericalHarmonics3(), intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tthis.sh = sh;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.sh.copy(source.sh);\n\t\t\treturn this;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\n\t\t\tthis.sh.fromArray(json.sh);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.sh = this.sh.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tLightProbe.prototype.isLightProbe = true;\n\n\tclass MaterialLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t\tthis.textures = {};\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst textures = this.textures;\n\n\t\t\tfunction getTexture(name) {\n\t\t\t\tif (textures[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.MaterialLoader: Undefined texture', name);\n\t\t\t\t}\n\n\t\t\t\treturn textures[name];\n\t\t\t}\n\n\t\t\tconst material = new Materials[json.type]();\n\t\t\tif (json.uuid !== undefined) material.uuid = json.uuid;\n\t\t\tif (json.name !== undefined) material.name = json.name;\n\t\t\tif (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n\t\t\tif (json.roughness !== undefined) material.roughness = json.roughness;\n\t\t\tif (json.metalness !== undefined) material.metalness = json.metalness;\n\t\t\tif (json.sheen !== undefined) material.sheen = new Color().setHex(json.sheen);\n\t\t\tif (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n\t\t\tif (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n\t\t\tif (json.shininess !== undefined) material.shininess = json.shininess;\n\t\t\tif (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n\t\t\tif (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\t\tif (json.transmission !== undefined) material.transmission = json.transmission;\n\t\t\tif (json.thickness !== undefined) material.thickness = json.thickness;\n\t\t\tif (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;\n\t\t\tif (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);\n\t\t\tif (json.fog !== undefined) material.fog = json.fog;\n\t\t\tif (json.flatShading !== undefined) material.flatShading = json.flatShading;\n\t\t\tif (json.blending !== undefined) material.blending = json.blending;\n\t\t\tif (json.combine !== undefined) material.combine = json.combine;\n\t\t\tif (json.side !== undefined) material.side = json.side;\n\t\t\tif (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;\n\t\t\tif (json.opacity !== undefined) material.opacity = json.opacity;\n\t\t\tif (json.transparent !== undefined) material.transparent = json.transparent;\n\t\t\tif (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n\t\t\tif (json.depthTest !== undefined) material.depthTest = json.depthTest;\n\t\t\tif (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n\t\t\tif (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n\t\t\tif (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n\t\t\tif (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n\t\t\tif (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n\t\t\tif (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n\t\t\tif (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n\t\t\tif (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n\t\t\tif (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n\t\t\tif (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n\t\t\tif (json.wireframe !== undefined) material.wireframe = json.wireframe;\n\t\t\tif (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif (json.rotation !== undefined) material.rotation = json.rotation;\n\t\t\tif (json.linewidth !== 1) material.linewidth = json.linewidth;\n\t\t\tif (json.dashSize !== undefined) material.dashSize = json.dashSize;\n\t\t\tif (json.gapSize !== undefined) material.gapSize = json.gapSize;\n\t\t\tif (json.scale !== undefined) material.scale = json.scale;\n\t\t\tif (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n\t\t\tif (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\t\tif (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\t\t\tif (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;\n\t\t\tif (json.morphNormals !== undefined) material.morphNormals = json.morphNormals;\n\t\t\tif (json.dithering !== undefined) material.dithering = json.dithering;\n\t\t\tif (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;\n\t\t\tif (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;\n\t\t\tif (json.vertexTangents !== undefined) material.vertexTangents = json.vertexTangents;\n\t\t\tif (json.visible !== undefined) material.visible = json.visible;\n\t\t\tif (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n\t\t\tif (json.userData !== undefined) material.userData = json.userData;\n\n\t\t\tif (json.vertexColors !== undefined) {\n\t\t\t\tif (typeof json.vertexColors === 'number') {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors > 0 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\t\t\t\t}\n\t\t\t} // Shader Material\n\n\n\t\t\tif (json.uniforms !== undefined) {\n\t\t\t\tfor (const name in json.uniforms) {\n\t\t\t\t\tconst uniform = json.uniforms[name];\n\t\t\t\t\tmaterial.uniforms[name] = {};\n\n\t\t\t\t\tswitch (uniform.type) {\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = getTexture(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Color().setHex(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector2().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = uniform.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json.defines !== undefined) material.defines = json.defines;\n\t\t\tif (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n\t\t\tif (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n\t\t\tif (json.extensions !== undefined) {\n\t\t\t\tfor (const key in json.extensions) {\n\t\t\t\t\tmaterial.extensions[key] = json.extensions[key];\n\t\t\t\t}\n\t\t\t} // Deprecated\n\n\n\t\t\tif (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n\t\t\t// for PointsMaterial\n\n\t\t\tif (json.size !== undefined) material.size = json.size;\n\t\t\tif (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n\t\t\tif (json.map !== undefined) material.map = getTexture(json.map);\n\t\t\tif (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n\t\t\tif (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n\t\t\tif (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n\t\t\tif (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n\t\t\tif (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n\t\t\tif (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n\t\t\tif (json.normalScale !== undefined) {\n\t\t\t\tlet normalScale = json.normalScale;\n\n\t\t\t\tif (Array.isArray(normalScale) === false) {\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\t\t\t\tnormalScale = [normalScale, normalScale];\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray(normalScale);\n\t\t\t}\n\n\t\t\tif (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n\t\t\tif (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n\t\t\tif (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n\t\t\tif (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n\t\t\tif (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n\t\t\tif (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n\t\t\tif (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n\t\t\tif (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n\t\t\tif (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n\t\t\tif (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n\t\t\tif (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n\t\t\tif (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n\t\t\tif (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n\t\t\tif (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n\t\t\tif (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n\t\t\tif (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n\t\t\tif (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n\t\t\tif (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n\t\t\tif (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n\t\t\tif (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n\t\t\tif (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n\t\t\tif (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n\t\t\tif (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);\n\t\t\treturn material;\n\t\t}\n\n\t\tsetTextures(value) {\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass LoaderUtils {\n\t\tstatic decodeText(array) {\n\t\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\t\treturn new TextDecoder().decode(array);\n\t\t\t} // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\n\t\t\tlet s = '';\n\n\t\t\tfor (let i = 0, il = array.length; i < il; i++) {\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode(array[i]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// merges multi-byte utf-8 characters.\n\t\t\t\treturn decodeURIComponent(escape(s));\n\t\t\t} catch (e) {\n\t\t\t\t// see #16358\n\t\t\t\treturn s;\n\t\t\t}\n\t\t}\n\n\t\tstatic extractUrlBase(url) {\n\t\t\tconst index = url.lastIndexOf('/');\n\t\t\tif (index === -1) return './';\n\t\t\treturn url.substr(0, index + 1);\n\t\t}\n\n\t}\n\n\tclass InstancedBufferGeometry extends BufferGeometry {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'InstancedBufferGeometry';\n\t\t\tthis.instanceCount = Infinity;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.instanceCount = source.instanceCount;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON(this);\n\t\t\tdata.instanceCount = this.instanceCount;\n\t\t\tdata.isInstancedBufferGeometry = true;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tInstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\n\tclass InstancedBufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized, meshPerAttribute) {\n\t\t\tif (typeof normalized === 'number') {\n\t\t\t\tmeshPerAttribute = normalized;\n\t\t\t\tnormalized = false;\n\t\t\t\tconsole.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');\n\t\t\t}\n\n\t\t\tsuper(array, itemSize, normalized);\n\t\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\t\t\tdata.isInstancedBufferAttribute = true;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tInstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\n\tclass BufferGeometryLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst interleavedBufferMap = {};\n\t\t\tconst arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer(json, uuid) {\n\t\t\t\tif (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n\t\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tconst interleavedBuffer = interleavedBuffers[uuid];\n\t\t\t\tconst buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n\t\t\t\tconst array = getTypedArray(interleavedBuffer.type, buffer);\n\t\t\t\tconst ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\t\t\t\tinterleavedBufferMap[uuid] = ib;\n\t\t\t\treturn ib;\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer(json, uuid) {\n\t\t\t\tif (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n\t\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\t\tconst arrayBuffer = arrayBuffers[uuid];\n\t\t\t\tconst ab = new Uint32Array(arrayBuffer).buffer;\n\t\t\t\tarrayBufferMap[uuid] = ab;\n\t\t\t\treturn ab;\n\t\t\t}\n\n\t\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\t\t\tconst index = json.data.index;\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tconst typedArray = getTypedArray(index.type, index.array);\n\t\t\t\tgeometry.setIndex(new BufferAttribute(typedArray, 1));\n\t\t\t}\n\n\t\t\tconst attributes = json.data.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tlet bufferAttribute;\n\n\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t} else {\n\t\t\t\t\tconst typedArray = getTypedArray(attribute.type, attribute.array);\n\t\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t}\n\n\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\tif (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);\n\n\t\t\t\tif (attribute.updateRange !== undefined) {\n\t\t\t\t\tbufferAttribute.updateRange.offset = attribute.updateRange.offset;\n\t\t\t\t\tbufferAttribute.updateRange.count = attribute.updateRange.count;\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute(key, bufferAttribute);\n\t\t\t}\n\n\t\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\t\tif (morphAttributes) {\n\t\t\t\tfor (const key in morphAttributes) {\n\t\t\t\t\tconst attributeArray = morphAttributes[key];\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor (let i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\t\tconst attribute = attributeArray[i];\n\t\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst typedArray = getTypedArray(attribute.type, attribute.array);\n\t\t\t\t\t\t\tbufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\t\t\tarray.push(bufferAttribute);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[key] = array;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif (morphTargetsRelative) {\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\t\t\t}\n\n\t\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif (groups !== undefined) {\n\t\t\t\tfor (let i = 0, n = groups.length; i !== n; ++i) {\n\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\tgeometry.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\t\tif (boundingSphere !== undefined) {\n\t\t\t\tconst center = new Vector3();\n\n\t\t\t\tif (boundingSphere.center !== undefined) {\n\t\t\t\t\tcenter.fromArray(boundingSphere.center);\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n\t\t\t}\n\n\t\t\tif (json.name) geometry.name = json.name;\n\t\t\tif (json.userData) geometry.userData = json.userData;\n\t\t\treturn geometry;\n\t\t}\n\n\t}\n\n\tclass ObjectLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tlet json = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (onError !== undefined) onError(error);\n\t\t\t\t\tconsole.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst metadata = json.metadata;\n\n\t\t\t\tif (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n\t\t\t\t\tconsole.error('THREE.ObjectLoader: Can\\'t load ' + url);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscope.parse(json, onLoad);\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json, onLoad) {\n\t\t\tconst animations = this.parseAnimations(json.animations);\n\t\t\tconst shapes = this.parseShapes(json.shapes);\n\t\t\tconst geometries = this.parseGeometries(json.geometries, shapes);\n\t\t\tconst images = this.parseImages(json.images, function () {\n\t\t\t\tif (onLoad !== undefined) onLoad(object);\n\t\t\t});\n\t\t\tconst textures = this.parseTextures(json.textures, images);\n\t\t\tconst materials = this.parseMaterials(json.materials, textures);\n\t\t\tconst object = this.parseObject(json.object, geometries, materials, animations);\n\t\t\tconst skeletons = this.parseSkeletons(json.skeletons, object);\n\t\t\tthis.bindSkeletons(object, skeletons); //\n\n\t\t\tif (onLoad !== undefined) {\n\t\t\t\tlet hasImages = false;\n\n\t\t\t\tfor (const uuid in images) {\n\t\t\t\t\tif (images[uuid] instanceof HTMLImageElement) {\n\t\t\t\t\t\thasImages = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hasImages === false) onLoad(object);\n\t\t\t}\n\n\t\t\treturn object;\n\t\t}\n\n\t\tparseShapes(json) {\n\t\t\tconst shapes = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst shape = new Shape().fromJSON(json[i]);\n\t\t\t\t\tshapes[shape.uuid] = shape;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t}\n\n\t\tparseSkeletons(json, object) {\n\t\t\tconst skeletons = {};\n\t\t\tconst bones = {}; // generate bone lookup table\n\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isBone) bones[child.uuid] = child;\n\t\t\t}); // create skeletons\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst skeleton = new Skeleton().fromJSON(json[i], bones);\n\t\t\t\t\tskeletons[skeleton.uuid] = skeleton;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn skeletons;\n\t\t}\n\n\t\tparseGeometries(json, shapes) {\n\t\t\tconst geometries = {};\n\t\t\tlet geometryShapes;\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tlet geometry;\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tswitch (data.type) {\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.detail);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (let j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tconst shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.curveSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (let j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tconst shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif (extrudePath !== undefined) {\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.options);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\t\t\t\t\t\t\tconsole.error('THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) geometry.name = data.name;\n\t\t\t\t\tif (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;\n\t\t\t\t\tgeometries[data.uuid] = geometry;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn geometries;\n\t\t}\n\n\t\tparseMaterials(json, textures) {\n\t\t\tconst cache = {}; // MultiMaterial\n\n\t\t\tconst materials = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tconst loader = new MaterialLoader();\n\t\t\t\tloader.setTextures(textures);\n\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tif (data.type === 'MultiMaterial') {\n\t\t\t\t\t\t// Deprecated\n\t\t\t\t\t\tconst array = [];\n\n\t\t\t\t\t\tfor (let j = 0; j < data.materials.length; j++) {\n\t\t\t\t\t\t\tconst material = data.materials[j];\n\n\t\t\t\t\t\t\tif (cache[material.uuid] === undefined) {\n\t\t\t\t\t\t\t\tcache[material.uuid] = loader.parse(material);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push(cache[material.uuid]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = array;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (cache[data.uuid] === undefined) {\n\t\t\t\t\t\t\tcache[data.uuid] = loader.parse(data);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = cache[data.uuid];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn materials;\n\t\t}\n\n\t\tparseAnimations(json) {\n\t\t\tconst animations = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0; i < json.length; i++) {\n\t\t\t\t\tconst data = json[i];\n\t\t\t\t\tconst clip = AnimationClip.parse(data);\n\t\t\t\t\tanimations[clip.uuid] = clip;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\n\t\tparseImages(json, onLoad) {\n\t\t\tconst scope = this;\n\t\t\tconst images = {};\n\t\t\tlet loader;\n\n\t\t\tfunction loadImage(url) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\treturn loader.load(url, function () {\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, undefined, function () {\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction deserializeImage(image) {\n\t\t\t\tif (typeof image === 'string') {\n\t\t\t\t\tconst url = image;\n\t\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n\t\t\t\t\treturn loadImage(path);\n\t\t\t\t} else {\n\t\t\t\t\tif (image.data) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: getTypedArray(image.type, image.data),\n\t\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\t\theight: image.height\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json !== undefined && json.length > 0) {\n\t\t\t\tconst manager = new LoadingManager(onLoad);\n\t\t\t\tloader = new ImageLoader(manager);\n\t\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\n\t\t\t\tfor (let i = 0, il = json.length; i < il; i++) {\n\t\t\t\t\tconst image = json[i];\n\t\t\t\t\tconst url = image.url;\n\n\t\t\t\t\tif (Array.isArray(url)) {\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\t\t\t\t\t\timages[image.uuid] = [];\n\n\t\t\t\t\t\tfor (let j = 0, jl = url.length; j < jl; j++) {\n\t\t\t\t\t\t\tconst currentUrl = url[j];\n\t\t\t\t\t\t\tconst deserializedImage = deserializeImage(currentUrl);\n\n\t\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\t\tif (deserializedImage instanceof HTMLImageElement) {\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(deserializedImage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// load single image\n\t\t\t\t\t\tconst deserializedImage = deserializeImage(image.url);\n\n\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\timages[image.uuid] = deserializedImage;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn images;\n\t\t}\n\n\t\tparseTextures(json, images) {\n\t\t\tfunction parseConstant(value, type) {\n\t\t\t\tif (typeof value === 'number') return value;\n\t\t\t\tconsole.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n\t\t\t\treturn type[value];\n\t\t\t}\n\n\t\t\tconst textures = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tif (data.image === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (images[data.image] === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined image', data.image);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet texture;\n\t\t\t\t\tconst image = images[data.image];\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\ttexture = new CubeTexture(image);\n\t\t\t\t\t\tif (image.length === 6) texture.needsUpdate = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (image && image.data) {\n\t\t\t\t\t\t\ttexture = new DataTexture(image.data, image.width, image.height);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexture = new Texture(image);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (image) texture.needsUpdate = true; // textures can have undefined image data\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) texture.name = data.name;\n\t\t\t\t\tif (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n\t\t\t\t\tif (data.offset !== undefined) texture.offset.fromArray(data.offset);\n\t\t\t\t\tif (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n\t\t\t\t\tif (data.center !== undefined) texture.center.fromArray(data.center);\n\t\t\t\t\tif (data.rotation !== undefined) texture.rotation = data.rotation;\n\n\t\t\t\t\tif (data.wrap !== undefined) {\n\t\t\t\t\t\ttexture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n\t\t\t\t\t\ttexture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.format !== undefined) texture.format = data.format;\n\t\t\t\t\tif (data.type !== undefined) texture.type = data.type;\n\t\t\t\t\tif (data.encoding !== undefined) texture.encoding = data.encoding;\n\t\t\t\t\tif (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n\t\t\t\t\tif (data.flipY !== undefined) texture.flipY = data.flipY;\n\t\t\t\t\tif (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\t\tif (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\t\ttextures[data.uuid] = texture;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn textures;\n\t\t}\n\n\t\tparseObject(data, geometries, materials, animations) {\n\t\t\tlet object;\n\n\t\t\tfunction getGeometry(name) {\n\t\t\t\tif (geometries[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined geometry', name);\n\t\t\t\t}\n\n\t\t\t\treturn geometries[name];\n\t\t\t}\n\n\t\t\tfunction getMaterial(name) {\n\t\t\t\tif (name === undefined) return undefined;\n\n\t\t\t\tif (Array.isArray(name)) {\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor (let i = 0, l = name.length; i < l; i++) {\n\t\t\t\t\t\tconst uuid = name[i];\n\n\t\t\t\t\t\tif (materials[uuid] === undefined) {\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', uuid);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push(materials[uuid]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\t\t\t\t}\n\n\t\t\t\tif (materials[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', name);\n\t\t\t\t}\n\n\t\t\t\treturn materials[name];\n\t\t\t}\n\n\t\t\tlet geometry, material;\n\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'Scene':\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif (data.background !== undefined) {\n\t\t\t\t\t\tif (Number.isInteger(data.background)) {\n\t\t\t\t\t\t\tobject.background = new Color(data.background);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.fog !== undefined) {\n\t\t\t\t\t\tif (data.fog.type === 'Fog') {\n\t\t\t\t\t\t\tobject.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n\t\t\t\t\t\t} else if (data.fog.type === 'FogExp2') {\n\t\t\t\t\t\t\tobject.fog = new FogExp2(data.fog.color, data.fog.density);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\t\t\t\t\tobject = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n\t\t\t\t\tif (data.focus !== undefined) object.focus = data.focus;\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\t\t\t\t\tobject = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\t\t\t\t\tobject = new AmbientLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tobject = new DirectionalLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tobject = new PointLight(data.color, data.intensity, data.distance, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tobject = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tobject = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tobject = new HemisphereLight(data.color, data.groundColor, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\t\t\t\t\tobject = new LightProbe().fromJSON(data);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new SkinnedMesh(geometry, material);\n\t\t\t\t\tif (data.bindMode !== undefined) object.bindMode = data.bindMode;\n\t\t\t\t\tif (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n\t\t\t\t\tif (data.skeleton !== undefined) object.skeleton = data.skeleton;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new Mesh(geometry, material);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tconst count = data.count;\n\t\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\t\tconst instanceColor = data.instanceColor;\n\t\t\t\t\tobject = new InstancedMesh(geometry, material, count);\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);\n\t\t\t\t\tif (instanceColor !== undefined) object.instanceColor = new BufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\t\t\t\t\tobject = new LOD();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\t\t\t\t\tobject = new Line(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\t\t\t\t\tobject = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\t\t\t\t\tobject = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\t\t\t\t\tobject = new Points(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\t\t\t\t\tobject = new Sprite(getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\t\t\t\t\tobject = new Group();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Bone':\n\t\t\t\t\tobject = new Bone();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tobject = new Object3D();\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\t\t\tif (data.name !== undefined) object.name = data.name;\n\n\t\t\tif (data.matrix !== undefined) {\n\t\t\t\tobject.matrix.fromArray(data.matrix);\n\t\t\t\tif (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\t\tif (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n\t\t\t} else {\n\t\t\t\tif (data.position !== undefined) object.position.fromArray(data.position);\n\t\t\t\tif (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n\t\t\t\tif (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n\t\t\t\tif (data.scale !== undefined) object.scale.fromArray(data.scale);\n\t\t\t}\n\n\t\t\tif (data.castShadow !== undefined) object.castShadow = data.castShadow;\n\t\t\tif (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif (data.shadow) {\n\t\t\t\tif (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\t\tif (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n\t\t\t\tif (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n\t\t\t}\n\n\t\t\tif (data.visible !== undefined) object.visible = data.visible;\n\t\t\tif (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n\t\t\tif (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n\t\t\tif (data.userData !== undefined) object.userData = data.userData;\n\t\t\tif (data.layers !== undefined) object.layers.mask = data.layers;\n\n\t\t\tif (data.children !== undefined) {\n\t\t\t\tconst children = data.children;\n\n\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\tobject.add(this.parseObject(children[i], geometries, materials, animations));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.animations !== undefined) {\n\t\t\t\tconst objectAnimations = data.animations;\n\n\t\t\t\tfor (let i = 0; i < objectAnimations.length; i++) {\n\t\t\t\t\tconst uuid = objectAnimations[i];\n\t\t\t\t\tobject.animations.push(animations[uuid]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.type === 'LOD') {\n\t\t\t\tif (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n\t\t\t\tconst levels = data.levels;\n\n\t\t\t\tfor (let l = 0; l < levels.length; l++) {\n\t\t\t\t\tconst level = levels[l];\n\t\t\t\t\tconst child = object.getObjectByProperty('uuid', level.object);\n\n\t\t\t\t\tif (child !== undefined) {\n\t\t\t\t\t\tobject.addLevel(child, level.distance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn object;\n\t\t}\n\n\t\tbindSkeletons(object, skeletons) {\n\t\t\tif (Object.keys(skeletons).length === 0) return;\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n\t\t\t\t\tconst skeleton = skeletons[child.skeleton];\n\n\t\t\t\t\tif (skeleton === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchild.bind(skeleton, child.bindMatrix);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t/* DEPRECATED */\n\n\n\t\tsetTexturePath(value) {\n\t\t\tconsole.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');\n\t\t\treturn this.setResourcePath(value);\n\t\t}\n\n\t}\n\n\tconst TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\tconst TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\tconst TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\tclass ImageBitmapLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\n\t\t\tif (typeof createImageBitmap === 'undefined') {\n\t\t\t\tconsole.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n\t\t\t}\n\n\t\t\tif (typeof fetch === 'undefined') {\n\t\t\t\tconsole.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n\t\t\t}\n\n\t\t\tthis.options = {\n\t\t\t\tpremultiplyAlpha: 'none'\n\t\t\t};\n\t\t}\n\n\t\tsetOptions(options) {\n\t\t\tthis.options = options;\n\t\t\treturn this;\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tconst fetchOptions = {};\n\t\t\tfetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n\t\t\tfetchOptions.headers = this.requestHeader;\n\t\t\tfetch(url, fetchOptions).then(function (res) {\n\t\t\t\treturn res.blob();\n\t\t\t}).then(function (blob) {\n\t\t\t\treturn createImageBitmap(blob, Object.assign(scope.options, {\n\t\t\t\t\tcolorSpaceConversion: 'none'\n\t\t\t\t}));\n\t\t\t}).then(function (imageBitmap) {\n\t\t\t\tCache.add(url, imageBitmap);\n\t\t\t\tif (onLoad) onLoad(imageBitmap);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}).catch(function (e) {\n\t\t\t\tif (onError) onError(e);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t});\n\t\t\tscope.manager.itemStart(url);\n\t\t}\n\n\t}\n\n\tImageBitmapLoader.prototype.isImageBitmapLoader = true;\n\n\tclass ShapePath {\n\t\tconstructor() {\n\t\t\tthis.type = 'ShapePath';\n\t\t\tthis.color = new Color();\n\t\t\tthis.subPaths = [];\n\t\t\tthis.currentPath = null;\n\t\t}\n\n\t\tmoveTo(x, y) {\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tlineTo(x, y) {\n\t\t\tthis.currentPath.lineTo(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tquadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tthis.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tbezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tthis.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tsplineThru(pts) {\n\t\t\tthis.currentPath.splineThru(pts);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoShapes(isCCW, noHoles) {\n\t\t\tfunction toShapesNoHoles(inSubpaths) {\n\t\t\t\tconst shapes = [];\n\n\t\t\t\tfor (let i = 0, l = inSubpaths.length; i < l; i++) {\n\t\t\t\t\tconst tmpPath = inSubpaths[i];\n\t\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\t\tshapes.push(tmpShape);\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon(inPt, inPolygon) {\n\t\t\t\tconst polyLen = inPolygon.length; // inPt on polygon contour => immediate success\t\tor\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//\twith the horizontal line through inPt, left of inPt\n\t\t\t\t//\tnot counting lowerY endpoints of edges and whole edges on that line\n\n\t\t\t\tlet inside = false;\n\n\t\t\t\tfor (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n\t\t\t\t\tlet edgeLowPt = inPolygon[p];\n\t\t\t\t\tlet edgeHighPt = inPolygon[q];\n\t\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif (Math.abs(edgeDy) > Number.EPSILON) {\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif (edgeDy < 0) {\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[q];\n\t\t\t\t\t\t\tedgeDx = -edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[p];\n\t\t\t\t\t\t\tedgeDy = -edgeDy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n\t\t\t\t\t\tif (inPt.y === edgeLowPt.y) {\n\t\t\t\t\t\t\tif (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n\t\t\t\t\t\t\tif (perpEdge === 0) return true; // inPt is on contour ?\n\n\t\t\t\t\t\t\tif (perpEdge < 0) continue;\n\t\t\t\t\t\t\tinside = !inside; // true intersection left of inPt\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif (inPt.y !== edgeLowPt.y) continue; // parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\n\t\t\t\t\t\tif (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn inside;\n\t\t\t}\n\n\t\t\tconst isClockWise = ShapeUtils.isClockWise;\n\t\t\tconst subPaths = this.subPaths;\n\t\t\tif (subPaths.length === 0) return [];\n\t\t\tif (noHoles === true) return toShapesNoHoles(subPaths);\n\t\t\tlet solid, tmpPath, tmpShape;\n\t\t\tconst shapes = [];\n\n\t\t\tif (subPaths.length === 1) {\n\t\t\t\ttmpPath = subPaths[0];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tlet holesFirst = !isClockWise(subPaths[0].getPoints());\n\t\t\tholesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n\t\t\tconst betterShapeHoles = [];\n\t\t\tconst newShapes = [];\n\t\t\tlet newShapeHoles = [];\n\t\t\tlet mainIdx = 0;\n\t\t\tlet tmpPoints;\n\t\t\tnewShapes[mainIdx] = undefined;\n\t\t\tnewShapeHoles[mainIdx] = [];\n\n\t\t\tfor (let i = 0, l = subPaths.length; i < l; i++) {\n\t\t\t\ttmpPath = subPaths[i];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise(tmpPoints);\n\t\t\t\tsolid = isCCW ? !solid : solid;\n\n\t\t\t\tif (solid) {\n\t\t\t\t\tif (!holesFirst && newShapes[mainIdx]) mainIdx++;\n\t\t\t\t\tnewShapes[mainIdx] = {\n\t\t\t\t\t\ts: new Shape(),\n\t\t\t\t\t\tp: tmpPoints\n\t\t\t\t\t};\n\t\t\t\t\tnewShapes[mainIdx].s.curves = tmpPath.curves;\n\t\t\t\t\tif (holesFirst) mainIdx++;\n\t\t\t\t\tnewShapeHoles[mainIdx] = []; //console.log('cw', i);\n\t\t\t\t} else {\n\t\t\t\t\tnewShapeHoles[mainIdx].push({\n\t\t\t\t\t\th: tmpPath,\n\t\t\t\t\t\tp: tmpPoints[0]\n\t\t\t\t\t}); //console.log('ccw', i);\n\t\t\t\t}\n\t\t\t} // only Holes? -> probably all Shapes with wrong orientation\n\n\n\t\t\tif (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n\t\t\tif (newShapes.length > 1) {\n\t\t\t\tlet ambiguous = false;\n\t\t\t\tconst toChange = [];\n\n\t\t\t\tfor (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tbetterShapeHoles[sIdx] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tconst sho = newShapeHoles[sIdx];\n\n\t\t\t\t\tfor (let hIdx = 0; hIdx < sho.length; hIdx++) {\n\t\t\t\t\t\tconst ho = sho[hIdx];\n\t\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\t\tfor (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n\t\t\t\t\t\t\tif (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n\t\t\t\t\t\t\t\tif (sIdx !== s2Idx) toChange.push({\n\t\t\t\t\t\t\t\t\tfroms: sIdx,\n\t\t\t\t\t\t\t\t\ttos: s2Idx,\n\t\t\t\t\t\t\t\t\thole: hIdx\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[s2Idx].push(ho);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\tbetterShapeHoles[sIdx].push(ho);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // console.log(\"ambiguous: \", ambiguous);\n\n\n\t\t\t\tif (toChange.length > 0) {\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif (!ambiguous) newShapeHoles = betterShapeHoles;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet tmpHoles;\n\n\t\t\tfor (let i = 0, il = newShapes.length; i < il; i++) {\n\t\t\t\ttmpShape = newShapes[i].s;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\ttmpHoles = newShapeHoles[i];\n\n\t\t\t\tfor (let j = 0, jl = tmpHoles.length; j < jl; j++) {\n\t\t\t\t\ttmpShape.holes.push(tmpHoles[j].h);\n\t\t\t\t}\n\t\t\t} //console.log(\"shape\", shapes);\n\n\n\t\t\treturn shapes;\n\t\t}\n\n\t}\n\n\tclass Font {\n\t\tconstructor(data) {\n\t\t\tthis.type = 'Font';\n\t\t\tthis.data = data;\n\t\t}\n\n\t\tgenerateShapes(text, size = 100) {\n\t\t\tconst shapes = [];\n\t\t\tconst paths = createPaths(text, size, this.data);\n\n\t\t\tfor (let p = 0, pl = paths.length; p < pl; p++) {\n\t\t\t\tArray.prototype.push.apply(shapes, paths[p].toShapes());\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t}\n\n\t}\n\n\tfunction createPaths(text, size, data) {\n\t\tconst chars = Array.from(text);\n\t\tconst scale = size / data.resolution;\n\t\tconst line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n\t\tconst paths = [];\n\t\tlet offsetX = 0,\n\t\t\t\toffsetY = 0;\n\n\t\tfor (let i = 0; i < chars.length; i++) {\n\t\t\tconst char = chars[i];\n\n\t\t\tif (char === '\\n') {\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\t\t\t} else {\n\t\t\t\tconst ret = createPath(char, scale, offsetX, offsetY, data);\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push(ret.path);\n\t\t\t}\n\t\t}\n\n\t\treturn paths;\n\t}\n\n\tfunction createPath(char, scale, offsetX, offsetY, data) {\n\t\tconst glyph = data.glyphs[char] || data.glyphs['?'];\n\n\t\tif (!glyph) {\n\t\t\tconsole.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst path = new ShapePath();\n\t\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif (glyph.o) {\n\t\t\tconst outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n\t\t\tfor (let i = 0, l = outline.length; i < l;) {\n\t\t\t\tconst action = outline[i++];\n\n\t\t\t\tswitch (action) {\n\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t// moveTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.moveTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t// lineTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.lineTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\t// quadraticCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t// bezierCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\toffsetX: glyph.ha * scale,\n\t\t\tpath: path\n\t\t};\n\t}\n\n\tFont.prototype.isFont = true;\n\n\tclass FontLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tlet json;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n\t\t\t\t\tjson = JSON.parse(text.substring(65, text.length - 2));\n\t\t\t\t}\n\n\t\t\t\tconst font = scope.parse(json);\n\t\t\t\tif (onLoad) onLoad(font);\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\treturn new Font(json);\n\t\t}\n\n\t}\n\n\tlet _context;\n\n\tconst AudioContext = {\n\t\tgetContext: function () {\n\t\t\tif (_context === undefined) {\n\t\t\t\t_context = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\t}\n\n\t\t\treturn _context;\n\t\t},\n\t\tsetContext: function (value) {\n\t\t\t_context = value;\n\t\t}\n\t};\n\n\tclass AudioLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\ttry {\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tconst bufferCopy = buffer.slice(0);\n\t\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData(bufferCopy, function (audioBuffer) {\n\t\t\t\t\t\tonLoad(audioBuffer);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t}\n\n\tclass HemisphereLightProbe extends LightProbe {\n\t\tconstructor(skyColor, groundColor, intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tconst color1 = new Color().set(skyColor);\n\t\t\tconst color2 = new Color().set(groundColor);\n\t\t\tconst sky = new Vector3(color1.r, color1.g, color1.b);\n\t\t\tconst ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\n\t\t\tconst c0 = Math.sqrt(Math.PI);\n\t\t\tconst c1 = c0 * Math.sqrt(0.75);\n\t\t\tthis.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);\n\t\t\tthis.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);\n\t\t}\n\n\t}\n\n\tHemisphereLightProbe.prototype.isHemisphereLightProbe = true;\n\n\tclass AmbientLightProbe extends LightProbe {\n\t\tconstructor(color, intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tconst color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\n\t\t\tthis.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));\n\t\t}\n\n\t}\n\n\tAmbientLightProbe.prototype.isAmbientLightProbe = true;\n\n\tconst _eyeRight = /*@__PURE__*/new Matrix4();\n\n\tconst _eyeLeft = /*@__PURE__*/new Matrix4();\n\n\tclass StereoCamera {\n\t\tconstructor() {\n\t\t\tthis.type = 'StereoCamera';\n\t\t\tthis.aspect = 1;\n\t\t\tthis.eyeSep = 0.064;\n\t\t\tthis.cameraL = new PerspectiveCamera();\n\t\t\tthis.cameraL.layers.enable(1);\n\t\t\tthis.cameraL.matrixAutoUpdate = false;\n\t\t\tthis.cameraR = new PerspectiveCamera();\n\t\t\tthis.cameraR.layers.enable(2);\n\t\t\tthis.cameraR.matrixAutoUpdate = false;\n\t\t\tthis._cache = {\n\t\t\t\tfocus: null,\n\t\t\t\tfov: null,\n\t\t\t\taspect: null,\n\t\t\t\tnear: null,\n\t\t\t\tfar: null,\n\t\t\t\tzoom: null,\n\t\t\t\teyeSep: null\n\t\t\t};\n\t\t}\n\n\t\tupdate(camera) {\n\t\t\tconst cache = this._cache;\n\t\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif (needsUpdate) {\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tconst projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tconst ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;\n\t\t\t\tlet xmin, xmax; // translate xOffset\n\n\t\t\t\t_eyeLeft.elements[12] = -eyeSepHalf;\n\t\t\t\t_eyeRight.elements[12] = eyeSepHalf; // for left eye\n\n\t\t\t\txmin = -ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n\t\t\t\txmin = -ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraR.projectionMatrix.copy(projectionMatrix);\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n\t\t\tthis.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n\t\t}\n\n\t}\n\n\tclass Clock {\n\t\tconstructor(autoStart = true) {\n\t\t\tthis.autoStart = autoStart;\n\t\t\tthis.startTime = 0;\n\t\t\tthis.oldTime = 0;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = false;\n\t\t}\n\n\t\tstart() {\n\t\t\tthis.startTime = now();\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\t\t}\n\n\t\tstop() {\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\t\t}\n\n\t\tgetElapsedTime() {\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\t\t}\n\n\t\tgetDelta() {\n\t\t\tlet diff = 0;\n\n\t\t\tif (this.autoStart && !this.running) {\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (this.running) {\n\t\t\t\tconst newTime = now();\n\t\t\t\tdiff = (newTime - this.oldTime) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\t\t\t\tthis.elapsedTime += diff;\n\t\t\t}\n\n\t\t\treturn diff;\n\t\t}\n\n\t}\n\n\tfunction now() {\n\t\treturn (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\n\t}\n\n\tconst _position$1 = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$1 = /*@__PURE__*/new Quaternion();\n\n\tconst _scale$1 = /*@__PURE__*/new Vector3();\n\n\tconst _orientation$1 = /*@__PURE__*/new Vector3();\n\n\tclass AudioListener extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'AudioListener';\n\t\t\tthis.context = AudioContext.getContext();\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect(this.context.destination);\n\t\t\tthis.filter = null;\n\t\t\tthis.timeDelta = 0; // private\n\n\t\t\tthis._clock = new Clock();\n\t\t}\n\n\t\tgetInput() {\n\t\t\treturn this.gain;\n\t\t}\n\n\t\tremoveFilter() {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t\tthis.gain.connect(this.context.destination);\n\t\t\t\tthis.filter = null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetFilter() {\n\t\t\treturn this.filter;\n\t\t}\n\n\t\tsetFilter(value) {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t} else {\n\t\t\t\tthis.gain.disconnect(this.context.destination);\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect(this.filter);\n\t\t\tthis.filter.connect(this.context.destination);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMasterVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\n\t\tsetMasterVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tconst listener = this.context.listener;\n\t\t\tconst up = this.up;\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\t\t\tthis.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);\n\n\t\t\t_orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);\n\n\t\t\tif (listener.positionX) {\n\t\t\t\t// code path for Chrome (see #14393)\n\t\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\t\t\t\tlistener.positionX.linearRampToValueAtTime(_position$1.x, endTime);\n\t\t\t\tlistener.positionY.linearRampToValueAtTime(_position$1.y, endTime);\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n\t\t\t\tlistener.upX.linearRampToValueAtTime(up.x, endTime);\n\t\t\t\tlistener.upY.linearRampToValueAtTime(up.y, endTime);\n\t\t\t\tlistener.upZ.linearRampToValueAtTime(up.z, endTime);\n\t\t\t} else {\n\t\t\t\tlistener.setPosition(_position$1.x, _position$1.y, _position$1.z);\n\t\t\t\tlistener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass Audio extends Object3D {\n\t\tconstructor(listener) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Audio';\n\t\t\tthis.listener = listener;\n\t\t\tthis.context = listener.context;\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect(listener.getInput());\n\t\t\tthis.autoplay = false;\n\t\t\tthis.buffer = null;\n\t\t\tthis.detune = 0;\n\t\t\tthis.loop = false;\n\t\t\tthis.loopStart = 0;\n\t\t\tthis.loopEnd = 0;\n\t\t\tthis.offset = 0;\n\t\t\tthis.duration = undefined;\n\t\t\tthis.playbackRate = 1;\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.hasPlaybackControl = true;\n\t\t\tthis.source = null;\n\t\t\tthis.sourceType = 'empty';\n\t\t\tthis._startedAt = 0;\n\t\t\tthis._progress = 0;\n\t\t\tthis._connected = false;\n\t\t\tthis.filters = [];\n\t\t}\n\n\t\tgetOutput() {\n\t\t\treturn this.gain;\n\t\t}\n\n\t\tsetNodeSource(audioNode) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMediaElementSource(mediaElement) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource(mediaElement);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMediaStreamSource(mediaStream) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource(mediaStream);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetBuffer(audioBuffer) {\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\t\t\tif (this.autoplay) this.play();\n\t\t\treturn this;\n\t\t}\n\n\t\tplay(delay = 0) {\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tconsole.warn('THREE.Audio: Audio is already playing.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\t\t\tconst source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind(this);\n\t\t\tsource.start(this._startedAt, this._progress + this.offset, this.duration);\n\t\t\tthis.isPlaying = true;\n\t\t\tthis.source = source;\n\t\t\tthis.setDetune(this.detune);\n\t\t\tthis.setPlaybackRate(this.playbackRate);\n\t\t\treturn this.connect();\n\t\t}\n\n\t\tpause() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\t// update current progress\n\t\t\t\tthis._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n\n\t\t\t\tif (this.loop === true) {\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\t\t\t\t\tthis._progress = this._progress % (this.duration || this.buffer.duration);\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\t\t\t\tthis.isPlaying = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tstop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\t\t\treturn this;\n\t\t}\n\n\t\tconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.connect(this.filters[0]);\n\n\t\t\t\tfor (let i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].connect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].connect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.connect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = true;\n\t\t\treturn this;\n\t\t}\n\n\t\tdisconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.disconnect(this.filters[0]);\n\n\t\t\t\tfor (let i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].disconnect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].disconnect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.disconnect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = false;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetFilters() {\n\t\t\treturn this.filters;\n\t\t}\n\n\t\tsetFilters(value) {\n\t\t\tif (!value) value = [];\n\n\t\t\tif (this._connected === true) {\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value.slice();\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.filters = value.slice();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDetune(value) {\n\t\t\tthis.detune = value;\n\t\t\tif (this.source.detune === undefined) return; // only set detune when available\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetDetune() {\n\t\t\treturn this.detune;\n\t\t}\n\n\t\tgetFilter() {\n\t\t\treturn this.getFilters()[0];\n\t\t}\n\n\t\tsetFilter(filter) {\n\t\t\treturn this.setFilters(filter ? [filter] : []);\n\t\t}\n\n\t\tsetPlaybackRate(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetPlaybackRate() {\n\t\t\treturn this.playbackRate;\n\t\t}\n\n\t\tonEnded() {\n\t\t\tthis.isPlaying = false;\n\t\t}\n\n\t\tgetLoop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn this.loop;\n\t\t}\n\n\t\tsetLoop(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.loop = this.loop;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoopStart(value) {\n\t\t\tthis.loopStart = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoopEnd(value) {\n\t\t\tthis.loopEnd = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\n\t\tsetVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tconst _position = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion = /*@__PURE__*/new Quaternion();\n\n\tconst _scale = /*@__PURE__*/new Vector3();\n\n\tconst _orientation = /*@__PURE__*/new Vector3();\n\n\tclass PositionalAudio extends Audio {\n\t\tconstructor(listener) {\n\t\t\tsuper(listener);\n\t\t\tthis.panner = this.context.createPanner();\n\t\t\tthis.panner.panningModel = 'HRTF';\n\t\t\tthis.panner.connect(this.gain);\n\t\t}\n\n\t\tgetOutput() {\n\t\t\treturn this.panner;\n\t\t}\n\n\t\tgetRefDistance() {\n\t\t\treturn this.panner.refDistance;\n\t\t}\n\n\t\tsetRefDistance(value) {\n\t\t\tthis.panner.refDistance = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetRolloffFactor() {\n\t\t\treturn this.panner.rolloffFactor;\n\t\t}\n\n\t\tsetRolloffFactor(value) {\n\t\t\tthis.panner.rolloffFactor = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetDistanceModel() {\n\t\t\treturn this.panner.distanceModel;\n\t\t}\n\n\t\tsetDistanceModel(value) {\n\t\t\tthis.panner.distanceModel = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMaxDistance() {\n\t\t\treturn this.panner.maxDistance;\n\t\t}\n\n\t\tsetMaxDistance(value) {\n\t\t\tthis.panner.maxDistance = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tif (this.hasPlaybackControl === true && this.isPlaying === false) return;\n\t\t\tthis.matrixWorld.decompose(_position, _quaternion, _scale);\n\n\t\t\t_orientation.set(0, 0, 1).applyQuaternion(_quaternion);\n\n\t\t\tconst panner = this.panner;\n\n\t\t\tif (panner.positionX) {\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\t\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\t\t\t\tpanner.positionX.linearRampToValueAtTime(_position.x, endTime);\n\t\t\t\tpanner.positionY.linearRampToValueAtTime(_position.y, endTime);\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime(_position.z, endTime);\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);\n\t\t\t} else {\n\t\t\t\tpanner.setPosition(_position.x, _position.y, _position.z);\n\t\t\t\tpanner.setOrientation(_orientation.x, _orientation.y, _orientation.z);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass AudioAnalyser {\n\t\tconstructor(audio, fftSize = 2048) {\n\t\t\tthis.analyser = audio.context.createAnalyser();\n\t\t\tthis.analyser.fftSize = fftSize;\n\t\t\tthis.data = new Uint8Array(this.analyser.frequencyBinCount);\n\t\t\taudio.getOutput().connect(this.analyser);\n\t\t}\n\n\t\tgetFrequencyData() {\n\t\t\tthis.analyser.getByteFrequencyData(this.data);\n\t\t\treturn this.data;\n\t\t}\n\n\t\tgetAverageFrequency() {\n\t\t\tlet value = 0;\n\t\t\tconst data = this.getFrequencyData();\n\n\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\tvalue += data[i];\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\t\t}\n\n\t}\n\n\tclass PropertyMixer {\n\t\tconstructor(binding, typeName, valueSize) {\n\t\t\tthis.binding = binding;\n\t\t\tthis.valueSize = valueSize;\n\t\t\tlet mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t\t//\n\t\t\t// interpolators can use .buffer as their .result\n\t\t\t// the data then goes to 'incoming'\n\t\t\t//\n\t\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t\t// the cumulative result and are compared to detect\n\t\t\t// changes\n\t\t\t//\n\t\t\t// 'orig' stores the original state of the property\n\t\t\t//\n\t\t\t// 'add' is used for additive cumulative results\n\t\t\t//\n\t\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t\t// to store intermediate quaternion multiplication results\n\n\t\t\tswitch (typeName) {\n\t\t\t\tcase 'quaternion':\n\t\t\t\t\tmixFunction = this._slerp;\n\t\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 6);\n\t\t\t\t\tthis._workIndex = 5;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'string':\n\t\t\t\tcase 'bool':\n\t\t\t\t\tmixFunction = this._select; // Use the regular mix function and for additive on these types,\n\t\t\t\t\t// additive is not relevant for non-numeric types\n\n\t\t\t\t\tmixFunctionAdditive = this._select;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\t\t\t\t\tthis.buffer = new Array(valueSize * 5);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmixFunction = this._lerp;\n\t\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 5);\n\t\t\t}\n\n\t\t\tthis._mixBufferRegion = mixFunction;\n\t\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\t\tthis._setIdentity = setIdentity;\n\t\t\tthis._origIndex = 3;\n\t\t\tthis._addIndex = 4;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t\tthis.useCount = 0;\n\t\t\tthis.referenceCount = 0;\n\t\t} // accumulate data in the 'incoming' region into 'accu<i>'\n\n\n\t\taccumulate(accuIndex, weight) {\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = accuIndex * stride + stride;\n\t\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\t\tif (currentWeight === 0) {\n\t\t\t\t// accuN := incoming * weight\n\t\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[offset + i] = buffer[i];\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\t\t\t} else {\n\t\t\t\t// accuN := accuN + incoming * weight\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tconst mix = weight / currentWeight;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, 0, mix, stride);\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\t\t} // accumulate data in the 'incoming' region into 'add'\n\n\n\t\taccumulateAdditive(weight) {\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif (this.cumulativeWeightAdditive === 0) {\n\t\t\t\t// add = identity\n\t\t\t\tthis._setIdentity();\n\t\t\t} // add := add + incoming * weight\n\n\n\t\t\tthis._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\t\t} // apply the state of 'accu<i>' to the binding when accus differ\n\n\n\t\tapply(accuIndex) {\n\t\t\tconst stride = this.valueSize,\n\t\t\t\t\t\tbuffer = this.buffer,\n\t\t\t\t\t\toffset = accuIndex * stride + stride,\n\t\t\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\t\t\t\t\t\tbinding = this.binding;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif (weight < 1) {\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n\t\t\t}\n\n\t\t\tif (weightAdditive > 0) {\n\t\t\t\t// accuN := accuN + additive accuN\n\t\t\t\tthis._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n\t\t\t}\n\n\t\t\tfor (let i = stride, e = stride + stride; i !== e; ++i) {\n\t\t\t\tif (buffer[i] !== buffer[i + stride]) {\n\t\t\t\t\t// value has changed -> update scene graph\n\t\t\t\t\tbinding.setValue(buffer, offset);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} // remember the state of the bound property and copy it to both accus\n\n\n\t\tsaveOriginalState() {\n\t\t\tconst binding = this.binding;\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\t\t\tbinding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n\t\t\tfor (let i = stride, e = originalValueOffset; i !== e; ++i) {\n\t\t\t\tbuffer[i] = buffer[originalValueOffset + i % stride];\n\t\t\t} // Add to identity for additive\n\n\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t} // apply the state previously taken via 'saveOriginalState' to the binding\n\n\n\t\trestoreOriginalState() {\n\t\t\tconst originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue(this.buffer, originalValueOffset);\n\t\t}\n\n\t\t_setAdditiveIdentityNumeric() {\n\t\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\tthis.buffer[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t_setAdditiveIdentityQuaternion() {\n\t\t\tthis._setAdditiveIdentityNumeric();\n\n\t\t\tthis.buffer[this._addIndex * this.valueSize + 3] = 1;\n\t\t}\n\n\t\t_setAdditiveIdentityOther() {\n\t\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor (let i = 0; i < this.valueSize; i++) {\n\t\t\t\tthis.buffer[targetIndex + i] = this.buffer[startIndex + i];\n\t\t\t}\n\t\t} // mix functions\n\n\n\t\t_select(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tif (t >= 0.5) {\n\t\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[dstOffset + i] = buffer[srcOffset + i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_slerp(buffer, dstOffset, srcOffset, t) {\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n\t\t}\n\n\t\t_slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tconst workOffset = this._workIndex * stride; // Store result in intermediate buffer offset\n\n\t\t\tQuaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result\n\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n\t\t}\n\n\t\t_lerp(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tconst s = 1 - t;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tconst j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\n\t\t_lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tconst j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n\tconst _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\n\n\tconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\n\tconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\n\n\tconst _directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\n\n\tconst _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\n\n\tconst _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\n\n\tconst _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\n\n\tconst _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\n\n\tconst _supportedObjectNames = ['material', 'materials', 'bones'];\n\n\tclass Composite {\n\t\tconstructor(targetGroup, path, optionalParsedPath) {\n\t\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n\t\t\tthis._targetGroup = targetGroup;\n\t\t\tthis._bindings = targetGroup.subscribe_(path, parsedPath);\n\t\t}\n\n\t\tgetValue(array, offset) {\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t\tbinding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n\t\t\tif (binding !== undefined) binding.getValue(array, offset);\n\t\t}\n\n\t\tsetValue(array, offset) {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].setValue(array, offset);\n\t\t\t}\n\t\t}\n\n\t\tbind() {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].bind();\n\t\t\t}\n\t\t}\n\n\t\tunbind() {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].unbind();\n\t\t\t}\n\t\t}\n\n\t} // Note: This class uses a State pattern on a per-method basis:\n\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t// prototype version of these methods with one that represents\n\t// the bound state. When the property is not found, the methods\n\t// become no-ops.\n\n\n\tclass PropertyBinding {\n\t\tconstructor(rootNode, path, parsedPath) {\n\t\t\tthis.path = path;\n\t\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\t\t\tthis.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n\t\t\tthis.rootNode = rootNode; // initial state of these methods that calls 'bind'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\n\t\tstatic create(root, path, parsedPath) {\n\t\t\tif (!(root && root.isAnimationObjectGroup)) {\n\t\t\t\treturn new PropertyBinding(root, path, parsedPath);\n\t\t\t} else {\n\t\t\t\treturn new PropertyBinding.Composite(root, path, parsedPath);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\n\n\t\tstatic sanitizeNodeName(name) {\n\t\t\treturn name.replace(/\\s/g, '_').replace(_reservedRe, '');\n\t\t}\n\n\t\tstatic parseTrackName(trackName) {\n\t\t\tconst matches = _trackRe.exec(trackName);\n\n\t\t\tif (!matches) {\n\t\t\t\tthrow new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n\t\t\t}\n\n\t\t\tconst results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[2],\n\t\t\t\tobjectName: matches[3],\n\t\t\t\tobjectIndex: matches[4],\n\t\t\t\tpropertyName: matches[5],\n\t\t\t\t// required\n\t\t\t\tpropertyIndex: matches[6]\n\t\t\t};\n\t\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n\n\t\t\tif (lastDot !== undefined && lastDot !== -1) {\n\t\t\t\tconst objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\n\t\t\t\tif (_supportedObjectNames.indexOf(objectName) !== -1) {\n\t\t\t\t\tresults.nodeName = results.nodeName.substring(0, lastDot);\n\t\t\t\t\tresults.objectName = objectName;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (results.propertyName === null || results.propertyName.length === 0) {\n\t\t\t\tthrow new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t}\n\n\t\tstatic findNode(root, nodeName) {\n\t\t\tif (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n\t\t\t\treturn root;\n\t\t\t} // search into skeleton bones.\n\n\n\t\t\tif (root.skeleton) {\n\t\t\t\tconst bone = root.skeleton.getBoneByName(nodeName);\n\n\t\t\t\tif (bone !== undefined) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t} // search into node subtree.\n\n\n\t\t\tif (root.children) {\n\t\t\t\tconst searchNodeSubtree = function (children) {\n\t\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\t\tconst childNode = children[i];\n\n\t\t\t\t\t\tif (childNode.name === nodeName || childNode.uuid === nodeName) {\n\t\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst result = searchNodeSubtree(childNode.children);\n\t\t\t\t\t\tif (result) return result;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t};\n\n\t\t\t\tconst subTreeNode = searchNodeSubtree(root.children);\n\n\t\t\t\tif (subTreeNode) {\n\t\t\t\t\treturn subTreeNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} // these are used to \"bind\" a nonexistent property\n\n\n\t\t_getValue_unavailable() {}\n\n\t\t_setValue_unavailable() {} // Getters\n\n\n\t\t_getValue_direct(buffer, offset) {\n\t\t\tbuffer[offset] = this.node[this.propertyName];\n\t\t}\n\n\t\t_getValue_array(buffer, offset) {\n\t\t\tconst source = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = source.length; i !== n; ++i) {\n\t\t\t\tbuffer[offset++] = source[i];\n\t\t\t}\n\t\t}\n\n\t\t_getValue_arrayElement(buffer, offset) {\n\t\t\tbuffer[offset] = this.resolvedProperty[this.propertyIndex];\n\t\t}\n\n\t\t_getValue_toArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.toArray(buffer, offset);\n\t\t} // Direct\n\n\n\t\t_setValue_direct(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t}\n\n\t\t_setValue_direct_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // EntireArray\n\n\n\t\t_setValue_array(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\t\t}\n\n\t\t_setValue_array_setNeedsUpdate(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // ArrayElement\n\n\n\t\t_setValue_arrayElement(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t}\n\n\t\t_setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // HasToFromArray\n\n\n\t\t_setValue_fromArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t}\n\n\t\t_setValue_fromArray_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}\n\n\t\t_getValue_unbound(targetArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.getValue(targetArray, offset);\n\t\t}\n\n\t\t_setValue_unbound(sourceArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.setValue(sourceArray, offset);\n\t\t} // create getter / setter pair for a property in the scene graph\n\n\n\t\tbind() {\n\t\t\tlet targetObject = this.node;\n\t\t\tconst parsedPath = this.parsedPath;\n\t\t\tconst objectName = parsedPath.objectName;\n\t\t\tconst propertyName = parsedPath.propertyName;\n\t\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif (!targetObject) {\n\t\t\t\ttargetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n\t\t\t\tthis.node = targetObject;\n\t\t\t} // set fail state so we can just 'return' on error\n\n\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable; // ensure there is a value node\n\n\t\t\tif (!targetObject) {\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (objectName) {\n\t\t\t\tlet objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n\t\t\t\tswitch (objectName) {\n\t\t\t\t\tcase 'materials':\n\t\t\t\t\t\tif (!targetObject.material) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!targetObject.material.materials) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\t\t\t\t\t\tif (!targetObject.skeleton) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} // potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n\t\t\t\t\t\tfor (let i = 0; i < targetObject.length; i++) {\n\t\t\t\t\t\t\tif (targetObject[i].name === objectIndex) {\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (targetObject[objectName] === undefined) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[objectName];\n\t\t\t\t}\n\n\t\t\t\tif (objectIndex !== undefined) {\n\t\t\t\t\tif (targetObject[objectIndex] === undefined) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[objectIndex];\n\t\t\t\t}\n\t\t\t} // resolve property\n\n\n\t\t\tconst nodeProperty = targetObject[propertyName];\n\n\t\t\tif (nodeProperty === undefined) {\n\t\t\t\tconst nodeName = parsedPath.nodeName;\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n\t\t\t\treturn;\n\t\t\t} // determine versioning scheme\n\n\n\t\t\tlet versioning = this.Versioning.None;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif (targetObject.needsUpdate !== undefined) {\n\t\t\t\t// material\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n\t\t\t\t// node transform\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t} // determine how the property gets bound\n\n\n\t\t\tlet bindingType = this.BindingType.Direct;\n\n\t\t\tif (propertyIndex !== undefined) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\t\t\tif (propertyName === 'morphTargetInfluences') {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif (!targetObject.geometry) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (targetObject.geometry.isBufferGeometry) {\n\t\t\t\t\t\tif (!targetObject.geometry.morphAttributes) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\t\t\t} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else if (Array.isArray(nodeProperty)) {\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else {\n\t\t\t\tthis.propertyName = propertyName;\n\t\t\t} // select getter / setter\n\n\n\t\t\tthis.getValue = this.GetterByBindingType[bindingType];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n\t\t}\n\n\t\tunbind() {\n\t\t\tthis.node = null; // back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\n\t}\n\n\tPropertyBinding.Composite = Composite;\n\tPropertyBinding.prototype.BindingType = {\n\t\tDirect: 0,\n\t\tEntireArray: 1,\n\t\tArrayElement: 2,\n\t\tHasFromToArray: 3\n\t};\n\tPropertyBinding.prototype.Versioning = {\n\t\tNone: 0,\n\t\tNeedsUpdate: 1,\n\t\tMatrixWorldNeedsUpdate: 2\n\t};\n\tPropertyBinding.prototype.GetterByBindingType = [PropertyBinding.prototype._getValue_direct, PropertyBinding.prototype._getValue_array, PropertyBinding.prototype._getValue_arrayElement, PropertyBinding.prototype._getValue_toArray];\n\tPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[// Direct\n\tPropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [// EntireArray\n\tPropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [// ArrayElement\n\tPropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [// HasToFromArray\n\tPropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate, PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *\t- Add objects you would otherwise pass as 'root' to the\n\t *\t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t *\t- Instead pass this object as 'root'.\n\t *\n\t *\t- You can also add and remove objects later when the mixer\n\t *\t\tis running.\n\t *\n\t * Note:\n\t *\n\t *\t\tObjects of this class appear as one object to the mixer,\n\t *\t\tso cache control of the individual objects must be done\n\t *\t\ton the group.\n\t *\n\t * Limitation:\n\t *\n\t *\t- The animated properties must be compatible among the\n\t *\t\tall objects in the group.\n\t *\n\t *\t- A single property can either be controlled through a\n\t *\t\ttarget group or directly, but not both.\n\t */\n\n\tclass AnimationObjectGroup {\n\t\tconstructor() {\n\t\t\tthis.uuid = generateUUID(); // cached objects followed by the active ones\n\n\t\t\tthis._objects = Array.prototype.slice.call(arguments);\n\t\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t\t// note: read by PropertyBinding.Composite\n\n\t\t\tconst indices = {};\n\t\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tindices[arguments[i].uuid] = i;\n\t\t\t}\n\n\t\t\tthis._paths = []; // inside: string\n\n\t\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\n\t\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\n\t\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\t\tconst scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tobjects: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._objects.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tget bindingsPerObject() {\n\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n\t\tadd() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tpaths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet knownObject = undefined,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tlet index = indicesByUUID[uuid];\n\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\t\t\t\tindex = nObjects++;\n\t\t\t\t\tindicesByUUID[uuid] = index;\n\t\t\t\t\tobjects.push(object); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tbindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n\t\t\t\t\t}\n\t\t\t\t} else if (index < nCachedObjects) {\n\t\t\t\t\tknownObject = objects[index]; // move existing object to the ACTIVE region\n\n\t\t\t\t\tconst firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex];\n\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\tobjects[index] = lastCachedObject;\n\t\t\t\t\tindicesByUUID[uuid] = firstActiveIndex;\n\t\t\t\t\tobjects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex];\n\t\t\t\t\t\tlet binding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\n\t\t\t\t\t\tif (binding === undefined) {\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\t\t\t\t\t\t\tbinding = new PropertyBinding(object, paths[j], parsedPaths[j]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t} else if (objects[index] !== knownObject) {\n\t\t\t\t\tconsole.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t}\n\n\t\tremove() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined && index >= nCachedObjects) {\n\t\t\t\t\t// move existing object into the CACHED region\n\t\t\t\t\tconst lastCachedIndex = nCachedObjects++,\n\t\t\t\t\t\t\t\tfirstActiveObject = objects[lastCachedIndex];\n\t\t\t\t\tindicesByUUID[firstActiveObject.uuid] = index;\n\t\t\t\t\tobjects[index] = firstActiveObject;\n\t\t\t\t\tindicesByUUID[uuid] = lastCachedIndex;\n\t\t\t\t\tobjects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tfirstActive = bindingsForPath[lastCachedIndex],\n\t\t\t\t\t\t\t\t\tbinding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = firstActive;\n\t\t\t\t\t\tbindingsForPath[lastCachedIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // remove & forget\n\n\n\t\tuncache() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined) {\n\t\t\t\t\tdelete indicesByUUID[uuid];\n\n\t\t\t\t\tif (index < nCachedObjects) {\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\t\t\t\t\t\tconst firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex],\n\t\t\t\t\t\t\t\t\tlastIndex = --nObjects,\n\t\t\t\t\t\t\t\t\tlastObject = objects[lastIndex]; // last cached object takes this object's place\n\n\t\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\t\tobjects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = firstActiveIndex;\n\t\t\t\t\t\tobjects[firstActiveIndex] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex],\n\t\t\t\t\t\t\t\t\t\tlast = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\t\t\t\t\t\tconst lastIndex = --nObjects,\n\t\t\t\t\t\t\t\t\tlastObject = objects[lastIndex];\n\n\t\t\t\t\t\tif (lastIndex > 0) {\n\t\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = index;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobjects[index] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tconst bindingsForPath = bindings[j];\n\t\t\t\t\t\t\tbindingsForPath[index] = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // Internal interface used by befriended PropertyBinding.Composite:\n\n\n\t\tsubscribe_(path, parsedPath) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\t\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\t\tlet index = indicesByPath[path];\n\t\t\tconst bindings = this._bindings;\n\t\t\tif (index !== undefined) return bindings[index];\n\t\t\tconst paths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tobjects = this._objects,\n\t\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\t\tbindingsForPath = new Array(nObjects);\n\t\t\tindex = bindings.length;\n\t\t\tindicesByPath[path] = index;\n\t\t\tpaths.push(path);\n\t\t\tparsedPaths.push(parsedPath);\n\t\t\tbindings.push(bindingsForPath);\n\n\t\t\tfor (let i = nCachedObjects, n = objects.length; i !== n; ++i) {\n\t\t\t\tconst object = objects[i];\n\t\t\t\tbindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\t\t}\n\n\t\tunsubscribe_(path) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\t\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\t\t\tindex = indicesByPath[path];\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tconst paths = this._paths,\n\t\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\t\t\tlastBindings = bindings[lastBindingsIndex],\n\t\t\t\t\t\t\tlastBindingsPath = path[lastBindingsIndex];\n\t\t\t\tindicesByPath[lastBindingsPath] = index;\n\t\t\t\tbindings[index] = lastBindings;\n\t\t\t\tbindings.pop();\n\t\t\t\tparsedPaths[index] = parsedPaths[lastBindingsIndex];\n\t\t\t\tparsedPaths.pop();\n\t\t\t\tpaths[index] = paths[lastBindingsIndex];\n\t\t\t\tpaths.pop();\n\t\t\t}\n\t\t}\n\n\t}\n\n\tAnimationObjectGroup.prototype.isAnimationObjectGroup = true;\n\n\tclass AnimationAction {\n\t\tconstructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {\n\t\t\tthis._mixer = mixer;\n\t\t\tthis._clip = clip;\n\t\t\tthis._localRoot = localRoot;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tconst tracks = clip.tracks,\n\t\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\t\tinterpolants = new Array(nTracks);\n\t\t\tconst interpolantSettings = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\n\t\t\tfor (let i = 0; i !== nTracks; ++i) {\n\t\t\t\tconst interpolant = tracks[i].createInterpolant(null);\n\t\t\t\tinterpolants[i] = interpolant;\n\t\t\t\tinterpolant.settings = interpolantSettings;\n\t\t\t}\n\n\t\t\tthis._interpolantSettings = interpolantSettings;\n\t\t\tthis._interpolants = interpolants; // bound by the mixer\n\t\t\t// inside: PropertyMixer (managed by the mixer)\n\n\t\t\tthis._propertyBindings = new Array(nTracks);\n\t\t\tthis._cacheIndex = null; // for the memory manager\n\n\t\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis.loop = LoopRepeat;\n\t\t\tthis._loopCount = -1; // global mixer time when the action is to be started\n\t\t\t// it's set back to 'null' upon start of the action\n\n\t\t\tthis._startTime = null; // scaled local time of the action\n\t\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1;\n\t\t\tthis._effectiveTimeScale = 1;\n\t\t\tthis.weight = 1;\n\t\t\tthis._effectiveWeight = 1;\n\t\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\t\tthis.paused = false; // true -> zero effective time scale\n\n\t\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\t\tthis.clampWhenFinished = false; // keep feeding the last frame?\n\n\t\t\tthis.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n\t\t\tthis.zeroSlopeAtEnd = true; // clips for start, loop and end\n\t\t} // State & Scheduling\n\n\n\t\tplay() {\n\t\t\tthis._mixer._activateAction(this);\n\n\t\t\treturn this;\n\t\t}\n\n\t\tstop() {\n\t\t\tthis._mixer._deactivateAction(this);\n\n\t\t\treturn this.reset();\n\t\t}\n\n\t\treset() {\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\t\t\tthis.time = 0; // restart clip\n\n\t\t\tthis._loopCount = -1; // forget previous loops\n\n\t\t\tthis._startTime = null; // forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\t\t}\n\n\t\tisRunning() {\n\t\t\treturn this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n\t\t} // return true when play has been called\n\n\n\t\tisScheduled() {\n\t\t\treturn this._mixer._isActiveAction(this);\n\t\t}\n\n\t\tstartAt(time) {\n\t\t\tthis._startTime = time;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoop(mode, repetitions) {\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\t\t\treturn this;\n\t\t} // Weight\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\n\n\t\tsetEffectiveWeight(weight) {\n\t\t\tthis.weight = weight; // note: same logic as when updated at runtime\n\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\t\treturn this.stopFading();\n\t\t} // return the weight considering fading and .enabled\n\n\n\t\tgetEffectiveWeight() {\n\t\t\treturn this._effectiveWeight;\n\t\t}\n\n\t\tfadeIn(duration) {\n\t\t\treturn this._scheduleFading(duration, 0, 1);\n\t\t}\n\n\t\tfadeOut(duration) {\n\t\t\treturn this._scheduleFading(duration, 1, 0);\n\t\t}\n\n\t\tcrossFadeFrom(fadeOutAction, duration, warp) {\n\t\t\tfadeOutAction.fadeOut(duration);\n\t\t\tthis.fadeIn(duration);\n\n\t\t\tif (warp) {\n\t\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\t\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\t\t\tfadeOutAction.warp(1.0, startEndRatio, duration);\n\t\t\t\tthis.warp(endStartRatio, 1.0, duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcrossFadeTo(fadeInAction, duration, warp) {\n\t\t\treturn fadeInAction.crossFadeFrom(this, duration, warp);\n\t\t}\n\n\t\tstopFading() {\n\t\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\t\tif (weightInterpolant !== null) {\n\t\t\t\tthis._weightInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(weightInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Time Scale Control\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\n\n\t\tsetEffectiveTimeScale(timeScale) {\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\t\t\treturn this.stopWarping();\n\t\t} // return the time scale considering warping and .paused\n\n\n\t\tgetEffectiveTimeScale() {\n\t\t\treturn this._effectiveTimeScale;\n\t\t}\n\n\t\tsetDuration(duration) {\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\t\t\treturn this.stopWarping();\n\t\t}\n\n\t\tsyncWith(action) {\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\t\t\treturn this.stopWarping();\n\t\t}\n\n\t\thalt(duration) {\n\t\t\treturn this.warp(this._effectiveTimeScale, 0, duration);\n\t\t}\n\n\t\twarp(startTimeScale, endTimeScale, duration) {\n\t\t\tconst mixer = this._mixer,\n\t\t\t\t\t\tnow = mixer.time,\n\t\t\t\t\t\ttimeScale = this.timeScale;\n\t\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tconst times = interpolant.parameterPositions,\n\t\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[0] = startTimeScale / timeScale;\n\t\t\tvalues[1] = endTimeScale / timeScale;\n\t\t\treturn this;\n\t\t}\n\n\t\tstopWarping() {\n\t\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif (timeScaleInterpolant !== null) {\n\t\t\t\tthis._timeScaleInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Object Accessors\n\n\n\t\tgetMixer() {\n\t\t\treturn this._mixer;\n\t\t}\n\n\t\tgetClip() {\n\t\t\treturn this._clip;\n\t\t}\n\n\t\tgetRoot() {\n\t\t\treturn this._localRoot || this._mixer._root;\n\t\t} // Interna\n\n\n\t\t_update(time, deltaTime, timeDirection, accuIndex) {\n\t\t\t// called by the mixer\n\t\t\tif (!this.enabled) {\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\t\t\t\tthis._updateWeight(time);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst startTime = this._startTime;\n\n\t\t\tif (startTime !== null) {\n\t\t\t\t// check for scheduled start of action\n\t\t\t\tconst timeRunning = (time - startTime) * timeDirection;\n\n\t\t\t\tif (timeRunning < 0 || timeDirection === 0) {\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\t\t\t} // start\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\t\t\t} // apply time scale and advance time\n\n\n\t\t\tdeltaTime *= this._updateTimeScale(time);\n\n\t\t\tconst clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\n\t\t\tconst weight = this._updateWeight(time);\n\n\t\t\tif (weight > 0) {\n\t\t\t\tconst interpolants = this._interpolants;\n\t\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\t\tswitch (this.blendMode) {\n\t\t\t\t\tcase AdditiveAnimationBlendMode:\n\t\t\t\t\t\tfor (let j = 0, m = interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\tinterpolants[j].evaluate(clipTime);\n\t\t\t\t\t\t\tpropertyMixers[j].accumulateAdditive(weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfor (let j = 0, m = interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\tinterpolants[j].evaluate(clipTime);\n\t\t\t\t\t\t\tpropertyMixers[j].accumulate(accuIndex, weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_updateWeight(time) {\n\t\t\tlet weight = 0;\n\n\t\t\tif (this.enabled) {\n\t\t\t\tweight = this.weight;\n\t\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tconst interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif (interpolantValue === 0) {\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\t\t}\n\n\t\t_updateTimeScale(time) {\n\t\t\tlet timeScale = 0;\n\n\t\t\tif (!this.paused) {\n\t\t\t\ttimeScale = this.timeScale;\n\t\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tconst interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif (timeScale === 0) {\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\t\t}\n\n\t\t_updateTime(deltaTime) {\n\t\t\tconst duration = this._clip.duration;\n\t\t\tconst loop = this.loop;\n\t\t\tlet time = this.time + deltaTime;\n\t\t\tlet loopCount = this._loopCount;\n\t\t\tconst pingPong = loop === LoopPingPong;\n\n\t\t\tif (deltaTime === 0) {\n\t\t\t\tif (loopCount === -1) return time;\n\t\t\t\treturn pingPong && (loopCount & 1) === 1 ? duration - time : time;\n\t\t\t}\n\n\t\t\tif (loop === LoopOnce) {\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tthis._loopCount = 0;\n\n\t\t\t\t\tthis._setEndings(true, true, false);\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\t\t\t\t\tif (time >= duration) {\n\t\t\t\t\t\ttime = duration;\n\t\t\t\t\t} else if (time < 0) {\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.time = time;\n\t\t\t\t\t\tbreak handle_stop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\taction: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// repetitive Repeat or PingPong\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tif (deltaTime >= 0) {\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(true, this.repetitions === 0, pingPong);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\t\t\t\t\t\tthis._setEndings(this.repetitions === 0, true, pingPong);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (time >= duration || time < 0) {\n\t\t\t\t\t// wrap around\n\t\t\t\t\tconst loopDelta = Math.floor(time / duration); // signed\n\n\t\t\t\t\ttime -= duration * loopDelta;\n\t\t\t\t\tloopCount += Math.abs(loopDelta);\n\t\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif (pending <= 0) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\t\t\t\t\t\tif (pending === 1) {\n\t\t\t\t\t\t\t// entering the last round\n\t\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\n\t\t\t\t\t\t\tthis._setEndings(atStart, !atStart, pingPong);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setEndings(false, false, pingPong);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'loop',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tloopDelta: loopDelta\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.time = time;\n\t\t\t\t}\n\n\t\t\t\tif (pingPong && (loopCount & 1) === 1) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\t\t\t\t\treturn duration - time;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn time;\n\t\t}\n\n\t\t_setEndings(atStart, atEnd, pingPong) {\n\t\t\tconst settings = this._interpolantSettings;\n\n\t\t\tif (pingPong) {\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\t\t\t} else {\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\t\t\tif (atStart) {\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\t\t\t}\n\n\t\t\t\tif (atEnd) {\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingEnd = WrapAroundEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_scheduleFading(duration, weightNow, weightThen) {\n\t\t\tconst mixer = this._mixer,\n\t\t\t\t\t\tnow = mixer.time;\n\t\t\tlet interpolant = this._weightInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tconst times = interpolant.parameterPositions,\n\t\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\tvalues[0] = weightNow;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[1] = weightThen;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AnimationMixer extends EventDispatcher {\n\t\tconstructor(root) {\n\t\t\tsuper();\n\t\t\tthis._root = root;\n\n\t\t\tthis._initMemoryManager();\n\n\t\t\tthis._accuIndex = 0;\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1.0;\n\t\t}\n\n\t\t_bindAction(action, prototypeAction) {\n\t\t\tconst root = action._localRoot || this._root,\n\t\t\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\t\t\tlet bindingsByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingsByName === undefined) {\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingsByName;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i !== nTracks; ++i) {\n\t\t\t\tconst track = tracks[i],\n\t\t\t\t\t\t\ttrackName = track.name;\n\t\t\t\tlet binding = bindingsByName[trackName];\n\n\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t} else {\n\t\t\t\t\tbinding = bindings[i];\n\n\t\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\t\t\t\t\t\tif (binding._cacheIndex === null) {\n\t\t\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n\t\t\t\t\tbinding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t}\n\n\t\t\t\tinterpolants[i].resultBuffer = binding.buffer;\n\t\t\t}\n\t\t}\n\n\t\t_activateAction(action) {\n\t\t\tif (!this._isActiveAction(action)) {\n\t\t\t\tif (action._cacheIndex === null) {\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\t\t\t\t\tconst rootUuid = (action._localRoot || this._root).uuid,\n\t\t\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\t\t\tthis._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n\t\t\t\t\tthis._addInactiveAction(action, clipUuid, rootUuid);\n\t\t\t\t}\n\n\t\t\t\tconst bindings = action._propertyBindings; // increment reference counts / sort out state\n\n\t\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\t\tif (binding.useCount++ === 0) {\n\t\t\t\t\t\tthis._lendBinding(binding);\n\n\t\t\t\t\t\tbinding.saveOriginalState();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction(action);\n\t\t\t}\n\t\t}\n\n\t\t_deactivateAction(action) {\n\t\t\tif (this._isActiveAction(action)) {\n\t\t\t\tconst bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n\t\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\t\tif (--binding.useCount === 0) {\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\t\tthis._takeBackBinding(binding);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction(action);\n\t\t\t}\n\t\t} // Memory manager\n\n\n\t\t_initMemoryManager() {\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._actionsByClip = {}; // inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n\t\t\tthis._nActiveBindings = 0;\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\n\t\t\tthis._nActiveControlInterpolants = 0;\n\t\t\tconst scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._actions.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveActions;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\t\t} // Memory management for AnimationAction objects\n\n\n\t\t_isActiveAction(action) {\n\t\t\tconst index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\t\t}\n\n\t\t_addInactiveAction(action, clipUuid, rootUuid) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip;\n\t\t\tlet actionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip === undefined) {\n\t\t\t\tactionsForClip = {\n\t\t\t\t\tknownActions: [action],\n\t\t\t\t\tactionByRoot: {}\n\t\t\t\t};\n\t\t\t\taction._byClipCacheIndex = 0;\n\t\t\t\tactionsByClip[clipUuid] = actionsForClip;\n\t\t\t} else {\n\t\t\t\tconst knownActions = actionsForClip.knownActions;\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push(action);\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push(action);\n\t\t\tactionsForClip.actionByRoot[rootUuid] = action;\n\t\t}\n\n\t\t_removeInactiveAction(action) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1],\n\t\t\t\t\t\tcacheIndex = action._cacheIndex;\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\tactions.pop();\n\t\t\taction._cacheIndex = null;\n\t\t\tconst clipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\t\tactionsForClip = actionsByClip[clipUuid],\n\t\t\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\t\t\t\t\tlastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n\t\t\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[byClipCacheIndex] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\t\t\taction._byClipCacheIndex = null;\n\t\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\t\t\trootUuid = (action._localRoot || this._root).uuid;\n\t\t\tdelete actionByRoot[rootUuid];\n\n\t\t\tif (knownActionsForClip.length === 0) {\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t}\n\n\t\t_removeInactiveBindingsForAction(action) {\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\tif (--binding.referenceCount === 0) {\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_lendAction(action) {\n\t\t\t// [ active actions |\tinactive actions\t]\n\t\t\t// [\tactive actions >| inactive actions ]\n\t\t\t//\t\t\t\t\t\t\t\t s\t\t\t\ta\n\t\t\t//\t\t\t\t\t\t\t\t\t<-swap->\n\t\t\t//\t\t\t\t\t\t\t\t a\t\t\t\ts\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveActions++,\n\t\t\t\t\t\tfirstInactiveAction = actions[lastActiveIndex];\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[lastActiveIndex] = action;\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = firstInactiveAction;\n\t\t}\n\n\t\t_takeBackAction(action) {\n\t\t\t// [\tactive actions\t| inactive actions ]\n\t\t\t// [ active actions |< inactive actions\t]\n\t\t\t//\t\t\t\ta\t\t\t\ts\n\t\t\t//\t\t\t\t <-swap->\n\t\t\t//\t\t\t\ts\t\t\t\ta\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveActions,\n\t\t\t\t\t\tlastActiveAction = actions[firstInactiveIndex];\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[firstInactiveIndex] = action;\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = lastActiveAction;\n\t\t} // Memory management for PropertyMixer objects\n\n\n\t\t_addInactiveBinding(binding, rootUuid, trackName) {\n\t\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindings = this._bindings;\n\t\t\tlet bindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName === undefined) {\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingByName;\n\t\t\t}\n\n\t\t\tbindingByName[trackName] = binding;\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push(binding);\n\t\t}\n\n\t\t_removeInactiveBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tpropBinding = binding.binding,\n\t\t\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\t\t\ttrackName = propBinding.path,\n\t\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid],\n\t\t\t\t\t\tlastInactiveBinding = bindings[bindings.length - 1],\n\t\t\t\t\t\tcacheIndex = binding._cacheIndex;\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[cacheIndex] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\t\t\tdelete bindingByName[trackName];\n\n\t\t\tif (Object.keys(bindingByName).length === 0) {\n\t\t\t\tdelete bindingsByRoot[rootUuid];\n\t\t\t}\n\t\t}\n\n\t\t_lendBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveBindings++,\n\t\t\t\t\t\tfirstInactiveBinding = bindings[lastActiveIndex];\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[lastActiveIndex] = binding;\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = firstInactiveBinding;\n\t\t}\n\n\t\t_takeBackBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveBindings,\n\t\t\t\t\t\tlastActiveBinding = bindings[firstInactiveIndex];\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[firstInactiveIndex] = binding;\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = lastActiveBinding;\n\t\t} // Memory management of Interpolants for weight and time scale\n\n\n\t\t_lendControlInterpolant() {\n\t\t\tconst interpolants = this._controlInterpolants,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants++;\n\t\t\tlet interpolant = interpolants[lastActiveIndex];\n\n\t\t\tif (interpolant === undefined) {\n\t\t\t\tinterpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[lastActiveIndex] = interpolant;\n\t\t\t}\n\n\t\t\treturn interpolant;\n\t\t}\n\n\t\t_takeBackControlInterpolant(interpolant) {\n\t\t\tconst interpolants = this._controlInterpolants,\n\t\t\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveControlInterpolants,\n\t\t\t\t\t\tlastActiveInterpolant = interpolants[firstInactiveIndex];\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[firstInactiveIndex] = interpolant;\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[prevIndex] = lastActiveInterpolant;\n\t\t} // return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\n\n\t\tclipAction(clip, optionalRoot, blendMode) {\n\t\t\tconst root = optionalRoot || this._root,\n\t\t\t\t\t\trootUuid = root.uuid;\n\t\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n\t\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\t\t\tconst actionsForClip = this._actionsByClip[clipUuid];\n\t\t\tlet prototypeAction = null;\n\n\t\t\tif (blendMode === undefined) {\n\t\t\t\tif (clipObject !== null) {\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\t\t\t\t} else {\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\tconst existingAction = actionsForClip.actionByRoot[rootUuid];\n\n\t\t\t\tif (existingAction !== undefined && existingAction.blendMode === blendMode) {\n\t\t\t\t\treturn existingAction;\n\t\t\t\t} // we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\n\n\t\t\t\tprototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n\t\t\t\tif (clipObject === null) clipObject = prototypeAction._clip;\n\t\t\t} // clip must be known when specified via string\n\n\n\t\t\tif (clipObject === null) return null; // allocate all resources required to run it\n\n\t\t\tconst newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n\n\t\t\tthis._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n\t\t\tthis._addInactiveAction(newAction, clipUuid, rootUuid);\n\n\t\t\treturn newAction;\n\t\t} // get an existing action\n\n\n\t\texistingAction(clip, optionalRoot) {\n\t\t\tconst root = optionalRoot || this._root,\n\t\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\t\tclipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n\t\t\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\treturn actionsForClip.actionByRoot[rootUuid] || null;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} // deactivates all previously scheduled actions\n\n\n\t\tstopAllAction() {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor (let i = nActions - 1; i >= 0; --i) {\n\t\t\t\tactions[i].stop();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // advance the time and update apply the animation\n\n\n\t\tupdate(deltaTime) {\n\t\t\tdeltaTime *= this.timeScale;\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\t\t\ttimeDirection = Math.sign(deltaTime),\n\t\t\t\t\t\taccuIndex = this._accuIndex ^= 1; // run active actions\n\n\t\t\tfor (let i = 0; i !== nActions; ++i) {\n\t\t\t\tconst action = actions[i];\n\n\t\t\t\taction._update(time, deltaTime, timeDirection, accuIndex);\n\t\t\t} // update scene graph\n\n\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor (let i = 0; i !== nBindings; ++i) {\n\t\t\t\tbindings[i].apply(accuIndex);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Allows you to seek to a specific time in an animation.\n\n\n\t\tsetTime(timeInSeconds) {\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\n\t\t\tfor (let i = 0; i < this._actions.length; i++) {\n\t\t\t\tthis._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\t\t\t}\n\n\t\t\treturn this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\t\t} // return this mixer's root target object\n\n\n\t\tgetRoot() {\n\t\t\treturn this._root;\n\t\t} // free all resources specific to a particular clip\n\n\n\t\tuncacheClip(clip) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\t\tactionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\t\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor (let i = 0, n = actionsToRemove.length; i !== n; ++i) {\n\t\t\t\t\tconst action = actionsToRemove[i];\n\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1];\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\t\t} // free all resources specific to a particular root target object\n\n\n\t\tuncacheRoot(root) {\n\t\t\tconst rootUuid = root.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor (const clipUuid in actionsByClip) {\n\t\t\t\tconst actionByRoot = actionsByClip[clipUuid].actionByRoot,\n\t\t\t\t\t\t\taction = actionByRoot[rootUuid];\n\n\t\t\t\tif (action !== undefined) {\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName !== undefined) {\n\t\t\t\tfor (const trackName in bindingByName) {\n\t\t\t\t\tconst binding = bindingByName[trackName];\n\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t} // remove a targeted clip from the cache\n\n\n\t\tuncacheAction(clip, optionalRoot) {\n\t\t\tconst action = this.existingAction(clip, optionalRoot);\n\n\t\t\tif (action !== null) {\n\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tAnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);\n\n\tclass Uniform {\n\t\tconstructor(value) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tconsole.warn('THREE.Uniform: Type parameter is no longer needed.');\n\t\t\t\tvalue = arguments[1];\n\t\t\t}\n\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n\t\t}\n\n\t}\n\n\tclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\t\tconstructor(array, stride, meshPerAttribute = 1) {\n\t\t\tsuper(array, stride);\n\t\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tconst ib = super.clone(data);\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn ib;\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tconst json = super.toJSON(data);\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn json;\n\t\t}\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\n\tclass GLBufferAttribute {\n\t\tconstructor(buffer, type, itemSize, elementSize, count) {\n\t\t\tthis.buffer = buffer;\n\t\t\tthis.type = type;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.elementSize = elementSize;\n\t\t\tthis.count = count;\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetBuffer(buffer) {\n\t\t\tthis.buffer = buffer;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetType(type, elementSize) {\n\t\t\tthis.type = type;\n\t\t\tthis.elementSize = elementSize;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetItemSize(itemSize) {\n\t\t\tthis.itemSize = itemSize;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetCount(count) {\n\t\t\tthis.count = count;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tGLBufferAttribute.prototype.isGLBufferAttribute = true;\n\n\tclass Raycaster {\n\t\tconstructor(origin, direction, near = 0, far = Infinity) {\n\t\t\tthis.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.camera = null;\n\t\t\tthis.layers = new Layers();\n\t\t\tthis.params = {\n\t\t\t\tMesh: {},\n\t\t\t\tLine: {\n\t\t\t\t\tthreshold: 1\n\t\t\t\t},\n\t\t\t\tLOD: {},\n\t\t\t\tPoints: {\n\t\t\t\t\tthreshold: 1\n\t\t\t\t},\n\t\t\t\tSprite: {}\n\t\t\t};\n\t\t}\n\n\t\tset(origin, direction) {\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\t\tthis.ray.set(origin, direction);\n\t\t}\n\n\t\tsetFromCamera(coords, camera) {\n\t\t\tif (camera && camera.isPerspectiveCamera) {\n\t\t\t\tthis.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n\t\t\t\tthis.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n\t\t\t\tthis.camera = camera;\n\t\t\t} else if (camera && camera.isOrthographicCamera) {\n\t\t\t\tthis.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n\n\t\t\t\tthis.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n\t\t\t\tthis.camera = camera;\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n\t\t\t}\n\t\t}\n\n\t\tintersectObject(object, recursive = false, intersects = []) {\n\t\t\tintersectObject(object, this, intersects, recursive);\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\n\t\tintersectObjects(objects, recursive = false, intersects = []) {\n\t\t\tfor (let i = 0, l = objects.length; i < l; i++) {\n\t\t\t\tintersectObject(objects[i], this, intersects, recursive);\n\t\t\t}\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\n\t}\n\n\tfunction ascSort(a, b) {\n\t\treturn a.distance - b.distance;\n\t}\n\n\tfunction intersectObject(object, raycaster, intersects, recursive) {\n\t\tif (object.layers.test(raycaster.layers)) {\n\t\t\tobject.raycast(raycaster, intersects);\n\t\t}\n\n\t\tif (recursive === true) {\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tintersectObject(children[i], raycaster, intersects, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tclass Spherical {\n\t\tconstructor(radius = 1, phi = 0, theta = 0) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi; // polar angle\n\n\t\t\tthis.theta = theta; // azimuthal angle\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(radius, phi, theta) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\t\t\treturn this;\n\t\t} // restrict phi to be betwee EPS and PI-EPS\n\n\n\t\tmakeSafe() {\n\t\t\tconst EPS = 0.000001;\n\t\t\tthis.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t}\n\n\t\tsetFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + y * y + z * z);\n\n\t\t\tif (this.radius === 0) {\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\t\t\t} else {\n\t\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\t\tthis.phi = Math.acos(clamp(y / this.radius, -1, 1));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t */\n\tclass Cylindrical {\n\t\tconstructor(radius = 1, theta = 0, y = 0) {\n\t\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\n\t\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\n\t\t\tthis.y = y; // height above the x-z plane\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(radius, theta, y) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t}\n\n\t\tsetFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + z * z);\n\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tconst _vector$4 = /*@__PURE__*/new Vector2();\n\n\tclass Box2 {\n\t\tconstructor(min = new Vector2(+Infinity, +Infinity), max = new Vector2(-Infinity, -Infinity)) {\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tset(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCenterAndSize(center, size) {\n\t\t\tconst halfSize = _vector$4.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.min.x = this.min.y = +Infinity;\n\t\t\tthis.max.x = this.max.y = -Infinity;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t}\n\n\t\tgetSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getSize() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n\t\t}\n\n\t\tcontainsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n\t\t}\n\n\t\tgetParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\t// using 4 splitting planes to rule out intersections\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\tconst clampedPoint = _vector$4.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t}\n\n\t\tintersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t}\n\n\t}\n\n\tBox2.prototype.isBox2 = true;\n\n\tconst _startP = /*@__PURE__*/new Vector3();\n\n\tconst _startEnd = /*@__PURE__*/new Vector3();\n\n\tclass Line3 {\n\t\tconstructor(start = new Vector3(), end = new Vector3()) {\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t}\n\n\t\tset(start, end) {\n\t\t\tthis.start.copy(start);\n\t\t\tthis.end.copy(end);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(line) {\n\t\t\tthis.start.copy(line.start);\n\t\t\tthis.end.copy(line.end);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.start, this.end).multiplyScalar(0.5);\n\t\t}\n\n\t\tdelta(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .delta() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.subVectors(this.end, this.start);\n\t\t}\n\n\t\tdistanceSq() {\n\t\t\treturn this.start.distanceToSquared(this.end);\n\t\t}\n\n\t\tdistance() {\n\t\t\treturn this.start.distanceTo(this.end);\n\t\t}\n\n\t\tat(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t}\n\n\t\tclosestPointToPointParameter(point, clampToLine) {\n\t\t\t_startP.subVectors(point, this.start);\n\n\t\t\t_startEnd.subVectors(this.end, this.start);\n\n\t\t\tconst startEnd2 = _startEnd.dot(_startEnd);\n\n\t\t\tconst startEnd_startP = _startEnd.dot(_startP);\n\n\t\t\tlet t = startEnd_startP / startEnd2;\n\n\t\t\tif (clampToLine) {\n\t\t\t\tt = clamp(t, 0, 1);\n\t\t\t}\n\n\t\t\treturn t;\n\t\t}\n\n\t\tclosestPointToPoint(point, clampToLine, target) {\n\t\t\tconst t = this.closestPointToPointParameter(point, clampToLine);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tthis.start.applyMatrix4(matrix);\n\t\t\tthis.end.applyMatrix4(matrix);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(line) {\n\t\t\treturn line.start.equals(this.start) && line.end.equals(this.end);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tclass ImmediateRenderObject extends Object3D {\n\t\tconstructor(material) {\n\t\t\tsuper();\n\t\t\tthis.material = material;\n\n\t\t\tthis.render = function ()\n\t\t\t/* renderCallback */\n\t\t\t{};\n\n\t\t\tthis.hasPositions = false;\n\t\t\tthis.hasNormals = false;\n\t\t\tthis.hasColors = false;\n\t\t\tthis.hasUvs = false;\n\t\t\tthis.positionArray = null;\n\t\t\tthis.normalArray = null;\n\t\t\tthis.colorArray = null;\n\t\t\tthis.uvArray = null;\n\t\t\tthis.count = 0;\n\t\t}\n\n\t}\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\tconst _vector$3 = /*@__PURE__*/new Vector3();\n\n\tclass SpotLightHelper extends Object3D {\n\t\tconstructor(light, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\t\tfor (let i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\t\tconst p1 = i / l * Math.PI * 2;\n\t\t\t\tconst p2 = j / l * Math.PI * 2;\n\t\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tthis.cone = new LineSegments(geometry, material);\n\t\t\tthis.add(this.cone);\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.cone.geometry.dispose();\n\t\t\tthis.cone.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tconst coneWidth = coneLength * Math.tan(this.light.angle);\n\t\t\tthis.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\t\t_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\tthis.cone.lookAt(_vector$3);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.cone.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.cone.material.color.copy(this.light.color);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tconst _vector$2 = /*@__PURE__*/new Vector3();\n\n\tconst _boneMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n\tclass SkeletonHelper extends LineSegments {\n\t\tconstructor(object) {\n\t\t\tconst bones = getBoneList(object);\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst vertices = [];\n\t\t\tconst colors = [];\n\t\t\tconst color1 = new Color(0, 0, 1);\n\t\t\tconst color2 = new Color(0, 1, 0);\n\n\t\t\tfor (let i = 0; i < bones.length; i++) {\n\t\t\t\tconst bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tcolors.push(color1.r, color1.g, color1.b);\n\t\t\t\t\tcolors.push(color2.r, color2.g, color2.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false,\n\t\t\t\ttransparent: true\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'SkeletonHelper';\n\t\t\tthis.isSkeletonHelper = true;\n\t\t\tthis.root = object;\n\t\t\tthis.bones = bones;\n\t\t\tthis.matrix = object.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tconst bones = this.bones;\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst position = geometry.getAttribute('position');\n\n\t\t\t_matrixWorldInv.copy(this.root.matrixWorld).invert();\n\n\t\t\tfor (let i = 0, j = 0; i < bones.length; i++) {\n\t\t\t\tconst bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n\n\t\t\t\t\t_vector$2.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);\n\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n\n\t\t\t\t\t_vector$2.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);\n\t\t\t\t\tj += 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tfunction getBoneList(object) {\n\t\tconst boneList = [];\n\n\t\tif (object && object.isBone) {\n\t\t\tboneList.push(object);\n\t\t}\n\n\t\tfor (let i = 0; i < object.children.length; i++) {\n\t\t\tboneList.push.apply(boneList, getBoneList(object.children[i]));\n\t\t}\n\n\t\treturn boneList;\n\t}\n\n\tclass PointLightHelper extends Mesh {\n\t\tconstructor(light, sphereSize, color) {\n\t\t\tconst geometry = new SphereGeometry(sphereSize, 4, 2);\n\t\t\tconst material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.color = color;\n\t\t\tthis.type = 'PointLightHelper';\n\t\t\tthis.matrix = this.light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.update();\n\t\t\t/*\n\t\t\t// TODO: delete this comment?\n\t\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\t\tconst d = light.distance;\n\t\t\tif ( d === 0.0 ) {\n\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t} else {\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t}\n\t\t\tthis.add( this.lightDistance );\n\t\t\t*/\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.material.color.copy(this.light.color);\n\t\t\t}\n\t\t\t/*\n\t\t\tconst d = this.light.distance;\n\t\t\t\tif ( d === 0.0 ) {\n\t\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.lightDistance.visible = true;\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t\t}\n\t\t\t*/\n\n\t\t}\n\n\t}\n\n\tconst _vector$1 = /*@__PURE__*/new Vector3();\n\n\tconst _color1 = /*@__PURE__*/new Color();\n\n\tconst _color2 = /*@__PURE__*/new Color();\n\n\tclass HemisphereLightHelper extends Object3D {\n\t\tconstructor(light, size, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tconst geometry = new OctahedronGeometry(size);\n\t\t\tgeometry.rotateY(Math.PI * 0.5);\n\t\t\tthis.material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tif (this.color === undefined) this.material.vertexColors = true;\n\t\t\tconst position = geometry.getAttribute('position');\n\t\t\tconst colors = new Float32Array(position.count * 3);\n\t\t\tgeometry.setAttribute('color', new BufferAttribute(colors, 3));\n\t\t\tthis.add(new Mesh(geometry, this.material));\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.children[0].geometry.dispose();\n\t\t\tthis.children[0].material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst mesh = this.children[0];\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tconst colors = mesh.geometry.getAttribute('color');\n\n\t\t\t\t_color1.copy(this.light.color);\n\n\t\t\t\t_color2.copy(this.light.groundColor);\n\n\t\t\t\tfor (let i = 0, l = colors.count; i < l; i++) {\n\t\t\t\t\tconst color = i < l / 2 ? _color1 : _color2;\n\t\t\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\t\t\t}\n\n\t\t\tmesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());\n\t\t}\n\n\t}\n\n\tclass GridHelper extends LineSegments {\n\t\tconstructor(size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888) {\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tconst center = divisions / 2;\n\t\t\tconst step = size / divisions;\n\t\t\tconst halfSize = size / 2;\n\t\t\tconst vertices = [],\n\t\t\t\t\t\tcolors = [];\n\n\t\t\tfor (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\t\t\t\tvertices.push(-halfSize, 0, k, halfSize, 0, k);\n\t\t\t\tvertices.push(k, 0, -halfSize, k, 0, halfSize);\n\t\t\t\tconst color = i === center ? color1 : color2;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'GridHelper';\n\t\t}\n\n\t}\n\n\tclass PolarGridHelper extends LineSegments {\n\t\tconstructor(radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888) {\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tconst vertices = [];\n\t\t\tconst colors = []; // create the radials\n\n\t\t\tfor (let i = 0; i <= radials; i++) {\n\t\t\t\tconst v = i / radials * (Math.PI * 2);\n\t\t\t\tconst x = Math.sin(v) * radius;\n\t\t\t\tconst z = Math.cos(v) * radius;\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\tconst color = i & 1 ? color1 : color2;\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t} // create the circles\n\n\n\t\t\tfor (let i = 0; i <= circles; i++) {\n\t\t\t\tconst color = i & 1 ? color1 : color2;\n\t\t\t\tconst r = radius - radius / circles * i;\n\n\t\t\t\tfor (let j = 0; j < divisions; j++) {\n\t\t\t\t\t// first vertex\n\t\t\t\t\tlet v = j / divisions * (Math.PI * 2);\n\t\t\t\t\tlet x = Math.sin(v) * r;\n\t\t\t\t\tlet z = Math.cos(v) * r;\n\t\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\t\tcolors.push(color.r, color.g, color.b); // second vertex\n\n\t\t\t\t\tv = (j + 1) / divisions * (Math.PI * 2);\n\t\t\t\t\tx = Math.sin(v) * r;\n\t\t\t\t\tz = Math.cos(v) * r;\n\t\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'PolarGridHelper';\n\t\t}\n\n\t}\n\n\tconst _v1 = /*@__PURE__*/new Vector3();\n\n\tconst _v2 = /*@__PURE__*/new Vector3();\n\n\tconst _v3 = /*@__PURE__*/new Vector3();\n\n\tclass DirectionalLightHelper extends Object3D {\n\t\tconstructor(light, size, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tif (size === undefined) size = 1;\n\t\t\tlet geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tthis.lightPlane = new Line(geometry, material);\n\t\t\tthis.add(this.lightPlane);\n\t\t\tgeometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\t\t\tthis.targetLine = new Line(geometry, material);\n\t\t\tthis.add(this.targetLine);\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.lightPlane.geometry.dispose();\n\t\t\tthis.lightPlane.material.dispose();\n\t\t\tthis.targetLine.geometry.dispose();\n\t\t\tthis.targetLine.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\t_v1.setFromMatrixPosition(this.light.matrixWorld);\n\n\t\t\t_v2.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\t_v3.subVectors(_v2, _v1);\n\n\t\t\tthis.lightPlane.lookAt(_v2);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.lightPlane.material.color.set(this.color);\n\t\t\t\tthis.targetLine.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.lightPlane.material.color.copy(this.light.color);\n\t\t\t\tthis.targetLine.material.color.copy(this.light.color);\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt(_v2);\n\t\t\tthis.targetLine.scale.z = _v3.length();\n\t\t}\n\n\t}\n\n\tconst _vector = /*@__PURE__*/new Vector3();\n\n\tconst _camera = /*@__PURE__*/new Camera();\n\t/**\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\n\tclass CameraHelper extends LineSegments {\n\t\tconstructor(camera) {\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tconst vertices = [];\n\t\t\tconst colors = [];\n\t\t\tconst pointMap = {}; // colors\n\n\t\t\tconst colorFrustum = new Color(0xffaa00);\n\t\t\tconst colorCone = new Color(0xff0000);\n\t\t\tconst colorUp = new Color(0x00aaff);\n\t\t\tconst colorTarget = new Color(0xffffff);\n\t\t\tconst colorCross = new Color(0x333333); // near\n\n\t\t\taddLine('n1', 'n2', colorFrustum);\n\t\t\taddLine('n2', 'n4', colorFrustum);\n\t\t\taddLine('n4', 'n3', colorFrustum);\n\t\t\taddLine('n3', 'n1', colorFrustum); // far\n\n\t\t\taddLine('f1', 'f2', colorFrustum);\n\t\t\taddLine('f2', 'f4', colorFrustum);\n\t\t\taddLine('f4', 'f3', colorFrustum);\n\t\t\taddLine('f3', 'f1', colorFrustum); // sides\n\n\t\t\taddLine('n1', 'f1', colorFrustum);\n\t\t\taddLine('n2', 'f2', colorFrustum);\n\t\t\taddLine('n3', 'f3', colorFrustum);\n\t\t\taddLine('n4', 'f4', colorFrustum); // cone\n\n\t\t\taddLine('p', 'n1', colorCone);\n\t\t\taddLine('p', 'n2', colorCone);\n\t\t\taddLine('p', 'n3', colorCone);\n\t\t\taddLine('p', 'n4', colorCone); // up\n\n\t\t\taddLine('u1', 'u2', colorUp);\n\t\t\taddLine('u2', 'u3', colorUp);\n\t\t\taddLine('u3', 'u1', colorUp); // target\n\n\t\t\taddLine('c', 't', colorTarget);\n\t\t\taddLine('p', 'c', colorCross); // cross\n\n\t\t\taddLine('cn1', 'cn2', colorCross);\n\t\t\taddLine('cn3', 'cn4', colorCross);\n\t\t\taddLine('cf1', 'cf2', colorCross);\n\t\t\taddLine('cf3', 'cf4', colorCross);\n\n\t\t\tfunction addLine(a, b, color) {\n\t\t\t\taddPoint(a, color);\n\t\t\t\taddPoint(b, color);\n\t\t\t}\n\n\t\t\tfunction addPoint(id, color) {\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\n\t\t\t\tif (pointMap[id] === undefined) {\n\t\t\t\t\tpointMap[id] = [];\n\t\t\t\t}\n\n\t\t\t\tpointMap[id].push(vertices.length / 3 - 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'CameraHelper';\n\t\t\tthis.camera = camera;\n\t\t\tif (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();\n\t\t\tthis.matrix = camera.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.pointMap = pointMap;\n\t\t\tthis.update();\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst pointMap = this.pointMap;\n\t\t\tconst w = 1,\n\t\t\t\t\t\th = 1; // we need just camera projection matrix inverse\n\t\t\t// world matrix must be identity\n\n\t\t\t_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target\n\n\n\t\t\tsetPoint('c', pointMap, geometry, _camera, 0, 0, -1);\n\t\t\tsetPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near\n\n\t\t\tsetPoint('n1', pointMap, geometry, _camera, -w, -h, -1);\n\t\t\tsetPoint('n2', pointMap, geometry, _camera, w, -h, -1);\n\t\t\tsetPoint('n3', pointMap, geometry, _camera, -w, h, -1);\n\t\t\tsetPoint('n4', pointMap, geometry, _camera, w, h, -1); // far\n\n\t\t\tsetPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\n\t\t\tsetPoint('f2', pointMap, geometry, _camera, w, -h, 1);\n\t\t\tsetPoint('f3', pointMap, geometry, _camera, -w, h, 1);\n\t\t\tsetPoint('f4', pointMap, geometry, _camera, w, h, 1); // up\n\n\t\t\tsetPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross\n\n\t\t\tsetPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\n\t\t\tsetPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n\t\t\tsetPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\n\t\t\tsetPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n\t\t\tsetPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);\n\t\t\tsetPoint('cn2', pointMap, geometry, _camera, w, 0, -1);\n\t\t\tsetPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);\n\t\t\tsetPoint('cn4', pointMap, geometry, _camera, 0, h, -1);\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t}\n\n\tfunction setPoint(point, pointMap, geometry, camera, x, y, z) {\n\t\t_vector.set(x, y, z).unproject(camera);\n\n\t\tconst points = pointMap[point];\n\n\t\tif (points !== undefined) {\n\t\t\tconst position = geometry.getAttribute('position');\n\n\t\t\tfor (let i = 0, l = points.length; i < l; i++) {\n\t\t\t\tposition.setXYZ(points[i], _vector.x, _vector.y, _vector.z);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst _box = /*@__PURE__*/new Box3();\n\n\tclass BoxHelper extends LineSegments {\n\t\tconstructor(object, color = 0xffff00) {\n\t\t\tconst indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tconst positions = new Float32Array(8 * 3);\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.object = object;\n\t\t\tthis.type = 'BoxHelper';\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.update();\n\t\t}\n\n\t\tupdate(object) {\n\t\t\tif (object !== undefined) {\n\t\t\t\tconsole.warn('THREE.BoxHelper: .update() has no longer arguments.');\n\t\t\t}\n\n\t\t\tif (this.object !== undefined) {\n\t\t\t\t_box.setFromObject(this.object);\n\t\t\t}\n\n\t\t\tif (_box.isEmpty()) return;\n\t\t\tconst min = _box.min;\n\t\t\tconst max = _box.max;\n\t\t\t/*\n\t\t\t\t5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\t\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tconst position = this.geometry.attributes.position;\n\t\t\tconst array = position.array;\n\t\t\tarray[0] = max.x;\n\t\t\tarray[1] = max.y;\n\t\t\tarray[2] = max.z;\n\t\t\tarray[3] = min.x;\n\t\t\tarray[4] = max.y;\n\t\t\tarray[5] = max.z;\n\t\t\tarray[6] = min.x;\n\t\t\tarray[7] = min.y;\n\t\t\tarray[8] = max.z;\n\t\t\tarray[9] = max.x;\n\t\t\tarray[10] = min.y;\n\t\t\tarray[11] = max.z;\n\t\t\tarray[12] = max.x;\n\t\t\tarray[13] = max.y;\n\t\t\tarray[14] = min.z;\n\t\t\tarray[15] = min.x;\n\t\t\tarray[16] = max.y;\n\t\t\tarray[17] = min.z;\n\t\t\tarray[18] = min.x;\n\t\t\tarray[19] = min.y;\n\t\t\tarray[20] = min.z;\n\t\t\tarray[21] = max.x;\n\t\t\tarray[22] = min.y;\n\t\t\tarray[23] = min.z;\n\t\t\tposition.needsUpdate = true;\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t}\n\n\t\tsetFromObject(object) {\n\t\t\tthis.object = object;\n\t\t\tthis.update();\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tLineSegments.prototype.copy.call(this, source);\n\t\t\tthis.object = source.object;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Box3Helper extends LineSegments {\n\t\tconstructor(box, color = 0xffff00) {\n\t\t\tconst indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tconst positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.box = box;\n\t\t\tthis.type = 'Box3Helper';\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tconst box = this.box;\n\t\t\tif (box.isEmpty()) return;\n\t\t\tbox.getCenter(this.position);\n\t\t\tbox.getSize(this.scale);\n\t\t\tthis.scale.multiplyScalar(0.5);\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tclass PlaneHelper extends Line {\n\t\tconstructor(plane, size = 1, hex = 0xffff00) {\n\t\t\tconst color = hex;\n\t\t\tconst positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.computeBoundingSphere();\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.type = 'PlaneHelper';\n\t\t\tthis.plane = plane;\n\t\t\tthis.size = size;\n\t\t\tconst positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n\t\t\tconst geometry2 = new BufferGeometry();\n\t\t\tgeometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\t\t\tgeometry2.computeBoundingSphere();\n\t\t\tthis.add(new Mesh(geometry2, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\topacity: 0.2,\n\t\t\t\ttransparent: true,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false\n\t\t\t})));\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tlet scale = -this.plane.constant;\n\t\t\tif (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n\t\t\tthis.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n\t\t\tthis.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\t\tthis.lookAt(this.plane.normal);\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tconst _axis = /*@__PURE__*/new Vector3();\n\n\tlet _lineGeometry, _coneGeometry;\n\n\tclass ArrowHelper extends Object3D {\n\t\t// dir is assumed to be normalized\n\t\tconstructor(dir = new Vector3(0, 0, 1), origin = new Vector3(0, 0, 0), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ArrowHelper';\n\n\t\t\tif (_lineGeometry === undefined) {\n\t\t\t\t_lineGeometry = new BufferGeometry();\n\n\t\t\t\t_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n\t\t\t\t_coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);\n\n\t\t\t\t_coneGeometry.translate(0, -0.5, 0);\n\t\t\t}\n\n\t\t\tthis.position.copy(origin);\n\t\t\tthis.line = new Line(_lineGeometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.line.matrixAutoUpdate = false;\n\t\t\tthis.add(this.line);\n\t\t\tthis.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.cone.matrixAutoUpdate = false;\n\t\t\tthis.add(this.cone);\n\t\t\tthis.setDirection(dir);\n\t\t\tthis.setLength(length, headLength, headWidth);\n\t\t}\n\n\t\tsetDirection(dir) {\n\t\t\t// dir is assumed to be normalized\n\t\t\tif (dir.y > 0.99999) {\n\t\t\t\tthis.quaternion.set(0, 0, 0, 1);\n\t\t\t} else if (dir.y < -0.99999) {\n\t\t\t\tthis.quaternion.set(1, 0, 0, 0);\n\t\t\t} else {\n\t\t\t\t_axis.set(dir.z, 0, -dir.x).normalize();\n\n\t\t\t\tconst radians = Math.acos(dir.y);\n\t\t\t\tthis.quaternion.setFromAxisAngle(_axis, radians);\n\t\t\t}\n\t\t}\n\n\t\tsetLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {\n\t\t\tthis.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n\n\t\t\tthis.line.updateMatrix();\n\t\t\tthis.cone.scale.set(headWidth, headLength, headWidth);\n\t\t\tthis.cone.position.y = length;\n\t\t\tthis.cone.updateMatrix();\n\t\t}\n\n\t\tsetColor(color) {\n\t\t\tthis.line.material.color.set(color);\n\t\t\tthis.cone.material.color.set(color);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source, false);\n\t\t\tthis.line.copy(source.line);\n\t\t\tthis.cone.copy(source.cone);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AxesHelper extends LineSegments {\n\t\tconstructor(size = 1) {\n\t\t\tconst vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n\t\t\tconst colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'AxesHelper';\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t}\n\n\tconst _floatView = new Float32Array(1);\n\n\tconst _int32View = new Int32Array(_floatView.buffer);\n\n\tclass DataUtils {\n\t\t// Converts float32 to float16 (stored as uint16 value).\n\t\tstatic toHalfFloat(val) {\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t* used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t* by James Tursa?s half-precision code. */\n\t\t\t_floatView[0] = val;\n\t\t\tconst x = _int32View[0];\n\t\t\tlet bits = x >> 16 & 0x8000;\n\t\t\t/* Get the sign */\n\n\t\t\tlet m = x >> 12 & 0x07ff;\n\t\t\t/* Keep one extra bit for rounding */\n\n\t\t\tconst e = x >> 23 & 0xff;\n\t\t\t/* Using int is faster here */\n\n\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t* half, return signed zero. */\n\n\t\t\tif (e < 103) return bits;\n\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\n\t\t\tif (e > 142) {\n\t\t\t\tbits |= 0x7c00;\n\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\n\t\t\t\tbits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n\t\t\t\treturn bits;\n\t\t\t}\n\t\t\t/* If exponent underflows but not too much, return a denormal */\n\n\n\t\t\tif (e < 113) {\n\t\t\t\tm |= 0x0800;\n\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t* to 1, which is OK. */\n\n\t\t\t\tbits |= (m >> 114 - e) + (m >> 113 - e & 1);\n\t\t\t\treturn bits;\n\t\t\t}\n\n\t\t\tbits |= e - 112 << 10 | m >> 1;\n\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t* the exponent, which is OK. */\n\n\t\t\tbits += m & 1;\n\t\t\treturn bits;\n\t\t}\n\n\t}\n\n\tconst LOD_MIN = 4;\n\tconst LOD_MAX = 8;\n\tconst SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\n\tconst EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n\tconst TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\n\tconst MAX_SAMPLES = 20;\n\tconst ENCODINGS = {\n\t\t[LinearEncoding]: 0,\n\t\t[sRGBEncoding]: 1,\n\t\t[RGBEEncoding]: 2,\n\t\t[RGBM7Encoding]: 3,\n\t\t[RGBM16Encoding]: 4,\n\t\t[RGBDEncoding]: 5,\n\t\t[GammaEncoding]: 6\n\t};\n\tconst backgroundMaterial = new MeshBasicMaterial({\n\t\tside: BackSide,\n\t\tdepthWrite: false,\n\t\tdepthTest: false\n\t});\n\tconst backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);\n\n\tconst _flatCamera = /*@__PURE__*/new OrthographicCamera();\n\n\tconst {\n\t\t_lodPlanes,\n\t\t_sizeLods,\n\t\t_sigmas\n\t} = /*@__PURE__*/_createPlanes();\n\n\tconst _clearColor = /*@__PURE__*/new Color();\n\n\tlet _oldTarget = null; // Golden Ratio\n\n\tconst PHI = (1 + Math.sqrt(5)) / 2;\n\tconst INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\n\tconst _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];\n\t/**\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t *\n\t * Paper: Fast, Accurate Image-Based Lighting\n\t * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n\t*/\n\n\tfunction convertLinearToRGBE(color) {\n\t\tconst maxComponent = Math.max(color.r, color.g, color.b);\n\t\tconst fExp = Math.min(Math.max(Math.ceil(Math.log2(maxComponent)), -128.0), 127.0);\n\t\tcolor.multiplyScalar(Math.pow(2.0, -fExp));\n\t\tconst alpha = (fExp + 128.0) / 255.0;\n\t\treturn alpha;\n\t}\n\n\tclass PMREMGenerator {\n\t\tconstructor(renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t\tthis._pingPongRenderTarget = null;\n\t\t\tthis._blurMaterial = _getBlurShader(MAX_SAMPLES);\n\t\t\tthis._equirectShader = null;\n\t\t\tthis._cubemapShader = null;\n\n\t\t\tthis._compileMaterial(this._blurMaterial);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\n\n\t\tfromScene(scene, sigma = 0, near = 0.1, far = 100) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\n\t\t\tthis._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\n\n\t\t\tif (sigma > 0) {\n\t\t\t\tthis._blur(cubeUVRenderTarget, 0, 0, sigma);\n\t\t\t}\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\n\n\t\tfromEquirectangular(equirectangular) {\n\t\t\treturn this._fromTexture(equirectangular);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\n\n\t\tfromCubemap(cubemap) {\n\t\t\treturn this._fromTexture(cubemap);\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\n\n\t\tcompileCubemapShader() {\n\t\t\tif (this._cubemapShader === null) {\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t\tthis._compileMaterial(this._cubemapShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\n\n\t\tcompileEquirectangularShader() {\n\t\t\tif (this._equirectShader === null) {\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t\tthis._compileMaterial(this._equirectShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\n\n\t\tdispose() {\n\t\t\tthis._blurMaterial.dispose();\n\n\t\t\tif (this._cubemapShader !== null) this._cubemapShader.dispose();\n\t\t\tif (this._equirectShader !== null) this._equirectShader.dispose();\n\n\t\t\tfor (let i = 0; i < _lodPlanes.length; i++) {\n\t\t\t\t_lodPlanes[i].dispose();\n\t\t\t}\n\t\t} // private interface\n\n\n\t\t_cleanup(outputTarget) {\n\t\t\tthis._pingPongRenderTarget.dispose();\n\n\t\t\tthis._renderer.setRenderTarget(_oldTarget);\n\n\t\t\toutputTarget.scissorTest = false;\n\n\t\t\t_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n\t\t}\n\n\t\t_fromTexture(texture) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tconst cubeUVRenderTarget = this._allocateTargets(texture);\n\n\t\t\tthis._textureToCubeUV(texture, cubeUVRenderTarget);\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\n\t\t_allocateTargets(texture) {\n\t\t\t// warning: null texture is valid\n\t\t\tconst params = {\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tformat: RGBEFormat,\n\t\t\t\tencoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,\n\t\t\t\tdepthBuffer: false\n\t\t\t};\n\n\t\t\tconst cubeUVRenderTarget = _createRenderTarget(params);\n\n\t\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget(params);\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\n\t\t_compileMaterial(material) {\n\t\t\tconst tmpMesh = new Mesh(_lodPlanes[0], material);\n\n\t\t\tthis._renderer.compile(tmpMesh, _flatCamera);\n\t\t}\n\n\t\t_sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\n\t\t\tconst fov = 90;\n\t\t\tconst aspect = 1;\n\t\t\tconst cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tconst upSign = [1, -1, 1, 1, 1, 1];\n\t\t\tconst forwardSign = [1, 1, 1, -1, -1, -1];\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst originalAutoClear = renderer.autoClear;\n\t\t\tconst outputEncoding = renderer.outputEncoding;\n\t\t\tconst toneMapping = renderer.toneMapping;\n\t\t\trenderer.getClearColor(_clearColor);\n\t\t\trenderer.toneMapping = NoToneMapping;\n\t\t\trenderer.outputEncoding = LinearEncoding;\n\t\t\trenderer.autoClear = false;\n\t\t\tlet useSolidColor = false;\n\t\t\tconst background = scene.background;\n\n\t\t\tif (background) {\n\t\t\t\tif (background.isColor) {\n\t\t\t\t\tbackgroundMaterial.color.copy(background).convertSRGBToLinear();\n\t\t\t\t\tscene.background = null;\n\t\t\t\t\tconst alpha = convertLinearToRGBE(backgroundMaterial.color);\n\t\t\t\t\tbackgroundMaterial.opacity = alpha;\n\t\t\t\t\tuseSolidColor = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbackgroundMaterial.color.copy(_clearColor).convertSRGBToLinear();\n\t\t\t\tconst alpha = convertLinearToRGBE(backgroundMaterial.color);\n\t\t\t\tbackgroundMaterial.opacity = alpha;\n\t\t\t\tuseSolidColor = true;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst col = i % 3;\n\n\t\t\t\tif (col == 0) {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(forwardSign[i], 0, 0);\n\t\t\t\t} else if (col == 1) {\n\t\t\t\t\tcubeCamera.up.set(0, 0, upSign[i]);\n\t\t\t\t\tcubeCamera.lookAt(0, forwardSign[i], 0);\n\t\t\t\t} else {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(0, 0, forwardSign[i]);\n\t\t\t\t}\n\n\t\t\t\t_setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\n\n\t\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\n\t\t\t\tif (useSolidColor) {\n\t\t\t\t\trenderer.render(backgroundBox, cubeCamera);\n\t\t\t\t}\n\n\t\t\t\trenderer.render(scene, cubeCamera);\n\t\t\t}\n\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.outputEncoding = outputEncoding;\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t}\n\n\t\t_textureToCubeUV(texture, cubeUVRenderTarget) {\n\t\t\tconst renderer = this._renderer;\n\n\t\t\tif (texture.isCubeTexture) {\n\t\t\t\tif (this._cubemapShader == null) {\n\t\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._equirectShader == null) {\n\t\t\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\t\tconst mesh = new Mesh(_lodPlanes[0], material);\n\t\t\tconst uniforms = material.uniforms;\n\t\t\tuniforms['envMap'].value = texture;\n\n\t\t\tif (!texture.isCubeTexture) {\n\t\t\t\tuniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);\n\t\t\t}\n\n\t\t\tuniforms['inputEncoding'].value = ENCODINGS[texture.encoding];\n\t\t\tuniforms['outputEncoding'].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];\n\n\t\t\t_setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\n\n\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\t\t\trenderer.render(mesh, _flatCamera);\n\t\t}\n\n\t\t_applyPMREM(cubeUVRenderTarget) {\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst autoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tfor (let i = 1; i < TOTAL_LODS; i++) {\n\t\t\t\tconst sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);\n\t\t\t\tconst poleAxis = _axisDirections[(i - 1) % _axisDirections.length];\n\n\t\t\t\tthis._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n\t\t\t}\n\n\t\t\trenderer.autoClear = autoClear;\n\t\t}\n\t\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\n\n\t\t_blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n\t\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\t\tthis._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n\n\t\t\tthis._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n\t\t}\n\n\t\t_halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst blurMaterial = this._blurMaterial;\n\n\t\t\tif (direction !== 'latitudinal' && direction !== 'longitudinal') {\n\t\t\t\tconsole.error('blur direction must be either latitudinal or longitudinal!');\n\t\t\t} // Number of standard deviations at which to cut off the discrete approximation.\n\n\n\t\t\tconst STANDARD_DEVIATIONS = 3;\n\t\t\tconst blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);\n\t\t\tconst blurUniforms = blurMaterial.uniforms;\n\t\t\tconst pixels = _sizeLods[lodIn] - 1;\n\t\t\tconst radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n\t\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\t\tconst samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n\n\t\t\tif (samples > MAX_SAMPLES) {\n\t\t\t\tconsole.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);\n\t\t\t}\n\n\t\t\tconst weights = [];\n\t\t\tlet sum = 0;\n\n\t\t\tfor (let i = 0; i < MAX_SAMPLES; ++i) {\n\t\t\t\tconst x = i / sigmaPixels;\n\t\t\t\tconst weight = Math.exp(-x * x / 2);\n\t\t\t\tweights.push(weight);\n\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tsum += weight;\n\t\t\t\t} else if (i < samples) {\n\t\t\t\t\tsum += 2 * weight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < weights.length; i++) {\n\t\t\t\tweights[i] = weights[i] / sum;\n\t\t\t}\n\n\t\t\tblurUniforms['envMap'].value = targetIn.texture;\n\t\t\tblurUniforms['samples'].value = samples;\n\t\t\tblurUniforms['weights'].value = weights;\n\t\t\tblurUniforms['latitudinal'].value = direction === 'latitudinal';\n\n\t\t\tif (poleAxis) {\n\t\t\t\tblurUniforms['poleAxis'].value = poleAxis;\n\t\t\t}\n\n\t\t\tblurUniforms['dTheta'].value = radiansPerPixel;\n\t\t\tblurUniforms['mipInt'].value = LOD_MAX - lodIn;\n\t\t\tblurUniforms['inputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tblurUniforms['outputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tconst outputSize = _sizeLods[lodOut];\n\t\t\tconst x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\n\t\t\tconst y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\n\n\t\t\t_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n\n\t\t\trenderer.setRenderTarget(targetOut);\n\t\t\trenderer.render(blurMesh, _flatCamera);\n\t\t}\n\n\t}\n\n\tfunction _isLDR(texture) {\n\t\tif (texture === undefined || texture.type !== UnsignedByteType) return false;\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\t}\n\n\tfunction _createPlanes() {\n\t\tconst _lodPlanes = [];\n\t\tconst _sizeLods = [];\n\t\tconst _sigmas = [];\n\t\tlet lod = LOD_MAX;\n\n\t\tfor (let i = 0; i < TOTAL_LODS; i++) {\n\t\t\tconst sizeLod = Math.pow(2, lod);\n\n\t\t\t_sizeLods.push(sizeLod);\n\n\t\t\tlet sigma = 1.0 / sizeLod;\n\n\t\t\tif (i > LOD_MAX - LOD_MIN) {\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\n\t\t\t} else if (i == 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\t_sigmas.push(sigma);\n\n\t\t\tconst texelSize = 1.0 / (sizeLod - 1);\n\t\t\tconst min = -texelSize / 2;\n\t\t\tconst max = 1 + texelSize / 2;\n\t\t\tconst uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n\t\t\tconst cubeFaces = 6;\n\t\t\tconst vertices = 6;\n\t\t\tconst positionSize = 3;\n\t\t\tconst uvSize = 2;\n\t\t\tconst faceIndexSize = 1;\n\t\t\tconst position = new Float32Array(positionSize * vertices * cubeFaces);\n\t\t\tconst uv = new Float32Array(uvSize * vertices * cubeFaces);\n\t\t\tconst faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n\n\t\t\tfor (let face = 0; face < cubeFaces; face++) {\n\t\t\t\tconst x = face % 3 * 2 / 3 - 1;\n\t\t\t\tconst y = face > 2 ? 0 : -1;\n\t\t\t\tconst coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n\t\t\t\tposition.set(coordinates, positionSize * vertices * face);\n\t\t\t\tuv.set(uv1, uvSize * vertices * face);\n\t\t\t\tconst fill = [face, face, face, face, face, face];\n\t\t\t\tfaceIndex.set(fill, faceIndexSize * vertices * face);\n\t\t\t}\n\n\t\t\tconst planes = new BufferGeometry();\n\t\t\tplanes.setAttribute('position', new BufferAttribute(position, positionSize));\n\t\t\tplanes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n\t\t\tplanes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n\n\t\t\t_lodPlanes.push(planes);\n\n\t\t\tif (lod > LOD_MIN) {\n\t\t\t\tlod--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t_lodPlanes,\n\t\t\t_sizeLods,\n\t\t\t_sigmas\n\t\t};\n\t}\n\n\tfunction _createRenderTarget(params) {\n\t\tconst cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\t}\n\n\tfunction _setViewport(target, x, y, width, height) {\n\t\ttarget.viewport.set(x, y, width, height);\n\t\ttarget.scissor.set(x, y, width, height);\n\t}\n\n\tfunction _getBlurShader(maxSamples) {\n\t\tconst weights = new Float32Array(maxSamples);\n\t\tconst poleAxis = new Vector3(0, 1, 0);\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'SphericalGaussianBlur',\n\t\t\tdefines: {\n\t\t\t\t'n': maxSamples\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'samples': {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\t'weights': {\n\t\t\t\t\tvalue: weights\n\t\t\t\t},\n\t\t\t\t'latitudinal': {\n\t\t\t\t\tvalue: false\n\t\t\t\t},\n\t\t\t\t'dTheta': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'mipInt': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'poleAxis': {\n\t\t\t\t\tvalue: poleAxis\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getEquirectShader() {\n\t\tconst texelSize = new Vector2(1, 1);\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'EquirectangularToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'texelSize': {\n\t\t\t\t\tvalue: texelSize\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCubemapShader() {\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'CubemapToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t${_getEncodings()}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCommonVertexShader() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`\n\t\t);\n\t}\n\n\tfunction _getEncodings() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t`\n\t\t);\n\t}\n\n\tconst LineStrip = 0;\n\tconst LinePieces = 1;\n\tconst NoColors = 0;\n\tconst FaceColors = 1;\n\tconst VertexColors = 2;\n\tfunction MeshFaceMaterial(materials) {\n\t\tconsole.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\n\t\treturn materials;\n\t}\n\tfunction MultiMaterial(materials = []) {\n\t\tconsole.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\n\t\tmaterials.clone = function () {\n\t\t\treturn materials.slice();\n\t\t};\n\n\t\treturn materials;\n\t}\n\tfunction PointCloud(geometry, material) {\n\t\tconsole.warn('THREE.PointCloud has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction Particle(material) {\n\t\tconsole.warn('THREE.Particle has been renamed to THREE.Sprite.');\n\t\treturn new Sprite(material);\n\t}\n\tfunction ParticleSystem(geometry, material) {\n\t\tconsole.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction PointCloudMaterial(parameters) {\n\t\tconsole.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleBasicMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleSystemMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction Vertex(x, y, z) {\n\t\tconsole.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n\t\treturn new Vector3(x, y, z);\n\t} //\n\n\tfunction DynamicBufferAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');\n\t\treturn new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);\n\t}\n\tfunction Int8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');\n\t\treturn new Int8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');\n\t\treturn new Uint8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8ClampedAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');\n\t\treturn new Uint8ClampedBufferAttribute(array, itemSize);\n\t}\n\tfunction Int16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');\n\t\treturn new Int16BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');\n\t\treturn new Uint16BufferAttribute(array, itemSize);\n\t}\n\tfunction Int32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');\n\t\treturn new Int32BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');\n\t\treturn new Uint32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');\n\t\treturn new Float32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float64Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');\n\t\treturn new Float64BufferAttribute(array, itemSize);\n\t} //\n\n\tCurve.create = function (construct, getPoint) {\n\t\tconsole.log('THREE.Curve.create() has been deprecated');\n\t\tconstruct.prototype = Object.create(Curve.prototype);\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\t\treturn construct;\n\t}; //\n\n\n\tPath.prototype.fromPoints = function (points) {\n\t\tconsole.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\n\t\treturn this.setFromPoints(points);\n\t}; //\n\n\n\tfunction AxisHelper(size) {\n\t\tconsole.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\n\t\treturn new AxesHelper(size);\n\t}\n\tfunction BoundingBoxHelper(object, color) {\n\t\tconsole.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');\n\t\treturn new BoxHelper(object, color);\n\t}\n\tfunction EdgesHelper(object, hex) {\n\t\tconsole.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\n\t\treturn new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\t\tconsole.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\t\tconsole.error('THREE.SkeletonHelper: update() no longer needs to be called.');\n\t};\n\n\tfunction WireframeHelper(object, hex) {\n\t\tconsole.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\n\t\treturn new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t} //\n\n\tLoader.prototype.extractUrlBase = function (url) {\n\t\tconsole.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');\n\t\treturn LoaderUtils.extractUrlBase(url);\n\t};\n\n\tLoader.Handlers = {\n\t\tadd: function ()\n\t\t/* regex, loader */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');\n\t\t},\n\t\tget: function ()\n\t\t/* file */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');\n\t\t}\n\t};\n\tfunction XHRLoader(manager) {\n\t\tconsole.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\n\t\treturn new FileLoader(manager);\n\t}\n\tfunction BinaryTextureLoader(manager) {\n\t\tconsole.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\n\t\treturn new DataTextureLoader(manager);\n\t} //\n\n\tBox2.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox2.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox2.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox2.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tBox3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox3.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox3.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox3.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t};\n\n\tBox3.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tSphere.prototype.empty = function () {\n\t\tconsole.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t}; //\n\n\n\tFrustum.prototype.setFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');\n\t\treturn this.setFromProjectionMatrix(m);\n\t}; //\n\n\n\tLine3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Line3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t}; //\n\n\n\tMatrix3.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix3.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n\t\treturn vector.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.multiplyVector3Array = function ()\n\t/* a */\n\t{\n\t\tconsole.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');\n\t\treturn attribute.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.applyToVector3Array = function ()\n\t/* array, offset, length */\n\t{\n\t\tconsole.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tMatrix4.prototype.extractPosition = function (m) {\n\t\tconsole.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n\t\treturn this.copyPosition(m);\n\t};\n\n\tMatrix4.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix4.prototype.getPosition = function () {\n\t\tconsole.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n\t\treturn new Vector3().setFromMatrixColumn(this, 3);\n\t};\n\n\tMatrix4.prototype.setRotationFromQuaternion = function (q) {\n\t\tconsole.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n\t\treturn this.makeRotationFromQuaternion(q);\n\t};\n\n\tMatrix4.prototype.multiplyToArray = function () {\n\t\tconsole.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\n\t};\n\n\tMatrix4.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector4 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector3Array = function ()\n\t/* a */\n\t{\n\t\tconsole.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateAxis = function (v) {\n\t\tconsole.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n\t\tv.transformDirection(this);\n\t};\n\n\tMatrix4.prototype.crossVector = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.translate = function () {\n\t\tconsole.error('THREE.Matrix4: .translate() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateX = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateX() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateY = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateY() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateZ = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateZ() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateByAxis = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n\t};\n\n\tMatrix4.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');\n\t\treturn attribute.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.applyToVector3Array = function ()\n\t/* array, offset, length */\n\t{\n\t\tconsole.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.makeFrustum = function (left, right, bottom, top, near, far) {\n\t\tconsole.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');\n\t\treturn this.makePerspective(left, right, top, bottom, near, far);\n\t};\n\n\tMatrix4.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tPlane.prototype.isIntersectionLine = function (line) {\n\t\tconsole.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n\t\treturn this.intersectsLine(line);\n\t}; //\n\n\n\tQuaternion.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n\t\treturn vector.applyQuaternion(this);\n\t};\n\n\tQuaternion.prototype.inverse = function () {\n\t\tconsole.warn('THREE.Quaternion: .inverse() has been renamed to invert().');\n\t\treturn this.invert();\n\t}; //\n\n\n\tRay.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tRay.prototype.isIntersectionPlane = function (plane) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n\t\treturn this.intersectsPlane(plane);\n\t};\n\n\tRay.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t}; //\n\n\n\tTriangle.prototype.area = function () {\n\t\tconsole.warn('THREE.Triangle: .area() has been renamed to .getArea().');\n\t\treturn this.getArea();\n\t};\n\n\tTriangle.prototype.barycoordFromPoint = function (point, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn this.getBarycoord(point, target);\n\t};\n\n\tTriangle.prototype.midpoint = function (target) {\n\t\tconsole.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');\n\t\treturn this.getMidpoint(target);\n\t};\n\n\tTriangle.prototypenormal = function (target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn this.getNormal(target);\n\t};\n\n\tTriangle.prototype.plane = function (target) {\n\t\tconsole.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');\n\t\treturn this.getPlane(target);\n\t};\n\n\tTriangle.barycoordFromPoint = function (point, a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn Triangle.getBarycoord(point, a, b, c, target);\n\t};\n\n\tTriangle.normal = function (a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn Triangle.getNormal(a, b, c, target);\n\t}; //\n\n\n\tShape.prototype.extractAllPoints = function (divisions) {\n\t\tconsole.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');\n\t\treturn this.extractPoints(divisions);\n\t};\n\n\tShape.prototype.extrude = function (options) {\n\t\tconsole.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\n\t\treturn new ExtrudeGeometry(this, options);\n\t};\n\n\tShape.prototype.makeGeometry = function (options) {\n\t\tconsole.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\n\t\treturn new ShapeGeometry(this, options);\n\t}; //\n\n\n\tVector2.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector2.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector2.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector3.prototype.setEulerFromRotationMatrix = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n\t};\n\n\tVector3.prototype.setEulerFromQuaternion = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n\t};\n\n\tVector3.prototype.getPositionFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n\t\treturn this.setFromMatrixPosition(m);\n\t};\n\n\tVector3.prototype.getScaleFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n\t\treturn this.setFromMatrixScale(m);\n\t};\n\n\tVector3.prototype.getColumnFromMatrix = function (index, matrix) {\n\t\tconsole.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n\t\treturn this.setFromMatrixColumn(matrix, index);\n\t};\n\n\tVector3.prototype.applyProjection = function (m) {\n\t\tconsole.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');\n\t\treturn this.applyMatrix4(m);\n\t};\n\n\tVector3.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector3.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector3.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector4.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector4.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tObject3D.prototype.getChildByName = function (name) {\n\t\tconsole.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n\t\treturn this.getObjectByName(name);\n\t};\n\n\tObject3D.prototype.renderDepth = function () {\n\t\tconsole.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n\t};\n\n\tObject3D.prototype.translate = function (distance, axis) {\n\t\tconsole.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n\t\treturn this.translateOnAxis(axis, distance);\n\t};\n\n\tObject3D.prototype.getWorldRotation = function () {\n\t\tconsole.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');\n\t};\n\n\tObject3D.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t}\n\t\t}\n\t});\n\n\tMesh.prototype.setDrawMode = function () {\n\t\tconsole.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t};\n\n\tObject.defineProperties(Mesh.prototype, {\n\t\tdrawMode: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');\n\t\t\t\treturn TrianglesDrawMode;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t\t}\n\t\t}\n\t});\n\n\tSkinnedMesh.prototype.initBones = function () {\n\t\tconsole.error('THREE.SkinnedMesh: initBones() has been removed.');\n\t}; //\n\n\n\tPerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n\t\tconsole.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');\n\t\tif (filmGauge !== undefined) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength(focalLength);\n\t}; //\n\n\n\tObject.defineProperties(Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .onlyShadow has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .shadowDarkness has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function ()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(DynamicDrawUsage);\n\t\t\t}\n\t\t}\n\t});\n\n\tBufferAttribute.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tBufferAttribute.prototype.copyIndicesArray = function ()\n\t/* indices */\n\t{\n\t\tconsole.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');\n\t}, BufferAttribute.prototype.setArray = function ()\n\t/* array */\n\t{\n\t\tconsole.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\tBufferGeometry.prototype.addIndex = function (index) {\n\t\tconsole.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n\t\tthis.setIndex(index);\n\t};\n\n\tBufferGeometry.prototype.addAttribute = function (name, attribute) {\n\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');\n\n\t\tif (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n\t\t\treturn this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n\t\t}\n\n\t\tif (name === 'index') {\n\t\t\tconsole.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n\t\t\tthis.setIndex(attribute);\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this.setAttribute(name, attribute);\n\t};\n\n\tBufferGeometry.prototype.addDrawCall = function (start, count, indexOffset) {\n\t\tif (indexOffset !== undefined) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n\t\t}\n\n\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n\t\tthis.addGroup(start, count);\n\t};\n\n\tBufferGeometry.prototype.clearDrawCalls = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n\t\tthis.clearGroups();\n\t};\n\n\tBufferGeometry.prototype.computeOffsets = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n\t};\n\n\tBufferGeometry.prototype.removeAttribute = function (name) {\n\t\tconsole.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');\n\t\treturn this.deleteAttribute(name);\n\t};\n\n\tBufferGeometry.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t});\n\n\tInterleavedBuffer.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tInterleavedBuffer.prototype.setArray = function ()\n\t/* array */\n\t{\n\t\tconsole.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\n\tExtrudeGeometry.prototype.getArrays = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShapeList = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShape = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShape() has been removed.');\n\t}; //\n\n\n\tScene.prototype.dispose = function () {\n\t\tconsole.error('THREE.Scene: .dispose() has been removed.');\n\t}; //\n\n\n\tUniform.prototype.onUpdate = function () {\n\t\tconsole.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');\n\t\treturn this;\n\t}; //\n\n\n\tObject.defineProperties(Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t}\n\t\t},\n\t\toverdraw: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapRGB has been removed.');\n\t\t\t\treturn new Color();\n\t\t\t}\n\t\t},\n\t\tshading: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\tthis.flatShading = value === FlatShading;\n\t\t\t}\n\t\t},\n\t\tstencilMask: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\treturn this.stencilFuncMask;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\tthis.stencilFuncMask = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tWebGLRenderer.prototype.clearTarget = function (renderTarget, color, depth, stencil) {\n\t\tconsole.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');\n\t\tthis.setRenderTarget(renderTarget);\n\t\tthis.clear(color, depth, stencil);\n\t};\n\n\tWebGLRenderer.prototype.animate = function (callback) {\n\t\tconsole.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');\n\t\tthis.setAnimationLoop(callback);\n\t};\n\n\tWebGLRenderer.prototype.getCurrentRenderTarget = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\n\t\treturn this.getRenderTarget();\n\t};\n\n\tWebGLRenderer.prototype.getMaxAnisotropy = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');\n\t\treturn this.capabilities.getMaxAnisotropy();\n\t};\n\n\tWebGLRenderer.prototype.getPrecision = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\n\t\treturn this.capabilities.precision;\n\t};\n\n\tWebGLRenderer.prototype.resetGLState = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\n\t\treturn this.state.reset();\n\t};\n\n\tWebGLRenderer.prototype.supportsFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsHalfFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_half_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsStandardDerivatives = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n\t\treturn this.extensions.get('OES_standard_derivatives');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_s3tc');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_pvrtc');\n\t};\n\n\tWebGLRenderer.prototype.supportsBlendMinMax = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n\t\treturn this.extensions.get('EXT_blend_minmax');\n\t};\n\n\tWebGLRenderer.prototype.supportsVertexTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');\n\t\treturn this.capabilities.vertexTextures;\n\t};\n\n\tWebGLRenderer.prototype.supportsInstancedArrays = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n\t\treturn this.extensions.get('ANGLE_instanced_arrays');\n\t};\n\n\tWebGLRenderer.prototype.enableScissorTest = function (boolean) {\n\t\tconsole.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n\t\tthis.setScissorTest(boolean);\n\t};\n\n\tWebGLRenderer.prototype.initMaterial = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPrePlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPostPlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.updateShadowMap = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setFaceCulling = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.allocTextureUnit = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture2D = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTextureCube = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.getActiveMipMapLevel = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');\n\t\treturn this.getActiveMipmapLevel();\n\t};\n\n\tObject.defineProperties(WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function ()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');\n\t\t\t\treturn this.getContext();\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');\n\t\t\t\treturn this.xr;\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\tthis.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t\treturn 1.0;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function ()\n\t\t\t/* cullFace */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t}\n\t});\n\tfunction WebGLRenderTargetCube(width, height, options) {\n\t\tconsole.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');\n\t\treturn new WebGLCubeRenderTarget(width, options);\n\t} //\n\n\tObject.defineProperties(WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tAudio.prototype.load = function (file) {\n\t\tconsole.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\n\t\tconst scope = this;\n\t\tconst audioLoader = new AudioLoader();\n\t\taudioLoader.load(file, function (buffer) {\n\t\t\tscope.setBuffer(buffer);\n\t\t});\n\t\treturn this;\n\t};\n\n\tAudioAnalyser.prototype.getData = function () {\n\t\tconsole.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n\t\treturn this.getFrequencyData();\n\t}; //\n\n\n\tCubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n\t\tconsole.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\n\t\treturn this.update(renderer, scene);\n\t};\n\n\tCubeCamera.prototype.clear = function (renderer, color, depth, stencil) {\n\t\tconsole.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');\n\t\treturn this.renderTarget.clear(renderer, color, depth, stencil);\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n\t\tconst loader = new TextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tconst texture = loader.load(url, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n\t\tconst loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tconst texture = loader.load(urls, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n\t}; //\n\n\n\tfunction CanvasRenderer() {\n\t\tconsole.error('THREE.CanvasRenderer has been removed');\n\t} //\n\n\tfunction JSONLoader() {\n\t\tconsole.error('THREE.JSONLoader has been removed.');\n\t} //\n\n\tconst SceneUtils = {\n\t\tcreateMultiMaterialObject: function ()\n\t\t/* geometry, materials */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tdetach: function ()\n\t\t/* child, parent, scene */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tattach: function ()\n\t\t/* child, scene, parent */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t}\n\t}; //\n\n\tfunction LensFlare() {\n\t\tconsole.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');\n\t}\n\n\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n\t\t\tdetail: {\n\t\t\t\trevision: REVISION\n\t\t\t}\n\t\t}));\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\tif (typeof window !== 'undefined') {\n\t\tif (window.__THREE__) {\n\t\t\tconsole.warn('WARNING: Multiple instances of Three.js being imported.');\n\t\t} else {\n\t\t\twindow.__THREE__ = REVISION;\n\t\t}\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DataUtils = DataUtils;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float16BufferAttribute = Float16BufferAttribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GLBufferAttribute = GLBufferAttribute;\n\texports.GLSL1 = GLSL1;\n\texports.GLSL3 = GLSL3;\n\texports.GammaEncoding = GammaEncoding;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SplineCurve = SplineCurve;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultipleRenderTargets = WebGLMultipleRenderTargets;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n",null,"module.exports = function( THREE ) {\n\t/**\n\t * @author qiao / https://github.com/qiao\n\t * @author mrdoob / http://mrdoob.com\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author erich666 / http://erichaines.com\n\t */\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\n\tfunction OrbitControls( object, domElement ) {\n\n\t\tthis.object = object;\n\n\t\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\tthis.target = new THREE.Vector3();\n\n\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\n\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = 0; // radians\n\t\tthis.maxPolarAngle = Math.PI; // radians\n\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\t\tthis.minAzimuthAngle = - Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.25;\n\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = true;\n\t\tthis.zoomSpeed = 1.0;\n\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 1.0;\n\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = true;\n\t\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t\t// Set to false to disable use of the keys\n\t\tthis.enableKeys = true;\n\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\n\t\t// for reset\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\n\t\t//\n\t\t// public methods\n\t\t//\n\n\t\tthis.getPolarAngle = function () {\n\n\t\t\treturn spherical.phi;\n\n\t\t};\n\n\t\tthis.getAzimuthalAngle = function () {\n\n\t\t\treturn spherical.theta;\n\n\t\t};\n\n\t\tthis.reset = function () {\n\n\t\t\tscope.target.copy( scope.target0 );\n\t\t\tscope.object.position.copy( scope.position0 );\n\t\t\tscope.object.zoom = scope.zoom0;\n\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\tscope.update();\n\n\t\t\tstate = STATE.NONE;\n\n\t\t};\n\n\t\t// this method is exposed, but perhaps it would be better if we can make it private...\n\t\tthis.update = function() {\n\n\t\t\tvar offset = new THREE.Vector3();\n\n\t\t\t// so camera.up is the orbit axis\n\t\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\t\tvar quatInverse = quat.clone().inverse();\n\n\t\t\tvar lastPosition = new THREE.Vector3();\n\t\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\t\treturn function update () {\n\n\t\t\t\tvar position = scope.object.position;\n\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t\t// angle from z-axis around y-axis\n\t\t\t\tspherical.setFromVector3( offset );\n\n\t\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t\t}\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t\t// restrict theta to be between desired limits\n\t\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\t\tspherical.makeSafe();\n\n\n\t\t\t\tspherical.radius *= scale;\n\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t\t// move target to panned location\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tscale = 1;\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t\t// update condition is:\n\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\t\tif ( zoomChanged ||\n\t\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\t\tzoomChanged = false;\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t};\n\n\t\t}();\n\n\t\tthis.dispose = function() {\n\n\t\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t\t};\n\n\t\t//\n\t\t// internals\n\t\t//\n\n\t\tvar scope = this;\n\n\t\tvar changeEvent = { type: 'change' };\n\t\tvar startEvent = { type: 'start' };\n\t\tvar endEvent = { type: 'end' };\n\n\t\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\t\tvar state = STATE.NONE;\n\n\t\tvar EPS = 0.000001;\n\n\t\t// current position in spherical coordinates\n\t\tvar spherical = new THREE.Spherical();\n\t\tvar sphericalDelta = new THREE.Spherical();\n\n\t\tvar scale = 1;\n\t\tvar panOffset = new THREE.Vector3();\n\t\tvar zoomChanged = false;\n\n\t\tvar rotateStart = new THREE.Vector2();\n\t\tvar rotateEnd = new THREE.Vector2();\n\t\tvar rotateDelta = new THREE.Vector2();\n\n\t\tvar panStart = new THREE.Vector2();\n\t\tvar panEnd = new THREE.Vector2();\n\t\tvar panDelta = new THREE.Vector2();\n\n\t\tvar dollyStart = new THREE.Vector2();\n\t\tvar dollyEnd = new THREE.Vector2();\n\t\tvar dollyDelta = new THREE.Vector2();\n\n\t\tfunction getAutoRotationAngle() {\n\n\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t\t}\n\n\t\tfunction getZoomScale() {\n\n\t\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t\t}\n\n\t\tfunction rotateLeft( angle ) {\n\n\t\t\tsphericalDelta.theta -= angle;\n\n\t\t}\n\n\t\tfunction rotateUp( angle ) {\n\n\t\t\tsphericalDelta.phi -= angle;\n\n\t\t}\n\n\t\tvar panLeft = function() {\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\t\tv.multiplyScalar( - distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\tvar panUp = function() {\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\n\t\t\t\tv.multiplyScalar( distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\tvar pan = function() {\n\n\t\t\tvar offset = new THREE.Vector3();\n\n\t\t\treturn function pan ( deltaX, deltaY ) {\n\n\t\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\t\t// perspective\n\t\t\t\t\tvar position = scope.object.position;\n\t\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\t\t// orthographic\n\t\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\t\tscope.enablePan = false;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}();\n\n\t\tfunction dollyIn( dollyScale ) {\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tscale /= dollyScale;\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction dollyOut( dollyScale ) {\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tscale *= dollyScale;\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\t\t// event callbacks - update the object state\n\t\t//\n\n\t\tfunction handleMouseDownRotate( event ) {\n\n\t\t\t//console.log( 'handleMouseDownRotate' );\n\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownDolly( event ) {\n\n\t\t\t//console.log( 'handleMouseDownDolly' );\n\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownPan( event ) {\n\n\t\t\t//console.log( 'handleMouseDownPan' );\n\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseMoveRotate( event ) {\n\n\t\t\t//console.log( 'handleMouseMoveRotate' );\n\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMoveDolly( event ) {\n\n\t\t\t//console.log( 'handleMouseMoveDolly' );\n\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMovePan( event ) {\n\n\t\t\t//console.log( 'handleMouseMovePan' );\n\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseUp( event ) {\n\n\t\t\t//console.log( 'handleMouseUp' );\n\n\t\t}\n\n\t\tfunction handleMouseWheel( event ) {\n\n\t\t\t//console.log( 'handleMouseWheel' );\n\n\t\t\tif ( event.deltaY < 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleKeyDown( event ) {\n\n\t\t\t//console.log( 'handleKeyDown' );\n\n\t\t\tswitch ( event.keyCode ) {\n\n\t\t\t\tcase scope.keys.UP:\n\t\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.LEFT:\n\t\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.RIGHT:\n\t\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction handleTouchStartRotate( event ) {\n\n\t\t\t//console.log( 'handleTouchStartRotate' );\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t}\n\n\t\tfunction handleTouchStartDolly( event ) {\n\n\t\t\t//console.log( 'handleTouchStartDolly' );\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyStart.set( 0, distance );\n\n\t\t}\n\n\t\tfunction handleTouchStartPan( event ) {\n\n\t\t\t//console.log( 'handleTouchStartPan' );\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t}\n\n\t\tfunction handleTouchMoveRotate( event ) {\n\n\t\t\t//console.log( 'handleTouchMoveRotate' );\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchMoveDolly( event ) {\n\n\t\t\t//console.log( 'handleTouchMoveDolly' );\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyEnd.set( 0, distance );\n\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchMovePan( event ) {\n\n\t\t\t//console.log( 'handleTouchMovePan' );\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchEnd( event ) {\n\n\t\t\t//console.log( 'handleTouchEnd' );\n\n\t\t}\n\n\t\t//\n\t\t// event handlers - FSM: listen for events and reset state\n\t\t//\n\n\t\tfunction onMouseDown( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\tstate = STATE.PAN;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseUp( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\thandleMouseUp( event );\n\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onMouseWheel( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\thandleMouseWheel( event );\n\n\t\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t}\n\n\t\tfunction onKeyDown( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\t\thandleKeyDown( event );\n\n\t\t}\n\n\t\tfunction onTouchStart( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tswitch ( event.touches.length ) {\n\n\t\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\thandleTouchStartDolly( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\tswitch ( event.touches.length ) {\n\n\t\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMoveDolly( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchEnd( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\thandleTouchEnd( event );\n\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onContextMenu( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t}\n\n\t\t//\n\n\t\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\t\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\t\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t\t// force an update at start\n\n\t\tthis.update();\n\n\t};\n\n\tOrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\tOrbitControls.prototype.constructor = OrbitControls;\n\n\tObject.defineProperties( OrbitControls.prototype, {\n\n\t\tcenter: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\t\treturn this.target;\n\n\t\t\t}\n\n\t\t},\n\n\t\t// backward compatibility\n\n\t\tnoZoom: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\treturn ! this.enableZoom;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\tthis.enableZoom = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoRotate: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\treturn ! this.enableRotate;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\tthis.enableRotate = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoPan: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\treturn ! this.enablePan;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\tthis.enablePan = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoKeys: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\treturn ! this.enableKeys;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\tthis.enableKeys = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tstaticMoving : {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\treturn ! this.enableDamping;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\tthis.enableDamping = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tdynamicDampingFactor : {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\treturn this.dampingFactor;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\tthis.dampingFactor = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\treturn OrbitControls;\n};\n",null,null,null,null,null,null],"names":["HMR_HOST","HMR_PORT","HMR_SECURE","HMR_ENV_HASH","module","bundle","HMR_BUNDLE_ID","OVERLAY_ID","OldModule","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","undefined","checkedAssets","acceptedAssets","assetsToAccept","location","protocol","indexOf","hostname","port","parent","isParcelRequire","WebSocket","getHostname","getPort","test","ws","onmessage","event","JSON","parse","type","removeErrorOverlay","assets","filter","asset","envHash","handled","forEach","didAccept","hmrAcceptCheck","root","id","depsByBundle","console","clear","hmrApply","i","length","hmrAcceptRun","window","reload","ansiDiagnostic","diagnostics","ansi","stack","codeframe","error","message","hints","join","overlay","createErrorOverlay","html","document","body","appendChild","onerror","e","onclose","warn","getElementById","remove","log","createElement","errorHTML","diagnostic","map","hint","innerHTML","modules","parents","k","d","dep","Array","isArray","concat","getParents","link","newLink","cloneNode","onload","parentNode","removeChild","setAttribute","getAttribute","split","Date","now","insertBefore","nextSibling","cssTimeout","setTimeout","links","querySelectorAll","href","servedFromHMRServer","RegExp","absolute","origin","updateLink","reloadCSS","deps","Function","output","cached","cache","some","v","cb","assetsToAlsoAccept","apply","getRandomNum","max","min","Math","floor","random","constructor","velocity","Vector3","acceleration","wonderTheta","maxSpeed","boost","Start","radius","theta","degToRad","phi","mesh","position","x","sin","cos","y","z","Update","time","ApplyForce","multiplyScalar","add","clampLength","head","clone","lookAt","BuildMesh","geometry","CylinderGeometry","rotateX","material","MeshNormalMaterial","Mesh","f","count","params","seek","maxForce","align","effectiveRange","separate","choesin","group","Group","agents","agent","Agent","Align","Separate","Cohesion","AvoidBoxContainer","currAgent","sumVec","steer","otherAgent","dist","distanceTo","divideScalar","normalize","subVectors","closeVec","Seek","target","toGoalVector","distance","steerVector","sumVector","Avoid","currentCreature","wall","computeBoundingSphere","boundingSphere","toMeVector","pow","rangeWidth","rangeHeight","rangeDepth","resetDescription","addEventListener","className","clearTimeout","Boid","global","factory","exports","define","amd","globalThis","self","THREE","REVISION","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","TOUCH","DOLLY_PAN","DOLLY_ROTATE","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipMapNearestFilter","NearestMipmapLinearFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipMapNearestFilter","LinearMipmapLinearFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","NormalAnimationBlendMode","AdditiveAnimationBlendMode","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","ZeroStencilOp","KeepStencilOp","ReplaceStencilOp","IncrementStencilOp","DecrementStencilOp","IncrementWrapStencilOp","DecrementWrapStencilOp","InvertStencilOp","NeverStencilFunc","LessStencilFunc","EqualStencilFunc","LessEqualStencilFunc","GreaterStencilFunc","NotEqualStencilFunc","GreaterEqualStencilFunc","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","StreamDrawUsage","StaticReadUsage","DynamicReadUsage","StreamReadUsage","StaticCopyUsage","DynamicCopyUsage","StreamCopyUsage","GLSL1","GLSL3","listener","_listeners","listeners","hasEventListener","removeEventListener","listenerArray","index","splice","dispatchEvent","array","slice","l","_lut","toString","_seed","DEG2RAD","PI","RAD2DEG","d0","d1","d2","d3","uuid","toUpperCase","value","n","m","a1","a2","b1","b2","t","lambda","dt","lerp","exp","abs","euclideanModulo","low","high","range","s","degrees","radians","ceil","LN2","q","a","b","c","order","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","MathUtils","Object","freeze","__proto__","generateUUID","clamp","mapLinear","inverseLerp","damp","pingpong","smoothstep","smootherstep","randInt","randFloat","randFloatSpread","seededRandom","radToDeg","isPowerOfTwo","ceilPowerOfTwo","floorPowerOfTwo","setQuaternionFromProperEuler","width","height","setScalar","scalar","setX","setY","setComponent","Error","getComponent","copy","w","addVectors","addScalar","addScaledVector","sub","subScalar","multiply","divide","applyMatrix3","elements","clampScalar","minVal","maxVal","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","angle","atan2","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","Vector2","prototype","isVector2","arguments","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","g","h","invert","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","r","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","scale","rotate","translate","matrix","Matrix3","isMatrix3","_canvas","getDataURL","image","src","HTMLCanvasElement","canvas","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","EventDispatcher","Texture","DEFAULT_IMAGE","mapping","DEFAULT_MAPPING","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","defineProperty","name","mipmaps","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","updateMatrix","source","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","isDataTexture","serializeImage","transformUv","uv","needsUpdate","isTexture","HTMLImageElement","ImageBitmap","ImageUtils","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","epsilon","epsilon2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","Vector4","isVector4","options","depth","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","setTexture","setSize","WebGLRenderTarget","isWebGLRenderTarget","il","WebGLMultipleRenderTargets","isWebGLMultipleRenderTargets","samples","WebGLMultisampleRenderTarget","isWebGLMultisampleRenderTarget","_x","_y","_z","_w","slerp","qa","qb","qm","slerpQuaternions","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","Number","EPSILON","len","tDir","multiplyQuaternionsFlat","_onChangeCallback","quaternion","setFromEuler","euler","update","isEuler","_order","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","conjugate","p","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","Quaternion","isQuaternion","multiplyVectors","applyEuler","applyQuaternion","_quaternion$4","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector$c","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","isVector3","Infinity","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","expandByPoint","setFromCenterAndSize","size","halfSize","_vector$b","setFromObject","object","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","boundingBox","computeBoundingBox","_box$3","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","_center","_extents","_v0$2","_v1$7","_v2$3","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","distanceToPoint","clampedPoint","getBoundingSphere","intersect","_points","Box3","isBox3","_testAxis","v0","extents","j","p0","p1","p2","_box$2","_v1$6","_toFarthestPoint","_toPoint","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","missingRadiusHalf","_vector$a","_segCenter","_segDir","_diff","_edge1","_edge2","_normal$1","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","segExtent","a01","b0","s0","sqrDist","extDet","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","sign","DdQxE2","DdE1xQ","QdN","n14","n24","n34","n41","n42","n43","n44","Matrix4","copyPosition","setFromMatrix3","makeBasis","extractRotation","scaleX","_v1$5","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","yx","zx","zy","x2","y2","z2","wx","wy","wz","decompose","_m1$2","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","isMatrix4","_matrix$1","_quaternion$3","Euler","DefaultOrder","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","RotationOrders","mask","channel","enable","enableAll","toggle","disable","disableAll","layers","_object3DId","_v1$4","_q1","_m1$1","_target","_position$3","_scale$2","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","DefaultUp","onRotationChange","onQuaternionChange","defineProperties","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","Layers","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","userData","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","isObject3D","removeFromParent","attach","getObjectById","getObjectByProperty","getObjectByName","child","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","force","updateParents","updateChildren","geometries","materials","shapes","skeletons","stringify","isInstancedMesh","instanceMatrix","instanceColor","library","element","isMesh","isLine","isPoints","serialize","parameters","shape","isSkinnedMesh","bindMode","bindMatrix","skeleton","uuids","animation","extractFromCache","values","key","recursive","_vector1","_vector2$1","_normalMatrix","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","referencePoint","Plane","isPlane","_v0$1","_v1$3","_v2$2","_v3$1","_vab","_vac","_vbc","_vap","_vbp","_vcp","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","Triangle","getPlane","d4","vc","d5","d6","vb","va","materialId","fog","blending","side","vertexColors","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","alphaToCoverage","premultipliedAlpha","toneMapped","onBuild","onBeforeCompile","customProgramCacheKey","setValues","newValue","flatShading","currentValue","isColor","isRoot","color","getHex","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","envMap","combine","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationColor","sizeAttenuation","linewidth","dashSize","gapSize","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","morphTargets","morphNormals","srcPlanes","dstPlanes","Material","isMaterial","_colorKeywords","_hslA","_hslB","setRGB","setHex","setStyle","hex","setHSL","hue2rgb","style","string","parseFloat","exec","components","parseInt","handleAlpha","charAt","setColorName","toLowerCase","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","SRGBToLinear","copyLinearToSRGB","LinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpColors","lerpHSL","normalized","Color","NAMES","MeshBasicMaterial","isMeshBasicMaterial","_vector$9","_vector2","itemSize","TypeError","usage","updateRange","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZ","setXYZW","onUpload","BufferAttribute","isBufferAttribute","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float16BufferAttribute","isFloat16BufferAttribute","Float32Array","Float64Array","TYPED_ARRAYS","buffer","_id","_m1","_obj","_offset","_box$1","_boxMorphTargets","_vector$8","attributes","morphAttributes","morphTargetsRelative","groups","drawRange","getIndex","setIndex","arrayMax","Uint32BufferAttribute","Uint16BufferAttribute","deleteAttribute","hasAttribute","addGroup","materialIndex","clearGroups","setDrawRange","tangent","Float32BufferAttribute","morphAttributesPosition","isGLBufferAttribute","morphAttribute","isNaN","Sphere","jl","computeFaceNormals","computeTangents","indices","positions","normals","uvs","nVertices","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","isFinite","handleTriangle","tmp2","n2","handleVertex","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","ab","normalizeNormals","merge","isBufferGeometry","attribute1","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","array2","geometry2","BufferGeometry","newAttribute","convertBufferAttribute","morphArray","keys","hasMorphAttributes","attributeArray","_inverseMatrix$2","_ray$2","Ray","_sphere$3","_vA$1","_vB$1","_vC$1","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA$1","_uvB$1","_uvC$1","_intersectionPoint","_intersectionPointWorld","updateMorphTargets","morphTargetInfluences","morphTargetDictionary","assign","ml","String","raycaster","intersects","intersection","morphPosition","groupMaterial","checkBufferGeometryIntersection","faceIndex","face","isGeometry","morphInfluences","influence","boneTransform","checkIntersection","widthSegments","heightSegments","depthSegments","scope","vertices","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","property","uniforms","merged","cloneUniforms","UniformsUtils","mergeUniforms","default_vertex","default_fragment","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","uniform","ShaderMaterial","isShaderMaterial","Camera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","tan","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","enabled","offsetX","offsetY","clearViewOffset","skew","PerspectiveCamera","isPerspectiveCamera","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderer","scene","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","render","_needsFlipEnvMap","CubeTexture","isCubeTexture","dummy","isInteger","fromEquirectangularTexture","shader","tEquirect","BoxGeometry","currentMinFilter","CubeCamera","stencil","WebGLCubeRenderTarget","_sphere$2","_vector$7","p4","p5","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","isAnimating","animationLoop","requestId","frame","requestAnimationFrame","onAnimationFrame","stop","cancelAnimationFrame","setAnimationLoop","setContext","gl","capabilities","isWebGL2","buffers","WeakMap","bufferType","createBuffer","bindBuffer","bufferData","FLOAT","HALF_FLOAT","UNSIGNED_SHORT","SHORT","UNSIGNED_INT","INT","BYTE","UNSIGNED_BYTE","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","isInterleavedBufferAttribute","get","deleteBuffer","delete","elementSize","updateBuffer","width_half","height_half","segment_width","segment_height","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","envmap_physical_pars_fragment","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmission_fragment","transmission_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","ShaderChunk","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","background","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","physical","transmissionSamplerSize","transmissionSamplerMap","cubemaps","state","objects","clearColor","clearAlpha","planeMesh","boxMesh","currentBackground","currentBackgroundVersion","currentTonemapping","renderList","forceClear","isScene","session","getSession","environmentBlendMode","setClear","autoClear","autoClearColor","autoClearDepth","autoClearStencil","toneMapping","unshift","PlaneGeometry","getClearColor","setClearColor","getClearAlpha","setClearAlpha","maxVertexAttributes","MAX_VERTEX_ATTRIBS","extension","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","program","updateBuffers","getBindingState","bindVertexArrayObject","saveCache","ELEMENT_ARRAY_BUFFER","setupVertexAttributes","createVertexArray","createVertexArrayOES","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","programMap","stateMap","createVertexArrayObject","newAttributes","enabledAttributes","attributeDivisors","cachedAttributes","geometryAttributes","attributesNum","cachedAttribute","geometryAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableVertexAttribArray","stride","vertexAttribIPointer","vertexAttribPointer","isInstancedBufferGeometry","initAttributes","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","_maxInstanceCount","enableAttribute","ARRAY_BUFFER","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","disableUnusedAttributes","reset","geometryId","programId","deleteVertexArrayObject","resetDefaultState","setup","releaseStatesOfGeometry","releaseStatesOfProgram","info","mode","drawArrays","primcount","methodName","setMode","renderInstances","maxAnisotropy","has","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","getMaxPrecision","logarithmicDepthBuffer","maxTextures","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","floatVertexTextures","maxSamples","MAX_SAMPLES","getMaxAnisotropy","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","numPlanes","numIntersection","init","enableLocalClipping","projectPlanes","beginShadows","endShadows","resetGlobalState","setState","useCache","materialProperties","nGlobal","lGlobal","dstArray","clippingState","skipTransform","nPlanes","flatSize","viewMatrix","i4","cubemap","mapTextureMapping","onTextureDispose","getExtension","wireframeAttributes","onGeometryDispose","memory","geometryIndex","geometryPosition","previousAttribute","currentAttribute","updateWireframeAttribute","getWireframeAttribute","drawElements","calls","triangles","lines","instanceCount","TRIANGLES","LINES","LINE_STRIP","LINE_LOOP","POINTS","programs","autoReset","influencesList","workInfluences","objectInfluences","influences","sort","absNumericalSort","MAX_SAFE_INTEGER","numericalSort","morphInfluencesSum","morphBaseInfluence","getUniforms","setValue","updateMap","buffergeometry","onInstancedMeshDispose","instancedMesh","wrapR","DataTexture2DArray","isDataTexture2DArray","DataTexture3D","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","nBlocks","blockSize","firstElem","allocateTextureUnit","uniform1f","addr","uniform2f","arraysEqual","uniform2fv","uniform3f","uniform3fv","uniform4f","uniform4fv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniform1ui","uniform2uiv","uniform3uiv","uniform4uiv","unit","safeSetTexture2D","setTexture3D","safeSetTextureCube","setTexture2DArray","setValueV1f","setValueV2f","setValueV3f","setValueV4f","setValueM2","setValueM3","setValueM4","setValueV1i","setValueV2i","setValueV3i","setValueV4i","setValueV1ui","setValueV2ui","setValueV3ui","setValueV4ui","setValueT1","setValueT3D1","setValueT6","setValueT2DArray1","uniform1fv","flatten","uniform1iv","uniform1uiv","units","allocTexUnits","setValueV1fArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueV1iArray","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV1uiArray","setValueV2uiArray","setValueV3uiArray","setValueV4uiArray","setValueT1Array","setValueT6Array","activeInfo","getSingularSetter","getPureArraySetter","PureArrayUniform","updateCache","seq","StructuredUniform","RePathPart","container","uniformObject","path","pathLength","lastIndex","match","matchEnd","idIsIndex","subscript","addUniform","SingleUniform","next","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","parseUniform","WebGLUniforms","setOptional","upload","seqWithValue","createShader","shaderSource","compileShader","programIdCount","status","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","trim","getShaderSource","addLineNumbers","functionName","getEncodingComponents","toneMappingName","chunks","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filterEmptyLine","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","numClippingPlanes","numClipIntersection","includePattern","includeReplacer","include","resolveIncludes","deprecatedUnrollLoopPattern","unrollLoopPattern","loopReplacer","deprecatedLoopReplacer","snippet","precisionstring","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapMode","envMapModeDefine","envMapBlendingDefine","cacheKey","generateShadowMapTypeDefine","generateEnvMapTypeDefine","generateEnvMapModeDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","generateExtensions","customDefines","generateDefines","createProgram","prefixVertex","prefixFragment","versionString","isRawShaderMaterial","generatePrecision","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","vertexAlphas","vertexUvs","uvsVertexOnly","skinning","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","getToneMappingFunction","getTexelDecodingFunction","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","getTexelEncodingFunction","outputEncoding","depthPacking","replaceLightNums","replaceClippingPlaneNums","unrollLoops","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","vertexErrors","getShaderErrors","fragmentErrors","getError","VALIDATE_STATUS","prefix","deleteShader","cachedUniforms","fetchAttributeLocations","destroy","deleteProgram","usedTimes","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","bones","nVertexUniforms","nVertexMatrices","shadows","environment","isMeshStandardMaterial","getMaxBones","getTextureEncodingFromMap","isFogExp2","directional","spot","rectArea","hemi","shadowMap","pl","preexistingProgram","WebGLProgram","pop","getParameters","getProgramCacheKey","acquireProgram","releaseProgram","groupOrder","renderItems","renderItemsIndex","opaque","transmissive","defaultProgram","renderItem","getNextRenderItem","customOpaqueSort","customTransparentSort","painterSortStable","reversePainterSortStable","finish","lists","renderCallDepth","list","WebGLRenderList","light","halfWidth","halfHeight","nextVersion","lightA","lightB","UniformsCache","shadowCache","ShadowUniformsCache","hash","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","shadowCastingLightsFirst","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","WebGLLights","lightsArray","shadowsArray","shadowLight","setupLights","setupLightsView","pushLight","pushShadow","renderStates","renderState","WebGLRenderState","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","_renderer","_objects","_capabilities","_frustum","Frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","_maxTextureSize","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","mapPass","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","renderObject","VSMPass","renderBufferDirect","useMorphing","result","getMaterialVariant","getDepthMaterialVariant","customMaterial","customDepthMaterial","getDistanceMaterialVariant","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","shadowCamera","kl","depthMaterial","getDepthMaterial","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","DEPTH_TEST","depthMask","setFunc","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","setOp","stencilOp","clearStencil","colorBuffer","ColorBuffer","DepthBuffer","StencilBuffer","enabledCapabilities","xrFramebuffer","currentBoundFramebuffers","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","lineWidthAvailable","glVersion","VERSION","currentTextureSlot","currentBoundTextures","scissorParam","SCISSOR_BOX","viewportParam","VIEWPORT","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","setFlipSided","setCullFace","CULL_FACE","framebuffer","bindFramebuffer","FRAMEBUFFER","DRAW_FRAMEBUFFER","useProgram","equationToGL","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","MIN","MAX","MIN_EXT","MAX_EXT","factorToGL","ZERO","ONE","SRC_COLOR","SRC_ALPHA","SRC_ALPHA_SATURATE","DST_COLOR","DST_ALPHA","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_DST_ALPHA","BLEND","blendFuncSeparate","blendFunc","blendEquationSeparate","frontFaceCW","setPolygonOffset","SAMPLE_ALPHA_TO_COVERAGE","frontFace","CW","CCW","cullFace","BACK","FRONT","FRONT_AND_BACK","lineWidth","factor","POLYGON_OFFSET_FILL","SCISSOR_TEST","webglSlot","TEXTURE0","activeTexture","webglType","webglTexture","boundTexture","compressedTexImage2D","texImage3D","KEEP","READ_FRAMEBUFFER","bindXRFramebuffer","setMaterial","setLineWidth","unbindTexture","_gl","utils","_videoTextures","useOffscreenCanvas","OffscreenCanvas","err","needsPowerOfTwo","needsNewCanvas","maxSize","createCanvas","supportsMips","generateMipmap","textureProperties","__maxMipLevel","log2","internalFormatName","glFormat","glType","RED","R32F","R16F","R8","RGB","RGB32F","RGB16F","RGB8","RGBA32F","RGBA16F","RGBA8","LINEAR","deallocateTexture","isVideoTexture","onRenderTargetDispose","deallocateRenderTarget","__webglInit","deleteTexture","__webglTexture","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","attachmentProperties","textureUnits","textureUnit","slot","updateVideoTexture","__version","complete","uploadTexture","TEXTURE_2D_ARRAY","TEXTURE_3D","uploadCubeTexture","wrappingToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","filterToGL","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","textureType","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","filterFallback","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","initTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","textureNeedsPowerOfTwo","isPowerOfTwo$1","resizeImage","convert","glInternalFormat","getInternalFormat","setTextureParameters","mipmap","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT24","DEPTH24_STENCIL8","DEPTH_COMPONENT16","DEPTH_STENCIL","isCompressedTexture","textureNeedsGenerateMipmaps","isCompressed","cubeImage","mipmapImage","attachment","textureTarget","framebufferTexture2D","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","isCube","setTexture2D","webglDepthTexture","setupDepthTexture","createRenderbuffer","setupRenderBufferStorage","isMultipleRenderTargets","isRenderTarget3D","createFramebuffer","COLOR_ATTACHMENT0","setupFrameBufferTexture","glTextureType","isTexture3D","setupDepthRenderbuffer","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","blitFramebuffer","warnedTexture2D","warnedTextureCube","setTextureCube","resetTextureUnits","setupRenderTarget","updateRenderTargetMipmap","updateMultisampleRenderTarget","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","LUMINANCE","LUMINANCE_ALPHA","RED_INTEGER","RG","RG_INTEGER","RGB_INTEGER","RGBA_INTEGER","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8","UNSIGNED_INT_24_8_WEBGL","cameras","ArrayCamera","isArrayCamera","isGroup","_moveEvent","_targetRay","_grip","_hand","getHandSpace","joints","inputState","pinching","getTargetRaySpace","hasLinearVelocity","linearVelocity","hasAngularVelocity","angularVelocity","getGripSpace","disconnect","inputSource","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","hand","visibilityState","getPose","targetRaySpace","transform","inputjoint","jointPose","getJointPose","jointName","joint","jointRadius","indexTip","thumbTip","distanceToPinch","threshold","handedness","gripSpace","framebufferScaleFactor","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","cameraAutoUpdate","isPresenting","getController","controller","WebXRController","getControllerGrip","getHand","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","onSessionEvent","onSessionEnd","onInputSourcesChange","getContextAttributes","xrCompatible","makeXRCompatible","layerInit","antialias","baseLayer","XRWebGLLayer","updateRenderState","requestReferenceSpace","inputSources","removed","added","cameraLPos","cameraRPos","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","updateCamera","depthNear","depthFar","setProjectionFromUnion","getCamera","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","WebGLAnimation","isFog","density","pixelRatio","transmissionRenderTarget","refreshUniformsCommon","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","uvScaleMap","uv2ScaleMap","refreshFogUniforms","refreshMaterialUniforms","display","createCanvasElement","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","renderListStack","renderStateStack","domElement","sortObjects","toneMappingExposure","_this","_isContextLost","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_currentDrawBuffers","_clippingEnabled","_localClippingEnabled","_transmissionRenderTarget","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","contextNames","contextAttributes","contextName","onContextLost","onContextRestore","isWebGL1Renderer","shift","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","WebGLExtensions","WebGLCapabilities","WebGLUtils","WebGLState","WebGLInfo","WebGLProperties","WebGLTextures","WebGLCubeMaps","WebGLAttributes","WebGLBindingStates","WebGLGeometries","WebGLObjects","WebGLMorphtargets","WebGLClipping","WebGLPrograms","WebGLMaterials","WebGLRenderLists","WebGLRenderStates","WebGLBackground","WebGLShadowMap","WebGLBufferRenderer","WebGLIndexedBufferRenderer","initGLContext","WebXRManager","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","onXRSessionStart","onXRSessionEnd","preventDefault","infoAutoReset","shadowMapAutoUpdate","shadowMapNeedsUpdate","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReferences","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","DYNAMIC_DRAW","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","getTargetPixelRatio","isLineSegments","isLineLoop","isSprite","compile","material2","getProgram","projectObject","opaqueObjects","transmissiveObjects","transparentObjects","renderObjects","renderTransmissiveObjects","isLOD","isImmediateRenderObject","camera2","renderObjectImmediate","lightsStateVersion","programCacheKey","updateCommonMaterialProperties","needsLights","materialNeedsLights","progUniforms","uniformsList","needsProgramChange","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","computeBoneTexture","boneTextureSize","markUniformsLightsNeedsUpdate","framebufferBound","drawBuffersWEBGL","layer","framebufferTextureLayer","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","halfFloatSupportedByExt","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","copyTextureToTexture3D","sourceBox","glTarget","unpackRowLen","UNPACK_ROW_LENGTH","unpackImageHeight","UNPACK_IMAGE_HEIGHT","unpackSkipPixels","UNPACK_SKIP_PIXELS","unpackSkipRows","UNPACK_SKIP_ROWS","unpackSkipImages","UNPACK_SKIP_IMAGES","texSubImage3D","resetState","__THREE_DEVTOOLS__","CustomEvent","detail","WebGLRenderer","WebGL1Renderer","FogExp2","Fog","Scene","arrayBuffers","_uuid","ib","InterleavedBuffer","isInterleavedBuffer","_vector$6","interleavedBuffer","interleavedBuffers","InterleavedBufferAttribute","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","float32Array","transformVertex","Sprite","vertexPosition","mvPosition","_v1$2","_v2$1","_currentLevel","levels","addLevel","getCurrentLevel","getObjectForDistance","_basePosition","_skinIndex","_skinWeight","_vector$5","_matrix","bindMatrixInverse","bind","calculateInverses","normalizeSkinWeights","skinWeight","skinIndex","weight","boneIndex","boneInverses","SkinnedMesh","Bone","isBone","DataTexture","_offsetMatrix","_identityMatrix","boneMatrices","inverse","bone","Skeleton","getBoneByName","fromJSON","json","boneInverse","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","getColorAt","getMatrixAt","raycastTimes","instanceId","setColorAt","setMatrixAt","InstancedMesh","linecap","linejoin","_start$1","_end$1","_inverseMatrix$1","_ray$1","_sphere$1","computeLineDistances","lineDistances","Line","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","distSq","_start","_end","LineSegments","LineLoop","_inverseMatrix","_ray","_sphere","_position$2","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","video","requestVideoFrameCallback","updateVideo","hasVideoFrameCallback","readyState","HAVE_CURRENT_DATA","VideoTexture","CompressedTexture","CanvasTexture","isCanvasTexture","DepthTexture","segments","thetaStart","thetaLength","vertex","segment","radiusTop","radiusBottom","radialSegments","openEnded","indexArray","generateTorso","generateCap","slope","indexRow","sinTheta","cosTheta","centerIndexStart","centerIndexEnd","vertexBuffer","uvBuffer","subdivide","applyRadius","generateUVs","getVertexByIndex","subdivideFace","cols","aj","bj","rows","pushVertex","azimuth","inclination","correctUVs","correctSeam","centroid","azi","correctUV","PolyhedronGeometry","_v0","_v1$1","_normal","_triangle","thresholdAngle","precisionPoints","thresholdDot","indexAttr","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","reverseHash","index0","Earcut","triangulate","holeIndices","dim","hasHoles","outerLen","outerNode","linkedList","prev","invSize","eliminateHoles","earcutLinked","clockwise","last","signedArea","insertNode","removeNode","again","steiner","area","ear","pass","indexCurve","isEarHashed","isEar","filterPoints","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","zOrder","prevZ","nextZ","locallyInside","isValidDiagonal","splitPolygon","queue","getLeftmost","compareX","eliminateHole","hole","findHoleBridge","hx","hy","mx","my","tanMin","sectorContainsSector","sortLinked","tail","numMerges","pSize","qSize","inSize","leftmost","px","py","intersectsPolygon","middleInside","q1","q2","o1","o2","o3","o4","onSegment","num","inside","Node","an","bp","sum","contour","isClockWise","pts","ShapeUtils","triangulateShape","holes","faces","removeDupEndPts","addContour","holeIndex","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","extrudeByPath","splineTube","binormal","position2","getSpacedPoints","computeFrenetFrames","shapePoints","extractPoints","reverse","hl","ahole","pt","vec","vlen","flen","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","contourMovements","getBevelVec","holesMovements","oneHoleMovements","verticesMovements","bs","vert","scalePt2","binormals","buildLidFaces","buildSideFaces","f3","layeroffset","sidewalls","sl","slen1","slen2","f4","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","toJSON$1","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","phiStart","phiLength","inverseSegments","base","n1","func","slices","stacks","EPS","pu","pv","sliceCount","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","indexOffset","shapeVertices","shapeHoles","shapeHole","thetaEnd","grid","verticesRow","uOffset","ExtrudeGeometry","text","font","isFont","generateShapes","tube","tubularSegments","arc","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","cs","closed","frames","P","generateBufferData","generateSegment","generateIndices","getPointAt","edge","edges","o","ol","edge1","edge2","Geometries","BoxBufferGeometry","CircleGeometry","CircleBufferGeometry","ConeGeometry","ConeBufferGeometry","CylinderBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","EdgesGeometry","ExtrudeBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","LatheGeometry","LatheBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","ParametricGeometry","ParametricBufferGeometry","PlaneBufferGeometry","PolyhedronBufferGeometry","RingGeometry","RingBufferGeometry","ShapeGeometry","ShapeBufferGeometry","SphereGeometry","SphereBufferGeometry","TetrahedronGeometry","TetrahedronBufferGeometry","TextGeometry","TextBufferGeometry","TorusGeometry","TorusBufferGeometry","TorusKnotGeometry","TorusKnotBufferGeometry","TubeGeometry","TubeBufferGeometry","WireframeGeometry","RawShaderMaterial","ior","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","compareTime","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","find","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","startIndex","endIndex","interpolant","evaluate","resultBuffer","referenceQuat","numTimes","valueStart","valueEnd","blendMode","parameterPositions","sampleValues","sampleSize","_cachedIndex","settings","DefaultSettings_","pp","validate_interval","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","getSettings_","copySampleValue_","Interpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","trackType","getInterpolation","InterpolantFactoryMethodDiscrete","DiscreteInterpolant","InterpolantFactoryMethodLinear","LinearInterpolant","InterpolantFactoryMethodSmooth","CubicInterpolant","factoryMethod","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","KeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","duration","jsonTracks","frameTime","parseKeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","morphTarget","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","typeName","getTrackTypeForValueTypeName","Cache","files","file","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","DefaultLoadingManager","LoadingManager","manager","crossOrigin","withCredentials","resourcePath","requestHeader","load","loadAsync","Promise","resolve","reject","setCrossOrigin","setWithCredentials","setPath","setResourcePath","setRequestHeader","loading","Loader","dataUriRegex","dataUriRegexResult","request","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","XMLHttpRequest","open","callbacks","overrideMimeType","header","send","setResponseType","setMimeType","FileLoader","AnimationClip","loaded","texDatas","mipmapCount","loadTexture","isCubemap","onImageLoad","onImageError","substr","urls","ImageLoader","texData","isJPEG","search","arcLengthDivisions","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","arcLengths","targetArcLength","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","t2","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","Curve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","twoPi","deltaAngle","samePoints","EllipseCurve","isEllipseCurve","aRadius","ArcCurve","isArcCurve","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","t3","CubicPoly","pz","curveType","intPoint","CatmullRomCurve3","isCatmullRomCurve3","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","v3","CubicBezier","CubicBezierCurve","isCubicBezierCurve","CubicBezierCurve3","isCubicBezierCurve3","LineCurve","isLineCurve","isLineCurve3","QuadraticBezier","QuadraticBezierCurve","isQuadraticBezierCurve","QuadraticBezierCurve3","isQuadraticBezierCurve3","CatmullRom","SplineCurve","isSplineCurve","Curves","LineCurve3","curves","autoClose","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","diff","lens","cacheLengths","sums","CurvePath","currentPoint","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","Path","getPointsHoles","holesPts","Light","HemisphereLight","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","_frameExtents","_viewportCount","_viewports","shadowMatrix","viewportIndex","LightShadow","SpotLightShadow","isSpotLightShadow","power","SpotLight","_lightPositionWorld","_lookTarget","_cubeDirections","_cubeUps","PointLightShadow","PointLight","scaleW","scaleH","OrthographicCamera","DirectionalLightShadow","isDirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","SphericalHarmonics3","isSphericalHarmonics3","LightProbe","getTexture","shading","setTextures","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","interleavedBufferMap","arrayBufferMap","getArrayBuffer","getTypedArray","arrayBuffer","typedArray","bufferAttribute","getInterleavedBuffer","bufferAttributeConstr","drawcalls","offsets","LoaderUtils","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","hasImages","Shape","geometryShapes","bufferGeometryLoader","BufferGeometryLoader","details","MaterialLoader","loadImage","currentUrl","deserializedImage","deserializeImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","LOD","objectAnimations","setTexturePath","createImageBitmap","fetch","setOptions","fetchOptions","credentials","headers","then","res","blob","colorSpaceConversion","imageBitmap","catch","ImageBitmapLoader","isImageBitmapLoader","subPaths","currentPath","toShapes","isCCW","noHoles","inSubpaths","tmpPath","tmpShape","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","toShapesNoHoles","solid","holesFirst","betterShapeHoles","newShapes","newShapeHoles","mainIdx","tmpPoints","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","isPointInsidePolygon","froms","tos","tmpHoles","paths","createPaths","chars","line_height","yMax","yMin","underlineThickness","char","ret","createPath","glyph","glyphs","familyName","ShapePath","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","action","ha","Font","substring","AudioContext","webkitAudioContext","bufferCopy","decodeAudioData","audioBuffer","sky","ground","HemisphereLightProbe","isHemisphereLightProbe","AmbientLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","eyeSep","_cache","eyeSepHalf","eyeSepOnProjection","ymax","xmin","xmax","autoStart","oldTime","elapsedTime","running","getElapsedTime","getDelta","newTime","performance","_position$1","_quaternion$1","_scale$1","_orientation$1","gain","createGain","connect","destination","timeDelta","_clock","Clock","getInput","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position","_quaternion","_scale","_orientation","Audio","panner","createPanner","panningModel","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accumulate","accuIndex","currentWeight","mix","accumulateAdditive","weightAdditive","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","targetIndex","workOffset","_RESERVED_CHARS_RE","_reservedRe","_wordChar","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","firstValidIndex","nCachedObjects_","bindings","unbind","rootNode","node","findNode","nodeName","_getValue_unbound","_setValue_unbound","create","isAnimationObjectGroup","Composite","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","_getValue_direct","_getValue_array","resolvedProperty","_getValue_arrayElement","_getValue_toArray","_setValue_direct","targetObject","_setValue_direct_setNeedsUpdate","_setValue_direct_setMatrixWorldNeedsUpdate","_setValue_array","dest","_setValue_array_setNeedsUpdate","_setValue_array_setMatrixWorldNeedsUpdate","_setValue_arrayElement","_setValue_arrayElement_setNeedsUpdate","_setValue_arrayElement_setMatrixWorldNeedsUpdate","_setValue_fromArray","_setValue_fromArray_setNeedsUpdate","_setValue_fromArray_setMatrixWorldNeedsUpdate","targetArray","sourceArray","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","AnimationObjectGroup","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","_updateWeight","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_initMemoryManager","_accuIndex","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","PropertyMixer","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","AnimationAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","AnimationMixer","Uniform","InstancedInterleavedBuffer","setType","setItemSize","setCount","GLBufferAttribute","setFromCamera","coords","intersectObject","ascSort","intersectObjects","other","makeSafe","setFromCartesianCoords","_vector$4","Box2","isBox2","_startP","_startEnd","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","ImmediateRenderObject","_vector$3","cone","coneLength","coneWidth","_vector$2","_boneMatrix","_matrixWorldInv","getBoneList","isSkeletonHelper","boneList","sphereSize","_vector$1","_color1","_color2","radials","circles","_v1","_v2","_v3","lightPlane","targetLine","_vector","_camera","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box","positions2","_axis","_lineGeometry","_coneGeometry","headLength","headWidth","setDirection","setColor","_floatView","_int32View","toHalfFloat","val","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","ENCODINGS","backgroundMaterial","backgroundBox","_flatCamera","_lodPlanes","_sizeLods","_sigmas","_createPlanes","_clearColor","_oldTarget","PHI","INV_PHI","_axisDirections","maxComponent","fExp","_pingPongRenderTarget","_blurMaterial","_getBlurShader","_equirectShader","_cubemapShader","_compileMaterial","fromScene","sigma","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","fromEquirectangular","equirectangular","_fromTexture","fromCubemap","compileCubemapShader","_getCubemapShader","compileEquirectangularShader","_getEquirectShader","outputTarget","_setViewport","_textureToCubeUV","_isLDR","_createRenderTarget","tmpMesh","cubeCamera","upSign","forwardSign","originalAutoClear","useSolidColor","convertLinearToRGBE","col","poleAxis","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","STANDARD_DEVIATIONS","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","weights","outputSize","lod","sizeLod","texelSize","cubeFaces","positionSize","uvSize","faceIndexSize","coordinates","fill","shaderMaterial","_getCommonVertexShader","_getEncodings","LineStrip","LinePieces","NoColors","FaceColors","VertexColors","isMultiMaterial","Int8BufferAttribute","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Int16BufferAttribute","Int32BufferAttribute","Float64BufferAttribute","construct","fromPoints","AxesHelper","BoxHelper","GridHelper","setColors","SkeletonHelper","Handlers","DataTextureLoader","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","Line3","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","getInverse","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","prototypenormal","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","getChildByName","renderDepth","getWorldRotation","applyMatrix","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","removeAttribute","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","initMaterial","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","audioLoader","AudioLoader","AudioAnalyser","getData","updateCubeMap","TextureLoader","loadTextureCube","CubeTextureLoader","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","__THREE__","AnimationLoader","ArrowHelper","AudioListener","AxisHelper","BinaryTextureLoader","BoundingBoxHelper","Box3Helper","CameraHelper","CanvasRenderer","CompressedTextureLoader","Cylindrical","DataUtils","DirectionalLightHelper","DynamicBufferAttribute","EdgesHelper","Float32Attribute","Float64Attribute","FontLoader","HemisphereLightHelper","Int16Attribute","Int32Attribute","Int8Attribute","JSONLoader","LensFlare","MeshFaceMaterial","MultiMaterial","ObjectLoader","PMREMGenerator","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PlaneHelper","PointCloud","PointCloudMaterial","PointLightHelper","PolarGridHelper","PositionalAudio","Raycaster","Spherical","SpotLightHelper","StereoCamera","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","WebGLRenderTargetCube","WireframeHelper","XHRLoader","OrbitControls","entities","innerWidth","innerHeight","controls","autoRotate","enableDamping","dampingFactor","_Resize","ambientLight","clientWidth","clientHeight","devicePixelRatio","Add","entity","inGroup","Entity"],"version":3,"file":"index.HASH_REF_c75227167347e57df55b258c72166a09.js.map","sourceRoot":"/__parcel_source_root/"}