{"mappings":"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jH;MACCkH;QACCp3C,WAAW86B,MAAM;;MAElBjJ;QACC7xB,OAAO;;MAER7Z;QACC6Z,OAAO;;MAERq3C;QACCr3C,WAAWmL;;MAEZmsC;QACCt3C,WAAWmL;;MAEZoqB;QACCv1B,OAAO;;;IAGTu3C;MACChhB;QACCv2B,OAAO;;;IAGTw3C;MACChhB;QACCx2B,OAAO;;MAERy3C;QACCz3C,QAAQ;;MAET22B;QACC32B,OAAO;;MAER42B;QACC52B,OAAO;;MAER03C;QACC13C,OAAO;;;IAGT23C;MACCjiB;QACC11B,OAAO;;MAER21B;QACC31B,OAAO;;;IAGT43C;MACCpiB;QACCx1B,OAAO;;MAERy1B;QACCz1B,OAAO;;;IAGT63C;MACCvhB;QACCt2B,OAAO;;;IAGT83C;MACCliB;QACC51B,OAAO;;MAER61B;QACC71B,OAAO;;;IAGT+3C;MACCjiB;QACC91B,OAAO;;MAERg2B;QACCh2B,WAAW4G,QAAQ,GAAG;;;IAGxBoxC;MACC/hB;QACCj2B,OAAO;;MAERk2B;QACCl2B,OAAO;;MAERm2B;QACCn2B,OAAO;;;IAGTi4C;MACC7hB;QACCp2B,OAAO;;;IAGTk4C;MACC7hB;QACCr2B,OAAO;;;IAGTm4C;MACCthB;QACC72B,OAAO;;;IAGTlP;MACCsnD;QACCp4C,OAAO;;MAERq4C;QACCr4C,OAAO;;MAERs4C;QACCt4C,OAAO;;MAERu4C;QACCv4C,WAAW86B,MAAM;;;IAGnBgM;MACC0R;QACCx4C;;MAEDy4C;QACCz4C;;MAED04C;QACC14C;QACA24C;UACC/5B;UACA2V;;;MAGFqkB;QACC54C;QACA24C;UACCE;UACAC;UACAC;UACAC;;;MAGFC;QACCj5C;;MAEDk5C;QACCl5C;;MAEDm5C;QACCn5C;QACA24C;UACCpkB;UACAnqC;UACAw0B;UACAnxB;UACA2rD;UACAC;UACAC;;;MAGFC;QACCv5C;QACA24C;UACCE;UACAC;UACAC;UACAC;;;MAGFQ;QACCx5C;;MAEDy5C;QACCz5C;;MAED05C;QACC15C;QACA24C;UACCpkB;UACAnqC;UACAkvD;UACA7rD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AAsBA;EAC9Bp+G,QAAQsmJ,SAASA;EACjBtmJ,QAAQs7I,eAAeA;EACvBt7I,QAAQogG,eAAeA;EACvBpgG,QAAQq5F,iBAAiBA;EACzBr5F,QAAQq5C,wBAAwBA;EAChCr5C,QAAQ+f,6BAA6BA;EACrC/f,QAAQkgB,+BAA+BA;EACvClgB,QAAQ4f,oBAAoBA;EAC5B5f,QAAQumJ,wBAAwBA;EAChCvmJ,QAAQlB,gBAAgBA;EACxBkB,QAAQqwF,aAAaA;EACrBrwF,QAAQk1G,oBAAoBA;EAC5Bl1G,QAAQwmJ,kBAAkBA;EAC1BxmJ,QAAQmK,mBAAmBA;EAC3BnK,QAAQymJ,YAAYA;EACpBzmJ,QAAQiK,sBAAsBA;EAC9BjK,QAAQyC,aAAaA;EACrBzC,QAAQkK,kBAAkBA;EAC1BlK,QAAQqL,gBAAgBA;EACxBrL,QAAQ0K,eAAeA;EAEvBmG,OAAO0K,eAAevb,SAAS;IAAgBwO,OAAO;;;;;AC35mCvjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["./node_modules/@parcel/runtime-browser-hmr/lib/HMRRuntime.js","./src/app.js","./src/setup.js","../node_modules/three/build/three.js","../node_modules/three-orbit-controls/index.js","./node_modules/uuid/index.js","./node_modules/uuid/v1.js","./node_modules/uuid/lib/rng-browser.js","./node_modules/uuid/lib/bytesToUuid.js","./node_modules/uuid/v4.js","./node_modules/@parcel/transformer-js/lib/esmodule-helpers.js"],"sourcesContent":[null,null,null,"/**\n * @license\n * Copyright 2010-2021 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\tconst REVISION = '129';\n\tconst MOUSE = {\n\t\tLEFT: 0,\n\t\tMIDDLE: 1,\n\t\tRIGHT: 2,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2\n\t};\n\tconst TOUCH = {\n\t\tROTATE: 0,\n\t\tPAN: 1,\n\t\tDOLLY_PAN: 2,\n\t\tDOLLY_ROTATE: 3\n\t};\n\tconst CullFaceNone = 0;\n\tconst CullFaceBack = 1;\n\tconst CullFaceFront = 2;\n\tconst CullFaceFrontBack = 3;\n\tconst BasicShadowMap = 0;\n\tconst PCFShadowMap = 1;\n\tconst PCFSoftShadowMap = 2;\n\tconst VSMShadowMap = 3;\n\tconst FrontSide = 0;\n\tconst BackSide = 1;\n\tconst DoubleSide = 2;\n\tconst FlatShading = 1;\n\tconst SmoothShading = 2;\n\tconst NoBlending = 0;\n\tconst NormalBlending = 1;\n\tconst AdditiveBlending = 2;\n\tconst SubtractiveBlending = 3;\n\tconst MultiplyBlending = 4;\n\tconst CustomBlending = 5;\n\tconst AddEquation = 100;\n\tconst SubtractEquation = 101;\n\tconst ReverseSubtractEquation = 102;\n\tconst MinEquation = 103;\n\tconst MaxEquation = 104;\n\tconst ZeroFactor = 200;\n\tconst OneFactor = 201;\n\tconst SrcColorFactor = 202;\n\tconst OneMinusSrcColorFactor = 203;\n\tconst SrcAlphaFactor = 204;\n\tconst OneMinusSrcAlphaFactor = 205;\n\tconst DstAlphaFactor = 206;\n\tconst OneMinusDstAlphaFactor = 207;\n\tconst DstColorFactor = 208;\n\tconst OneMinusDstColorFactor = 209;\n\tconst SrcAlphaSaturateFactor = 210;\n\tconst NeverDepth = 0;\n\tconst AlwaysDepth = 1;\n\tconst LessDepth = 2;\n\tconst LessEqualDepth = 3;\n\tconst EqualDepth = 4;\n\tconst GreaterEqualDepth = 5;\n\tconst GreaterDepth = 6;\n\tconst NotEqualDepth = 7;\n\tconst MultiplyOperation = 0;\n\tconst MixOperation = 1;\n\tconst AddOperation = 2;\n\tconst NoToneMapping = 0;\n\tconst LinearToneMapping = 1;\n\tconst ReinhardToneMapping = 2;\n\tconst CineonToneMapping = 3;\n\tconst ACESFilmicToneMapping = 4;\n\tconst CustomToneMapping = 5;\n\tconst UVMapping = 300;\n\tconst CubeReflectionMapping = 301;\n\tconst CubeRefractionMapping = 302;\n\tconst EquirectangularReflectionMapping = 303;\n\tconst EquirectangularRefractionMapping = 304;\n\tconst CubeUVReflectionMapping = 306;\n\tconst CubeUVRefractionMapping = 307;\n\tconst RepeatWrapping = 1000;\n\tconst ClampToEdgeWrapping = 1001;\n\tconst MirroredRepeatWrapping = 1002;\n\tconst NearestFilter = 1003;\n\tconst NearestMipmapNearestFilter = 1004;\n\tconst NearestMipMapNearestFilter = 1004;\n\tconst NearestMipmapLinearFilter = 1005;\n\tconst NearestMipMapLinearFilter = 1005;\n\tconst LinearFilter = 1006;\n\tconst LinearMipmapNearestFilter = 1007;\n\tconst LinearMipMapNearestFilter = 1007;\n\tconst LinearMipmapLinearFilter = 1008;\n\tconst LinearMipMapLinearFilter = 1008;\n\tconst UnsignedByteType = 1009;\n\tconst ByteType = 1010;\n\tconst ShortType = 1011;\n\tconst UnsignedShortType = 1012;\n\tconst IntType = 1013;\n\tconst UnsignedIntType = 1014;\n\tconst FloatType = 1015;\n\tconst HalfFloatType = 1016;\n\tconst UnsignedShort4444Type = 1017;\n\tconst UnsignedShort5551Type = 1018;\n\tconst UnsignedShort565Type = 1019;\n\tconst UnsignedInt248Type = 1020;\n\tconst AlphaFormat = 1021;\n\tconst RGBFormat = 1022;\n\tconst RGBAFormat = 1023;\n\tconst LuminanceFormat = 1024;\n\tconst LuminanceAlphaFormat = 1025;\n\tconst RGBEFormat = RGBAFormat;\n\tconst DepthFormat = 1026;\n\tconst DepthStencilFormat = 1027;\n\tconst RedFormat = 1028;\n\tconst RedIntegerFormat = 1029;\n\tconst RGFormat = 1030;\n\tconst RGIntegerFormat = 1031;\n\tconst RGBIntegerFormat = 1032;\n\tconst RGBAIntegerFormat = 1033;\n\tconst RGB_S3TC_DXT1_Format = 33776;\n\tconst RGBA_S3TC_DXT1_Format = 33777;\n\tconst RGBA_S3TC_DXT3_Format = 33778;\n\tconst RGBA_S3TC_DXT5_Format = 33779;\n\tconst RGB_PVRTC_4BPPV1_Format = 35840;\n\tconst RGB_PVRTC_2BPPV1_Format = 35841;\n\tconst RGBA_PVRTC_4BPPV1_Format = 35842;\n\tconst RGBA_PVRTC_2BPPV1_Format = 35843;\n\tconst RGB_ETC1_Format = 36196;\n\tconst RGB_ETC2_Format = 37492;\n\tconst RGBA_ETC2_EAC_Format = 37496;\n\tconst RGBA_ASTC_4x4_Format = 37808;\n\tconst RGBA_ASTC_5x4_Format = 37809;\n\tconst RGBA_ASTC_5x5_Format = 37810;\n\tconst RGBA_ASTC_6x5_Format = 37811;\n\tconst RGBA_ASTC_6x6_Format = 37812;\n\tconst RGBA_ASTC_8x5_Format = 37813;\n\tconst RGBA_ASTC_8x6_Format = 37814;\n\tconst RGBA_ASTC_8x8_Format = 37815;\n\tconst RGBA_ASTC_10x5_Format = 37816;\n\tconst RGBA_ASTC_10x6_Format = 37817;\n\tconst RGBA_ASTC_10x8_Format = 37818;\n\tconst RGBA_ASTC_10x10_Format = 37819;\n\tconst RGBA_ASTC_12x10_Format = 37820;\n\tconst RGBA_ASTC_12x12_Format = 37821;\n\tconst RGBA_BPTC_Format = 36492;\n\tconst SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tconst SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tconst SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tconst SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tconst SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tconst SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tconst SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tconst SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tconst SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tconst SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tconst SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tconst SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tconst SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tconst SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tconst LoopOnce = 2200;\n\tconst LoopRepeat = 2201;\n\tconst LoopPingPong = 2202;\n\tconst InterpolateDiscrete = 2300;\n\tconst InterpolateLinear = 2301;\n\tconst InterpolateSmooth = 2302;\n\tconst ZeroCurvatureEnding = 2400;\n\tconst ZeroSlopeEnding = 2401;\n\tconst WrapAroundEnding = 2402;\n\tconst NormalAnimationBlendMode = 2500;\n\tconst AdditiveAnimationBlendMode = 2501;\n\tconst TrianglesDrawMode = 0;\n\tconst TriangleStripDrawMode = 1;\n\tconst TriangleFanDrawMode = 2;\n\tconst LinearEncoding = 3000;\n\tconst sRGBEncoding = 3001;\n\tconst GammaEncoding = 3007;\n\tconst RGBEEncoding = 3002;\n\tconst LogLuvEncoding = 3003;\n\tconst RGBM7Encoding = 3004;\n\tconst RGBM16Encoding = 3005;\n\tconst RGBDEncoding = 3006;\n\tconst BasicDepthPacking = 3200;\n\tconst RGBADepthPacking = 3201;\n\tconst TangentSpaceNormalMap = 0;\n\tconst ObjectSpaceNormalMap = 1;\n\tconst ZeroStencilOp = 0;\n\tconst KeepStencilOp = 7680;\n\tconst ReplaceStencilOp = 7681;\n\tconst IncrementStencilOp = 7682;\n\tconst DecrementStencilOp = 7683;\n\tconst IncrementWrapStencilOp = 34055;\n\tconst DecrementWrapStencilOp = 34056;\n\tconst InvertStencilOp = 5386;\n\tconst NeverStencilFunc = 512;\n\tconst LessStencilFunc = 513;\n\tconst EqualStencilFunc = 514;\n\tconst LessEqualStencilFunc = 515;\n\tconst GreaterStencilFunc = 516;\n\tconst NotEqualStencilFunc = 517;\n\tconst GreaterEqualStencilFunc = 518;\n\tconst AlwaysStencilFunc = 519;\n\tconst StaticDrawUsage = 35044;\n\tconst DynamicDrawUsage = 35048;\n\tconst StreamDrawUsage = 35040;\n\tconst StaticReadUsage = 35045;\n\tconst DynamicReadUsage = 35049;\n\tconst StreamReadUsage = 35041;\n\tconst StaticCopyUsage = 35046;\n\tconst DynamicCopyUsage = 35050;\n\tconst StreamCopyUsage = 35042;\n\tconst GLSL1 = '100';\n\tconst GLSL3 = '300 es';\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\tclass EventDispatcher {\n\t\taddEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) this._listeners = {};\n\t\t\tconst listeners = this._listeners;\n\n\t\t\tif (listeners[type] === undefined) {\n\t\t\t\tlisteners[type] = [];\n\t\t\t}\n\n\t\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\t\tlisteners[type].push(listener);\n\t\t\t}\n\t\t}\n\n\t\thasEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return false;\n\t\t\tconst listeners = this._listeners;\n\t\t\treturn listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\t\t}\n\n\t\tremoveEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tconst listeners = this._listeners;\n\t\t\tconst listenerArray = listeners[type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tconst index = listenerArray.indexOf(listener);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdispatchEvent(event) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tconst listeners = this._listeners;\n\t\t\tconst listenerArray = listeners[event.type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tevent.target = this; // Make a copy, in case listeners are removed while iterating.\n\n\t\t\t\tconst array = listenerArray.slice(0);\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tarray[i].call(this, event);\n\t\t\t\t}\n\n\t\t\t\tevent.target = null;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tconst _lut = [];\n\n\tfor (let i = 0; i < 256; i++) {\n\t\t_lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n\t}\n\n\tlet _seed = 1234567;\n\tconst DEG2RAD = Math.PI / 180;\n\tconst RAD2DEG = 180 / Math.PI; // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\tfunction generateUUID() {\n\t\tconst d0 = Math.random() * 0xffffffff | 0;\n\t\tconst d1 = Math.random() * 0xffffffff | 0;\n\t\tconst d2 = Math.random() * 0xffffffff | 0;\n\t\tconst d3 = Math.random() * 0xffffffff | 0;\n\t\tconst uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n\t\treturn uuid.toUpperCase();\n\t}\n\n\tfunction clamp(value, min, max) {\n\t\treturn Math.max(min, Math.min(max, value));\n\t} // compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\n\tfunction euclideanModulo(n, m) {\n\t\treturn (n % m + m) % m;\n\t} // Linear mapping from range <a1, a2> to range <b1, b2>\n\n\n\tfunction mapLinear(x, a1, a2, b1, b2) {\n\t\treturn b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n\t} // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n\n\n\tfunction inverseLerp(x, y, value) {\n\t\tif (x !== y) {\n\t\t\treturn (value - x) / (y - x);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t} // https://en.wikipedia.org/wiki/Linear_interpolation\n\n\n\tfunction lerp(x, y, t) {\n\t\treturn (1 - t) * x + t * y;\n\t} // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n\n\n\tfunction damp(x, y, lambda, dt) {\n\t\treturn lerp(x, y, 1 - Math.exp(-lambda * dt));\n\t} // https://www.desmos.com/calculator/vcsjnyz7x4\n\n\n\tfunction pingpong(x, length = 1) {\n\t\treturn length - Math.abs(euclideanModulo(x, length * 2) - length);\n\t} // http://en.wikipedia.org/wiki/Smoothstep\n\n\n\tfunction smoothstep(x, min, max) {\n\t\tif (x <= min) return 0;\n\t\tif (x >= max) return 1;\n\t\tx = (x - min) / (max - min);\n\t\treturn x * x * (3 - 2 * x);\n\t}\n\n\tfunction smootherstep(x, min, max) {\n\t\tif (x <= min) return 0;\n\t\tif (x >= max) return 1;\n\t\tx = (x - min) / (max - min);\n\t\treturn x * x * x * (x * (x * 6 - 15) + 10);\n\t} // Random integer from <low, high> interval\n\n\n\tfunction randInt(low, high) {\n\t\treturn low + Math.floor(Math.random() * (high - low + 1));\n\t} // Random float from <low, high> interval\n\n\n\tfunction randFloat(low, high) {\n\t\treturn low + Math.random() * (high - low);\n\t} // Random float from <-range/2, range/2> interval\n\n\n\tfunction randFloatSpread(range) {\n\t\treturn range * (0.5 - Math.random());\n\t} // Deterministic pseudo-random float in the interval [ 0, 1 ]\n\n\n\tfunction seededRandom(s) {\n\t\tif (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm\n\n\t\t_seed = _seed * 16807 % 2147483647;\n\t\treturn (_seed - 1) / 2147483646;\n\t}\n\n\tfunction degToRad(degrees) {\n\t\treturn degrees * DEG2RAD;\n\t}\n\n\tfunction radToDeg(radians) {\n\t\treturn radians * RAD2DEG;\n\t}\n\n\tfunction isPowerOfTwo(value) {\n\t\treturn (value & value - 1) === 0 && value !== 0;\n\t}\n\n\tfunction ceilPowerOfTwo(value) {\n\t\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n\t}\n\n\tfunction floorPowerOfTwo(value) {\n\t\treturn Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n\t}\n\n\tfunction setQuaternionFromProperEuler(q, a, b, c, order) {\n\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t// angles are in radians\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\t\tconst c2 = cos(b / 2);\n\t\tconst s2 = sin(b / 2);\n\t\tconst c13 = cos((a + c) / 2);\n\t\tconst s13 = sin((a + c) / 2);\n\t\tconst c1_3 = cos((a - c) / 2);\n\t\tconst s1_3 = sin((a - c) / 2);\n\t\tconst c3_1 = cos((c - a) / 2);\n\t\tconst s3_1 = sin((c - a) / 2);\n\n\t\tswitch (order) {\n\t\t\tcase 'XYX':\n\t\t\t\tq.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZY':\n\t\t\t\tq.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXZ':\n\t\t\t\tq.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZX':\n\t\t\t\tq.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXY':\n\t\t\t\tq.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYZ':\n\t\t\t\tq.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n\t\t}\n\t}\n\n\tvar MathUtils = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tDEG2RAD: DEG2RAD,\n\t\tRAD2DEG: RAD2DEG,\n\t\tgenerateUUID: generateUUID,\n\t\tclamp: clamp,\n\t\teuclideanModulo: euclideanModulo,\n\t\tmapLinear: mapLinear,\n\t\tinverseLerp: inverseLerp,\n\t\tlerp: lerp,\n\t\tdamp: damp,\n\t\tpingpong: pingpong,\n\t\tsmoothstep: smoothstep,\n\t\tsmootherstep: smootherstep,\n\t\trandInt: randInt,\n\t\trandFloat: randFloat,\n\t\trandFloatSpread: randFloatSpread,\n\t\tseededRandom: seededRandom,\n\t\tdegToRad: degToRad,\n\t\tradToDeg: radToDeg,\n\t\tisPowerOfTwo: isPowerOfTwo,\n\t\tceilPowerOfTwo: ceilPowerOfTwo,\n\t\tfloorPowerOfTwo: floorPowerOfTwo,\n\t\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler\n\t});\n\n\tclass Vector2 {\n\t\tconstructor(x = 0, y = 0) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tget width() {\n\t\t\treturn this.x;\n\t\t}\n\n\t\tset width(value) {\n\t\t\tthis.x = value;\n\t\t}\n\n\t\tget height() {\n\t\t\treturn this.y;\n\t\t}\n\n\t\tset height(value) {\n\t\t\tthis.y = value;\n\t\t}\n\n\t\tset(x, y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6];\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7];\n\t\t\treturn this;\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y;\n\t\t}\n\n\t\tcross(v) {\n\t\t\treturn this.x * v.y - this.y * v.x;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tangle() {\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\t\t\tconst angle = Math.atan2(-this.y, -this.x) + Math.PI;\n\t\t\treturn angle;\n\t\t}\n\n\t\tdistanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t}\n\n\t\tdistanceToSquared(v) {\n\t\t\tconst dx = this.x - v.x,\n\t\t\t\t\t\tdy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\t\t}\n\n\t\tmanhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateAround(center, angle) {\n\t\t\tconst c = Math.cos(angle),\n\t\t\t\t\t\ts = Math.sin(angle);\n\t\t\tconst x = this.x - center.x;\n\t\t\tconst y = this.y - center.y;\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector2.prototype.isVector2 = true;\n\n\tclass Matrix3 {\n\t\tconstructor() {\n\t\t\tthis.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tset(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[1] = n21;\n\t\t\tte[2] = n31;\n\t\t\tte[3] = n12;\n\t\t\tte[4] = n22;\n\t\t\tte[5] = n32;\n\t\t\tte[6] = n13;\n\t\t\tte[7] = n23;\n\t\t\tte[8] = n33;\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\tthis.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(m) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\treturn this;\n\t\t}\n\n\t\textractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrix3Column(this, 0);\n\t\t\tyAxis.setFromMatrix3Column(this, 1);\n\t\t\tzAxis.setFromMatrix3Column(this, 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrix4(m) {\n\t\t\tconst me = m.elements;\n\t\t\tthis.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(m) {\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t}\n\n\t\tpremultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t}\n\n\t\tmultiplyMatrices(a, b) {\n\t\t\tconst ae = a.elements;\n\t\t\tconst be = b.elements;\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = ae[0],\n\t\t\t\t\t\ta12 = ae[3],\n\t\t\t\t\t\ta13 = ae[6];\n\t\t\tconst a21 = ae[1],\n\t\t\t\t\t\ta22 = ae[4],\n\t\t\t\t\t\ta23 = ae[7];\n\t\t\tconst a31 = ae[2],\n\t\t\t\t\t\ta32 = ae[5],\n\t\t\t\t\t\ta33 = ae[8];\n\t\t\tconst b11 = be[0],\n\t\t\t\t\t\tb12 = be[3],\n\t\t\t\t\t\tb13 = be[6];\n\t\t\tconst b21 = be[1],\n\t\t\t\t\t\tb22 = be[4],\n\t\t\t\t\t\tb23 = be[7];\n\t\t\tconst b31 = be[2],\n\t\t\t\t\t\tb32 = be[5],\n\t\t\t\t\t\tb33 = be[8];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[3] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[4] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[5] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[8] *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeterminant() {\n\t\t\tconst te = this.elements;\n\t\t\tconst a = te[0],\n\t\t\t\t\t\tb = te[1],\n\t\t\t\t\t\tc = te[2],\n\t\t\t\t\t\td = te[3],\n\t\t\t\t\t\te = te[4],\n\t\t\t\t\t\tf = te[5],\n\t\t\t\t\t\tg = te[6],\n\t\t\t\t\t\th = te[7],\n\t\t\t\t\t\ti = te[8];\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\t}\n\n\t\tinvert() {\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tn11 = te[0],\n\t\t\t\t\t\tn21 = te[1],\n\t\t\t\t\t\tn31 = te[2],\n\t\t\t\t\t\tn12 = te[3],\n\t\t\t\t\t\tn22 = te[4],\n\t\t\t\t\t\tn32 = te[5],\n\t\t\t\t\t\tn13 = te[6],\n\t\t\t\t\t\tn23 = te[7],\n\t\t\t\t\t\tn33 = te[8],\n\t\t\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\t\t\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tconst detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n31 * n23 - n33 * n21) * detInv;\n\t\t\tte[2] = (n32 * n21 - n31 * n22) * detInv;\n\t\t\tte[3] = t12 * detInv;\n\t\t\tte[4] = (n33 * n11 - n31 * n13) * detInv;\n\t\t\tte[5] = (n31 * n12 - n32 * n11) * detInv;\n\t\t\tte[6] = t13 * detInv;\n\t\t\tte[7] = (n21 * n13 - n23 * n11) * detInv;\n\t\t\tte[8] = (n22 * n11 - n21 * n12) * detInv;\n\t\t\treturn this;\n\t\t}\n\n\t\ttranspose() {\n\t\t\tlet tmp;\n\t\t\tconst m = this.elements;\n\t\t\ttmp = m[1];\n\t\t\tm[1] = m[3];\n\t\t\tm[3] = tmp;\n\t\t\ttmp = m[2];\n\t\t\tm[2] = m[6];\n\t\t\tm[6] = tmp;\n\t\t\ttmp = m[5];\n\t\t\tm[5] = m[7];\n\t\t\tm[7] = tmp;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetNormalMatrix(matrix4) {\n\t\t\treturn this.setFromMatrix4(matrix4).invert().transpose();\n\t\t}\n\n\t\ttransposeIntoArray(r) {\n\t\t\tconst m = this.elements;\n\t\t\tr[0] = m[0];\n\t\t\tr[1] = m[3];\n\t\t\tr[2] = m[6];\n\t\t\tr[3] = m[1];\n\t\t\tr[4] = m[4];\n\t\t\tr[5] = m[7];\n\t\t\tr[6] = m[2];\n\t\t\tr[7] = m[5];\n\t\t\tr[8] = m[8];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n\t\t\tconst c = Math.cos(rotation);\n\t\t\tconst s = Math.sin(rotation);\n\t\t\tthis.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(sx, sy) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= sx;\n\t\t\tte[3] *= sx;\n\t\t\tte[6] *= sx;\n\t\t\tte[1] *= sy;\n\t\t\tte[4] *= sy;\n\t\t\tte[7] *= sy;\n\t\t\treturn this;\n\t\t}\n\n\t\trotate(theta) {\n\t\t\tconst c = Math.cos(theta);\n\t\t\tconst s = Math.sin(theta);\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = te[0],\n\t\t\t\t\t\ta12 = te[3],\n\t\t\t\t\t\ta13 = te[6];\n\t\t\tconst a21 = te[1],\n\t\t\t\t\t\ta22 = te[4],\n\t\t\t\t\t\ta23 = te[7];\n\t\t\tte[0] = c * a11 + s * a21;\n\t\t\tte[3] = c * a12 + s * a22;\n\t\t\tte[6] = c * a13 + s * a23;\n\t\t\tte[1] = -s * a11 + c * a21;\n\t\t\tte[4] = -s * a12 + c * a22;\n\t\t\tte[7] = -s * a13 + c * a23;\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(tx, ty) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] += tx * te[2];\n\t\t\tte[3] += tx * te[5];\n\t\t\tte[6] += tx * te[8];\n\t\t\tte[1] += ty * te[2];\n\t\t\tte[4] += ty * te[5];\n\t\t\tte[7] += ty * te[8];\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(matrix) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = matrix.elements;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\treturn array;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().fromArray(this.elements);\n\t\t}\n\n\t}\n\n\tMatrix3.prototype.isMatrix3 = true;\n\n\tlet _canvas;\n\n\tclass ImageUtils {\n\t\tstatic getDataURL(image) {\n\t\t\tif (/^data:/i.test(image.src)) {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tif (typeof HTMLCanvasElement == 'undefined') {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tlet canvas;\n\n\t\t\tif (image instanceof HTMLCanvasElement) {\n\t\t\t\tcanvas = image;\n\t\t\t} else {\n\t\t\t\tif (_canvas === undefined) _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tconst context = _canvas.getContext('2d');\n\n\t\t\t\tif (image instanceof ImageData) {\n\t\t\t\t\tcontext.putImageData(image, 0, 0);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.drawImage(image, 0, 0, image.width, image.height);\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\t\t\t}\n\n\t\t\tif (canvas.width > 2048 || canvas.height > 2048) {\n\t\t\t\tconsole.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);\n\t\t\t\treturn canvas.toDataURL('image/jpeg', 0.6);\n\t\t\t} else {\n\t\t\t\treturn canvas.toDataURL('image/png');\n\t\t\t}\n\t\t}\n\n\t}\n\n\tlet textureId = 0;\n\n\tclass Texture extends EventDispatcher {\n\t\tconstructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding) {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: textureId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.image = image;\n\t\t\tthis.mipmaps = [];\n\t\t\tthis.mapping = mapping;\n\t\t\tthis.wrapS = wrapS;\n\t\t\tthis.wrapT = wrapT;\n\t\t\tthis.magFilter = magFilter;\n\t\t\tthis.minFilter = minFilter;\n\t\t\tthis.anisotropy = anisotropy;\n\t\t\tthis.format = format;\n\t\t\tthis.internalFormat = null;\n\t\t\tthis.type = type;\n\t\t\tthis.offset = new Vector2(0, 0);\n\t\t\tthis.repeat = new Vector2(1, 1);\n\t\t\tthis.center = new Vector2(0, 0);\n\t\t\tthis.rotation = 0;\n\t\t\tthis.matrixAutoUpdate = true;\n\t\t\tthis.matrix = new Matrix3();\n\t\t\tthis.generateMipmaps = true;\n\t\t\tthis.premultiplyAlpha = false;\n\t\t\tthis.flipY = true;\n\t\t\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t\t//\n\t\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n\t\t\tthis.encoding = encoding;\n\t\t\tthis.version = 0;\n\t\t\tthis.onUpdate = null;\n\t\t}\n\n\t\tupdateMatrix() {\n\t\t\tthis.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice(0);\n\t\t\tthis.mapping = source.mapping;\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\t\t\tthis.anisotropy = source.anisotropy;\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\t\t\tthis.offset.copy(source.offset);\n\t\t\tthis.repeat.copy(source.repeat);\n\t\t\tthis.center.copy(source.center);\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst isRootObject = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (!isRootObject && meta.textures[this.uuid] !== undefined) {\n\t\t\t\treturn meta.textures[this.uuid];\n\t\t\t}\n\n\t\t\tconst output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\t\t\t\tmapping: this.mapping,\n\t\t\t\trepeat: [this.repeat.x, this.repeat.y],\n\t\t\t\toffset: [this.offset.x, this.offset.y],\n\t\t\t\tcenter: [this.center.x, this.center.y],\n\t\t\t\trotation: this.rotation,\n\t\t\t\twrap: [this.wrapS, this.wrapT],\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\t\t\t\tflipY: this.flipY,\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\t\t\t};\n\n\t\t\tif (this.image !== undefined) {\n\t\t\t\t// TODO: Move to THREE.Image\n\t\t\t\tconst image = this.image;\n\n\t\t\t\tif (image.uuid === undefined) {\n\t\t\t\t\timage.uuid = generateUUID(); // UGH\n\t\t\t\t}\n\n\t\t\t\tif (!isRootObject && meta.images[image.uuid] === undefined) {\n\t\t\t\t\tlet url;\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor (let i = 0, l = image.length; i < l; i++) {\n\t\t\t\t\t\t\t// check cube texture with data textures\n\t\t\t\t\t\t\tif (image[i].isDataTexture) {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i].image));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// process single image\n\t\t\t\t\t\turl = serializeImage(image);\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[image.uuid] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\t\t\t}\n\n\t\t\tif (!isRootObject) {\n\t\t\t\tmeta.textures[this.uuid] = output;\n\t\t\t}\n\n\t\t\treturn output;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t\ttransformUv(uv) {\n\t\t\tif (this.mapping !== UVMapping) return uv;\n\t\t\tuv.applyMatrix3(this.matrix);\n\n\t\t\tif (uv.x < 0 || uv.x > 1) {\n\t\t\t\tswitch (this.wrapS) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.x) % 2) === 1) {\n\t\t\t\t\t\t\tuv.x = Math.ceil(uv.x) - uv.x;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (uv.y < 0 || uv.y > 1) {\n\t\t\t\tswitch (this.wrapT) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.y) % 2) === 1) {\n\t\t\t\t\t\t\tuv.y = Math.ceil(uv.y) - uv.y;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.flipY) {\n\t\t\t\tuv.y = 1 - uv.y;\n\t\t\t}\n\n\t\t\treturn uv;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\tTexture.prototype.isTexture = true;\n\n\tfunction serializeImage(image) {\n\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t// default images\n\t\t\treturn ImageUtils.getDataURL(image);\n\t\t} else {\n\t\t\tif (image.data) {\n\t\t\t\t// images of DataTexture\n\t\t\t\treturn {\n\t\t\t\t\tdata: Array.prototype.slice.call(image.data),\n\t\t\t\t\twidth: image.width,\n\t\t\t\t\theight: image.height,\n\t\t\t\t\ttype: image.data.constructor.name\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.Texture: Unable to serialize Texture.');\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t}\n\n\tclass Vector4 {\n\t\tconstructor(x = 0, y = 0, z = 0, w = 1) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t}\n\n\t\tget width() {\n\t\t\treturn this.z;\n\t\t}\n\n\t\tset width(value) {\n\t\t\tthis.z = value;\n\t\t}\n\n\t\tget height() {\n\t\t\treturn this.w;\n\t\t}\n\n\t\tset height(value) {\n\t\t\tthis.w = value;\n\t\t}\n\n\t\tset(x, y, z, w) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetW(w) {\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.w = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tcase 3:\n\t\t\t\t\treturn this.w;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z, this.w);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = v.w !== undefined ? v.w : 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\tthis.w *= v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z,\n\t\t\t\t\t\tw = this.w;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n\t\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tsetAxisAngleFromQuaternion(q) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\t\t// q is assumed to be normalized\n\t\t\tthis.w = 2 * Math.acos(q.w);\n\t\t\tconst s = Math.sqrt(1 - q.w * q.w);\n\n\t\t\tif (s < 0.0001) {\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t} else {\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetAxisAngleFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tlet angle, x, y, z; // variables for result\n\n\t\t\tconst epsilon = 0.01,\n\t\t\t\t\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\n\t\t\t\t\t\t// margin to distinguish between 0 and 180 degrees\n\t\t\tte = m.elements,\n\t\t\t\t\t\tm11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8],\n\t\t\t\t\t\tm21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9],\n\t\t\t\t\t\tm31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10];\n\n\t\t\tif (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\t\t\t\tif (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\t\t\t\t\tthis.set(1, 0, 0, 0);\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\t\t\t\t} // otherwise this singularity is angle = 180\n\n\n\t\t\t\tangle = Math.PI;\n\t\t\t\tconst xx = (m11 + 1) / 2;\n\t\t\t\tconst yy = (m22 + 1) / 2;\n\t\t\t\tconst zz = (m33 + 1) / 2;\n\t\t\t\tconst xy = (m12 + m21) / 4;\n\t\t\t\tconst xz = (m13 + m31) / 4;\n\t\t\t\tconst yz = (m23 + m32) / 4;\n\n\t\t\t\tif (xx > yy && xx > zz) {\n\t\t\t\t\t// m11 is the largest diagonal term\n\t\t\t\t\tif (xx < epsilon) {\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = Math.sqrt(xx);\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\t\t\t\t\t}\n\t\t\t\t} else if (yy > zz) {\n\t\t\t\t\t// m22 is the largest diagonal term\n\t\t\t\t\tif (yy < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty = Math.sqrt(yy);\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\t\t\t\tif (zz < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz = Math.sqrt(zz);\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set(x, y, z, angle);\n\t\t\t\treturn this; // return 180 deg rotation\n\t\t\t} // as we have reached here there are no singularities so we can handle normally\n\n\n\t\t\tlet s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n\t\t\tif (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = (m32 - m23) / s;\n\t\t\tthis.y = (m13 - m31) / s;\n\t\t\tthis.z = (m21 - m12) / s;\n\t\t\tthis.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\tthis.w = Math.min(this.w, v.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\tthis.w = Math.max(this.w, v.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\tthis.w = Math.max(min.w, Math.min(max.w, this.w));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\tthis.w = Math.max(minVal, Math.min(maxVal, this.w));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\tthis.w = Math.floor(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\tthis.w = Math.ceil(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\tthis.w = Math.round(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\tthis.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\tthis.w = -this.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\tthis.w += (v.w - this.w) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\tthis.w = v1.w + (v2.w - v1.w) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\tthis.w = array[offset + 3];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\tarray[offset + 3] = this.w;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\tthis.w = attribute.getW(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\tthis.w = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector4.prototype.isVector4 = true;\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\n\tclass WebGLRenderTarget extends EventDispatcher {\n\t\tconstructor(width, height, options) {\n\t\t\tsuper();\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = 1;\n\t\t\tthis.scissor = new Vector4(0, 0, width, height);\n\t\t\tthis.scissorTest = false;\n\t\t\tthis.viewport = new Vector4(0, 0, width, height);\n\t\t\toptions = options || {};\n\t\t\tthis.texture = new Texture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\tthis.texture.image = {};\n\t\t\tthis.texture.image.width = width;\n\t\t\tthis.texture.image.height = height;\n\t\t\tthis.texture.image.depth = 1;\n\t\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\t}\n\n\t\tsetTexture(texture) {\n\t\t\ttexture.image = {\n\t\t\t\twidth: this.width,\n\t\t\t\theight: this.height,\n\t\t\t\tdepth: this.depth\n\t\t\t};\n\t\t\tthis.texture = texture;\n\t\t}\n\n\t\tsetSize(width, height, depth = 1) {\n\t\t\tif (this.width !== width || this.height !== height || this.depth !== depth) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.depth = depth;\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\t\t\t\tthis.texture.image.depth = depth;\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.viewport.copy(source.viewport);\n\t\t\tthis.texture = source.texture.clone();\n\t\t\tthis.texture.image = { ...this.texture.image\n\t\t\t}; // See #20328.\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tWebGLRenderTarget.prototype.isWebGLRenderTarget = true;\n\n\tclass WebGLMultipleRenderTargets extends WebGLRenderTarget {\n\t\tconstructor(width, height, count) {\n\t\t\tsuper(width, height);\n\t\t\tconst texture = this.texture;\n\t\t\tthis.texture = [];\n\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tthis.texture[i] = texture.clone();\n\t\t\t}\n\t\t}\n\n\t\tsetSize(width, height, depth = 1) {\n\t\t\tif (this.width !== width || this.height !== height || this.depth !== depth) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.depth = depth;\n\n\t\t\t\tfor (let i = 0, il = this.texture.length; i < il; i++) {\n\t\t\t\t\tthis.texture[i].image.width = width;\n\t\t\t\t\tthis.texture[i].image.height = height;\n\t\t\t\t\tthis.texture[i].image.depth = depth;\n\t\t\t\t}\n\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.dispose();\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.viewport.set(0, 0, this.width, this.height);\n\t\t\tthis.scissor.set(0, 0, this.width, this.height);\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\tthis.texture.length = 0;\n\n\t\t\tfor (let i = 0, il = source.texture.length; i < il; i++) {\n\t\t\t\tthis.texture[i] = source.texture[i].clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tWebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;\n\n\tclass WebGLMultisampleRenderTarget extends WebGLRenderTarget {\n\t\tconstructor(width, height, options) {\n\t\t\tsuper(width, height, options);\n\t\t\tthis.samples = 4;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy.call(this, source);\n\t\t\tthis.samples = source.samples;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;\n\n\tclass Quaternion {\n\t\tconstructor(x = 0, y = 0, z = 0, w = 1) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\t\t}\n\n\t\tstatic slerp(qa, qb, qm, t) {\n\t\t\tconsole.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');\n\t\t\treturn qm.slerpQuaternions(qa, qb, t);\n\t\t}\n\n\t\tstatic slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\t\tlet x0 = src0[srcOffset0 + 0],\n\t\t\t\t\ty0 = src0[srcOffset0 + 1],\n\t\t\t\t\tz0 = src0[srcOffset0 + 2],\n\t\t\t\t\tw0 = src0[srcOffset0 + 3];\n\t\t\tconst x1 = src1[srcOffset1 + 0],\n\t\t\t\t\t\ty1 = src1[srcOffset1 + 1],\n\t\t\t\t\t\tz1 = src1[srcOffset1 + 2],\n\t\t\t\t\t\tw1 = src1[srcOffset1 + 3];\n\n\t\t\tif (t === 0) {\n\t\t\t\tdst[dstOffset + 0] = x0;\n\t\t\t\tdst[dstOffset + 1] = y0;\n\t\t\t\tdst[dstOffset + 2] = z0;\n\t\t\t\tdst[dstOffset + 3] = w0;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (t === 1) {\n\t\t\t\tdst[dstOffset + 0] = x1;\n\t\t\t\tdst[dstOffset + 1] = y1;\n\t\t\t\tdst[dstOffset + 2] = z1;\n\t\t\t\tdst[dstOffset + 3] = w1;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n\t\t\t\tlet s = 1 - t;\n\t\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\t\t\t\tdir = cos >= 0 ? 1 : -1,\n\t\t\t\t\t\t\tsqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n\t\t\t\tif (sqrSin > Number.EPSILON) {\n\t\t\t\t\tconst sin = Math.sqrt(sqrSin),\n\t\t\t\t\t\t\t\tlen = Math.atan2(sin, cos * dir);\n\t\t\t\t\ts = Math.sin(s * len) / sin;\n\t\t\t\t\tt = Math.sin(t * len) / sin;\n\t\t\t\t}\n\n\t\t\t\tconst tDir = t * dir;\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n\t\t\t\tif (s === 1 - t) {\n\t\t\t\t\tconst f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdst[dstOffset] = x0;\n\t\t\tdst[dstOffset + 1] = y0;\n\t\t\tdst[dstOffset + 2] = z0;\n\t\t\tdst[dstOffset + 3] = w0;\n\t\t}\n\n\t\tstatic multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n\t\t\tconst x0 = src0[srcOffset0];\n\t\t\tconst y0 = src0[srcOffset0 + 1];\n\t\t\tconst z0 = src0[srcOffset0 + 2];\n\t\t\tconst w0 = src0[srcOffset0 + 3];\n\t\t\tconst x1 = src1[srcOffset1];\n\t\t\tconst y1 = src1[srcOffset1 + 1];\n\t\t\tconst z1 = src1[srcOffset1 + 2];\n\t\t\tconst w1 = src1[srcOffset1 + 3];\n\t\t\tdst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\t\tdst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\t\tdst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\t\tdst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\t\t\treturn dst;\n\t\t}\n\n\t\tget x() {\n\t\t\treturn this._x;\n\t\t}\n\n\t\tset x(value) {\n\t\t\tthis._x = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget y() {\n\t\t\treturn this._y;\n\t\t}\n\n\t\tset y(value) {\n\t\t\tthis._y = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget z() {\n\t\t\treturn this._z;\n\t\t}\n\n\t\tset z(value) {\n\t\t\tthis._z = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget w() {\n\t\t\treturn this._w;\n\t\t}\n\n\t\tset w(value) {\n\t\t\tthis._w = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tset(x, y, z, w) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._w);\n\t\t}\n\n\t\tcopy(quaternion) {\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromEuler(euler, update) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tthrow new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tconst x = euler._x,\n\t\t\t\t\t\ty = euler._y,\n\t\t\t\t\t\tz = euler._z,\n\t\t\t\t\t\torder = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tconst cos = Math.cos;\n\t\t\tconst sin = Math.sin;\n\t\t\tconst c1 = cos(x / 2);\n\t\t\tconst c2 = cos(y / 2);\n\t\t\tconst c3 = cos(z / 2);\n\t\t\tconst s1 = sin(x / 2);\n\t\t\tconst s2 = sin(y / 2);\n\t\t\tconst s3 = sin(z / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromAxisAngle(axis, angle) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\t\t// assumes axis is normalized\n\t\t\tconst halfAngle = angle / 2,\n\t\t\t\t\t\ts = Math.sin(halfAngle);\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos(halfAngle);\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tconst te = m.elements,\n\t\t\t\t\t\tm11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8],\n\t\t\t\t\t\tm21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9],\n\t\t\t\t\t\tm31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10],\n\t\t\t\t\t\ttrace = m11 + m22 + m33;\n\n\t\t\tif (trace > 0) {\n\t\t\t\tconst s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = (m32 - m23) * s;\n\t\t\t\tthis._y = (m13 - m31) * s;\n\t\t\t\tthis._z = (m21 - m12) * s;\n\t\t\t} else if (m11 > m22 && m11 > m33) {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\t\t\t\tthis._w = (m32 - m23) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = (m12 + m21) / s;\n\t\t\t\tthis._z = (m13 + m31) / s;\n\t\t\t} else if (m22 > m33) {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\t\t\t\tthis._w = (m13 - m31) / s;\n\t\t\t\tthis._x = (m12 + m21) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = (m23 + m32) / s;\n\t\t\t} else {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\t\t\t\tthis._w = (m21 - m12) / s;\n\t\t\t\tthis._x = (m13 + m31) / s;\n\t\t\t\tthis._y = (m23 + m32) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromUnitVectors(vFrom, vTo) {\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\t\t\tlet r = vFrom.dot(vTo) + 1;\n\n\t\t\tif (r < Number.EPSILON) {\n\t\t\t\t// vFrom and vTo point in opposite directions\n\t\t\t\tr = 0;\n\n\t\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t} else {\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\t\t}\n\n\t\tangleTo(q) {\n\t\t\treturn 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));\n\t\t}\n\n\t\trotateTowards(q, step) {\n\t\t\tconst angle = this.angleTo(q);\n\t\t\tif (angle === 0) return this;\n\t\t\tconst t = Math.min(1, step / angle);\n\t\t\tthis.slerp(q, t);\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\treturn this.set(0, 0, 0, 1);\n\t\t}\n\n\t\tinvert() {\n\t\t\t// quaternion is assumed to have unit length\n\t\t\treturn this.conjugate();\n\t\t}\n\n\t\tconjugate() {\n\t\t\tthis._x *= -1;\n\t\t\tthis._y *= -1;\n\t\t\tthis._z *= -1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n\t\t}\n\n\t\tnormalize() {\n\t\t\tlet l = this.length();\n\n\t\t\tif (l === 0) {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\t\t\t} else {\n\t\t\t\tl = 1 / l;\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(q, p) {\n\t\t\tif (p !== undefined) {\n\t\t\t\tconsole.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n\t\t\t\treturn this.multiplyQuaternions(q, p);\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions(this, q);\n\t\t}\n\n\t\tpremultiply(q) {\n\t\t\treturn this.multiplyQuaternions(q, this);\n\t\t}\n\n\t\tmultiplyQuaternions(a, b) {\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\t\tconst qax = a._x,\n\t\t\t\t\t\tqay = a._y,\n\t\t\t\t\t\tqaz = a._z,\n\t\t\t\t\t\tqaw = a._w;\n\t\t\tconst qbx = b._x,\n\t\t\t\t\t\tqby = b._y,\n\t\t\t\t\t\tqbz = b._z,\n\t\t\t\t\t\tqbw = b._w;\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tslerp(qb, t) {\n\t\t\tif (t === 0) return this;\n\t\t\tif (t === 1) return this.copy(qb);\n\t\t\tconst x = this._x,\n\t\t\t\t\t\ty = this._y,\n\t\t\t\t\t\tz = this._z,\n\t\t\t\t\t\tw = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif (cosHalfTheta < 0) {\n\t\t\t\tthis._w = -qb._w;\n\t\t\t\tthis._x = -qb._x;\n\t\t\t\tthis._y = -qb._y;\n\t\t\t\tthis._z = -qb._z;\n\t\t\t\tcosHalfTheta = -cosHalfTheta;\n\t\t\t} else {\n\t\t\t\tthis.copy(qb);\n\t\t\t}\n\n\t\t\tif (cosHalfTheta >= 1.0) {\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif (sqrSinHalfTheta <= Number.EPSILON) {\n\t\t\t\tconst s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\t\t\t\tthis.normalize();\n\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n\t\t\tconst halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n\t\t\tconst ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n\t\t\t\t\t\tratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\t\t\tthis._w = w * ratioA + this._w * ratioB;\n\t\t\tthis._x = x * ratioA + this._x * ratioB;\n\t\t\tthis._y = y * ratioA + this._y * ratioB;\n\t\t\tthis._z = z * ratioA + this._z * ratioB;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tslerpQuaternions(qa, qb, t) {\n\t\t\tthis.copy(qa).slerp(qb, t);\n\t\t}\n\n\t\tequals(quaternion) {\n\t\t\treturn quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis._x = array[offset];\n\t\t\tthis._y = array[offset + 1];\n\t\t\tthis._z = array[offset + 2];\n\t\t\tthis._w = array[offset + 3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._w;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index) {\n\t\t\tthis._x = attribute.getX(index);\n\t\t\tthis._y = attribute.getY(index);\n\t\t\tthis._z = attribute.getZ(index);\n\t\t\tthis._w = attribute.getW(index);\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChangeCallback() {}\n\n\t}\n\n\tQuaternion.prototype.isQuaternion = true;\n\n\tclass Vector3 {\n\t\tconstructor(x = 0, y = 0, z = 0) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t}\n\n\t\tset(x, y, z) {\n\t\t\tif (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n\t\t\t\treturn this.multiplyVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyVectors(a, b) {\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion(_quaternion$4.setFromEuler(euler));\n\t\t}\n\n\t\tapplyAxisAngle(axis, angle) {\n\t\t\treturn this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\n\t\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\treturn this.applyMatrix3(m).normalize();\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tconst w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\t\t\tthis.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n\t\t\tthis.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n\t\t\tthis.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst qx = q.x,\n\t\t\t\t\t\tqy = q.y,\n\t\t\t\t\t\tqz = q.z,\n\t\t\t\t\t\tqw = q.w; // calculate quat * vector\n\n\t\t\tconst ix = qw * x + qy * z - qz * y;\n\t\t\tconst iy = qw * y + qz * x - qx * z;\n\t\t\tconst iz = qw * z + qx * y - qy * x;\n\t\t\tconst iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t\t\treturn this;\n\t\t}\n\n\t\tproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n\t\t}\n\n\t\tunproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z;\n\t\t\treturn this.normalize();\n\t\t}\n\n\t\tdivide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\t} // TODO lengthSquared?\n\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tcross(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n\t\t\t\treturn this.crossVectors(v, w);\n\t\t\t}\n\n\t\t\treturn this.crossVectors(this, v);\n\t\t}\n\n\t\tcrossVectors(a, b) {\n\t\t\tconst ax = a.x,\n\t\t\t\t\t\tay = a.y,\n\t\t\t\t\t\taz = a.z;\n\t\t\tconst bx = b.x,\n\t\t\t\t\t\tby = b.y,\n\t\t\t\t\t\tbz = b.z;\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\t\t\treturn this;\n\t\t}\n\n\t\tprojectOnVector(v) {\n\t\t\tconst denominator = v.lengthSq();\n\t\t\tif (denominator === 0) return this.set(0, 0, 0);\n\t\t\tconst scalar = v.dot(this) / denominator;\n\t\t\treturn this.copy(v).multiplyScalar(scalar);\n\t\t}\n\n\t\tprojectOnPlane(planeNormal) {\n\t\t\t_vector$c.copy(this).projectOnVector(planeNormal);\n\n\t\t\treturn this.sub(_vector$c);\n\t\t}\n\n\t\treflect(normal) {\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\t\t\treturn this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));\n\t\t}\n\n\t\tangleTo(v) {\n\t\t\tconst denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n\t\t\tif (denominator === 0) return Math.PI / 2;\n\t\t\tconst theta = this.dot(v) / denominator; // clamp, to handle numerical problems\n\n\t\t\treturn Math.acos(clamp(theta, -1, 1));\n\t\t}\n\n\t\tdistanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t}\n\n\t\tdistanceToSquared(v) {\n\t\t\tconst dx = this.x - v.x,\n\t\t\t\t\t\tdy = this.y - v.y,\n\t\t\t\t\t\tdz = this.z - v.z;\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\t\t}\n\n\t\tmanhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n\t\t}\n\n\t\tsetFromSpherical(s) {\n\t\t\treturn this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n\t\t}\n\n\t\tsetFromSphericalCoords(radius, phi, theta) {\n\t\t\tconst sinPhiRadius = Math.sin(phi) * radius;\n\t\t\tthis.x = sinPhiRadius * Math.sin(theta);\n\t\t\tthis.y = Math.cos(phi) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos(theta);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCylindrical(c) {\n\t\t\treturn this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n\t\t}\n\n\t\tsetFromCylindricalCoords(radius, theta, y) {\n\t\t\tthis.x = radius * Math.sin(theta);\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos(theta);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixPosition(m) {\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[12];\n\t\t\tthis.y = e[13];\n\t\t\tthis.z = e[14];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixScale(m) {\n\t\t\tconst sx = this.setFromMatrixColumn(m, 0).length();\n\t\t\tconst sy = this.setFromMatrixColumn(m, 1).length();\n\t\t\tconst sz = this.setFromMatrixColumn(m, 2).length();\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixColumn(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 4);\n\t\t}\n\n\t\tsetFromMatrix3Column(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 3);\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector3.prototype.isVector3 = true;\n\n\tconst _vector$c = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n\tclass Box3 {\n\t\tconstructor(min = new Vector3(+Infinity, +Infinity, +Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tset(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromArray(array) {\n\t\t\tlet minX = +Infinity;\n\t\t\tlet minY = +Infinity;\n\t\t\tlet minZ = +Infinity;\n\t\t\tlet maxX = -Infinity;\n\t\t\tlet maxY = -Infinity;\n\t\t\tlet maxZ = -Infinity;\n\n\t\t\tfor (let i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\tconst x = array[i];\n\t\t\t\tconst y = array[i + 1];\n\t\t\t\tconst z = array[i + 2];\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromBufferAttribute(attribute) {\n\t\t\tlet minX = +Infinity;\n\t\t\tlet minY = +Infinity;\n\t\t\tlet minZ = +Infinity;\n\t\t\tlet maxX = -Infinity;\n\t\t\tlet maxY = -Infinity;\n\t\t\tlet maxZ = -Infinity;\n\n\t\t\tfor (let i = 0, l = attribute.count; i < l; i++) {\n\t\t\t\tconst x = attribute.getX(i);\n\t\t\t\tconst y = attribute.getY(i);\n\t\t\t\tconst z = attribute.getZ(i);\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCenterAndSize(center, size) {\n\t\t\tconst halfSize = _vector$b.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromObject(object) {\n\t\t\tthis.makeEmpty();\n\t\t\treturn this.expandByObject(object);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.min.x = this.min.y = this.min.z = +Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t}\n\n\t\tgetSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getSize() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByObject(object) {\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tconst geometry = object.geometry;\n\n\t\t\tif (geometry !== undefined) {\n\t\t\t\tif (geometry.boundingBox === null) {\n\t\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\t}\n\n\t\t\t\t_box$3.copy(geometry.boundingBox);\n\n\t\t\t\t_box$3.applyMatrix4(object.matrixWorld);\n\n\t\t\t\tthis.union(_box$3);\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tthis.expandByObject(children[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n\t\t}\n\n\t\tcontainsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n\t\t}\n\n\t\tgetParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint(sphere.center, _vector$b); // If that point is inside the sphere, the AABB and sphere intersect.\n\n\t\t\treturn _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\t\tlet min, max;\n\n\t\t\tif (plane.normal.x > 0) {\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\t\t\t} else {\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\t\t\t}\n\n\t\t\tif (plane.normal.y > 0) {\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\t\t\t}\n\n\t\t\tif (plane.normal.z > 0) {\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\t\t\t}\n\n\t\t\treturn min <= -plane.constant && max >= -plane.constant;\n\t\t}\n\n\t\tintersectsTriangle(triangle) {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} // compute box center and extents\n\n\n\t\t\tthis.getCenter(_center);\n\n\t\t\t_extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n\t\t\t_v0$2.subVectors(triangle.a, _center);\n\n\t\t\t_v1$7.subVectors(triangle.b, _center);\n\n\t\t\t_v2$3.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n\t\t\t_f0.subVectors(_v1$7, _v0$2);\n\n\t\t\t_f1.subVectors(_v2$3, _v1$7);\n\n\t\t\t_f2.subVectors(_v0$2, _v2$3); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n\t\t\tlet axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n\t\t\tif (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // test 3 face normals from the aabb\n\n\n\t\t\taxes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\n\n\t\t\t_triangleNormal.crossVectors(_f0, _f1);\n\n\t\t\taxes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n\t\t\treturn satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents);\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\tconst clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t}\n\n\t\tgetBoundingSphere(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\n\t\t\t}\n\n\t\t\tthis.getCenter(target.center);\n\t\t\ttarget.radius = this.getSize(_vector$b).length() * 0.5;\n\t\t\treturn target;\n\t\t}\n\n\t\tintersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n\t\t\tif (this.isEmpty()) this.makeEmpty();\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n\t\t\t_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n\t\t\t_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n\t\t\t_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n\t\t\t_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n\t\t\t_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n\t\t\t_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n\t\t\t_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n\t\t\t_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n\t\t\tthis.setFromPoints(_points);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t}\n\n\t}\n\n\tBox3.prototype.isBox3 = true;\n\tconst _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\n\tconst _vector$b = /*@__PURE__*/new Vector3();\n\n\tconst _box$3 = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\n\tconst _v0$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v1$7 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$3 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\n\tconst _f0 = /*@__PURE__*/new Vector3();\n\n\tconst _f1 = /*@__PURE__*/new Vector3();\n\n\tconst _f2 = /*@__PURE__*/new Vector3();\n\n\tconst _center = /*@__PURE__*/new Vector3();\n\n\tconst _extents = /*@__PURE__*/new Vector3();\n\n\tconst _triangleNormal = /*@__PURE__*/new Vector3();\n\n\tconst _testAxis = /*@__PURE__*/new Vector3();\n\n\tfunction satForAxes(axes, v0, v1, v2, extents) {\n\t\tfor (let i = 0, j = axes.length - 3; i <= j; i += 3) {\n\t\t\t_testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n\t\t\tconst r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n\t\t\tconst p0 = v0.dot(_testAxis);\n\t\t\tconst p1 = v1.dot(_testAxis);\n\t\t\tconst p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n\t\t\tif (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tconst _box$2 = /*@__PURE__*/new Box3();\n\n\tconst _v1$6 = /*@__PURE__*/new Vector3();\n\n\tconst _toFarthestPoint = /*@__PURE__*/new Vector3();\n\n\tconst _toPoint = /*@__PURE__*/new Vector3();\n\n\tclass Sphere {\n\t\tconstructor(center = new Vector3(), radius = -1) {\n\t\t\tthis.center = center;\n\t\t\tthis.radius = radius;\n\t\t}\n\n\t\tset(center, radius) {\n\t\t\tthis.center.copy(center);\n\t\t\tthis.radius = radius;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points, optionalCenter) {\n\t\t\tconst center = this.center;\n\n\t\t\tif (optionalCenter !== undefined) {\n\t\t\t\tcenter.copy(optionalCenter);\n\t\t\t} else {\n\t\t\t\t_box$2.setFromPoints(points).getCenter(center);\n\t\t\t}\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt(maxRadiusSq);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(sphere) {\n\t\t\tthis.center.copy(sphere.center);\n\t\t\tthis.radius = sphere.radius;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\treturn this.radius < 0;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.center.set(0, 0, 0);\n\t\t\tthis.radius = -1;\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.distanceToSquared(this.center) <= this.radius * this.radius;\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn point.distanceTo(this.center) - this.radius;\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\tconst radiusSum = this.radius + sphere.radius;\n\t\t\treturn sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsSphere(this);\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\treturn Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tconst deltaLengthSq = this.center.distanceToSquared(point);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.copy(point);\n\n\t\t\tif (deltaLengthSq > this.radius * this.radius) {\n\t\t\t\ttarget.sub(this.center).normalize();\n\t\t\t\ttarget.multiplyScalar(this.radius).add(this.center);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t}\n\n\t\tgetBoundingBox(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .getBoundingBox() target is now required');\n\t\t\t\ttarget = new Box3();\n\t\t\t}\n\n\t\t\tif (this.isEmpty()) {\n\t\t\t\t// Empty sphere produces empty bounding box\n\t\t\t\ttarget.makeEmpty();\n\t\t\t\treturn target;\n\t\t\t}\n\n\t\t\ttarget.set(this.center, this.center);\n\t\t\ttarget.expandByScalar(this.radius);\n\t\t\treturn target;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tthis.center.applyMatrix4(matrix);\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.center.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n\t\t\t_toPoint.subVectors(point, this.center);\n\n\t\t\tconst lengthSq = _toPoint.lengthSq();\n\n\t\t\tif (lengthSq > this.radius * this.radius) {\n\t\t\t\tconst length = Math.sqrt(lengthSq);\n\t\t\t\tconst missingRadiusHalf = (length - this.radius) * 0.5; // Nudge this sphere towards the target point. Add half the missing distance to radius,\n\t\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\n\t\t\t\t// the whole missing distance were just added to radius.\n\n\t\t\t\tthis.center.add(_toPoint.multiplyScalar(missingRadiusHalf / length));\n\t\t\t\tthis.radius += missingRadiusHalf;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(sphere) {\n\t\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n\t\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\n\t\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\n\t\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\n\t\t\t_toFarthestPoint.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);\n\n\t\t\tthis.expandByPoint(_v1$6.copy(sphere.center).add(_toFarthestPoint));\n\t\t\tthis.expandByPoint(_v1$6.copy(sphere.center).sub(_toFarthestPoint));\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(sphere) {\n\t\t\treturn sphere.center.equals(this.center) && sphere.radius === this.radius;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tconst _vector$a = /*@__PURE__*/new Vector3();\n\n\tconst _segCenter = /*@__PURE__*/new Vector3();\n\n\tconst _segDir = /*@__PURE__*/new Vector3();\n\n\tconst _diff = /*@__PURE__*/new Vector3();\n\n\tconst _edge1 = /*@__PURE__*/new Vector3();\n\n\tconst _edge2 = /*@__PURE__*/new Vector3();\n\n\tconst _normal$1 = /*@__PURE__*/new Vector3();\n\n\tclass Ray {\n\t\tconstructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {\n\t\t\tthis.origin = origin;\n\t\t\tthis.direction = direction;\n\t\t}\n\n\t\tset(origin, direction) {\n\t\t\tthis.origin.copy(origin);\n\t\t\tthis.direction.copy(direction);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(ray) {\n\t\t\tthis.origin.copy(ray.origin);\n\t\t\tthis.direction.copy(ray.direction);\n\t\t\treturn this;\n\t\t}\n\n\t\tat(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(t).add(this.origin);\n\t\t}\n\n\t\tlookAt(v) {\n\t\t\tthis.direction.copy(v).sub(this.origin).normalize();\n\t\t\treturn this;\n\t\t}\n\n\t\trecast(t) {\n\t\t\tthis.origin.copy(this.at(t, _vector$a));\n\t\t\treturn this;\n\t\t}\n\n\t\tclosestPointToPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(point, this.origin);\n\t\t\tconst directionDistance = target.dot(this.direction);\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn target.copy(this.origin);\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn Math.sqrt(this.distanceSqToPoint(point));\n\t\t}\n\n\t\tdistanceSqToPoint(point) {\n\t\t\tconst directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn this.origin.distanceToSquared(point);\n\t\t\t}\n\n\t\t\t_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n\t\t\treturn _vector$a.distanceToSquared(point);\n\t\t}\n\n\t\tdistanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\t\t\t_segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n\t\t\t_segDir.copy(v1).sub(v0).normalize();\n\n\t\t\t_diff.copy(this.origin).sub(_segCenter);\n\n\t\t\tconst segExtent = v0.distanceTo(v1) * 0.5;\n\t\t\tconst a01 = -this.direction.dot(_segDir);\n\n\t\t\tconst b0 = _diff.dot(this.direction);\n\n\t\t\tconst b1 = -_diff.dot(_segDir);\n\n\t\t\tconst c = _diff.lengthSq();\n\n\t\t\tconst det = Math.abs(1 - a01 * a01);\n\t\t\tlet s0, s1, sqrDist, extDet;\n\n\t\t\tif (det > 0) {\n\t\t\t\t// The ray and segment are not parallel.\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif (s0 >= 0) {\n\t\t\t\t\tif (s1 >= -extDet) {\n\t\t\t\t\t\tif (s1 <= extDet) {\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// region 1\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 5\n\t\t\t\t\t\ts1 = -segExtent;\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (s1 <= -extDet) {\n\t\t\t\t\t\t// region 4\n\t\t\t\t\t\ts0 = Math.max(0, -(-a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else if (s1 <= extDet) {\n\t\t\t\t\t\t// region 3\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 2\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Ray and segment are parallel.\n\t\t\t\ts1 = a01 > 0 ? -segExtent : segExtent;\n\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t}\n\n\t\t\tif (optionalPointOnRay) {\n\t\t\t\toptionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n\t\t\t}\n\n\t\t\tif (optionalPointOnSegment) {\n\t\t\t\toptionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\t\t}\n\n\t\tintersectSphere(sphere, target) {\n\t\t\t_vector$a.subVectors(sphere.center, this.origin);\n\n\t\t\tconst tca = _vector$a.dot(this.direction);\n\n\t\t\tconst d2 = _vector$a.dot(_vector$a) - tca * tca;\n\t\t\tconst radius2 = sphere.radius * sphere.radius;\n\t\t\tif (d2 > radius2) return null;\n\t\t\tconst thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n\t\t\tconst t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n\t\t\tconst t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n\t\t\tif (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\n\t\t\tif (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n\t\t\treturn this.at(t0, target);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\treturn this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n\t\t}\n\n\t\tdistanceToPlane(plane) {\n\t\t\tconst denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (plane.distanceToPoint(this.origin) === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} // Null is preferable to undefined since undefined means.... it is undefined\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\t\t}\n\n\t\tintersectPlane(plane, target) {\n\t\t\tconst t = this.distanceToPlane(plane);\n\n\t\t\tif (t === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this.at(t, target);\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\t// check if the ray lies on the plane first\n\t\t\tconst distToPoint = plane.distanceToPoint(this.origin);\n\n\t\t\tif (distToPoint === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator * distToPoint < 0) {\n\t\t\t\treturn true;\n\t\t\t} // ray origin is behind the plane (and is pointing behind it)\n\n\n\t\t\treturn false;\n\t\t}\n\n\t\tintersectBox(box, target) {\n\t\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\t\tconst invdirx = 1 / this.direction.x,\n\t\t\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\t\t\tinvdirz = 1 / this.direction.z;\n\t\t\tconst origin = this.origin;\n\n\t\t\tif (invdirx >= 0) {\n\t\t\t\ttmin = (box.min.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.max.x - origin.x) * invdirx;\n\t\t\t} else {\n\t\t\t\ttmin = (box.max.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.min.x - origin.x) * invdirx;\n\t\t\t}\n\n\t\t\tif (invdiry >= 0) {\n\t\t\t\ttymin = (box.min.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.max.y - origin.y) * invdiry;\n\t\t\t} else {\n\t\t\t\ttymin = (box.max.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.min.y - origin.y) * invdiry;\n\t\t\t}\n\n\t\t\tif (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif (tymin > tmin || tmin !== tmin) tmin = tymin;\n\t\t\tif (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n\t\t\tif (invdirz >= 0) {\n\t\t\t\ttzmin = (box.min.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.max.z - origin.z) * invdirz;\n\t\t\t} else {\n\t\t\t\ttzmin = (box.max.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.min.z - origin.z) * invdirz;\n\t\t\t}\n\n\t\t\tif (tmin > tzmax || tzmin > tmax) return null;\n\t\t\tif (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n\t\t\tif (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n\t\t\tif (tmax < 0) return null;\n\t\t\treturn this.at(tmin >= 0 ? tmin : tmax, target);\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn this.intersectBox(box, _vector$a) !== null;\n\t\t}\n\n\t\tintersectTriangle(a, b, c, backfaceCulling, target) {\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\t\t_edge1.subVectors(b, a);\n\n\t\t\t_edge2.subVectors(c, a);\n\n\t\t\t_normal$1.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//\t |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//\t |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//\t |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n\t\t\tlet DdN = this.direction.dot(_normal$1);\n\t\t\tlet sign;\n\n\t\t\tif (DdN > 0) {\n\t\t\t\tif (backfaceCulling) return null;\n\t\t\t\tsign = 1;\n\t\t\t} else if (DdN < 0) {\n\t\t\t\tsign = -1;\n\t\t\t\tDdN = -DdN;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_diff.subVectors(this.origin, a);\n\n\t\t\tconst DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n\t\t\tif (DdQxE2 < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n\t\t\tif (DdE1xQ < 0) {\n\t\t\t\treturn null;\n\t\t\t} // b1+b2 > 1, no intersection\n\n\n\t\t\tif (DdQxE2 + DdE1xQ > DdN) {\n\t\t\t\treturn null;\n\t\t\t} // Line intersects triangle, check if ray does.\n\n\n\t\t\tconst QdN = -sign * _diff.dot(_normal$1); // t < 0, no intersection\n\n\n\t\t\tif (QdN < 0) {\n\t\t\t\treturn null;\n\t\t\t} // Ray intersects triangle.\n\n\n\t\t\treturn this.at(QdN / DdN, target);\n\t\t}\n\n\t\tapplyMatrix4(matrix4) {\n\t\t\tthis.origin.applyMatrix4(matrix4);\n\t\t\tthis.direction.transformDirection(matrix4);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(ray) {\n\t\t\treturn ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tclass Matrix4 {\n\t\tconstructor() {\n\t\t\tthis.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tset(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[4] = n12;\n\t\t\tte[8] = n13;\n\t\t\tte[12] = n14;\n\t\t\tte[1] = n21;\n\t\t\tte[5] = n22;\n\t\t\tte[9] = n23;\n\t\t\tte[13] = n24;\n\t\t\tte[2] = n31;\n\t\t\tte[6] = n32;\n\t\t\tte[10] = n33;\n\t\t\tte[14] = n34;\n\t\t\tte[3] = n41;\n\t\t\tte[7] = n42;\n\t\t\tte[11] = n43;\n\t\t\tte[15] = n44;\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\tthis.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Matrix4().fromArray(this.elements);\n\t\t}\n\n\t\tcopy(m) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\tte[9] = me[9];\n\t\t\tte[10] = me[10];\n\t\t\tte[11] = me[11];\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\tte[15] = me[15];\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyPosition(m) {\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tme = m.elements;\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrix3(m) {\n\t\t\tconst me = m.elements;\n\t\t\tthis.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\textractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrixColumn(this, 0);\n\t\t\tyAxis.setFromMatrixColumn(this, 1);\n\t\t\tzAxis.setFromMatrixColumn(this, 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeBasis(xAxis, yAxis, zAxis) {\n\t\t\tthis.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\textractRotation(m) {\n\t\t\t// this method does not support reflection matrices\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\n\t\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();\n\n\t\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();\n\n\t\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();\n\n\t\t\tte[0] = me[0] * scaleX;\n\t\t\tte[1] = me[1] * scaleX;\n\t\t\tte[2] = me[2] * scaleX;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = me[4] * scaleY;\n\t\t\tte[5] = me[5] * scaleY;\n\t\t\tte[6] = me[6] * scaleY;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = me[8] * scaleZ;\n\t\t\tte[9] = me[9] * scaleZ;\n\t\t\tte[10] = me[10] * scaleZ;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationFromEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tconst te = this.elements;\n\t\t\tconst x = euler.x,\n\t\t\t\t\t\ty = euler.y,\n\t\t\t\t\t\tz = euler.z;\n\t\t\tconst a = Math.cos(x),\n\t\t\t\t\t\tb = Math.sin(x);\n\t\t\tconst c = Math.cos(y),\n\t\t\t\t\t\td = Math.sin(y);\n\t\t\tconst e = Math.cos(z),\n\t\t\t\t\t\tf = Math.sin(z);\n\n\t\t\tif (euler.order === 'XYZ') {\n\t\t\t\tconst ae = a * e,\n\t\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -c * f;\n\t\t\t\tte[8] = d;\n\t\t\t\tte[1] = af + be * d;\n\t\t\t\tte[5] = ae - bf * d;\n\t\t\t\tte[9] = -b * c;\n\t\t\t\tte[2] = bf - ae * d;\n\t\t\t\tte[6] = be + af * d;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YXZ') {\n\t\t\t\tconst ce = c * e,\n\t\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce + df * b;\n\t\t\t\tte[4] = de * b - cf;\n\t\t\t\tte[8] = a * d;\n\t\t\t\tte[1] = a * f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b;\n\t\t\t\tte[2] = cf * b - de;\n\t\t\t\tte[6] = df + ce * b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZXY') {\n\t\t\t\tconst ce = c * e,\n\t\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce - df * b;\n\t\t\t\tte[4] = -a * f;\n\t\t\t\tte[8] = de + cf * b;\n\t\t\t\tte[1] = cf + de * b;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = df - ce * b;\n\t\t\t\tte[2] = -a * d;\n\t\t\t\tte[6] = b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZYX') {\n\t\t\t\tconst ae = a * e,\n\t\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = be * d - af;\n\t\t\t\tte[8] = ae * d + bf;\n\t\t\t\tte[1] = c * f;\n\t\t\t\tte[5] = bf * d + ae;\n\t\t\t\tte[9] = af * d - be;\n\t\t\t\tte[2] = -d;\n\t\t\t\tte[6] = b * c;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YZX') {\n\t\t\t\tconst ac = a * c,\n\t\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = bd - ac * f;\n\t\t\t\tte[8] = bc * f + ad;\n\t\t\t\tte[1] = f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b * e;\n\t\t\t\tte[2] = -d * e;\n\t\t\t\tte[6] = ad * f + bc;\n\t\t\t\tte[10] = ac - bd * f;\n\t\t\t} else if (euler.order === 'XZY') {\n\t\t\t\tconst ac = a * c,\n\t\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -f;\n\t\t\t\tte[8] = d * e;\n\t\t\t\tte[1] = ac * f + bd;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = ad * f - bc;\n\t\t\t\tte[2] = bc * f - ad;\n\t\t\t\tte[6] = b * e;\n\t\t\t\tte[10] = bd * f + ac;\n\t\t\t} // bottom row\n\n\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0; // last column\n\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationFromQuaternion(q) {\n\t\t\treturn this.compose(_zero, q, _one);\n\t\t}\n\n\t\tlookAt(eye, target, up) {\n\t\t\tconst te = this.elements;\n\n\t\t\t_z.subVectors(eye, target);\n\n\t\t\tif (_z.lengthSq() === 0) {\n\t\t\t\t// eye and target are in the same position\n\t\t\t\t_z.z = 1;\n\t\t\t}\n\n\t\t\t_z.normalize();\n\n\t\t\t_x.crossVectors(up, _z);\n\n\t\t\tif (_x.lengthSq() === 0) {\n\t\t\t\t// up and z are parallel\n\t\t\t\tif (Math.abs(up.z) === 1) {\n\t\t\t\t\t_z.x += 0.0001;\n\t\t\t\t} else {\n\t\t\t\t\t_z.z += 0.0001;\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\n\t\t\t\t_x.crossVectors(up, _z);\n\t\t\t}\n\n\t\t\t_x.normalize();\n\n\t\t\t_y.crossVectors(_z, _x);\n\n\t\t\tte[0] = _x.x;\n\t\t\tte[4] = _y.x;\n\t\t\tte[8] = _z.x;\n\t\t\tte[1] = _x.y;\n\t\t\tte[5] = _y.y;\n\t\t\tte[9] = _z.y;\n\t\t\tte[2] = _x.z;\n\t\t\tte[6] = _y.z;\n\t\t\tte[10] = _z.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(m, n) {\n\t\t\tif (n !== undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n\t\t\t\treturn this.multiplyMatrices(m, n);\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t}\n\n\t\tpremultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t}\n\n\t\tmultiplyMatrices(a, b) {\n\t\t\tconst ae = a.elements;\n\t\t\tconst be = b.elements;\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = ae[0],\n\t\t\t\t\t\ta12 = ae[4],\n\t\t\t\t\t\ta13 = ae[8],\n\t\t\t\t\t\ta14 = ae[12];\n\t\t\tconst a21 = ae[1],\n\t\t\t\t\t\ta22 = ae[5],\n\t\t\t\t\t\ta23 = ae[9],\n\t\t\t\t\t\ta24 = ae[13];\n\t\t\tconst a31 = ae[2],\n\t\t\t\t\t\ta32 = ae[6],\n\t\t\t\t\t\ta33 = ae[10],\n\t\t\t\t\t\ta34 = ae[14];\n\t\t\tconst a41 = ae[3],\n\t\t\t\t\t\ta42 = ae[7],\n\t\t\t\t\t\ta43 = ae[11],\n\t\t\t\t\t\ta44 = ae[15];\n\t\t\tconst b11 = be[0],\n\t\t\t\t\t\tb12 = be[4],\n\t\t\t\t\t\tb13 = be[8],\n\t\t\t\t\t\tb14 = be[12];\n\t\t\tconst b21 = be[1],\n\t\t\t\t\t\tb22 = be[5],\n\t\t\t\t\t\tb23 = be[9],\n\t\t\t\t\t\tb24 = be[13];\n\t\t\tconst b31 = be[2],\n\t\t\t\t\t\tb32 = be[6],\n\t\t\t\t\t\tb33 = be[10],\n\t\t\t\t\t\tb34 = be[14];\n\t\t\tconst b41 = be[3],\n\t\t\t\t\t\tb42 = be[7],\n\t\t\t\t\t\tb43 = be[11],\n\t\t\t\t\t\tb44 = be[15];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[8] *= s;\n\t\t\tte[12] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[9] *= s;\n\t\t\tte[13] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[10] *= s;\n\t\t\tte[14] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[11] *= s;\n\t\t\tte[15] *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeterminant() {\n\t\t\tconst te = this.elements;\n\t\t\tconst n11 = te[0],\n\t\t\t\t\t\tn12 = te[4],\n\t\t\t\t\t\tn13 = te[8],\n\t\t\t\t\t\tn14 = te[12];\n\t\t\tconst n21 = te[1],\n\t\t\t\t\t\tn22 = te[5],\n\t\t\t\t\t\tn23 = te[9],\n\t\t\t\t\t\tn24 = te[13];\n\t\t\tconst n31 = te[2],\n\t\t\t\t\t\tn32 = te[6],\n\t\t\t\t\t\tn33 = te[10],\n\t\t\t\t\t\tn34 = te[14];\n\t\t\tconst n41 = te[3],\n\t\t\t\t\t\tn42 = te[7],\n\t\t\t\t\t\tn43 = te[11],\n\t\t\t\t\t\tn44 = te[15]; //TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n\t\t}\n\n\t\ttranspose() {\n\t\t\tconst te = this.elements;\n\t\t\tlet tmp;\n\t\t\ttmp = te[1];\n\t\t\tte[1] = te[4];\n\t\t\tte[4] = tmp;\n\t\t\ttmp = te[2];\n\t\t\tte[2] = te[8];\n\t\t\tte[8] = tmp;\n\t\t\ttmp = te[6];\n\t\t\tte[6] = te[9];\n\t\t\tte[9] = tmp;\n\t\t\ttmp = te[3];\n\t\t\tte[3] = te[12];\n\t\t\tte[12] = tmp;\n\t\t\ttmp = te[7];\n\t\t\tte[7] = te[13];\n\t\t\tte[13] = tmp;\n\t\t\ttmp = te[11];\n\t\t\tte[11] = te[14];\n\t\t\tte[14] = tmp;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetPosition(x, y, z) {\n\t\t\tconst te = this.elements;\n\n\t\t\tif (x.isVector3) {\n\t\t\t\tte[12] = x.x;\n\t\t\t\tte[13] = x.y;\n\t\t\t\tte[14] = x.z;\n\t\t\t} else {\n\t\t\t\tte[12] = x;\n\t\t\t\tte[13] = y;\n\t\t\t\tte[14] = z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tinvert() {\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tn11 = te[0],\n\t\t\t\t\t\tn21 = te[1],\n\t\t\t\t\t\tn31 = te[2],\n\t\t\t\t\t\tn41 = te[3],\n\t\t\t\t\t\tn12 = te[4],\n\t\t\t\t\t\tn22 = te[5],\n\t\t\t\t\t\tn32 = te[6],\n\t\t\t\t\t\tn42 = te[7],\n\t\t\t\t\t\tn13 = te[8],\n\t\t\t\t\t\tn23 = te[9],\n\t\t\t\t\t\tn33 = te[10],\n\t\t\t\t\t\tn43 = te[11],\n\t\t\t\t\t\tn14 = te[12],\n\t\t\t\t\t\tn24 = te[13],\n\t\t\t\t\t\tn34 = te[14],\n\t\t\t\t\t\tn44 = te[15],\n\t\t\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tconst detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n\t\t\tte[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n\t\t\tte[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n\t\t\tte[4] = t12 * detInv;\n\t\t\tte[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n\t\t\tte[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n\t\t\tte[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n\t\t\tte[8] = t13 * detInv;\n\t\t\tte[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n\t\t\tte[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n\t\t\tte[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n\t\t\tte[12] = t14 * detInv;\n\t\t\tte[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n\t\t\tte[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n\t\t\tte[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(v) {\n\t\t\tconst te = this.elements;\n\t\t\tconst x = v.x,\n\t\t\t\t\t\ty = v.y,\n\t\t\t\t\t\tz = v.z;\n\t\t\tte[0] *= x;\n\t\t\tte[4] *= y;\n\t\t\tte[8] *= z;\n\t\t\tte[1] *= x;\n\t\t\tte[5] *= y;\n\t\t\tte[9] *= z;\n\t\t\tte[2] *= x;\n\t\t\tte[6] *= y;\n\t\t\tte[10] *= z;\n\t\t\tte[3] *= x;\n\t\t\tte[7] *= y;\n\t\t\tte[11] *= z;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMaxScaleOnAxis() {\n\t\t\tconst te = this.elements;\n\t\t\tconst scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n\t\t\tconst scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n\t\t\tconst scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\t\t\treturn Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n\t\t}\n\n\t\tmakeTranslation(x, y, z) {\n\t\t\tthis.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationX(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationY(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationZ(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationAxis(axis, angle) {\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t\tconst c = Math.cos(angle);\n\t\t\tconst s = Math.sin(angle);\n\t\t\tconst t = 1 - c;\n\t\t\tconst x = axis.x,\n\t\t\t\t\t\ty = axis.y,\n\t\t\t\t\t\tz = axis.z;\n\t\t\tconst tx = t * x,\n\t\t\t\t\t\tty = t * y;\n\t\t\tthis.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeScale(x, y, z) {\n\t\t\tthis.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeShear(xy, xz, yx, yz, zx, zy) {\n\t\t\tthis.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tcompose(position, quaternion, scale) {\n\t\t\tconst te = this.elements;\n\t\t\tconst x = quaternion._x,\n\t\t\t\t\t\ty = quaternion._y,\n\t\t\t\t\t\tz = quaternion._z,\n\t\t\t\t\t\tw = quaternion._w;\n\t\t\tconst x2 = x + x,\n\t\t\t\t\t\ty2 = y + y,\n\t\t\t\t\t\tz2 = z + z;\n\t\t\tconst xx = x * x2,\n\t\t\t\t\t\txy = x * y2,\n\t\t\t\t\t\txz = x * z2;\n\t\t\tconst yy = y * y2,\n\t\t\t\t\t\tyz = y * z2,\n\t\t\t\t\t\tzz = z * z2;\n\t\t\tconst wx = w * x2,\n\t\t\t\t\t\twy = w * y2,\n\t\t\t\t\t\twz = w * z2;\n\t\t\tconst sx = scale.x,\n\t\t\t\t\t\tsy = scale.y,\n\t\t\t\t\t\tsz = scale.z;\n\t\t\tte[0] = (1 - (yy + zz)) * sx;\n\t\t\tte[1] = (xy + wz) * sx;\n\t\t\tte[2] = (xz - wy) * sx;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = (xy - wz) * sy;\n\t\t\tte[5] = (1 - (xx + zz)) * sy;\n\t\t\tte[6] = (yz + wx) * sy;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = (xz + wy) * sz;\n\t\t\tte[9] = (yz - wx) * sz;\n\t\t\tte[10] = (1 - (xx + yy)) * sz;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = position.x;\n\t\t\tte[13] = position.y;\n\t\t\tte[14] = position.z;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tdecompose(position, quaternion, scale) {\n\t\t\tconst te = this.elements;\n\n\t\t\tlet sx = _v1$5.set(te[0], te[1], te[2]).length();\n\n\t\t\tconst sy = _v1$5.set(te[4], te[5], te[6]).length();\n\n\t\t\tconst sz = _v1$5.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n\n\t\t\tconst det = this.determinant();\n\t\t\tif (det < 0) sx = -sx;\n\t\t\tposition.x = te[12];\n\t\t\tposition.y = te[13];\n\t\t\tposition.z = te[14]; // scale the rotation part\n\n\t\t\t_m1$2.copy(this);\n\n\t\t\tconst invSX = 1 / sx;\n\t\t\tconst invSY = 1 / sy;\n\t\t\tconst invSZ = 1 / sz;\n\t\t\t_m1$2.elements[0] *= invSX;\n\t\t\t_m1$2.elements[1] *= invSX;\n\t\t\t_m1$2.elements[2] *= invSX;\n\t\t\t_m1$2.elements[4] *= invSY;\n\t\t\t_m1$2.elements[5] *= invSY;\n\t\t\t_m1$2.elements[6] *= invSY;\n\t\t\t_m1$2.elements[8] *= invSZ;\n\t\t\t_m1$2.elements[9] *= invSZ;\n\t\t\t_m1$2.elements[10] *= invSZ;\n\t\t\tquaternion.setFromRotationMatrix(_m1$2);\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakePerspective(left, right, top, bottom, near, far) {\n\t\t\tif (far === undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n\t\t\t}\n\n\t\t\tconst te = this.elements;\n\t\t\tconst x = 2 * near / (right - left);\n\t\t\tconst y = 2 * near / (top - bottom);\n\t\t\tconst a = (right + left) / (right - left);\n\t\t\tconst b = (top + bottom) / (top - bottom);\n\t\t\tconst c = -(far + near) / (far - near);\n\t\t\tconst d = -2 * far * near / (far - near);\n\t\t\tte[0] = x;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = a;\n\t\t\tte[12] = 0;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = y;\n\t\t\tte[9] = b;\n\t\t\tte[13] = 0;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = c;\n\t\t\tte[14] = d;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = -1;\n\t\t\tte[15] = 0;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeOrthographic(left, right, top, bottom, near, far) {\n\t\t\tconst te = this.elements;\n\t\t\tconst w = 1.0 / (right - left);\n\t\t\tconst h = 1.0 / (top - bottom);\n\t\t\tconst p = 1.0 / (far - near);\n\t\t\tconst x = (right + left) * w;\n\t\t\tconst y = (top + bottom) * h;\n\t\t\tconst z = (far + near) * p;\n\t\t\tte[0] = 2 * w;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = 0;\n\t\t\tte[12] = -x;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = 2 * h;\n\t\t\tte[9] = 0;\n\t\t\tte[13] = -y;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = -2 * p;\n\t\t\tte[14] = -z;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(matrix) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = matrix.elements;\n\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\tarray[offset + 9] = te[9];\n\t\t\tarray[offset + 10] = te[10];\n\t\t\tarray[offset + 11] = te[11];\n\t\t\tarray[offset + 12] = te[12];\n\t\t\tarray[offset + 13] = te[13];\n\t\t\tarray[offset + 14] = te[14];\n\t\t\tarray[offset + 15] = te[15];\n\t\t\treturn array;\n\t\t}\n\n\t}\n\n\tMatrix4.prototype.isMatrix4 = true;\n\n\tconst _v1$5 = /*@__PURE__*/new Vector3();\n\n\tconst _m1$2 = /*@__PURE__*/new Matrix4();\n\n\tconst _zero = /*@__PURE__*/new Vector3(0, 0, 0);\n\n\tconst _one = /*@__PURE__*/new Vector3(1, 1, 1);\n\n\tconst _x = /*@__PURE__*/new Vector3();\n\n\tconst _y = /*@__PURE__*/new Vector3();\n\n\tconst _z = /*@__PURE__*/new Vector3();\n\n\tconst _matrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n\tclass Euler {\n\t\tconstructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order;\n\t\t}\n\n\t\tget x() {\n\t\t\treturn this._x;\n\t\t}\n\n\t\tset x(value) {\n\t\t\tthis._x = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget y() {\n\t\t\treturn this._y;\n\t\t}\n\n\t\tset y(value) {\n\t\t\tthis._y = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget z() {\n\t\t\treturn this._z;\n\t\t}\n\n\t\tset z(value) {\n\t\t\tthis._z = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget order() {\n\t\t\treturn this._order;\n\t\t}\n\n\t\tset order(value) {\n\t\t\tthis._order = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tset(x, y, z, order) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._order);\n\t\t}\n\n\t\tcopy(euler) {\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromRotationMatrix(m, order, update) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tconst te = m.elements;\n\t\t\tconst m11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8];\n\t\t\tconst m21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9];\n\t\t\tconst m31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10];\n\t\t\torder = order || this._order;\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._y = Math.asin(clamp(m13, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m13) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = Math.asin(-clamp(m23, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m23) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = Math.asin(clamp(m32, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m32) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._y = Math.asin(-clamp(m31, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m31) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._z = Math.asin(clamp(m21, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m21) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._z = Math.asin(-clamp(m12, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m12) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tthis._order = order;\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromQuaternion(q, order, update) {\n\t\t\t_matrix$1.makeRotationFromQuaternion(q);\n\n\t\t\treturn this.setFromRotationMatrix(_matrix$1, order, update);\n\t\t}\n\n\t\tsetFromVector3(v, order) {\n\t\t\treturn this.set(v.x, v.y, v.z, order || this._order);\n\t\t}\n\n\t\treorder(newOrder) {\n\t\t\t// WARNING: this discards revolution information -bhouston\n\t\t\t_quaternion$3.setFromEuler(this);\n\n\t\t\treturn this.setFromQuaternion(_quaternion$3, newOrder);\n\t\t}\n\n\t\tequals(euler) {\n\t\t\treturn euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n\t\t}\n\n\t\tfromArray(array) {\n\t\t\tthis._x = array[0];\n\t\t\tthis._y = array[1];\n\t\t\tthis._z = array[2];\n\t\t\tif (array[3] !== undefined) this._order = array[3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._order;\n\t\t\treturn array;\n\t\t}\n\n\t\ttoVector3(optionalResult) {\n\t\t\tif (optionalResult) {\n\t\t\t\treturn optionalResult.set(this._x, this._y, this._z);\n\t\t\t} else {\n\t\t\t\treturn new Vector3(this._x, this._y, this._z);\n\t\t\t}\n\t\t}\n\n\t\t_onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChangeCallback() {}\n\n\t}\n\n\tEuler.prototype.isEuler = true;\n\tEuler.DefaultOrder = 'XYZ';\n\tEuler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\n\n\tclass Layers {\n\t\tconstructor() {\n\t\t\tthis.mask = 1 | 0;\n\t\t}\n\n\t\tset(channel) {\n\t\t\tthis.mask = 1 << channel | 0;\n\t\t}\n\n\t\tenable(channel) {\n\t\t\tthis.mask |= 1 << channel | 0;\n\t\t}\n\n\t\tenableAll() {\n\t\t\tthis.mask = 0xffffffff | 0;\n\t\t}\n\n\t\ttoggle(channel) {\n\t\t\tthis.mask ^= 1 << channel | 0;\n\t\t}\n\n\t\tdisable(channel) {\n\t\t\tthis.mask &= ~(1 << channel | 0);\n\t\t}\n\n\t\tdisableAll() {\n\t\t\tthis.mask = 0;\n\t\t}\n\n\t\ttest(layers) {\n\t\t\treturn (this.mask & layers.mask) !== 0;\n\t\t}\n\n\t}\n\n\tlet _object3DId = 0;\n\n\tconst _v1$4 = /*@__PURE__*/new Vector3();\n\n\tconst _q1 = /*@__PURE__*/new Quaternion();\n\n\tconst _m1$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _target = /*@__PURE__*/new Vector3();\n\n\tconst _position$3 = /*@__PURE__*/new Vector3();\n\n\tconst _scale$2 = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$2 = /*@__PURE__*/new Quaternion();\n\n\tconst _xAxis = /*@__PURE__*/new Vector3(1, 0, 0);\n\n\tconst _yAxis = /*@__PURE__*/new Vector3(0, 1, 0);\n\n\tconst _zAxis = /*@__PURE__*/new Vector3(0, 0, 1);\n\n\tconst _addedEvent = {\n\t\ttype: 'added'\n\t};\n\tconst _removedEvent = {\n\t\ttype: 'removed'\n\t};\n\n\tclass Object3D extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: _object3DId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'Object3D';\n\t\t\tthis.parent = null;\n\t\t\tthis.children = [];\n\t\t\tthis.up = Object3D.DefaultUp.clone();\n\t\t\tconst position = new Vector3();\n\t\t\tconst rotation = new Euler();\n\t\t\tconst quaternion = new Quaternion();\n\t\t\tconst scale = new Vector3(1, 1, 1);\n\n\t\t\tfunction onRotationChange() {\n\t\t\t\tquaternion.setFromEuler(rotation, false);\n\t\t\t}\n\n\t\t\tfunction onQuaternionChange() {\n\t\t\t\trotation.setFromQuaternion(quaternion, undefined, false);\n\t\t\t}\n\n\t\t\trotation._onChange(onRotationChange);\n\n\t\t\tquaternion._onChange(onQuaternionChange);\n\n\t\t\tObject.defineProperties(this, {\n\t\t\t\tposition: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: position\n\t\t\t\t},\n\t\t\t\trotation: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: rotation\n\t\t\t\t},\n\t\t\t\tquaternion: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: quaternion\n\t\t\t\t},\n\t\t\t\tscale: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: scale\n\t\t\t\t},\n\t\t\t\tmodelViewMatrix: {\n\t\t\t\t\tvalue: new Matrix4()\n\t\t\t\t},\n\t\t\t\tnormalMatrix: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.matrixWorld = new Matrix4();\n\t\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\tthis.layers = new Layers();\n\t\t\tthis.visible = true;\n\t\t\tthis.castShadow = false;\n\t\t\tthis.receiveShadow = false;\n\t\t\tthis.frustumCulled = true;\n\t\t\tthis.renderOrder = 0;\n\t\t\tthis.animations = [];\n\t\t\tthis.userData = {};\n\t\t}\n\n\t\tonBeforeRender() {}\n\n\t\tonAfterRender() {}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\t\t\tthis.matrix.premultiply(matrix);\n\t\t\tthis.matrix.decompose(this.position, this.quaternion, this.scale);\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\tthis.quaternion.premultiply(q);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRotationFromAxisAngle(axis, angle) {\n\t\t\t// assumes axis is normalized\n\t\t\tthis.quaternion.setFromAxisAngle(axis, angle);\n\t\t}\n\n\t\tsetRotationFromEuler(euler) {\n\t\t\tthis.quaternion.setFromEuler(euler, true);\n\t\t}\n\n\t\tsetRotationFromMatrix(m) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tthis.quaternion.setFromRotationMatrix(m);\n\t\t}\n\n\t\tsetRotationFromQuaternion(q) {\n\t\t\t// assumes q is normalized\n\t\t\tthis.quaternion.copy(q);\n\t\t}\n\n\t\trotateOnAxis(axis, angle) {\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.multiply(_q1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateOnWorldAxis(axis, angle) {\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.premultiply(_q1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateX(angle) {\n\t\t\treturn this.rotateOnAxis(_xAxis, angle);\n\t\t}\n\n\t\trotateY(angle) {\n\t\t\treturn this.rotateOnAxis(_yAxis, angle);\n\t\t}\n\n\t\trotateZ(angle) {\n\t\t\treturn this.rotateOnAxis(_zAxis, angle);\n\t\t}\n\n\t\ttranslateOnAxis(axis, distance) {\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_v1$4.copy(axis).applyQuaternion(this.quaternion);\n\n\t\t\tthis.position.add(_v1$4.multiplyScalar(distance));\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslateX(distance) {\n\t\t\treturn this.translateOnAxis(_xAxis, distance);\n\t\t}\n\n\t\ttranslateY(distance) {\n\t\t\treturn this.translateOnAxis(_yAxis, distance);\n\t\t}\n\n\t\ttranslateZ(distance) {\n\t\t\treturn this.translateOnAxis(_zAxis, distance);\n\t\t}\n\n\t\tlocalToWorld(vector) {\n\t\t\treturn vector.applyMatrix4(this.matrixWorld);\n\t\t}\n\n\t\tworldToLocal(vector) {\n\t\t\treturn vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n\t\t}\n\n\t\tlookAt(x, y, z) {\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\t\t\tif (x.isVector3) {\n\t\t\t\t_target.copy(x);\n\t\t\t} else {\n\t\t\t\t_target.set(x, y, z);\n\t\t\t}\n\n\t\t\tconst parent = this.parent;\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_position$3.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\tif (this.isCamera || this.isLight) {\n\t\t\t\t_m1$1.lookAt(_position$3, _target, this.up);\n\t\t\t} else {\n\t\t\t\t_m1$1.lookAt(_target, _position$3, this.up);\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix(_m1$1);\n\n\t\t\tif (parent) {\n\t\t\t\t_m1$1.extractRotation(parent.matrixWorld);\n\n\t\t\t\t_q1.setFromRotationMatrix(_m1$1);\n\n\t\t\t\tthis.quaternion.premultiply(_q1.invert());\n\t\t\t}\n\t\t}\n\n\t\tadd(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.add(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object === this) {\n\t\t\t\tconsole.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object && object.isObject3D) {\n\t\t\t\tif (object.parent !== null) {\n\t\t\t\t\tobject.parent.remove(object);\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push(object);\n\t\t\t\tobject.dispatchEvent(_addedEvent);\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tremove(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.remove(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst index = this.children.indexOf(object);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice(index, 1);\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tremoveFromParent() {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tparent.remove(this);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclear() {\n\t\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\t\tconst object = this.children[i];\n\t\t\t\tobject.parent = null;\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\tthis.children.length = 0;\n\t\t\treturn this;\n\t\t}\n\n\t\tattach(object) {\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_m1$1.copy(this.matrixWorld).invert();\n\n\t\t\tif (object.parent !== null) {\n\t\t\t\tobject.parent.updateWorldMatrix(true, false);\n\n\t\t\t\t_m1$1.multiply(object.parent.matrixWorld);\n\t\t\t}\n\n\t\t\tobject.applyMatrix4(_m1$1);\n\t\t\tthis.add(object);\n\t\t\tobject.updateWorldMatrix(false, true);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetObjectById(id) {\n\t\t\treturn this.getObjectByProperty('id', id);\n\t\t}\n\n\t\tgetObjectByName(name) {\n\t\t\treturn this.getObjectByProperty('name', name);\n\t\t}\n\n\t\tgetObjectByProperty(name, value) {\n\t\t\tif (this[name] === value) return this;\n\n\t\t\tfor (let i = 0, l = this.children.length; i < l; i++) {\n\t\t\t\tconst child = this.children[i];\n\t\t\t\tconst object = child.getObjectByProperty(name, value);\n\n\t\t\t\tif (object !== undefined) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tgetWorldPosition(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldPosition() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\treturn target.setFromMatrixPosition(this.matrixWorld);\n\t\t}\n\n\t\tgetWorldQuaternion(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldQuaternion() target is now required');\n\t\t\t\ttarget = new Quaternion();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position$3, target, _scale$2);\n\t\t\treturn target;\n\t\t}\n\n\t\tgetWorldScale(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldScale() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position$3, _quaternion$2, target);\n\t\t\treturn target;\n\t\t}\n\n\t\tgetWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tconst e = this.matrixWorld.elements;\n\t\t\treturn target.set(e[8], e[9], e[10]).normalize();\n\t\t}\n\n\t\traycast() {}\n\n\t\ttraverse(callback) {\n\t\t\tcallback(this);\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverse(callback);\n\t\t\t}\n\t\t}\n\n\t\ttraverseVisible(callback) {\n\t\t\tif (this.visible === false) return;\n\t\t\tcallback(this);\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverseVisible(callback);\n\t\t\t}\n\t\t}\n\n\t\ttraverseAncestors(callback) {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tcallback(parent);\n\t\t\t\tparent.traverseAncestors(callback);\n\t\t\t}\n\t\t}\n\n\t\tupdateMatrix() {\n\t\t\tthis.matrix.compose(this.position, this.quaternion, this.scale);\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.matrixWorldNeedsUpdate || force) {\n\t\t\t\tif (this.parent === null) {\n\t\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\t\tforce = true;\n\t\t\t} // update children\n\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].updateMatrixWorld(force);\n\t\t\t}\n\t\t}\n\n\t\tupdateWorldMatrix(updateParents, updateChildren) {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (updateParents === true && parent !== null) {\n\t\t\t\tparent.updateWorldMatrix(true, false);\n\t\t\t}\n\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.parent === null) {\n\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t} else {\n\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t} // update children\n\n\n\t\t\tif (updateChildren === true) {\n\t\t\t\tconst children = this.children;\n\n\t\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateWorldMatrix(false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tconst isRootObject = meta === undefined || typeof meta === 'string';\n\t\t\tconst output = {}; // meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\n\t\t\tif (isRootObject) {\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {},\n\t\t\t\t\tskeletons: {},\n\t\t\t\t\tanimations: {}\n\t\t\t\t};\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\t\t\t} // standard Object3D serialization\n\n\n\t\t\tconst object = {};\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\t\t\tif (this.name !== '') object.name = this.name;\n\t\t\tif (this.castShadow === true) object.castShadow = true;\n\t\t\tif (this.receiveShadow === true) object.receiveShadow = true;\n\t\t\tif (this.visible === false) object.visible = false;\n\t\t\tif (this.frustumCulled === false) object.frustumCulled = false;\n\t\t\tif (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\t\t\tif (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n\t\t\tif (this.isInstancedMesh) {\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\t\tif (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();\n\t\t\t} //\n\n\n\t\t\tfunction serialize(library, element) {\n\t\t\t\tif (library[element.uuid] === undefined) {\n\t\t\t\t\tlibrary[element.uuid] = element.toJSON(meta);\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\t\t\t}\n\n\t\t\tif (this.isMesh || this.isLine || this.isPoints) {\n\t\t\t\tobject.geometry = serialize(meta.geometries, this.geometry);\n\t\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\t\tif (parameters !== undefined && parameters.shapes !== undefined) {\n\t\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\t\tif (Array.isArray(shapes)) {\n\t\t\t\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\t\t\t\tconst shape = shapes[i];\n\t\t\t\t\t\t\tserialize(meta.shapes, shape);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tserialize(meta.shapes, shapes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isSkinnedMesh) {\n\t\t\t\tobject.bindMode = this.bindMode;\n\t\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\t\tif (this.skeleton !== undefined) {\n\t\t\t\t\tserialize(meta.skeletons, this.skeleton);\n\t\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.material !== undefined) {\n\t\t\t\tif (Array.isArray(this.material)) {\n\t\t\t\t\tconst uuids = [];\n\n\t\t\t\t\tfor (let i = 0, l = this.material.length; i < l; i++) {\n\t\t\t\t\t\tuuids.push(serialize(meta.materials, this.material[i]));\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\t\t\t\t} else {\n\t\t\t\t\tobject.material = serialize(meta.materials, this.material);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.children.length > 0) {\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\t\t\tobject.children.push(this.children[i].toJSON(meta).object);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.animations.length > 0) {\n\t\t\t\tobject.animations = [];\n\n\t\t\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\t\t\tconst animation = this.animations[i];\n\t\t\t\t\tobject.animations.push(serialize(meta.animations, animation));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRootObject) {\n\t\t\t\tconst geometries = extractFromCache(meta.geometries);\n\t\t\t\tconst materials = extractFromCache(meta.materials);\n\t\t\t\tconst textures = extractFromCache(meta.textures);\n\t\t\t\tconst images = extractFromCache(meta.images);\n\t\t\t\tconst shapes = extractFromCache(meta.shapes);\n\t\t\t\tconst skeletons = extractFromCache(meta.skeletons);\n\t\t\t\tconst animations = extractFromCache(meta.animations);\n\t\t\t\tif (geometries.length > 0) output.geometries = geometries;\n\t\t\t\tif (materials.length > 0) output.materials = materials;\n\t\t\t\tif (textures.length > 0) output.textures = textures;\n\t\t\t\tif (images.length > 0) output.images = images;\n\t\t\t\tif (shapes.length > 0) output.shapes = shapes;\n\t\t\t\tif (skeletons.length > 0) output.skeletons = skeletons;\n\t\t\t\tif (animations.length > 0) output.animations = animations;\n\t\t\t}\n\n\t\t\toutput.object = object;\n\t\t\treturn output; // extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (const key in cache) {\n\t\t\t\t\tconst data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\n\t\tclone(recursive) {\n\t\t\treturn new this.constructor().copy(this, recursive);\n\t\t}\n\n\t\tcopy(source, recursive = true) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.up.copy(source.up);\n\t\t\tthis.position.copy(source.position);\n\t\t\tthis.rotation.order = source.rotation.order;\n\t\t\tthis.quaternion.copy(source.quaternion);\n\t\t\tthis.scale.copy(source.scale);\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.matrixWorld.copy(source.matrixWorld);\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\n\t\t\tif (recursive === true) {\n\t\t\t\tfor (let i = 0; i < source.children.length; i++) {\n\t\t\t\t\tconst child = source.children[i];\n\t\t\t\t\tthis.add(child.clone());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3(0, 1, 0);\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\tObject3D.prototype.isObject3D = true;\n\n\tconst _vector1 = /*@__PURE__*/new Vector3();\n\n\tconst _vector2$1 = /*@__PURE__*/new Vector3();\n\n\tconst _normalMatrix = /*@__PURE__*/new Matrix3();\n\n\tclass Plane {\n\t\tconstructor(normal = new Vector3(1, 0, 0), constant = 0) {\n\t\t\t// normal is assumed to be normalized\n\t\t\tthis.normal = normal;\n\t\t\tthis.constant = constant;\n\t\t}\n\n\t\tset(normal, constant) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = constant;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponents(x, y, z, w) {\n\t\t\tthis.normal.set(x, y, z);\n\t\t\tthis.constant = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromNormalAndCoplanarPoint(normal, point) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = -point.dot(this.normal);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCoplanarPoints(a, b, c) {\n\t\t\tconst normal = _vector1.subVectors(c, b).cross(_vector2$1.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\n\t\t\tthis.setFromNormalAndCoplanarPoint(normal, a);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(plane) {\n\t\t\tthis.normal.copy(plane.normal);\n\t\t\tthis.constant = plane.constant;\n\t\t\treturn this;\n\t\t}\n\n\t\tnormalize() {\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar(inverseNormalLength);\n\t\t\tthis.constant *= inverseNormalLength;\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.constant *= -1;\n\t\t\tthis.normal.negate();\n\t\t\treturn this;\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn this.normal.dot(point) + this.constant;\n\t\t}\n\n\t\tdistanceToSphere(sphere) {\n\t\t\treturn this.distanceToPoint(sphere.center) - sphere.radius;\n\t\t}\n\n\t\tprojectPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .projectPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n\t\t}\n\n\t\tintersectLine(line, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .intersectLine() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tconst direction = line.delta(_vector1);\n\t\t\tconst denominator = this.normal.dot(direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (this.distanceToPoint(line.start) === 0) {\n\t\t\t\t\treturn target.copy(line.start);\n\t\t\t\t} // Unsure if this is the correct method to handle this case.\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n\t\t\tif (t < 0 || t > 1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn target.copy(direction).multiplyScalar(t).add(line.start);\n\t\t}\n\n\t\tintersectsLine(line) {\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\t\tconst startSign = this.distanceToPoint(line.start);\n\t\t\tconst endSign = this.distanceToPoint(line.end);\n\t\t\treturn startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsPlane(this);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\treturn sphere.intersectsPlane(this);\n\t\t}\n\n\t\tcoplanarPoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .coplanarPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.constant);\n\t\t}\n\n\t\tapplyMatrix4(matrix, optionalNormalMatrix) {\n\t\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n\n\t\t\tconst referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n\t\t\tconst normal = this.normal.applyMatrix3(normalMatrix).normalize();\n\t\t\tthis.constant = -referencePoint.dot(normal);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.constant -= offset.dot(this.normal);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(plane) {\n\t\t\treturn plane.normal.equals(this.normal) && plane.constant === this.constant;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tPlane.prototype.isPlane = true;\n\n\tconst _v0$1 = /*@__PURE__*/new Vector3();\n\n\tconst _v1$3 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v3$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vab = /*@__PURE__*/new Vector3();\n\n\tconst _vac = /*@__PURE__*/new Vector3();\n\n\tconst _vbc = /*@__PURE__*/new Vector3();\n\n\tconst _vap = /*@__PURE__*/new Vector3();\n\n\tconst _vbp = /*@__PURE__*/new Vector3();\n\n\tconst _vcp = /*@__PURE__*/new Vector3();\n\n\tclass Triangle {\n\t\tconstructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t}\n\n\t\tstatic getNormal(a, b, c, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getNormal() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(c, b);\n\n\t\t\t_v0$1.subVectors(a, b);\n\n\t\t\ttarget.cross(_v0$1);\n\t\t\tconst targetLengthSq = target.lengthSq();\n\n\t\t\tif (targetLengthSq > 0) {\n\t\t\t\treturn target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n\t\t\t}\n\n\t\t\treturn target.set(0, 0, 0);\n\t\t} // static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n\n\t\tstatic getBarycoord(point, a, b, c, target) {\n\t\t\t_v0$1.subVectors(c, a);\n\n\t\t\t_v1$3.subVectors(b, a);\n\n\t\t\t_v2$2.subVectors(point, a);\n\n\t\t\tconst dot00 = _v0$1.dot(_v0$1);\n\n\t\t\tconst dot01 = _v0$1.dot(_v1$3);\n\n\t\t\tconst dot02 = _v0$1.dot(_v2$2);\n\n\t\t\tconst dot11 = _v1$3.dot(_v1$3);\n\n\t\t\tconst dot12 = _v1$3.dot(_v2$2);\n\n\t\t\tconst denom = dot00 * dot11 - dot01 * dot01;\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getBarycoord() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t} // collinear or singular triangle\n\n\n\t\t\tif (denom === 0) {\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set(-2, -1, -1);\n\t\t\t}\n\n\t\t\tconst invDenom = 1 / denom;\n\t\t\tconst u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\t\t\tconst v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n\t\t\treturn target.set(1 - u - v, v, u);\n\t\t}\n\n\t\tstatic containsPoint(point, a, b, c) {\n\t\t\tthis.getBarycoord(point, a, b, c, _v3$1);\n\t\t\treturn _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;\n\t\t}\n\n\t\tstatic getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n\t\t\tthis.getBarycoord(point, p1, p2, p3, _v3$1);\n\t\t\ttarget.set(0, 0);\n\t\t\ttarget.addScaledVector(uv1, _v3$1.x);\n\t\t\ttarget.addScaledVector(uv2, _v3$1.y);\n\t\t\ttarget.addScaledVector(uv3, _v3$1.z);\n\t\t\treturn target;\n\t\t}\n\n\t\tstatic isFrontFacing(a, b, c, direction) {\n\t\t\t_v0$1.subVectors(c, b);\n\n\t\t\t_v1$3.subVectors(a, b); // strictly front facing\n\n\n\t\t\treturn _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n\t\t}\n\n\t\tset(a, b, c) {\n\t\t\tthis.a.copy(a);\n\t\t\tthis.b.copy(b);\n\t\t\tthis.c.copy(c);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPointsAndIndices(points, i0, i1, i2) {\n\t\t\tthis.a.copy(points[i0]);\n\t\t\tthis.b.copy(points[i1]);\n\t\t\tthis.c.copy(points[i2]);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(triangle) {\n\t\t\tthis.a.copy(triangle.a);\n\t\t\tthis.b.copy(triangle.b);\n\t\t\tthis.c.copy(triangle.c);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetArea() {\n\t\t\t_v0$1.subVectors(this.c, this.b);\n\n\t\t\t_v1$3.subVectors(this.a, this.b);\n\n\t\t\treturn _v0$1.cross(_v1$3).length() * 0.5;\n\t\t}\n\n\t\tgetMidpoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getMidpoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n\t\t}\n\n\t\tgetNormal(target) {\n\t\t\treturn Triangle.getNormal(this.a, this.b, this.c, target);\n\t\t}\n\n\t\tgetPlane(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getPlane() target is now required');\n\t\t\t\ttarget = new Plane();\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints(this.a, this.b, this.c);\n\t\t}\n\n\t\tgetBarycoord(point, target) {\n\t\t\treturn Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n\t\t}\n\n\t\tgetUV(point, uv1, uv2, uv3, target) {\n\t\t\treturn Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn Triangle.containsPoint(point, this.a, this.b, this.c);\n\t\t}\n\n\t\tisFrontFacing(direction) {\n\t\t\treturn Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsTriangle(this);\n\t\t}\n\n\t\tclosestPointToPoint(p, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tconst a = this.a,\n\t\t\t\t\t\tb = this.b,\n\t\t\t\t\t\tc = this.c;\n\t\t\tlet v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors(b, a);\n\n\t\t\t_vac.subVectors(c, a);\n\n\t\t\t_vap.subVectors(p, a);\n\n\t\t\tconst d1 = _vab.dot(_vap);\n\n\t\t\tconst d2 = _vac.dot(_vap);\n\n\t\t\tif (d1 <= 0 && d2 <= 0) {\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy(a);\n\t\t\t}\n\n\t\t\t_vbp.subVectors(p, b);\n\n\t\t\tconst d3 = _vab.dot(_vbp);\n\n\t\t\tconst d4 = _vac.dot(_vbp);\n\n\t\t\tif (d3 >= 0 && d4 <= d3) {\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy(b);\n\t\t\t}\n\n\t\t\tconst vc = d1 * d4 - d3 * d2;\n\n\t\t\tif (vc <= 0 && d1 >= 0 && d3 <= 0) {\n\t\t\t\tv = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vab, v);\n\t\t\t}\n\n\t\t\t_vcp.subVectors(p, c);\n\n\t\t\tconst d5 = _vab.dot(_vcp);\n\n\t\t\tconst d6 = _vac.dot(_vcp);\n\n\t\t\tif (d6 >= 0 && d5 <= d6) {\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy(c);\n\t\t\t}\n\n\t\t\tconst vb = d5 * d2 - d1 * d6;\n\n\t\t\tif (vb <= 0 && d2 >= 0 && d6 <= 0) {\n\t\t\t\tw = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vac, w);\n\t\t\t}\n\n\t\t\tconst va = d3 * d6 - d5 * d4;\n\n\t\t\tif (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n\t\t\t\t_vbc.subVectors(c, b);\n\n\t\t\t\tw = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n\t\t\t\treturn target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n\t\t\t} // face region\n\n\n\t\t\tconst denom = 1 / (va + vb + vc); // u = va * denom\n\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\t\t\treturn target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n\t\t}\n\n\t\tequals(triangle) {\n\t\t\treturn triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n\t\t}\n\n\t}\n\n\tlet materialId = 0;\n\n\tclass Material extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: materialId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'Material';\n\t\t\tthis.fog = true;\n\t\t\tthis.blending = NormalBlending;\n\t\t\tthis.side = FrontSide;\n\t\t\tthis.vertexColors = false;\n\t\t\tthis.opacity = 1;\n\t\t\tthis.transparent = false;\n\t\t\tthis.blendSrc = SrcAlphaFactor;\n\t\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\t\tthis.blendEquation = AddEquation;\n\t\t\tthis.blendSrcAlpha = null;\n\t\t\tthis.blendDstAlpha = null;\n\t\t\tthis.blendEquationAlpha = null;\n\t\t\tthis.depthFunc = LessEqualDepth;\n\t\t\tthis.depthTest = true;\n\t\t\tthis.depthWrite = true;\n\t\t\tthis.stencilWriteMask = 0xff;\n\t\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\t\tthis.stencilRef = 0;\n\t\t\tthis.stencilFuncMask = 0xff;\n\t\t\tthis.stencilFail = KeepStencilOp;\n\t\t\tthis.stencilZFail = KeepStencilOp;\n\t\t\tthis.stencilZPass = KeepStencilOp;\n\t\t\tthis.stencilWrite = false;\n\t\t\tthis.clippingPlanes = null;\n\t\t\tthis.clipIntersection = false;\n\t\t\tthis.clipShadows = false;\n\t\t\tthis.shadowSide = null;\n\t\t\tthis.colorWrite = true;\n\t\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\t\tthis.polygonOffset = false;\n\t\t\tthis.polygonOffsetFactor = 0;\n\t\t\tthis.polygonOffsetUnits = 0;\n\t\t\tthis.dithering = false;\n\t\t\tthis.alphaTest = 0;\n\t\t\tthis.alphaToCoverage = false;\n\t\t\tthis.premultipliedAlpha = false;\n\t\t\tthis.visible = true;\n\t\t\tthis.toneMapped = true;\n\t\t\tthis.userData = {};\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tonBuild()\n\t\t/* shaderobject, renderer */\n\t\t{}\n\n\t\tonBeforeCompile()\n\t\t/* shaderobject, renderer */\n\t\t{}\n\n\t\tcustomProgramCacheKey() {\n\t\t\treturn this.onBeforeCompile.toString();\n\t\t}\n\n\t\tsetValues(values) {\n\t\t\tif (values === undefined) return;\n\n\t\t\tfor (const key in values) {\n\t\t\t\tconst newValue = values[key];\n\n\t\t\t\tif (newValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Material: \\'' + key + '\\' parameter is undefined.');\n\t\t\t\t\tcontinue;\n\t\t\t\t} // for backward compatability if shading is set in the constructor\n\n\n\t\t\t\tif (key === 'shading') {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\t\tthis.flatShading = newValue === FlatShading ? true : false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst currentValue = this[key];\n\n\t\t\t\tif (currentValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue && currentValue.isColor) {\n\t\t\t\t\tcurrentValue.set(newValue);\n\t\t\t\t} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n\t\t\t\t\tcurrentValue.copy(newValue);\n\t\t\t\t} else {\n\t\t\t\t\tthis[key] = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst isRoot = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (isRoot) {\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard Material serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.color && this.color.isColor) data.color = this.color.getHex();\n\t\t\tif (this.roughness !== undefined) data.roughness = this.roughness;\n\t\t\tif (this.metalness !== undefined) data.metalness = this.metalness;\n\t\t\tif (this.sheen && this.sheen.isColor) data.sheen = this.sheen.getHex();\n\t\t\tif (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n\t\t\tif (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n\t\t\tif (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n\t\t\tif (this.shininess !== undefined) data.shininess = this.shininess;\n\t\t\tif (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n\t\t\tif (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\t\tif (this.clearcoatMap && this.clearcoatMap.isTexture) {\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n\t\t\tif (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n\t\t\tif (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n\n\t\t\tif (this.lightMap && this.lightMap.isTexture) {\n\t\t\t\tdata.lightMap = this.lightMap.toJSON(meta).uuid;\n\t\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.aoMap && this.aoMap.isTexture) {\n\t\t\t\tdata.aoMap = this.aoMap.toJSON(meta).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.bumpMap && this.bumpMap.isTexture) {\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON(meta).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\t\t\t}\n\n\t\t\tif (this.normalMap && this.normalMap.isTexture) {\n\t\t\t\tdata.normalMap = this.normalMap.toJSON(meta).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.displacementMap && this.displacementMap.isTexture) {\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON(meta).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\t\t\t}\n\n\t\t\tif (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n\t\t\tif (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n\t\t\tif (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n\t\t\tif (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n\t\t\tif (this.envMap && this.envMap.isTexture) {\n\t\t\t\tdata.envMap = this.envMap.toJSON(meta).uuid;\n\t\t\t\tif (this.combine !== undefined) data.combine = this.combine;\n\t\t\t}\n\n\t\t\tif (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n\t\t\tif (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;\n\t\t\tif (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;\n\n\t\t\tif (this.gradientMap && this.gradientMap.isTexture) {\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.transmission !== undefined) data.transmission = this.transmission;\n\t\t\tif (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;\n\t\t\tif (this.thickness !== undefined) data.thickness = this.thickness;\n\t\t\tif (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;\n\t\t\tif (this.attenuationDistance !== undefined) data.attenuationDistance = this.attenuationDistance;\n\t\t\tif (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();\n\t\t\tif (this.size !== undefined) data.size = this.size;\n\t\t\tif (this.shadowSide !== null) data.shadowSide = this.shadowSide;\n\t\t\tif (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n\t\t\tif (this.blending !== NormalBlending) data.blending = this.blending;\n\t\t\tif (this.side !== FrontSide) data.side = this.side;\n\t\t\tif (this.vertexColors) data.vertexColors = true;\n\t\t\tif (this.opacity < 1) data.opacity = this.opacity;\n\t\t\tif (this.transparent === true) data.transparent = this.transparent;\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\t\t\tdata.colorWrite = this.colorWrite;\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n\t\t\tif (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n\t\t\tif (this.polygonOffset === true) data.polygonOffset = true;\n\t\t\tif (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\t\tif (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\t\t\tif (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n\t\t\tif (this.dashSize !== undefined) data.dashSize = this.dashSize;\n\t\t\tif (this.gapSize !== undefined) data.gapSize = this.gapSize;\n\t\t\tif (this.scale !== undefined) data.scale = this.scale;\n\t\t\tif (this.dithering === true) data.dithering = true;\n\t\t\tif (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n\t\t\tif (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;\n\t\t\tif (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif (this.wireframe === true) data.wireframe = this.wireframe;\n\t\t\tif (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n\t\t\tif (this.morphTargets === true) data.morphTargets = true;\n\t\t\tif (this.morphNormals === true) data.morphNormals = true;\n\t\t\tif (this.flatShading === true) data.flatShading = this.flatShading;\n\t\t\tif (this.visible === false) data.visible = false;\n\t\t\tif (this.toneMapped === false) data.toneMapped = false;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (const key in cache) {\n\t\t\t\t\tconst data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\n\t\t\tif (isRoot) {\n\t\t\t\tconst textures = extractFromCache(meta.textures);\n\t\t\t\tconst images = extractFromCache(meta.images);\n\t\t\t\tif (textures.length > 0) data.textures = textures;\n\t\t\t\tif (images.length > 0) data.images = images;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.vertexColors = source.vertexColors;\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\t\t\tconst srcPlanes = source.clippingPlanes;\n\t\t\tlet dstPlanes = null;\n\n\t\t\tif (srcPlanes !== null) {\n\t\t\t\tconst n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array(n);\n\n\t\t\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\t\t\tdstPlanes[i] = srcPlanes[i].clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.shadowSide = source.shadowSide;\n\t\t\tthis.colorWrite = source.colorWrite;\n\t\t\tthis.precision = source.precision;\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\t\tthis.dithering = source.dithering;\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.toneMapped = source.toneMapped;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t}\n\n\tMaterial.prototype.isMaterial = true;\n\n\tconst _colorKeywords = {\n\t\t'aliceblue': 0xF0F8FF,\n\t\t'antiquewhite': 0xFAEBD7,\n\t\t'aqua': 0x00FFFF,\n\t\t'aquamarine': 0x7FFFD4,\n\t\t'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC,\n\t\t'bisque': 0xFFE4C4,\n\t\t'black': 0x000000,\n\t\t'blanchedalmond': 0xFFEBCD,\n\t\t'blue': 0x0000FF,\n\t\t'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A,\n\t\t'burlywood': 0xDEB887,\n\t\t'cadetblue': 0x5F9EA0,\n\t\t'chartreuse': 0x7FFF00,\n\t\t'chocolate': 0xD2691E,\n\t\t'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED,\n\t\t'cornsilk': 0xFFF8DC,\n\t\t'crimson': 0xDC143C,\n\t\t'cyan': 0x00FFFF,\n\t\t'darkblue': 0x00008B,\n\t\t'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B,\n\t\t'darkgray': 0xA9A9A9,\n\t\t'darkgreen': 0x006400,\n\t\t'darkgrey': 0xA9A9A9,\n\t\t'darkkhaki': 0xBDB76B,\n\t\t'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F,\n\t\t'darkorange': 0xFF8C00,\n\t\t'darkorchid': 0x9932CC,\n\t\t'darkred': 0x8B0000,\n\t\t'darksalmon': 0xE9967A,\n\t\t'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B,\n\t\t'darkslategray': 0x2F4F4F,\n\t\t'darkslategrey': 0x2F4F4F,\n\t\t'darkturquoise': 0x00CED1,\n\t\t'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493,\n\t\t'deepskyblue': 0x00BFFF,\n\t\t'dimgray': 0x696969,\n\t\t'dimgrey': 0x696969,\n\t\t'dodgerblue': 0x1E90FF,\n\t\t'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0,\n\t\t'forestgreen': 0x228B22,\n\t\t'fuchsia': 0xFF00FF,\n\t\t'gainsboro': 0xDCDCDC,\n\t\t'ghostwhite': 0xF8F8FF,\n\t\t'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520,\n\t\t'gray': 0x808080,\n\t\t'green': 0x008000,\n\t\t'greenyellow': 0xADFF2F,\n\t\t'grey': 0x808080,\n\t\t'honeydew': 0xF0FFF0,\n\t\t'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C,\n\t\t'indigo': 0x4B0082,\n\t\t'ivory': 0xFFFFF0,\n\t\t'khaki': 0xF0E68C,\n\t\t'lavender': 0xE6E6FA,\n\t\t'lavenderblush': 0xFFF0F5,\n\t\t'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD,\n\t\t'lightblue': 0xADD8E6,\n\t\t'lightcoral': 0xF08080,\n\t\t'lightcyan': 0xE0FFFF,\n\t\t'lightgoldenrodyellow': 0xFAFAD2,\n\t\t'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90,\n\t\t'lightgrey': 0xD3D3D3,\n\t\t'lightpink': 0xFFB6C1,\n\t\t'lightsalmon': 0xFFA07A,\n\t\t'lightseagreen': 0x20B2AA,\n\t\t'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899,\n\t\t'lightslategrey': 0x778899,\n\t\t'lightsteelblue': 0xB0C4DE,\n\t\t'lightyellow': 0xFFFFE0,\n\t\t'lime': 0x00FF00,\n\t\t'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6,\n\t\t'magenta': 0xFF00FF,\n\t\t'maroon': 0x800000,\n\t\t'mediumaquamarine': 0x66CDAA,\n\t\t'mediumblue': 0x0000CD,\n\t\t'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB,\n\t\t'mediumseagreen': 0x3CB371,\n\t\t'mediumslateblue': 0x7B68EE,\n\t\t'mediumspringgreen': 0x00FA9A,\n\t\t'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585,\n\t\t'midnightblue': 0x191970,\n\t\t'mintcream': 0xF5FFFA,\n\t\t'mistyrose': 0xFFE4E1,\n\t\t'moccasin': 0xFFE4B5,\n\t\t'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080,\n\t\t'oldlace': 0xFDF5E6,\n\t\t'olive': 0x808000,\n\t\t'olivedrab': 0x6B8E23,\n\t\t'orange': 0xFFA500,\n\t\t'orangered': 0xFF4500,\n\t\t'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA,\n\t\t'palegreen': 0x98FB98,\n\t\t'paleturquoise': 0xAFEEEE,\n\t\t'palevioletred': 0xDB7093,\n\t\t'papayawhip': 0xFFEFD5,\n\t\t'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F,\n\t\t'pink': 0xFFC0CB,\n\t\t'plum': 0xDDA0DD,\n\t\t'powderblue': 0xB0E0E6,\n\t\t'purple': 0x800080,\n\t\t'rebeccapurple': 0x663399,\n\t\t'red': 0xFF0000,\n\t\t'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1,\n\t\t'saddlebrown': 0x8B4513,\n\t\t'salmon': 0xFA8072,\n\t\t'sandybrown': 0xF4A460,\n\t\t'seagreen': 0x2E8B57,\n\t\t'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D,\n\t\t'silver': 0xC0C0C0,\n\t\t'skyblue': 0x87CEEB,\n\t\t'slateblue': 0x6A5ACD,\n\t\t'slategray': 0x708090,\n\t\t'slategrey': 0x708090,\n\t\t'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F,\n\t\t'steelblue': 0x4682B4,\n\t\t'tan': 0xD2B48C,\n\t\t'teal': 0x008080,\n\t\t'thistle': 0xD8BFD8,\n\t\t'tomato': 0xFF6347,\n\t\t'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE,\n\t\t'wheat': 0xF5DEB3,\n\t\t'white': 0xFFFFFF,\n\t\t'whitesmoke': 0xF5F5F5,\n\t\t'yellow': 0xFFFF00,\n\t\t'yellowgreen': 0x9ACD32\n\t};\n\tconst _hslA = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\tconst _hslB = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\n\tfunction hue2rgb(p, q, t) {\n\t\tif (t < 0) t += 1;\n\t\tif (t > 1) t -= 1;\n\t\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\t\tif (t < 1 / 2) return q;\n\t\tif (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n\t\treturn p;\n\t}\n\n\tfunction SRGBToLinear(c) {\n\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t}\n\n\tfunction LinearToSRGB(c) {\n\t\treturn c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n\t}\n\n\tclass Color {\n\t\tconstructor(r, g, b) {\n\t\t\tif (g === undefined && b === undefined) {\n\t\t\t\t// r is THREE.Color, hex or string\n\t\t\t\treturn this.set(r);\n\t\t\t}\n\n\t\t\treturn this.setRGB(r, g, b);\n\t\t}\n\n\t\tset(value) {\n\t\t\tif (value && value.isColor) {\n\t\t\t\tthis.copy(value);\n\t\t\t} else if (typeof value === 'number') {\n\t\t\t\tthis.setHex(value);\n\t\t\t} else if (typeof value === 'string') {\n\t\t\t\tthis.setStyle(value);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetHex(hex) {\n\t\t\thex = Math.floor(hex);\n\t\t\tthis.r = (hex >> 16 & 255) / 255;\n\t\t\tthis.g = (hex >> 8 & 255) / 255;\n\t\t\tthis.b = (hex & 255) / 255;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRGB(r, g, b) {\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetHSL(h, s, l) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = euclideanModulo(h, 1);\n\t\t\ts = clamp(s, 0, 1);\n\t\t\tl = clamp(l, 0, 1);\n\n\t\t\tif (s === 0) {\n\t\t\t\tthis.r = this.g = this.b = l;\n\t\t\t} else {\n\t\t\t\tconst p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\t\tconst q = 2 * l - p;\n\t\t\t\tthis.r = hue2rgb(q, p, h + 1 / 3);\n\t\t\t\tthis.g = hue2rgb(q, p, h);\n\t\t\t\tthis.b = hue2rgb(q, p, h - 1 / 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetStyle(style) {\n\t\t\tfunction handleAlpha(string) {\n\t\t\t\tif (string === undefined) return;\n\n\t\t\t\tif (parseFloat(string) < 1) {\n\t\t\t\t\tconsole.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet m;\n\n\t\t\tif (m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(style)) {\n\t\t\t\t// rgb / hsl\n\t\t\t\tlet color;\n\t\t\t\tconst name = m[1];\n\t\t\t\tconst components = m[2];\n\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(255, parseInt(color[1], 10)) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min(255, parseInt(color[2], 10)) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min(255, parseInt(color[3], 10)) / 255;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(100, parseInt(color[1], 10)) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min(100, parseInt(color[2], 10)) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min(100, parseInt(color[3], 10)) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\t\t\t\t\t\tif (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tconst h = parseFloat(color[1]) / 360;\n\t\t\t\t\t\t\tconst s = parseInt(color[2], 10) / 100;\n\t\t\t\t\t\t\tconst l = parseInt(color[3], 10) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this.setHSL(h, s, l);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n\t\t\t\t// hex color\n\t\t\t\tconst hex = m[1];\n\t\t\t\tconst size = hex.length;\n\n\t\t\t\tif (size === 3) {\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t} else if (size === 6) {\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style && style.length > 0) {\n\t\t\t\treturn this.setColorName(style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetColorName(style) {\n\t\t\t// color keywords\n\t\t\tconst hex = _colorKeywords[style.toLowerCase()];\n\n\t\t\tif (hex !== undefined) {\n\t\t\t\t// red\n\t\t\t\tthis.setHex(hex);\n\t\t\t} else {\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn('THREE.Color: Unknown color ' + style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.r, this.g, this.b);\n\t\t}\n\n\t\tcopy(color) {\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyGammaToLinear(color, gammaFactor = 2.0) {\n\t\t\tthis.r = Math.pow(color.r, gammaFactor);\n\t\t\tthis.g = Math.pow(color.g, gammaFactor);\n\t\t\tthis.b = Math.pow(color.b, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyLinearToGamma(color, gammaFactor = 2.0) {\n\t\t\tconst safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n\t\t\tthis.r = Math.pow(color.r, safeInverse);\n\t\t\tthis.g = Math.pow(color.g, safeInverse);\n\t\t\tthis.b = Math.pow(color.b, safeInverse);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertGammaToLinear(gammaFactor) {\n\t\t\tthis.copyGammaToLinear(this, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertLinearToGamma(gammaFactor) {\n\t\t\tthis.copyLinearToGamma(this, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopySRGBToLinear(color) {\n\t\t\tthis.r = SRGBToLinear(color.r);\n\t\t\tthis.g = SRGBToLinear(color.g);\n\t\t\tthis.b = SRGBToLinear(color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyLinearToSRGB(color) {\n\t\t\tthis.r = LinearToSRGB(color.r);\n\t\t\tthis.g = LinearToSRGB(color.g);\n\t\t\tthis.b = LinearToSRGB(color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertSRGBToLinear() {\n\t\t\tthis.copySRGBToLinear(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertLinearToSRGB() {\n\t\t\tthis.copyLinearToSRGB(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetHex() {\n\t\t\treturn this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n\t\t}\n\n\t\tgetHexString() {\n\t\t\treturn ('000000' + this.getHex().toString(16)).slice(-6);\n\t\t}\n\n\t\tgetHSL(target) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Color: .getHSL() target is now required');\n\t\t\t\ttarget = {\n\t\t\t\t\th: 0,\n\t\t\t\t\ts: 0,\n\t\t\t\t\tl: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst r = this.r,\n\t\t\t\t\t\tg = this.g,\n\t\t\t\t\t\tb = this.b;\n\t\t\tconst max = Math.max(r, g, b);\n\t\t\tconst min = Math.min(r, g, b);\n\t\t\tlet hue, saturation;\n\t\t\tconst lightness = (min + max) / 2.0;\n\n\t\t\tif (min === max) {\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\t\t\t} else {\n\t\t\t\tconst delta = max - min;\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase r:\n\t\t\t\t\t\thue = (g - b) / delta + (g < b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase g:\n\t\t\t\t\t\thue = (b - r) / delta + 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase b:\n\t\t\t\t\t\thue = (r - g) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\t\t\treturn target;\n\t\t}\n\n\t\tgetStyle() {\n\t\t\treturn 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n\t\t}\n\n\t\toffsetHSL(h, s, l) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\t_hslA.h += h;\n\t\t\t_hslA.s += s;\n\t\t\t_hslA.l += l;\n\t\t\tthis.setHSL(_hslA.h, _hslA.s, _hslA.l);\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(color) {\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\taddColors(color1, color2) {\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(color) {\n\t\t\tthis.r = Math.max(0, this.r - color.r);\n\t\t\tthis.g = Math.max(0, this.g - color.g);\n\t\t\tthis.b = Math.max(0, this.b - color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(color) {\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerp(color, alpha) {\n\t\t\tthis.r += (color.r - this.r) * alpha;\n\t\t\tthis.g += (color.g - this.g) * alpha;\n\t\t\tthis.b += (color.b - this.b) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpColors(color1, color2, alpha) {\n\t\t\tthis.r = color1.r + (color2.r - color1.r) * alpha;\n\t\t\tthis.g = color1.g + (color2.g - color1.g) * alpha;\n\t\t\tthis.b = color1.b + (color2.b - color1.b) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpHSL(color, alpha) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\tcolor.getHSL(_hslB);\n\t\t\tconst h = lerp(_hslA.h, _hslB.h, alpha);\n\t\t\tconst s = lerp(_hslA.s, _hslB.s, alpha);\n\t\t\tconst l = lerp(_hslA.l, _hslB.l, alpha);\n\t\t\tthis.setHSL(h, s, l);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(c) {\n\t\t\treturn c.r === this.r && c.g === this.g && c.b === this.b;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.r = array[offset];\n\t\t\tthis.g = array[offset + 1];\n\t\t\tthis.b = array[offset + 2];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.r;\n\t\t\tarray[offset + 1] = this.g;\n\t\t\tarray[offset + 2] = this.b;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index) {\n\t\t\tthis.r = attribute.getX(index);\n\t\t\tthis.g = attribute.getY(index);\n\t\t\tthis.b = attribute.getZ(index);\n\n\t\t\tif (attribute.normalized === true) {\n\t\t\t\t// assuming Uint8Array\n\t\t\t\tthis.r /= 255;\n\t\t\t\tthis.g /= 255;\n\t\t\t\tthis.b /= 255;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn this.getHex();\n\t\t}\n\n\t}\n\n\tColor.NAMES = _colorKeywords;\n\tColor.prototype.isColor = true;\n\tColor.prototype.r = 1;\n\tColor.prototype.g = 1;\n\tColor.prototype.b = 1;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\tdepthTest: <bool>,\n\t *\tdepthWrite: <bool>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tclass MeshBasicMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshBasicMaterial';\n\t\t\tthis.color = new Color(0xffffff); // emissive\n\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tconst _vector$9 = /*@__PURE__*/new Vector3();\n\n\tconst _vector2 = /*@__PURE__*/new Vector2();\n\n\tclass BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tif (Array.isArray(array)) {\n\t\t\t\tthrow new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n\t\t\t}\n\n\t\t\tthis.name = '';\n\t\t\tthis.array = array;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\t\tthis.normalized = normalized === true;\n\t\t\tthis.usage = StaticDrawUsage;\n\t\t\tthis.updateRange = {\n\t\t\t\toffset: 0,\n\t\t\t\tcount: -1\n\t\t\t};\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tonUploadCallback() {}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor (let i = 0, l = this.itemSize; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyArray(array) {\n\t\t\tthis.array.set(array);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyColorsArray(colors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = colors.length; i < l; i++) {\n\t\t\t\tlet color = colors[i];\n\n\t\t\t\tif (color === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n\t\t\t\t\tcolor = new Color();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = color.r;\n\t\t\t\tarray[offset++] = color.g;\n\t\t\t\tarray[offset++] = color.b;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector2sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector2();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector3sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector3();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector4sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector4();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t\tarray[offset++] = vector.w;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tif (this.itemSize === 2) {\n\t\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector2.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector2.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXY(i, _vector2.x, _vector2.y);\n\t\t\t\t}\n\t\t\t} else if (this.itemSize === 3) {\n\t\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector$9.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector$9.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(value, offset = 0) {\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetX(index) {\n\t\t\treturn this.array[index * this.itemSize];\n\t\t}\n\n\t\tsetX(index, x) {\n\t\t\tthis.array[index * this.itemSize] = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetY(index) {\n\t\t\treturn this.array[index * this.itemSize + 1];\n\t\t}\n\n\t\tsetY(index, y) {\n\t\t\tthis.array[index * this.itemSize + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetZ(index) {\n\t\t\treturn this.array[index * this.itemSize + 2];\n\t\t}\n\n\t\tsetZ(index, z) {\n\t\t\tthis.array[index * this.itemSize + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetW(index) {\n\t\t\treturn this.array[index * this.itemSize + 3];\n\t\t}\n\n\t\tsetW(index, w) {\n\t\t\tthis.array[index * this.itemSize + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXY(index, x, y) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZ(index, x, y, z) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZW(index, x, y, z, w) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\tthis.array[index + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tonUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.array, this.itemSize).copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call(this.array),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.usage !== StaticDrawUsage) data.usage = this.usage;\n\t\t\tif (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tBufferAttribute.prototype.isBufferAttribute = true; //\n\n\tclass Int8BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int8Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint8BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint8Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint8ClampedArray(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Int16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Int32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Float16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tFloat16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\n\tclass Float32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Float32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Float64BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Float64Array(array), itemSize, normalized);\n\t\t}\n\n\t} //\n\n\tfunction arrayMax(array) {\n\t\tif (array.length === 0) return -Infinity;\n\t\tlet max = array[0];\n\n\t\tfor (let i = 1, l = array.length; i < l; ++i) {\n\t\t\tif (array[i] > max) max = array[i];\n\t\t}\n\n\t\treturn max;\n\t}\n\n\tconst TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\tUint8ClampedArray: Uint8ClampedArray,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\tfunction getTypedArray(type, buffer) {\n\t\treturn new TYPED_ARRAYS[type](buffer);\n\t}\n\n\tlet _id = 0;\n\n\tconst _m1 = /*@__PURE__*/new Matrix4();\n\n\tconst _obj = /*@__PURE__*/new Object3D();\n\n\tconst _offset = /*@__PURE__*/new Vector3();\n\n\tconst _box$1 = /*@__PURE__*/new Box3();\n\n\tconst _boxMorphTargets = /*@__PURE__*/new Box3();\n\n\tconst _vector$8 = /*@__PURE__*/new Vector3();\n\n\tclass BufferGeometry extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: _id++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'BufferGeometry';\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.morphTargetsRelative = false;\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\t\t\tthis.drawRange = {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: Infinity\n\t\t\t};\n\t\t\tthis.userData = {};\n\t\t}\n\n\t\tgetIndex() {\n\t\t\treturn this.index;\n\t\t}\n\n\t\tsetIndex(index) {\n\t\t\tif (Array.isArray(index)) {\n\t\t\t\tthis.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n\t\t\t} else {\n\t\t\t\tthis.index = index;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetAttribute(name) {\n\t\t\treturn this.attributes[name];\n\t\t}\n\n\t\tsetAttribute(name, attribute) {\n\t\t\tthis.attributes[name] = attribute;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeleteAttribute(name) {\n\t\t\tdelete this.attributes[name];\n\t\t\treturn this;\n\t\t}\n\n\t\thasAttribute(name) {\n\t\t\treturn this.attributes[name] !== undefined;\n\t\t}\n\n\t\taddGroup(start, count, materialIndex = 0) {\n\t\t\tthis.groups.push({\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex\n\t\t\t});\n\t\t}\n\n\t\tclearGroups() {\n\t\t\tthis.groups = [];\n\t\t}\n\n\t\tsetDrawRange(start, count) {\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tconst position = this.attributes.position;\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tposition.needsUpdate = true;\n\t\t\t}\n\n\t\t\tconst normal = this.attributes.normal;\n\n\t\t\tif (normal !== undefined) {\n\t\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\t\t\t\tnormal.applyNormalMatrix(normalMatrix);\n\t\t\t\tnormal.needsUpdate = true;\n\t\t\t}\n\n\t\t\tconst tangent = this.attributes.tangent;\n\n\t\t\tif (tangent !== undefined) {\n\t\t\t\ttangent.transformDirection(matrix);\n\t\t\t\ttangent.needsUpdate = true;\n\t\t\t}\n\n\t\t\tif (this.boundingBox !== null) {\n\t\t\t\tthis.computeBoundingBox();\n\t\t\t}\n\n\t\t\tif (this.boundingSphere !== null) {\n\t\t\t\tthis.computeBoundingSphere();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\t_m1.makeRotationFromQuaternion(q);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateX(angle) {\n\t\t\t// rotate geometry around world x-axis\n\t\t\t_m1.makeRotationX(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateY(angle) {\n\t\t\t// rotate geometry around world y-axis\n\t\t\t_m1.makeRotationY(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateZ(angle) {\n\t\t\t// rotate geometry around world z-axis\n\t\t\t_m1.makeRotationZ(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(x, y, z) {\n\t\t\t// translate geometry\n\t\t\t_m1.makeTranslation(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(x, y, z) {\n\t\t\t// scale geometry\n\t\t\t_m1.makeScale(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\tlookAt(vector) {\n\t\t\t_obj.lookAt(vector);\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4(_obj.matrix);\n\t\t\treturn this;\n\t\t}\n\n\t\tcenter() {\n\t\t\tthis.computeBoundingBox();\n\t\t\tthis.boundingBox.getCenter(_offset).negate();\n\t\t\tthis.translate(_offset.x, _offset.y, _offset.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tconst position = [];\n\n\t\t\tfor (let i = 0, l = points.length; i < l; i++) {\n\t\t\t\tconst point = points[i];\n\t\t\t\tposition.push(point.x, point.y, point.z || 0);\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(position, 3));\n\t\t\treturn this;\n\t\t}\n\n\t\tcomputeBoundingBox() {\n\t\t\tif (this.boundingBox === null) {\n\t\t\t\tthis.boundingBox = new Box3();\n\t\t\t}\n\n\t\t\tconst position = this.attributes.position;\n\t\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tthis.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_box$1.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$8.addVectors(this.boundingBox.min, _box$1.min);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$8);\n\n\t\t\t\t\t\t\t_vector$8.addVectors(this.boundingBox.max, _box$1.max);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$8);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$1.min);\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$1.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.boundingBox.makeEmpty();\n\t\t\t}\n\n\t\t\tif (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t}\n\t\t}\n\n\t\tcomputeBoundingSphere() {\n\t\t\tif (this.boundingSphere === null) {\n\t\t\t\tthis.boundingSphere = new Sphere();\n\t\t\t}\n\n\t\t\tconst position = this.attributes.position;\n\t\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingSphere.set(new Vector3(), Infinity);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position) {\n\t\t\t\t// first, find the center of the bounding sphere\n\t\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t\t_box$1.setFromBufferAttribute(position); // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$8.addVectors(_box$1.min, _boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_vector$8);\n\n\t\t\t\t\t\t\t_vector$8.addVectors(_box$1.max, _boxMorphTargets.max);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_vector$8);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_box$1.expandByPoint(_boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_boxMorphTargets.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_box$1.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\n\t\t\t\tlet maxRadiusSq = 0;\n\n\t\t\t\tfor (let i = 0, il = position.count; i < il; i++) {\n\t\t\t\t\t_vector$8.fromBufferAttribute(position, i);\n\n\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n\t\t\t\t} // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\t\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor (let j = 0, jl = morphAttribute.count; j < jl; j++) {\n\t\t\t\t\t\t\t_vector$8.fromBufferAttribute(morphAttribute, j);\n\n\t\t\t\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute(position, j);\n\n\t\t\t\t\t\t\t\t_vector$8.add(_offset);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n\t\t\t\tif (isNaN(this.boundingSphere.radius)) {\n\t\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcomputeFaceNormals() {// backwards compatibility\n\t\t}\n\n\t\tcomputeTangents() {\n\t\t\tconst index = this.index;\n\t\t\tconst attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html\n\t\t\t// (per vertex tangents)\n\n\t\t\tif (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst indices = index.array;\n\t\t\tconst positions = attributes.position.array;\n\t\t\tconst normals = attributes.normal.array;\n\t\t\tconst uvs = attributes.uv.array;\n\t\t\tconst nVertices = positions.length / 3;\n\n\t\t\tif (attributes.tangent === undefined) {\n\t\t\t\tthis.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));\n\t\t\t}\n\n\t\t\tconst tangents = attributes.tangent.array;\n\t\t\tconst tan1 = [],\n\t\t\t\t\t\ttan2 = [];\n\n\t\t\tfor (let i = 0; i < nVertices; i++) {\n\t\t\t\ttan1[i] = new Vector3();\n\t\t\t\ttan2[i] = new Vector3();\n\t\t\t}\n\n\t\t\tconst vA = new Vector3(),\n\t\t\t\t\t\tvB = new Vector3(),\n\t\t\t\t\t\tvC = new Vector3(),\n\t\t\t\t\t\tuvA = new Vector2(),\n\t\t\t\t\t\tuvB = new Vector2(),\n\t\t\t\t\t\tuvC = new Vector2(),\n\t\t\t\t\t\tsdir = new Vector3(),\n\t\t\t\t\t\ttdir = new Vector3();\n\n\t\t\tfunction handleTriangle(a, b, c) {\n\t\t\t\tvA.fromArray(positions, a * 3);\n\t\t\t\tvB.fromArray(positions, b * 3);\n\t\t\t\tvC.fromArray(positions, c * 3);\n\t\t\t\tuvA.fromArray(uvs, a * 2);\n\t\t\t\tuvB.fromArray(uvs, b * 2);\n\t\t\t\tuvC.fromArray(uvs, c * 2);\n\t\t\t\tvB.sub(vA);\n\t\t\t\tvC.sub(vA);\n\t\t\t\tuvB.sub(uvA);\n\t\t\t\tuvC.sub(uvA);\n\t\t\t\tconst r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\t\tif (!isFinite(r)) return;\n\t\t\t\tsdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n\t\t\t\ttdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n\t\t\t\ttan1[a].add(sdir);\n\t\t\t\ttan1[b].add(sdir);\n\t\t\t\ttan1[c].add(sdir);\n\t\t\t\ttan2[a].add(tdir);\n\t\t\t\ttan2[b].add(tdir);\n\t\t\t\ttan2[c].add(tdir);\n\t\t\t}\n\n\t\t\tlet groups = this.groups;\n\n\t\t\tif (groups.length === 0) {\n\t\t\t\tgroups = [{\n\t\t\t\t\tstart: 0,\n\t\t\t\t\tcount: indices.length\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tfor (let i = 0, il = groups.length; i < il; ++i) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst start = group.start;\n\t\t\t\tconst count = group.count;\n\n\t\t\t\tfor (let j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst tmp = new Vector3(),\n\t\t\t\t\t\ttmp2 = new Vector3();\n\t\t\tconst n = new Vector3(),\n\t\t\t\t\t\tn2 = new Vector3();\n\n\t\t\tfunction handleVertex(v) {\n\t\t\t\tn.fromArray(normals, v * 3);\n\t\t\t\tn2.copy(n);\n\t\t\t\tconst t = tan1[v]; // Gram-Schmidt orthogonalize\n\n\t\t\t\ttmp.copy(t);\n\t\t\t\ttmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness\n\n\t\t\t\ttmp2.crossVectors(n2, t);\n\t\t\t\tconst test = tmp2.dot(tan2[v]);\n\t\t\t\tconst w = test < 0.0 ? -1.0 : 1.0;\n\t\t\t\ttangents[v * 4] = tmp.x;\n\t\t\t\ttangents[v * 4 + 1] = tmp.y;\n\t\t\t\ttangents[v * 4 + 2] = tmp.z;\n\t\t\t\ttangents[v * 4 + 3] = w;\n\t\t\t}\n\n\t\t\tfor (let i = 0, il = groups.length; i < il; ++i) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst start = group.start;\n\t\t\t\tconst count = group.count;\n\n\t\t\t\tfor (let j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleVertex(indices[j + 0]);\n\t\t\t\t\thandleVertex(indices[j + 1]);\n\t\t\t\t\thandleVertex(indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcomputeVertexNormals() {\n\t\t\tconst index = this.index;\n\t\t\tconst positionAttribute = this.getAttribute('position');\n\n\t\t\tif (positionAttribute !== undefined) {\n\t\t\t\tlet normalAttribute = this.getAttribute('normal');\n\n\t\t\t\tif (normalAttribute === undefined) {\n\t\t\t\t\tnormalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n\t\t\t\t\tthis.setAttribute('normal', normalAttribute);\n\t\t\t\t} else {\n\t\t\t\t\t// reset existing normals to zero\n\t\t\t\t\tfor (let i = 0, il = normalAttribute.count; i < il; i++) {\n\t\t\t\t\t\tnormalAttribute.setXYZ(i, 0, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst pA = new Vector3(),\n\t\t\t\t\t\t\tpB = new Vector3(),\n\t\t\t\t\t\t\tpC = new Vector3();\n\t\t\t\tconst nA = new Vector3(),\n\t\t\t\t\t\t\tnB = new Vector3(),\n\t\t\t\t\t\t\tnC = new Vector3();\n\t\t\t\tconst cb = new Vector3(),\n\t\t\t\t\t\t\tab = new Vector3(); // indexed elements\n\n\t\t\t\tif (index) {\n\t\t\t\t\tfor (let i = 0, il = index.count; i < il; i += 3) {\n\t\t\t\t\t\tconst vA = index.getX(i + 0);\n\t\t\t\t\t\tconst vB = index.getX(i + 1);\n\t\t\t\t\t\tconst vC = index.getX(i + 2);\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, vA);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, vB);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, vC);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnA.fromBufferAttribute(normalAttribute, vA);\n\t\t\t\t\t\tnB.fromBufferAttribute(normalAttribute, vB);\n\t\t\t\t\t\tnC.fromBufferAttribute(normalAttribute, vC);\n\t\t\t\t\t\tnA.add(cb);\n\t\t\t\t\t\tnB.add(cb);\n\t\t\t\t\t\tnC.add(cb);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\t\t\t\tfor (let i = 0, il = positionAttribute.count; i < il; i += 3) {\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, i + 0);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, i + 1);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, i + 2);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tmerge(geometry, offset) {\n\t\t\tif (!(geometry && geometry.isBufferGeometry)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (offset === undefined) {\n\t\t\t\toffset = 0;\n\t\t\t\tconsole.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');\n\t\t\t}\n\n\t\t\tconst attributes = this.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tif (geometry.attributes[key] === undefined) continue;\n\t\t\t\tconst attribute1 = attributes[key];\n\t\t\t\tconst attributeArray1 = attribute1.array;\n\t\t\t\tconst attribute2 = geometry.attributes[key];\n\t\t\t\tconst attributeArray2 = attribute2.array;\n\t\t\t\tconst attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tconst length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\n\n\t\t\t\tfor (let i = 0, j = attributeOffset; i < length; i++, j++) {\n\t\t\t\t\tattributeArray1[j] = attributeArray2[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tnormalizeNormals() {\n\t\t\tconst normals = this.attributes.normal;\n\n\t\t\tfor (let i = 0, il = normals.count; i < il; i++) {\n\t\t\t\t_vector$8.fromBufferAttribute(normals, i);\n\n\t\t\t\t_vector$8.normalize();\n\n\t\t\t\tnormals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);\n\t\t\t}\n\t\t}\n\n\t\ttoNonIndexed() {\n\t\t\tfunction convertBufferAttribute(attribute, indices) {\n\t\t\t\tconst array = attribute.array;\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst normalized = attribute.normalized;\n\t\t\t\tconst array2 = new array.constructor(indices.length * itemSize);\n\t\t\t\tlet index = 0,\n\t\t\t\t\t\tindex2 = 0;\n\n\t\t\t\tfor (let i = 0, l = indices.length; i < l; i++) {\n\t\t\t\t\tindex = indices[i] * itemSize;\n\n\t\t\t\t\tfor (let j = 0; j < itemSize; j++) {\n\t\t\t\t\t\tarray2[index2++] = array[index++];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(array2, itemSize, normalized);\n\t\t\t} //\n\n\n\t\t\tif (this.index === null) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst geometry2 = new BufferGeometry();\n\t\t\tconst indices = this.index.array;\n\t\t\tconst attributes = this.attributes; // attributes\n\n\t\t\tfor (const name in attributes) {\n\t\t\t\tconst attribute = attributes[name];\n\t\t\t\tconst newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\tgeometry2.setAttribute(name, newAttribute);\n\t\t\t} // morph attributes\n\n\n\t\t\tconst morphAttributes = this.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst morphArray = [];\n\t\t\t\tconst morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (let i = 0, il = morphAttribute.length; i < il; i++) {\n\t\t\t\t\tconst attribute = morphAttribute[i];\n\t\t\t\t\tconst newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\t\tmorphArray.push(newAttribute);\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[name] = morphArray;\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative; // groups\n\n\t\t\tconst groups = this.groups;\n\n\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tgeometry2.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t}\n\n\t\t\treturn geometry2;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n\t\t\tif (this.parameters !== undefined) {\n\t\t\t\tconst parameters = this.parameters;\n\n\t\t\t\tfor (const key in parameters) {\n\t\t\t\t\tif (parameters[key] !== undefined) data[key] = parameters[key];\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t} // for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\n\t\t\tdata.data = {\n\t\t\t\tattributes: {}\n\t\t\t};\n\t\t\tconst index = this.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call(index.array)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst attributes = this.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tdata.data.attributes[key] = attribute.toJSON(data.data);\n\t\t\t}\n\n\t\t\tconst morphAttributes = {};\n\t\t\tlet hasMorphAttributes = false;\n\n\t\t\tfor (const key in this.morphAttributes) {\n\t\t\t\tconst attributeArray = this.morphAttributes[key];\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\tconst attribute = attributeArray[i];\n\t\t\t\t\tarray.push(attribute.toJSON(data.data));\n\t\t\t\t}\n\n\t\t\t\tif (array.length > 0) {\n\t\t\t\t\tmorphAttributes[key] = array;\n\t\t\t\t\thasMorphAttributes = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasMorphAttributes) {\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\t\t\t}\n\n\t\t\tconst groups = this.groups;\n\n\t\t\tif (groups.length > 0) {\n\t\t\t\tdata.data.groups = JSON.parse(JSON.stringify(groups));\n\t\t\t}\n\n\t\t\tconst boundingSphere = this.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tclone() {\n\t\t\t/*\n\t\t\t // Handle primitives\n\t\t\t\t const parameters = this.parameters;\n\t\t\t\t if ( parameters !== undefined ) {\n\t\t\t\t const values = [];\n\t\t\t\t for ( const key in parameters ) {\n\t\t\t\t values.push( parameters[ key ] );\n\t\t\t\t }\n\t\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\t\t\t\t }\n\t\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\t\t\treturn new BufferGeometry().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\t// reset\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // used for storing cloned, shared data\n\n\t\t\tconst data = {}; // name\n\n\t\t\tthis.name = source.name; // index\n\n\t\t\tconst index = source.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tthis.setIndex(index.clone(data));\n\t\t\t} // attributes\n\n\n\t\t\tconst attributes = source.attributes;\n\n\t\t\tfor (const name in attributes) {\n\t\t\t\tconst attribute = attributes[name];\n\t\t\t\tthis.setAttribute(name, attribute.clone(data));\n\t\t\t} // morph attributes\n\n\n\t\t\tconst morphAttributes = source.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst array = [];\n\t\t\t\tconst morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (let i = 0, l = morphAttribute.length; i < l; i++) {\n\t\t\t\t\tarray.push(morphAttribute[i].clone(data));\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[name] = array;\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative; // groups\n\n\t\t\tconst groups = source.groups;\n\n\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tthis.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t} // bounding box\n\n\n\t\t\tconst boundingBox = source.boundingBox;\n\n\t\t\tif (boundingBox !== null) {\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\t\t\t} // bounding sphere\n\n\n\t\t\tconst boundingSphere = source.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\t\t\t} // draw range\n\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count; // user data\n\n\t\t\tthis.userData = source.userData;\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tBufferGeometry.prototype.isBufferGeometry = true;\n\n\tconst _inverseMatrix$2 = /*@__PURE__*/new Matrix4();\n\n\tconst _ray$2 = /*@__PURE__*/new Ray();\n\n\tconst _sphere$3 = /*@__PURE__*/new Sphere();\n\n\tconst _vA$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vB$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vC$1 = /*@__PURE__*/new Vector3();\n\n\tconst _tempA = /*@__PURE__*/new Vector3();\n\n\tconst _tempB = /*@__PURE__*/new Vector3();\n\n\tconst _tempC = /*@__PURE__*/new Vector3();\n\n\tconst _morphA = /*@__PURE__*/new Vector3();\n\n\tconst _morphB = /*@__PURE__*/new Vector3();\n\n\tconst _morphC = /*@__PURE__*/new Vector3();\n\n\tconst _uvA$1 = /*@__PURE__*/new Vector2();\n\n\tconst _uvB$1 = /*@__PURE__*/new Vector2();\n\n\tconst _uvC$1 = /*@__PURE__*/new Vector2();\n\n\tconst _intersectionPoint = /*@__PURE__*/new Vector3();\n\n\tconst _intersectionPointWorld = /*@__PURE__*/new Vector3();\n\n\tclass Mesh extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Mesh';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\n\t\t\tif (source.morphTargetInfluences !== undefined) {\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\t\t\t}\n\n\t\t\tif (source.morphTargetDictionary !== undefined) {\n\t\t\t\tthis.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst material = this.material;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tif (material === undefined) return; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$3.applyMatrix4(matrixWorld);\n\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //\n\n\t\t\t_inverseMatrix$2.copy(matrixWorld).invert();\n\n\t\t\t_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2); // Check boundingBox before continuing\n\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tif (_ray$2.intersectsBox(geometry.boundingBox) === false) return;\n\t\t\t}\n\n\t\t\tlet intersection;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tconst uv = geometry.attributes.uv;\n\t\t\t\tconst uv2 = geometry.attributes.uv2;\n\t\t\t\tconst groups = geometry.groups;\n\t\t\t\tconst drawRange = geometry.drawRange;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\t// indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tconst start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tconst end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (let j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tconst a = index.getX(j);\n\t\t\t\t\t\t\t\tconst b = index.getX(j + 1);\n\t\t\t\t\t\t\t\tconst c = index.getX(j + 2);\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (let i = start, il = end; i < il; i += 3) {\n\t\t\t\t\t\t\tconst a = index.getX(i);\n\t\t\t\t\t\t\tconst b = index.getX(i + 1);\n\t\t\t\t\t\t\tconst c = index.getX(i + 2);\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (position !== undefined) {\n\t\t\t\t\t// non-indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tconst start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tconst end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (let j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\t\t\tconst c = j + 2;\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\t\tconst end = Math.min(position.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (let i = start, il = end; i < il; i += 3) {\n\t\t\t\t\t\t\tconst a = i;\n\t\t\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\t\t\tconst c = i + 2;\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t}\n\n\tMesh.prototype.isMesh = true;\n\n\tfunction checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n\t\tlet intersect;\n\n\t\tif (material.side === BackSide) {\n\t\t\tintersect = ray.intersectTriangle(pC, pB, pA, true, point);\n\t\t} else {\n\t\t\tintersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n\t\t}\n\n\t\tif (intersect === null) return null;\n\n\t\t_intersectionPointWorld.copy(point);\n\n\t\t_intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n\t\tconst distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n\t\tif (distance < raycaster.near || distance > raycaster.far) return null;\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\t}\n\n\tfunction checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n\t\t_vA$1.fromBufferAttribute(position, a);\n\n\t\t_vB$1.fromBufferAttribute(position, b);\n\n\t\t_vC$1.fromBufferAttribute(position, c);\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif (material.morphTargets && morphPosition && morphInfluences) {\n\t\t\t_morphA.set(0, 0, 0);\n\n\t\t\t_morphB.set(0, 0, 0);\n\n\t\t\t_morphC.set(0, 0, 0);\n\n\t\t\tfor (let i = 0, il = morphPosition.length; i < il; i++) {\n\t\t\t\tconst influence = morphInfluences[i];\n\t\t\t\tconst morphAttribute = morphPosition[i];\n\t\t\t\tif (influence === 0) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute(morphAttribute, a);\n\n\t\t\t\t_tempB.fromBufferAttribute(morphAttribute, b);\n\n\t\t\t\t_tempC.fromBufferAttribute(morphAttribute, c);\n\n\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t_morphA.addScaledVector(_tempA, influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB, influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC, influence);\n\t\t\t\t} else {\n\t\t\t\t\t_morphA.addScaledVector(_tempA.sub(_vA$1), influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB.sub(_vB$1), influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC.sub(_vC$1), influence);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_vA$1.add(_morphA);\n\n\t\t\t_vB$1.add(_morphB);\n\n\t\t\t_vC$1.add(_morphC);\n\t\t}\n\n\t\tif (object.isSkinnedMesh) {\n\t\t\tobject.boneTransform(a, _vA$1);\n\t\t\tobject.boneTransform(b, _vB$1);\n\t\t\tobject.boneTransform(c, _vC$1);\n\t\t}\n\n\t\tconst intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);\n\n\t\tif (intersection) {\n\t\t\tif (uv) {\n\t\t\t\t_uvA$1.fromBufferAttribute(uv, a);\n\n\t\t\t\t_uvB$1.fromBufferAttribute(uv, b);\n\n\t\t\t\t_uvC$1.fromBufferAttribute(uv, c);\n\n\t\t\t\tintersection.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n\t\t\t}\n\n\t\t\tif (uv2) {\n\t\t\t\t_uvA$1.fromBufferAttribute(uv2, a);\n\n\t\t\t\t_uvB$1.fromBufferAttribute(uv2, b);\n\n\t\t\t\t_uvC$1.fromBufferAttribute(uv2, c);\n\n\t\t\t\tintersection.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n\t\t\t}\n\n\t\t\tconst face = {\n\t\t\t\ta: a,\n\t\t\t\tb: b,\n\t\t\t\tc: c,\n\t\t\t\tnormal: new Vector3(),\n\t\t\t\tmaterialIndex: 0\n\t\t\t};\n\t\t\tTriangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);\n\t\t\tintersection.face = face;\n\t\t}\n\n\t\treturn intersection;\n\t}\n\n\tclass BoxGeometry extends BufferGeometry {\n\t\tconstructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'BoxGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\t\t\tconst scope = this; // segments\n\n\t\t\twidthSegments = Math.floor(widthSegments);\n\t\t\theightSegments = Math.floor(heightSegments);\n\t\t\tdepthSegments = Math.floor(depthSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet numberOfVertices = 0;\n\t\t\tlet groupStart = 0; // build each side of the box geometry\n\n\t\t\tbuildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n\t\t\tbuildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n\t\t\tbuildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n\t\t\tbuildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n\t\t\t\tconst segmentWidth = width / gridX;\n\t\t\t\tconst segmentHeight = height / gridY;\n\t\t\t\tconst widthHalf = width / 2;\n\t\t\t\tconst heightHalf = height / 2;\n\t\t\t\tconst depthHalf = depth / 2;\n\t\t\t\tconst gridX1 = gridX + 1;\n\t\t\t\tconst gridY1 = gridY + 1;\n\t\t\t\tlet vertexCounter = 0;\n\t\t\t\tlet groupCount = 0;\n\t\t\t\tconst vector = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\t\tfor (let iy = 0; iy < gridY1; iy++) {\n\t\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor (let ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\t\tconst x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = x * udir;\n\t\t\t\t\t\tvector[v] = y * vdir;\n\t\t\t\t\t\tvector[w] = depthHalf; // now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push(vector.x, vector.y, vector.z); // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = 0;\n\t\t\t\t\t\tvector[v] = 0;\n\t\t\t\t\t\tvector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push(vector.x, vector.y, vector.z); // uvs\n\n\t\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\t\tuvs.push(1 - iy / gridY); // counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\t\t\t\t\t}\n\t\t\t\t} // indices\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\n\t\t\t\tfor (let iy = 0; iy < gridY; iy++) {\n\t\t\t\t\tfor (let ix = 0; ix < gridX; ix++) {\n\t\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * (iy + 1);\n\t\t\t\t\t\tconst c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n\t\t\t\t\t\tconst d = numberOfVertices + (ix + 1) + gridX1 * iy; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount; // update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Uniform Utilities\n\t */\n\tfunction cloneUniforms(src) {\n\t\tconst dst = {};\n\n\t\tfor (const u in src) {\n\t\t\tdst[u] = {};\n\n\t\t\tfor (const p in src[u]) {\n\t\t\t\tconst property = src[u][p];\n\n\t\t\t\tif (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {\n\t\t\t\t\tdst[u][p] = property.clone();\n\t\t\t\t} else if (Array.isArray(property)) {\n\t\t\t\t\tdst[u][p] = property.slice();\n\t\t\t\t} else {\n\t\t\t\t\tdst[u][p] = property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\tfunction mergeUniforms(uniforms) {\n\t\tconst merged = {};\n\n\t\tfor (let u = 0; u < uniforms.length; u++) {\n\t\t\tconst tmp = cloneUniforms(uniforms[u]);\n\n\t\t\tfor (const p in tmp) {\n\t\t\t\tmerged[p] = tmp[p];\n\t\t\t}\n\t\t}\n\n\t\treturn merged;\n\t} // Legacy\n\n\tconst UniformsUtils = {\n\t\tclone: cloneUniforms,\n\t\tmerge: mergeUniforms\n\t};\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * parameters = {\n\t *\tdefines: { \"label\" : \"value\" },\n\t *\tuniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *\tfragmentShader: <string>,\n\t *\tvertexShader: <string>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tlights: <bool>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tclass ShaderMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShaderMaterial';\n\t\t\tthis.defines = {};\n\t\t\tthis.uniforms = {};\n\t\t\tthis.vertexShader = default_vertex;\n\t\t\tthis.fragmentShader = default_fragment;\n\t\t\tthis.linewidth = 1;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false; // set to use scene fog\n\n\t\t\tthis.lights = false; // set to use scene lights\n\n\t\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\t\tthis.morphTargets = false; // set to use morph targets\n\n\t\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\t\tthis.extensions = {\n\t\t\t\tderivatives: false,\n\t\t\t\t// set to use derivatives\n\t\t\t\tfragDepth: false,\n\t\t\t\t// set to use fragment depth values\n\t\t\t\tdrawBuffers: false,\n\t\t\t\t// set to use draw buffers\n\t\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\n\t\t\t}; // When rendered geometry doesn't include these attributes but the material does,\n\t\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\n\t\t\tthis.defaultAttributeValues = {\n\t\t\t\t'color': [1, 1, 1],\n\t\t\t\t'uv': [0, 0],\n\t\t\t\t'uv2': [0, 0]\n\t\t\t};\n\t\t\tthis.index0AttributeName = undefined;\n\t\t\tthis.uniformsNeedUpdate = false;\n\t\t\tthis.glslVersion = null;\n\n\t\t\tif (parameters !== undefined) {\n\t\t\t\tif (parameters.attributes !== undefined) {\n\t\t\t\t\tconsole.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n\t\t\t\t}\n\n\t\t\t\tthis.setValues(parameters);\n\t\t\t}\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.fragmentShader = source.fragmentShader;\n\t\t\tthis.vertexShader = source.vertexShader;\n\t\t\tthis.uniforms = cloneUniforms(source.uniforms);\n\t\t\tthis.defines = Object.assign({}, source.defines);\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.lights = source.lights;\n\t\t\tthis.clipping = source.clipping;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.extensions = Object.assign({}, source.extensions);\n\t\t\tthis.glslVersion = source.glslVersion;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.glslVersion = this.glslVersion;\n\t\t\tdata.uniforms = {};\n\n\t\t\tfor (const name in this.uniforms) {\n\t\t\t\tconst uniform = this.uniforms[name];\n\t\t\t\tconst value = uniform.value;\n\n\t\t\t\tif (value && value.isTexture) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 't',\n\t\t\t\t\t\tvalue: value.toJSON(meta).uuid\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isColor) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'c',\n\t\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector2) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v2',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector3) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v3',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector4) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v4',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isMatrix3) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'm3',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isMatrix4) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'm4',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Object.keys(this.defines).length > 0) data.defines = this.defines;\n\t\t\tdata.vertexShader = this.vertexShader;\n\t\t\tdata.fragmentShader = this.fragmentShader;\n\t\t\tconst extensions = {};\n\n\t\t\tfor (const key in this.extensions) {\n\t\t\t\tif (this.extensions[key] === true) extensions[key] = true;\n\t\t\t}\n\n\t\t\tif (Object.keys(extensions).length > 0) data.extensions = extensions;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tclass Camera extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Camera';\n\t\t\tthis.matrixWorldInverse = new Matrix4();\n\t\t\tthis.projectionMatrix = new Matrix4();\n\t\t\tthis.projectionMatrixInverse = new Matrix4();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.matrixWorldInverse.copy(source.matrixWorldInverse);\n\t\t\tthis.projectionMatrix.copy(source.projectionMatrix);\n\t\t\tthis.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Camera: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tconst e = this.matrixWorld.elements;\n\t\t\treturn target.set(-e[8], -e[9], -e[10]).normalize();\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t}\n\n\t\tupdateWorldMatrix(updateParents, updateChildren) {\n\t\t\tsuper.updateWorldMatrix(updateParents, updateChildren);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tCamera.prototype.isCamera = true;\n\n\tclass PerspectiveCamera extends Camera {\n\t\tconstructor(fov = 50, aspect = 1, near = 0.1, far = 2000) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PerspectiveCamera';\n\t\t\tthis.fov = fov;\n\t\t\tthis.zoom = 1;\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.focus = 10;\n\t\t\tthis.aspect = aspect;\n\t\t\tthis.view = null;\n\t\t\tthis.filmGauge = 35; // width of the film (default in millimeters)\n\n\t\t\tthis.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\n\n\t\tsetFocalLength(focalLength) {\n\t\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\t\tthis.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\n\n\t\tgetFocalLength() {\n\t\t\tconst vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\t}\n\n\t\tgetEffectiveFOV() {\n\t\t\treturn RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);\n\t\t}\n\n\t\tgetFilmWidth() {\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min(this.aspect, 1);\n\t\t}\n\n\t\tgetFilmHeight() {\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max(this.aspect, 1);\n\t\t}\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *\t +---+---+---+\n\t\t *\t | A | B | C |\n\t\t *\t +---+---+---+\n\t\t *\t | D | E | F |\n\t\t *\t +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *\t const w = 1920;\n\t\t *\t const h = 1080;\n\t\t *\t const fullWidth = w * 3;\n\t\t *\t const fullHeight = h * 2;\n\t\t *\n\t\t *\t --A--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *\t --B--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *\t --C--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *\t --D--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *\t --E--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *\t --F--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *\t Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\n\n\t\tsetViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tclearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tupdateProjectionMatrix() {\n\t\t\tconst near = this.near;\n\t\t\tlet top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;\n\t\t\tlet height = 2 * top;\n\t\t\tlet width = this.aspect * height;\n\t\t\tlet left = -0.5 * width;\n\t\t\tconst view = this.view;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\t\t\t\tfullHeight = view.fullHeight;\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\t\t\t}\n\n\t\t\tconst skew = this.filmOffset;\n\t\t\tif (skew !== 0) left += near * skew / this.getFilmWidth();\n\t\t\tthis.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\t\t\tdata.object.aspect = this.aspect;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tPerspectiveCamera.prototype.isPerspectiveCamera = true;\n\n\tconst fov = 90,\n\t\t\t\taspect = 1;\n\n\tclass CubeCamera extends Object3D {\n\t\tconstructor(near, far, renderTarget) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubeCamera';\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget !== true) {\n\t\t\t\tconsole.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.renderTarget = renderTarget;\n\t\t\tconst cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPX.layers = this.layers;\n\t\t\tcameraPX.up.set(0, -1, 0);\n\t\t\tcameraPX.lookAt(new Vector3(1, 0, 0));\n\t\t\tthis.add(cameraPX);\n\t\t\tconst cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNX.layers = this.layers;\n\t\t\tcameraNX.up.set(0, -1, 0);\n\t\t\tcameraNX.lookAt(new Vector3(-1, 0, 0));\n\t\t\tthis.add(cameraNX);\n\t\t\tconst cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPY.layers = this.layers;\n\t\t\tcameraPY.up.set(0, 0, 1);\n\t\t\tcameraPY.lookAt(new Vector3(0, 1, 0));\n\t\t\tthis.add(cameraPY);\n\t\t\tconst cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNY.layers = this.layers;\n\t\t\tcameraNY.up.set(0, 0, -1);\n\t\t\tcameraNY.lookAt(new Vector3(0, -1, 0));\n\t\t\tthis.add(cameraNY);\n\t\t\tconst cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPZ.layers = this.layers;\n\t\t\tcameraPZ.up.set(0, -1, 0);\n\t\t\tcameraPZ.lookAt(new Vector3(0, 0, 1));\n\t\t\tthis.add(cameraPZ);\n\t\t\tconst cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNZ.layers = this.layers;\n\t\t\tcameraNZ.up.set(0, -1, 0);\n\t\t\tcameraNZ.lookAt(new Vector3(0, 0, -1));\n\t\t\tthis.add(cameraNZ);\n\t\t}\n\n\t\tupdate(renderer, scene) {\n\t\t\tif (this.parent === null) this.updateMatrixWorld();\n\t\t\tconst renderTarget = this.renderTarget;\n\t\t\tconst [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;\n\t\t\tconst currentXrEnabled = renderer.xr.enabled;\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\trenderer.xr.enabled = false;\n\t\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\t\t\trenderer.setRenderTarget(renderTarget, 0);\n\t\t\trenderer.render(scene, cameraPX);\n\t\t\trenderer.setRenderTarget(renderTarget, 1);\n\t\t\trenderer.render(scene, cameraNX);\n\t\t\trenderer.setRenderTarget(renderTarget, 2);\n\t\t\trenderer.render(scene, cameraPY);\n\t\t\trenderer.setRenderTarget(renderTarget, 3);\n\t\t\trenderer.render(scene, cameraNY);\n\t\t\trenderer.setRenderTarget(renderTarget, 4);\n\t\t\trenderer.render(scene, cameraPZ);\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\t\trenderer.setRenderTarget(renderTarget, 5);\n\t\t\trenderer.render(scene, cameraNZ);\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t}\n\n\t}\n\n\tclass CubeTexture extends Texture {\n\t\tconstructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\t\timages = images !== undefined ? images : [];\n\t\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\t\tformat = format !== undefined ? format : RGBFormat;\n\t\t\tsuper(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding); // Why CubeTexture._needsFlipEnvMap is necessary:\n\t\t\t//\n\t\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\t\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t\t// and the flag _needsFlipEnvMap controls this conversion. The flip is not required (and thus _needsFlipEnvMap is set to false)\n\t\t\t// when using WebGLCubeRenderTarget.texture as a cube texture.\n\n\t\t\tthis._needsFlipEnvMap = true;\n\t\t\tthis.flipY = false;\n\t\t}\n\n\t\tget images() {\n\t\t\treturn this.image;\n\t\t}\n\n\t\tset images(value) {\n\t\t\tthis.image = value;\n\t\t}\n\n\t}\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\t\tconstructor(size, options, dummy) {\n\t\t\tif (Number.isInteger(options)) {\n\t\t\t\tconsole.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');\n\t\t\t\toptions = dummy;\n\t\t\t}\n\n\t\t\tsuper(size, size, options);\n\t\t\toptions = options || {};\n\t\t\tthis.texture = new CubeTexture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\tthis.texture._needsFlipEnvMap = false;\n\t\t}\n\n\t\tfromEquirectangularTexture(renderer, texture) {\n\t\t\tthis.texture.type = texture.type;\n\t\t\tthis.texture.format = RGBAFormat; // see #18859\n\n\t\t\tthis.texture.encoding = texture.encoding;\n\t\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\t\tthis.texture.minFilter = texture.minFilter;\n\t\t\tthis.texture.magFilter = texture.magFilter;\n\t\t\tconst shader = {\n\t\t\t\tuniforms: {\n\t\t\t\t\ttEquirect: {\n\t\t\t\t\t\tvalue: null\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tvertexShader:\n\t\t\t\t/* glsl */\n\t\t\t\t`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\tfragmentShader:\n\t\t\t\t/* glsl */\n\t\t\t\t`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t\t};\n\t\t\tconst geometry = new BoxGeometry(5, 5, 5);\n\t\t\tconst material = new ShaderMaterial({\n\t\t\t\tname: 'CubemapFromEquirect',\n\t\t\t\tuniforms: cloneUniforms(shader.uniforms),\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\t\tside: BackSide,\n\t\t\t\tblending: NoBlending\n\t\t\t});\n\t\t\tmaterial.uniforms.tEquirect.value = texture;\n\t\t\tconst mesh = new Mesh(geometry, material);\n\t\t\tconst currentMinFilter = texture.minFilter; // Avoid blurred poles\n\n\t\t\tif (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n\t\t\tconst camera = new CubeCamera(1, 10, this);\n\t\t\tcamera.update(renderer, mesh);\n\t\t\ttexture.minFilter = currentMinFilter;\n\t\t\tmesh.geometry.dispose();\n\t\t\tmesh.material.dispose();\n\t\t\treturn this;\n\t\t}\n\n\t\tclear(renderer, color, depth, stencil) {\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\trenderer.setRenderTarget(this, i);\n\t\t\t\trenderer.clear(color, depth, stencil);\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t}\n\n\t}\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tconst _sphere$2 = /*@__PURE__*/new Sphere();\n\n\tconst _vector$7 = /*@__PURE__*/new Vector3();\n\n\tclass Frustum {\n\t\tconstructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {\n\t\t\tthis.planes = [p0, p1, p2, p3, p4, p5];\n\t\t}\n\n\t\tset(p0, p1, p2, p3, p4, p5) {\n\t\t\tconst planes = this.planes;\n\t\t\tplanes[0].copy(p0);\n\t\t\tplanes[1].copy(p1);\n\t\t\tplanes[2].copy(p2);\n\t\t\tplanes[3].copy(p3);\n\t\t\tplanes[4].copy(p4);\n\t\t\tplanes[5].copy(p5);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(frustum) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tplanes[i].copy(frustum.planes[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromProjectionMatrix(m) {\n\t\t\tconst planes = this.planes;\n\t\t\tconst me = m.elements;\n\t\t\tconst me0 = me[0],\n\t\t\t\t\t\tme1 = me[1],\n\t\t\t\t\t\tme2 = me[2],\n\t\t\t\t\t\tme3 = me[3];\n\t\t\tconst me4 = me[4],\n\t\t\t\t\t\tme5 = me[5],\n\t\t\t\t\t\tme6 = me[6],\n\t\t\t\t\t\tme7 = me[7];\n\t\t\tconst me8 = me[8],\n\t\t\t\t\t\tme9 = me[9],\n\t\t\t\t\t\tme10 = me[10],\n\t\t\t\t\t\tme11 = me[11];\n\t\t\tconst me12 = me[12],\n\t\t\t\t\t\tme13 = me[13],\n\t\t\t\t\t\tme14 = me[14],\n\t\t\t\t\t\tme15 = me[15];\n\t\t\tplanes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n\t\t\tplanes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n\t\t\tplanes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n\t\t\tplanes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n\t\t\tplanes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n\t\t\tplanes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n\t\t\treturn this;\n\t\t}\n\n\t\tintersectsObject(object) {\n\t\t\tconst geometry = object.geometry;\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$2);\n\t\t}\n\n\t\tintersectsSprite(sprite) {\n\t\t\t_sphere$2.center.set(0, 0, 0);\n\n\t\t\t_sphere$2.radius = 0.7071067811865476;\n\n\t\t\t_sphere$2.applyMatrix4(sprite.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$2);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\tconst planes = this.planes;\n\t\t\tconst center = sphere.center;\n\t\t\tconst negRadius = -sphere.radius;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst distance = planes[i].distanceToPoint(center);\n\n\t\t\t\tif (distance < negRadius) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst plane = planes[i]; // corner at max distance\n\n\t\t\t\t_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif (plane.distanceToPoint(_vector$7) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tif (planes[i].distanceToPoint(point) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tfunction WebGLAnimation() {\n\t\tlet context = null;\n\t\tlet isAnimating = false;\n\t\tlet animationLoop = null;\n\t\tlet requestId = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tanimationLoop(time, frame);\n\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t}\n\n\t\treturn {\n\t\t\tstart: function () {\n\t\t\t\tif (isAnimating === true) return;\n\t\t\t\tif (animationLoop === null) return;\n\t\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t\t\tisAnimating = true;\n\t\t\t},\n\t\t\tstop: function () {\n\t\t\t\tcontext.cancelAnimationFrame(requestId);\n\t\t\t\tisAnimating = false;\n\t\t\t},\n\t\t\tsetAnimationLoop: function (callback) {\n\t\t\t\tanimationLoop = callback;\n\t\t\t},\n\t\t\tsetContext: function (value) {\n\t\t\t\tcontext = value;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLAttributes(gl, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst buffers = new WeakMap();\n\n\t\tfunction createBuffer(attribute, bufferType) {\n\t\t\tconst array = attribute.array;\n\t\t\tconst usage = attribute.usage;\n\t\t\tconst buffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\t\t\tgl.bufferData(bufferType, array, usage);\n\t\t\tattribute.onUploadCallback();\n\t\t\tlet type = gl.FLOAT;\n\n\t\t\tif (array instanceof Float32Array) {\n\t\t\t\ttype = gl.FLOAT;\n\t\t\t} else if (array instanceof Float64Array) {\n\t\t\t\tconsole.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\n\t\t\t} else if (array instanceof Uint16Array) {\n\t\t\t\tif (attribute.isFloat16BufferAttribute) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\ttype = gl.HALF_FLOAT;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\t\t\t\t}\n\t\t\t} else if (array instanceof Int16Array) {\n\t\t\t\ttype = gl.SHORT;\n\t\t\t} else if (array instanceof Uint32Array) {\n\t\t\t\ttype = gl.UNSIGNED_INT;\n\t\t\t} else if (array instanceof Int32Array) {\n\t\t\t\ttype = gl.INT;\n\t\t\t} else if (array instanceof Int8Array) {\n\t\t\t\ttype = gl.BYTE;\n\t\t\t} else if (array instanceof Uint8Array) {\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\t\t\t} else if (array instanceof Uint8ClampedArray) {\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\t\t}\n\n\t\tfunction updateBuffer(buffer, attribute, bufferType) {\n\t\t\tconst array = attribute.array;\n\t\t\tconst updateRange = attribute.updateRange;\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\n\t\t\tif (updateRange.count === -1) {\n\t\t\t\t// Not using update ranges\n\t\t\t\tgl.bufferSubData(bufferType, 0, array);\n\t\t\t} else {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = -1; // reset range\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction get(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\treturn buffers.get(attribute);\n\t\t}\n\n\t\tfunction remove(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tconst data = buffers.get(attribute);\n\n\t\t\tif (data) {\n\t\t\t\tgl.deleteBuffer(data.buffer);\n\t\t\t\tbuffers.delete(attribute);\n\t\t\t}\n\t\t}\n\n\t\tfunction update(attribute, bufferType) {\n\t\t\tif (attribute.isGLBufferAttribute) {\n\t\t\t\tconst cached = buffers.get(attribute);\n\n\t\t\t\tif (!cached || cached.version < attribute.version) {\n\t\t\t\t\tbuffers.set(attribute, {\n\t\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\t\tversion: attribute.version\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tconst data = buffers.get(attribute);\n\n\t\t\tif (data === undefined) {\n\t\t\t\tbuffers.set(attribute, createBuffer(attribute, bufferType));\n\t\t\t} else if (data.version < attribute.version) {\n\t\t\t\tupdateBuffer(data.buffer, attribute, bufferType);\n\t\t\t\tdata.version = attribute.version;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tclass PlaneGeometry extends BufferGeometry {\n\t\tconstructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PlaneGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\t\t\tconst width_half = width / 2;\n\t\t\tconst height_half = height / 2;\n\t\t\tconst gridX = Math.floor(widthSegments);\n\t\t\tconst gridY = Math.floor(heightSegments);\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\t\t\tconst segment_width = width / gridX;\n\t\t\tconst segment_height = height / gridY; //\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\n\t\t\tfor (let iy = 0; iy < gridY1; iy++) {\n\t\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\t\tfor (let ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\tconst x = ix * segment_width - width_half;\n\t\t\t\t\tvertices.push(x, -y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\tuvs.push(1 - iy / gridY);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let iy = 0; iy < gridY; iy++) {\n\t\t\t\tfor (let ix = 0; ix < gridX; ix++) {\n\t\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\t\tconst b = ix + gridX1 * (iy + 1);\n\t\t\t\t\tconst c = ix + 1 + gridX1 * (iy + 1);\n\t\t\t\t\tconst d = ix + 1 + gridX1 * iy;\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = - mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), rawDiffuseColor, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), rawDiffuseColor, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularRoughness;\\n\\tvec3 specularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(\t\t0, 1,\t\t0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(\t1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,\t1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,\t1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSNMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition.xyz / vWorldPosition.w;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n\\tfloat ior = ( 1.0 + 0.4 * reflectivity ) / ( 1.0 - 0.4 * reflectivity );\\n\\tvec3 f0 = vec3( pow( ior - 1.0, 2.0 ) / pow( ior + 1.0, 2.0 ) );\\n\\tvec3 f90 = vec3( 1.0 );\\n\\tvec3 f_transmission = totalTransmission * getIBLVolumeRefraction(\\n\\t\\tnormal, v, viewDir, roughnessFactor, diffuseColor.rgb, f0, f90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationColor, attenuationDistance);\\n\\tdiffuseColor.rgb = mix( diffuseColor.rgb, f_transmission, totalTransmission );\\n#endif\";\n\n\tvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec4 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay(vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix) {\\n\\t\\tvec3 refractionVector = refract(-v, normalize(n), 1.0 / ior);\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length(vec3(modelMatrix[0].xyz));\\n\\t\\tmodelScale.y = length(vec3(modelMatrix[1].xyz));\\n\\t\\tmodelScale.z = length(vec3(modelMatrix[2].xyz));\\n\\t\\treturn normalize(refractionVector) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness(float roughness, float ior) {\\n\\t\\treturn roughness * clamp(ior * 2.0 - 2.0, 0.0, 1.0);\\n\\t}\\n\\tvec3 getTransmissionSample(vec2 fragCoord, float roughness, float ior) {\\n\\t\\tfloat framebufferLod = log2(transmissionSamplerSize.x) * applyIorToRoughness(roughness, ior);\\n\\t\\treturn texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod).rgb;\\n\\t}\\n\\tvec3 applyVolumeAttenuation(vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance) {\\n\\t\\tif (attenuationDistance == 0.0) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log(attenuationColor) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp(-attenuationCoefficient * transmissionDistance);\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec3 getIBLVolumeRefraction(vec3 n, vec3 v, vec3 viewDir, float perceptualRoughness, vec3 baseColor, vec3 f0, vec3 f90,\\n\\t\\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness, vec3 attenuationColor, float attenuationDistance) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay(n, v, thickness, ior, modelMatrix);\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4(refractedRayExit, 1.0);\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec3 transmittedLight = getTransmissionSample(refractionCoords, perceptualRoughness, ior);\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation(transmittedLight, length(transmissionRay), attenuationColor, attenuationDistance);\\n\\t\\tfloat NdotV = saturate(dot(n, viewDir));\\n\\t\\tvec2 brdf = integrateSpecularBRDF(NdotV, perceptualRoughness);\\n\\t\\tvec3 specularColor = f0 * brdf.x + f90 * brdf.y;\\n\\t\\treturn (1.0 - specularColor) * attenuatedColor * baseColor;\\n\\t}\\n#endif\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform vec3 attenuationColor;\\n\\tuniform float attenuationDistance;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <transmission_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#ifdef USE_TRANSMISSION\\n\\t\\tfloat totalTransmission = transmission;\\n\\t\\tfloat thicknessFactor = thickness;\\n\\t#endif\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\tvec3 rawDiffuseColor = diffuseColor.rgb;\\n\\t#include <transmission_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec4 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition;\\n#endif\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tconst ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\ttransmission_fragment: transmission_fragment,\n\t\ttransmission_pars_fragment: transmission_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tconst UniformsLib = {\n\t\tcommon: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\tuv2Transform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tspecularmap: {\n\t\t\tspecularMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tenvmap: {\n\t\t\tenvMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tflipEnvMap: {\n\t\t\t\tvalue: -1\n\t\t\t},\n\t\t\treflectivity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\trefractionRatio: {\n\t\t\t\tvalue: 0.98\n\t\t\t},\n\t\t\tmaxMipLevel: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\taomap: {\n\t\t\taoMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\taoMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tlightmap: {\n\t\t\tlightMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tlightMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\temissivemap: {\n\t\t\temissiveMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tbumpmap: {\n\t\t\tbumpMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tbumpScale: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tnormalmap: {\n\t\t\tnormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tnormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t}\n\t\t},\n\t\tdisplacementmap: {\n\t\t\tdisplacementMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tdisplacementScale: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tdisplacementBias: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\troughnessmap: {\n\t\t\troughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tmetalnessmap: {\n\t\t\tmetalnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tgradientmap: {\n\t\t\tgradientMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tfog: {\n\t\t\tfogDensity: {\n\t\t\t\tvalue: 0.00025\n\t\t\t},\n\t\t\tfogNear: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tfogFar: {\n\t\t\t\tvalue: 2000\n\t\t\t},\n\t\t\tfogColor: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t}\n\t\t},\n\t\tlights: {\n\t\t\tambientLightColor: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tlightProbe: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tcolor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tdistance: {},\n\t\t\t\t\tconeCos: {},\n\t\t\t\t\tpenumbraCos: {},\n\t\t\t\t\tdecay: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdecay: {},\n\t\t\t\t\tdistance: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {},\n\t\t\t\t\tshadowCameraNear: {},\n\t\t\t\t\tshadowCameraFar: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\themisphereLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tskyColor: {},\n\t\t\t\t\tgroundColor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\twidth: {},\n\t\t\t\t\theight: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tltc_1: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tltc_2: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tpoints: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t},\n\t\tsprite: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tcenter: {\n\t\t\t\tvalue: new Vector2(0.5, 0.5)\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tvalue: 0.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t}\n\t};\n\n\tconst ShaderLib = {\n\t\tbasic: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\t},\n\t\tlambert: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\t},\n\t\tphong: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\tspecular: {\n\t\t\t\t\tvalue: new Color(0x111111)\n\t\t\t\t},\n\t\t\t\tshininess: {\n\t\t\t\t\tvalue: 30\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\t},\n\t\tstandard: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\troughness: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t},\n\t\t\t\tmetalness: {\n\t\t\t\t\tvalue: 0.0\n\t\t\t\t},\n\t\t\t\tenvMapIntensity: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t} // temporary\n\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\t},\n\t\ttoon: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\t\t},\n\t\tmatcap: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {\n\t\t\t\tmatcap: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\t\t},\n\t\tpoints: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\t\t},\n\t\tdashed: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {\n\t\t\t\tscale: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tdashSize: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\ttotalSize: {\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\t},\n\t\tdepth: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\t\t},\n\t\tnormal: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\t\t},\n\t\tsprite: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\t\t},\n\t\tbackground: {\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t},\n\t\t\t\tt2D: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\t\tcube: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.envmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\t\t},\n\t\tequirect: {\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\t\t},\n\t\tdistanceRGBA: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {\n\t\t\t\treferencePosition: {\n\t\t\t\t\tvalue: new Vector3()\n\t\t\t\t},\n\t\t\t\tnearDistance: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tfarDistance: {\n\t\t\t\t\tvalue: 1000\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\t},\n\t\tshadow: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {\n\t\t\t\tcolor: {\n\t\t\t\t\tvalue: new Color(0x00000)\n\t\t\t\t},\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\t\t}\n\t};\n\tShaderLib.physical = {\n\t\tuniforms: mergeUniforms([ShaderLib.standard.uniforms, {\n\t\t\tclearcoat: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatRoughness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatRoughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatNormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t},\n\t\t\tclearcoatNormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tsheen: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t},\n\t\t\ttransmission: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\ttransmissionMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\ttransmissionSamplerSize: {\n\t\t\t\tvalue: new Vector2()\n\t\t\t},\n\t\t\ttransmissionSamplerMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tthickness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tthicknessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tattenuationDistance: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tattenuationColor: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t}\n\t\t}]),\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t};\n\n\tfunction WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\n\t\tconst clearColor = new Color(0x000000);\n\t\tlet clearAlpha = 0;\n\t\tlet planeMesh;\n\t\tlet boxMesh;\n\t\tlet currentBackground = null;\n\t\tlet currentBackgroundVersion = 0;\n\t\tlet currentTonemapping = null;\n\n\t\tfunction render(renderList, scene) {\n\t\t\tlet forceClear = false;\n\t\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\t\tif (background && background.isTexture) {\n\t\t\t\tbackground = cubemaps.get(background);\n\t\t\t} // Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\n\t\t\tconst xr = renderer.xr;\n\t\t\tconst session = xr.getSession && xr.getSession();\n\n\t\t\tif (session && session.environmentBlendMode === 'additive') {\n\t\t\t\tbackground = null;\n\t\t\t}\n\n\t\t\tif (background === null) {\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t} else if (background && background.isColor) {\n\t\t\t\tsetClear(background, 1);\n\t\t\t\tforceClear = true;\n\t\t\t}\n\n\t\t\tif (renderer.autoClear || forceClear) {\n\t\t\t\trenderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\t}\n\n\t\t\tif (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {\n\t\t\t\tif (boxMesh === undefined) {\n\t\t\t\t\tboxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.cube.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('normal');\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('uv');\n\n\t\t\t\t\tboxMesh.onBeforeRender = function (renderer, scene, camera) {\n\t\t\t\t\t\tthis.matrixWorld.copyPosition(camera.matrixWorld);\n\t\t\t\t\t}; // enable code injection for non-built-in material\n\n\n\t\t\t\t\tObject.defineProperty(boxMesh.material, 'envMap', {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(boxMesh);\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n\t\t\t} else if (background && background.isTexture) {\n\t\t\t\tif (planeMesh === undefined) {\n\t\t\t\t\tplaneMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.background.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n\t\t\t\t\tObject.defineProperty(planeMesh.material, 'map', {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(planeMesh);\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif (background.matrixAutoUpdate === true) {\n\t\t\t\t\tbackground.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction setClear(color, alpha) {\n\t\t\tstate.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n\t\t}\n\n\t\treturn {\n\t\t\tgetClearColor: function () {\n\t\t\t\treturn clearColor;\n\t\t\t},\n\t\t\tsetClearColor: function (color, alpha = 1) {\n\t\t\t\tclearColor.set(color);\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\t\t\t\treturn clearAlpha;\n\t\t\t},\n\t\t\tsetClearAlpha: function (alpha) {\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\trender: render\n\t\t};\n\t}\n\n\tfunction WebGLBindingStates(gl, extensions, attributes, capabilities) {\n\t\tconst maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\t\tconst extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');\n\t\tconst vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\t\tconst bindingStates = {};\n\t\tconst defaultState = createBindingState(null);\n\t\tlet currentState = defaultState;\n\n\t\tfunction setup(object, material, program, geometry, index) {\n\t\t\tlet updateBuffers = false;\n\n\t\t\tif (vaoAvailable) {\n\t\t\t\tconst state = getBindingState(geometry, program, material);\n\n\t\t\t\tif (currentState !== state) {\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject(currentState.object);\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate(geometry, index);\n\t\t\t\tif (updateBuffers) saveCache(geometry, index);\n\t\t\t} else {\n\t\t\t\tconst wireframe = material.wireframe === true;\n\n\t\t\t\tif (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\t\t\t\t\tupdateBuffers = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh === true) {\n\t\t\t\tupdateBuffers = true;\n\t\t\t}\n\n\t\t\tif (index !== null) {\n\t\t\t\tattributes.update(index, gl.ELEMENT_ARRAY_BUFFER);\n\t\t\t}\n\n\t\t\tif (updateBuffers) {\n\t\t\t\tsetupVertexAttributes(object, material, program, geometry);\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\t\t\tif (capabilities.isWebGL2) return gl.createVertexArray();\n\t\t\treturn extension.createVertexArrayOES();\n\t\t}\n\n\t\tfunction bindVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.bindVertexArray(vao);\n\t\t\treturn extension.bindVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction deleteVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.deleteVertexArray(vao);\n\t\t\treturn extension.deleteVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction getBindingState(geometry, program, material) {\n\t\t\tconst wireframe = material.wireframe === true;\n\t\t\tlet programMap = bindingStates[geometry.id];\n\n\t\t\tif (programMap === undefined) {\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[geometry.id] = programMap;\n\t\t\t}\n\n\t\t\tlet stateMap = programMap[program.id];\n\n\t\t\tif (stateMap === undefined) {\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[program.id] = stateMap;\n\t\t\t}\n\n\t\t\tlet state = stateMap[wireframe];\n\n\t\t\tif (state === undefined) {\n\t\t\t\tstate = createBindingState(createVertexArrayObject());\n\t\t\t\tstateMap[wireframe] = state;\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\tfunction createBindingState(vao) {\n\t\t\tconst newAttributes = [];\n\t\t\tconst enabledAttributes = [];\n\t\t\tconst attributeDivisors = [];\n\n\t\t\tfor (let i = 0; i < maxVertexAttributes; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\tattributeDivisors[i] = 0;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {},\n\t\t\t\tindex: null\n\t\t\t};\n\t\t}\n\n\t\tfunction needsUpdate(geometry, index) {\n\t\t\tconst cachedAttributes = currentState.attributes;\n\t\t\tconst geometryAttributes = geometry.attributes;\n\t\t\tlet attributesNum = 0;\n\n\t\t\tfor (const key in geometryAttributes) {\n\t\t\t\tconst cachedAttribute = cachedAttributes[key];\n\t\t\t\tconst geometryAttribute = geometryAttributes[key];\n\t\t\t\tif (cachedAttribute === undefined) return true;\n\t\t\t\tif (cachedAttribute.attribute !== geometryAttribute) return true;\n\t\t\t\tif (cachedAttribute.data !== geometryAttribute.data) return true;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tif (currentState.attributesNum !== attributesNum) return true;\n\t\t\tif (currentState.index !== index) return true;\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction saveCache(geometry, index) {\n\t\t\tconst cache = {};\n\t\t\tconst attributes = geometry.attributes;\n\t\t\tlet attributesNum = 0;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tconst data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif (attribute.data) {\n\t\t\t\t\tdata.data = attribute.data;\n\t\t\t\t}\n\n\t\t\t\tcache[key] = data;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\t\t\tcurrentState.attributesNum = attributesNum;\n\t\t\tcurrentState.index = index;\n\t\t}\n\n\t\tfunction initAttributes() {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\n\t\t\tfor (let i = 0, il = newAttributes.length; i < il; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\tfunction enableAttribute(attribute) {\n\t\t\tenableAttributeAndDivisor(attribute, 0);\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor(attribute, meshPerAttribute) {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\t\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\t\tconst attributeDivisors = currentState.attributeDivisors;\n\t\t\tnewAttributes[attribute] = 1;\n\n\t\t\tif (enabledAttributes[attribute] === 0) {\n\t\t\t\tgl.enableVertexAttribArray(attribute);\n\t\t\t\tenabledAttributes[attribute] = 1;\n\t\t\t}\n\n\t\t\tif (attributeDivisors[attribute] !== meshPerAttribute) {\n\t\t\t\tconst extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\n\t\t\t\textension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);\n\t\t\t\tattributeDivisors[attribute] = meshPerAttribute;\n\t\t\t}\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\t\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor (let i = 0, il = enabledAttributes.length; i < il; i++) {\n\t\t\t\tif (enabledAttributes[i] !== newAttributes[i]) {\n\t\t\t\t\tgl.disableVertexAttribArray(i);\n\t\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction vertexAttribPointer(index, size, type, normalized, stride, offset) {\n\t\t\tif (capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT)) {\n\t\t\t\tgl.vertexAttribIPointer(index, size, type, stride, offset);\n\t\t\t} else {\n\t\t\t\tgl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\t}\n\t\t}\n\n\t\tfunction setupVertexAttributes(object, material, program, geometry) {\n\t\t\tif (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {\n\t\t\t\tif (extensions.get('ANGLE_instanced_arrays') === null) return;\n\t\t\t}\n\n\t\t\tinitAttributes();\n\t\t\tconst geometryAttributes = geometry.attributes;\n\t\t\tconst programAttributes = program.getAttributes();\n\t\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor (const name in programAttributes) {\n\t\t\t\tconst programAttribute = programAttributes[name];\n\n\t\t\t\tif (programAttribute >= 0) {\n\t\t\t\t\tconst geometryAttribute = geometryAttributes[name];\n\n\t\t\t\t\tif (geometryAttribute !== undefined) {\n\t\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\t\t\t\t\t\tconst attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif (geometryAttribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif (data && data.isInstancedInterleavedBuffer) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, data.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (geometryAttribute.isInstancedBufferAttribute) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, 0, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (name === 'instanceMatrix') {\n\t\t\t\t\t\tconst attribute = attributes.get(object.instanceMatrix); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 0, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 1, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 2, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 3, 1);\n\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 0, 4, type, false, 64, 0);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 1, 4, type, false, 64, 16);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 2, 4, type, false, 64, 32);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 3, 4, type, false, 64, 48);\n\t\t\t\t\t} else if (name === 'instanceColor') {\n\t\t\t\t\t\tconst attribute = attributes.get(object.instanceColor); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, 1);\n\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute, 3, type, false, 12, 0);\n\t\t\t\t\t} else if (materialDefaultAttributeValues !== undefined) {\n\t\t\t\t\t\tconst value = materialDefaultAttributeValues[name];\n\n\t\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\t\tswitch (value.length) {\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv(programAttribute, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\treset();\n\n\t\t\tfor (const geometryId in bindingStates) {\n\t\t\t\tconst programMap = bindingStates[geometryId];\n\n\t\t\t\tfor (const programId in programMap) {\n\t\t\t\t\tconst stateMap = programMap[programId];\n\n\t\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[programId];\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[geometryId];\n\t\t\t}\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry(geometry) {\n\t\t\tif (bindingStates[geometry.id] === undefined) return;\n\t\t\tconst programMap = bindingStates[geometry.id];\n\n\t\t\tfor (const programId in programMap) {\n\t\t\t\tconst stateMap = programMap[programId];\n\n\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[programId];\n\t\t\t}\n\n\t\t\tdelete bindingStates[geometry.id];\n\t\t}\n\n\t\tfunction releaseStatesOfProgram(program) {\n\t\t\tfor (const geometryId in bindingStates) {\n\t\t\t\tconst programMap = bindingStates[geometryId];\n\t\t\t\tif (programMap[program.id] === undefined) continue;\n\t\t\t\tconst stateMap = programMap[program.id];\n\n\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[program.id];\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\tresetDefaultState();\n\t\t\tif (currentState === defaultState) return;\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject(currentState.object);\n\t\t} // for backward-compatilibity\n\n\n\t\tfunction resetDefaultState() {\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\t\t};\n\t}\n\n\tfunction WebGLBufferRenderer(gl, extensions, info, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tlet mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawArrays(mode, start, count);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tlet extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, start, count, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLCapabilities(gl, extensions, parameters) {\n\t\tlet maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\t\t\tif (maxAnisotropy !== undefined) return maxAnisotropy;\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tconst extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tmaxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n\t\t\t} else {\n\t\t\t\tmaxAnisotropy = 0;\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\t\t}\n\n\t\tfunction getMaxPrecision(precision) {\n\t\t\tif (precision === 'highp') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n\t\t\t\t\treturn 'highp';\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\t\t\t}\n\n\t\t\tif (precision === 'mediump') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n\t\t\t\t\treturn 'mediump';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\t\t}\n\t\t/* eslint-disable no-undef */\n\n\n\t\tconst isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;\n\t\t/* eslint-enable no-undef */\n\n\t\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tconst maxPrecision = getMaxPrecision(precision);\n\n\t\tif (maxPrecision !== precision) {\n\t\t\tconsole.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n\t\t\tprecision = maxPrecision;\n\t\t}\n\n\t\tconst drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');\n\t\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\t\tconst maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\t\tconst maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n\t\tconst maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\t\tconst maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n\t\tconst maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\t\tconst maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n\t\tconst maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n\t\tconst maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n\t\tconst vertexTextures = maxVertexTextures > 0;\n\t\tconst floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');\n\t\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\tconst maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;\n\t\treturn {\n\t\t\tisWebGL2: isWebGL2,\n\t\t\tdrawBuffers: drawBuffers,\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\t\t\tmaxSamples: maxSamples\n\t\t};\n\t}\n\n\tfunction WebGLClipping(properties) {\n\t\tconst scope = this;\n\t\tlet globalState = null,\n\t\t\t\tnumGlobalPlanes = 0,\n\t\t\t\tlocalClippingEnabled = false,\n\t\t\t\trenderingShadows = false;\n\t\tconst plane = new Plane(),\n\t\t\t\t\tviewNormalMatrix = new Matrix3(),\n\t\t\t\t\tuniform = {\n\t\t\tvalue: null,\n\t\t\tneedsUpdate: false\n\t\t};\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function (planes, enableLocalClipping, camera) {\n\t\t\tconst enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 || localClippingEnabled;\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\t\t\tglobalState = projectPlanes(planes, camera, 0);\n\t\t\tnumGlobalPlanes = planes.length;\n\t\t\treturn enabled;\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes(null);\n\t\t};\n\n\t\tthis.endShadows = function () {\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\t\t};\n\n\t\tthis.setState = function (material, camera, useCache) {\n\t\t\tconst planes = material.clippingPlanes,\n\t\t\t\t\t\tclipIntersection = material.clipIntersection,\n\t\t\t\t\t\tclipShadows = material.clipShadows;\n\t\t\tconst materialProperties = properties.get(material);\n\n\t\t\tif (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n\t\t\t\t// there's no local clipping\n\t\t\t\tif (renderingShadows) {\n\t\t\t\t\t// there's no global clipping\n\t\t\t\t\tprojectPlanes(null);\n\t\t\t\t} else {\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\t\t\tlGlobal = nGlobal * 4;\n\t\t\t\tlet dstArray = materialProperties.clippingState || null;\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes(planes, camera, lGlobal, useCache);\n\n\t\t\t\tfor (let i = 0; i !== lGlobal; ++i) {\n\t\t\t\t\tdstArray[i] = globalState[i];\n\t\t\t\t}\n\n\t\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\t\t\t}\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\t\t\tif (uniform.value !== globalState) {\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t}\n\n\t\tfunction projectPlanes(planes, camera, dstOffset, skipTransform) {\n\t\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\t\tlet dstArray = null;\n\n\t\t\tif (nPlanes !== 0) {\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif (skipTransform !== true || dstArray === null) {\n\t\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix(viewMatrix);\n\n\t\t\t\t\tif (dstArray === null || dstArray.length < flatSize) {\n\t\t\t\t\t\tdstArray = new Float32Array(flatSize);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n\t\t\t\t\t\tplane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n\t\t\t\t\t\tplane.normal.toArray(dstArray, i4);\n\t\t\t\t\t\tdstArray[i4 + 3] = plane.constant;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t\treturn dstArray;\n\t\t}\n\t}\n\n\tfunction WebGLCubeMaps(renderer) {\n\t\tlet cubemaps = new WeakMap();\n\n\t\tfunction mapTextureMapping(texture, mapping) {\n\t\t\tif (mapping === EquirectangularReflectionMapping) {\n\t\t\t\ttexture.mapping = CubeReflectionMapping;\n\t\t\t} else if (mapping === EquirectangularRefractionMapping) {\n\t\t\t\ttexture.mapping = CubeRefractionMapping;\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction get(texture) {\n\t\t\tif (texture && texture.isTexture) {\n\t\t\t\tconst mapping = texture.mapping;\n\n\t\t\t\tif (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n\t\t\t\t\tif (cubemaps.has(texture)) {\n\t\t\t\t\t\tconst cubemap = cubemaps.get(texture).texture;\n\t\t\t\t\t\treturn mapTextureMapping(cubemap, texture.mapping);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif (image && image.height > 0) {\n\t\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget(image.height / 2);\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture(renderer, texture);\n\t\t\t\t\t\t\tcubemaps.set(texture, renderTarget);\n\t\t\t\t\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\t\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\t\t\t\treturn mapTextureMapping(renderTarget.texture, texture.mapping);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tconst cubemap = cubemaps.get(texture);\n\n\t\t\tif (cubemap !== undefined) {\n\t\t\t\tcubemaps.delete(texture);\n\t\t\t\tcubemap.dispose();\n\t\t\t}\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tcubemaps = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction WebGLExtensions(gl) {\n\t\tconst extensions = {};\n\n\t\tfunction getExtension(name) {\n\t\t\tif (extensions[name] !== undefined) {\n\t\t\t\treturn extensions[name];\n\t\t\t}\n\n\t\t\tlet extension;\n\n\t\t\tswitch (name) {\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension(name);\n\t\t\t}\n\n\t\t\textensions[name] = extension;\n\t\t\treturn extension;\n\t\t}\n\n\t\treturn {\n\t\t\thas: function (name) {\n\t\t\t\treturn getExtension(name) !== null;\n\t\t\t},\n\t\t\tinit: function (capabilities) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\tgetExtension('EXT_color_buffer_float');\n\t\t\t\t} else {\n\t\t\t\t\tgetExtension('WEBGL_depth_texture');\n\t\t\t\t\tgetExtension('OES_texture_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float_linear');\n\t\t\t\t\tgetExtension('OES_standard_derivatives');\n\t\t\t\t\tgetExtension('OES_element_index_uint');\n\t\t\t\t\tgetExtension('OES_vertex_array_object');\n\t\t\t\t\tgetExtension('ANGLE_instanced_arrays');\n\t\t\t\t}\n\n\t\t\t\tgetExtension('OES_texture_float_linear');\n\t\t\t\tgetExtension('EXT_color_buffer_half_float');\n\t\t\t},\n\t\t\tget: function (name) {\n\t\t\t\tconst extension = getExtension(name);\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n\t\t\t\t}\n\n\t\t\t\treturn extension;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLGeometries(gl, attributes, info, bindingStates) {\n\t\tconst geometries = {};\n\t\tconst wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose(event) {\n\t\t\tconst geometry = event.target;\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\tattributes.remove(geometry.index);\n\t\t\t}\n\n\t\t\tfor (const name in geometry.attributes) {\n\t\t\t\tattributes.remove(geometry.attributes[name]);\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener('dispose', onGeometryDispose);\n\t\t\tdelete geometries[geometry.id];\n\t\t\tconst attribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (attribute) {\n\t\t\t\tattributes.remove(attribute);\n\t\t\t\twireframeAttributes.delete(geometry);\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry(geometry);\n\n\t\t\tif (geometry.isInstancedBufferGeometry === true) {\n\t\t\t\tdelete geometry._maxInstanceCount;\n\t\t\t} //\n\n\n\t\t\tinfo.memory.geometries--;\n\t\t}\n\n\t\tfunction get(object, geometry) {\n\t\t\tif (geometries[geometry.id] === true) return geometry;\n\t\t\tgeometry.addEventListener('dispose', onGeometryDispose);\n\t\t\tgeometries[geometry.id] = true;\n\t\t\tinfo.memory.geometries++;\n\t\t\treturn geometry;\n\t\t}\n\n\t\tfunction update(geometry) {\n\t\t\tconst geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor (const name in geometryAttributes) {\n\t\t\t\tattributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);\n\t\t\t} // morph targets\n\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst array = morphAttributes[name];\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tattributes.update(array[i], gl.ARRAY_BUFFER);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateWireframeAttribute(geometry) {\n\t\t\tconst indices = [];\n\t\t\tconst geometryIndex = geometry.index;\n\t\t\tconst geometryPosition = geometry.attributes.position;\n\t\t\tlet version = 0;\n\n\t\t\tif (geometryIndex !== null) {\n\t\t\t\tconst array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\t\tconst a = array[i + 0];\n\t\t\t\t\tconst b = array[i + 1];\n\t\t\t\t\tconst c = array[i + 2];\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {\n\t\t\t\t\tconst a = i + 0;\n\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\tconst c = i + 2;\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n\t\t\tattribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\n\t\t\t//\n\n\t\t\tconst previousAttribute = wireframeAttributes.get(geometry);\n\t\t\tif (previousAttribute) attributes.remove(previousAttribute); //\n\n\t\t\twireframeAttributes.set(geometry, attribute);\n\t\t}\n\n\t\tfunction getWireframeAttribute(geometry) {\n\t\t\tconst currentAttribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (currentAttribute) {\n\t\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\t\tif (geometryIndex !== null) {\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\t\t\t\t\tif (currentAttribute.version < geometryIndex.version) {\n\t\t\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get(geometry);\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tupdate: update,\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\t\t};\n\t}\n\n\tfunction WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tlet mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tlet type, bytesPerElement;\n\n\t\tfunction setIndex(value) {\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawElements(mode, count, type, start * bytesPerElement);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tlet extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, count, type, start * bytesPerElement, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLInfo(gl) {\n\t\tconst memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\t\tconst render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update(count, mode, instanceCount) {\n\t\t\trender.calls++;\n\n\t\t\tswitch (mode) {\n\t\t\t\tcase gl.TRIANGLES:\n\t\t\t\t\trender.triangles += instanceCount * (count / 3);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINES:\n\t\t\t\t\trender.lines += instanceCount * (count / 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_STRIP:\n\t\t\t\t\trender.lines += instanceCount * (count - 1);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_LOOP:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.POINTS:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error('THREE.WebGLInfo: Unknown draw mode:', mode);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\trender.frame++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction numericalSort(a, b) {\n\t\treturn a[0] - b[0];\n\t}\n\n\tfunction absNumericalSort(a, b) {\n\t\treturn Math.abs(b[1]) - Math.abs(a[1]);\n\t}\n\n\tfunction WebGLMorphtargets(gl) {\n\t\tconst influencesList = {};\n\t\tconst morphInfluences = new Float32Array(8);\n\t\tconst workInfluences = [];\n\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tworkInfluences[i] = [i, 0];\n\t\t}\n\n\t\tfunction update(object, geometry, material, program) {\n\t\t\tconst objectInfluences = object.morphTargetInfluences; // When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tconst length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\t\t\tlet influences = influencesList[geometry.id];\n\n\t\t\tif (influences === undefined) {\n\t\t\t\t// initialise list\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tinfluences[i] = [i, 0];\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[geometry.id] = influences;\n\t\t\t} // Collect influences\n\n\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tconst influence = influences[i];\n\t\t\t\tinfluence[0] = i;\n\t\t\t\tinfluence[1] = objectInfluences[i];\n\t\t\t}\n\n\t\t\tinfluences.sort(absNumericalSort);\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tif (i < length && influences[i][1]) {\n\t\t\t\t\tworkInfluences[i][0] = influences[i][0];\n\t\t\t\t\tworkInfluences[i][1] = influences[i][1];\n\t\t\t\t} else {\n\t\t\t\t\tworkInfluences[i][0] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[i][1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tworkInfluences.sort(numericalSort);\n\t\t\tconst morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tconst morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tconst influence = workInfluences[i];\n\t\t\t\tconst index = influence[0];\n\t\t\t\tconst value = influence[1];\n\n\t\t\t\tif (index !== Number.MAX_SAFE_INTEGER && value) {\n\t\t\t\t\tif (morphTargets && geometry.getAttribute('morphTarget' + i) !== morphTargets[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphTarget' + i, morphTargets[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.getAttribute('morphNormal' + i) !== morphNormals[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphNormal' + i, morphNormals[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[i] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t} else {\n\t\t\t\t\tif (morphTargets && geometry.hasAttribute('morphTarget' + i) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphTarget' + i);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.hasAttribute('morphNormal' + i) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphNormal' + i);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[i] = 0;\n\t\t\t\t}\n\t\t\t} // GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\n\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction WebGLObjects(gl, geometries, attributes, info) {\n\t\tlet updateMap = new WeakMap();\n\n\t\tfunction update(object) {\n\t\t\tconst frame = info.render.frame;\n\t\t\tconst geometry = object.geometry;\n\t\t\tconst buffergeometry = geometries.get(object, geometry); // Update once per frame\n\n\t\t\tif (updateMap.get(buffergeometry) !== frame) {\n\t\t\t\tgeometries.update(buffergeometry);\n\t\t\t\tupdateMap.set(buffergeometry, frame);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\tif (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {\n\t\t\t\t\tobject.addEventListener('dispose', onInstancedMeshDispose);\n\t\t\t\t}\n\n\t\t\t\tattributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);\n\n\t\t\t\tif (object.instanceColor !== null) {\n\t\t\t\t\tattributes.update(object.instanceColor, gl.ARRAY_BUFFER);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tupdateMap = new WeakMap();\n\t\t}\n\n\t\tfunction onInstancedMeshDispose(event) {\n\t\t\tconst instancedMesh = event.target;\n\t\t\tinstancedMesh.removeEventListener('dispose', onInstancedMeshDispose);\n\t\t\tattributes.remove(instancedMesh.instanceMatrix);\n\t\t\tif (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tclass DataTexture2DArray extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, depth = 1) {\n\t\t\tsuper(null);\n\t\t\tthis.image = {\n\t\t\t\tdata,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdepth\n\t\t\t};\n\t\t\tthis.magFilter = NearestFilter;\n\t\t\tthis.minFilter = NearestFilter;\n\t\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\tclass DataTexture3D extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, depth = 1) {\n\t\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t\t// Users can still set in DataTexture3D directly.\n\t\t\t//\n\t\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t\t// \ttexture.anisotropy = 16;\n\t\t\t//\n\t\t\t// See #14839\n\t\t\tsuper(null);\n\t\t\tthis.image = {\n\t\t\t\tdata,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdepth\n\t\t\t};\n\t\t\tthis.magFilter = NearestFilter;\n\t\t\tthis.minFilter = NearestFilter;\n\t\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *\t\tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with\tname 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\tconst emptyTexture = new Texture();\n\tconst emptyTexture2dArray = new DataTexture2DArray();\n\tconst emptyTexture3d = new DataTexture3D();\n\tconst emptyCubeTexture = new CubeTexture(); // --- Utilities ---\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tconst arrayCacheF32 = [];\n\tconst arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms\n\n\tconst mat4array = new Float32Array(16);\n\tconst mat3array = new Float32Array(9);\n\tconst mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices\n\n\tfunction flatten(array, nBlocks, blockSize) {\n\t\tconst firstElem = array[0];\n\t\tif (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tconst n = nBlocks * blockSize;\n\t\tlet r = arrayCacheF32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Float32Array(n);\n\t\t\tarrayCacheF32[n] = r;\n\t\t}\n\n\t\tif (nBlocks !== 0) {\n\t\t\tfirstElem.toArray(r, 0);\n\n\t\t\tfor (let i = 1, offset = 0; i !== nBlocks; ++i) {\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[i].toArray(r, offset);\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tfunction arraysEqual(a, b) {\n\t\tif (a.length !== b.length) return false;\n\n\t\tfor (let i = 0, l = a.length; i < l; i++) {\n\t\t\tif (a[i] !== b[i]) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction copyArray(a, b) {\n\t\tfor (let i = 0, l = b.length; i < l; i++) {\n\t\t\ta[i] = b[i];\n\t\t}\n\t} // Texture unit allocation\n\n\n\tfunction allocTexUnits(textures, n) {\n\t\tlet r = arrayCacheI32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Int32Array(n);\n\t\t\tarrayCacheI32[n] = r;\n\t\t}\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\tr[i] = textures.allocateTextureUnit();\n\t\t}\n\n\t\treturn r;\n\t} // --- Setters ---\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\t// Single scalar\n\n\n\tfunction setValueV1f(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1f(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single float vector (from flat array or THREE.VectorN)\n\n\n\tfunction setValueV2f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y) {\n\t\t\t\tgl.uniform2f(this.addr, v.x, v.y);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform2fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV3f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n\t\t\t\tgl.uniform3f(this.addr, v.x, v.y, v.z);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t}\n\t\t} else if (v.r !== undefined) {\n\t\t\tif (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n\t\t\t\tgl.uniform3f(this.addr, v.r, v.g, v.b);\n\t\t\t\tcache[0] = v.r;\n\t\t\t\tcache[1] = v.g;\n\t\t\t\tcache[2] = v.b;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform3fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV4f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n\t\t\t\tgl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t\tcache[3] = v.w;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform4fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t} // Single matrix (from flat array or THREE.MatrixN)\n\n\n\tfunction setValueM2(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix2fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat2array.set(elements);\n\t\t\tgl.uniformMatrix2fv(this.addr, false, mat2array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM3(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix3fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat3array.set(elements);\n\t\t\tgl.uniformMatrix3fv(this.addr, false, mat3array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM4(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix4fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat4array.set(elements);\n\t\t\tgl.uniformMatrix4fv(this.addr, false, mat4array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t} // Single integer / boolean\n\n\n\tfunction setValueV1i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1i(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single integer / boolean vector (from flat array)\n\n\n\tfunction setValueV2i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // Single unsigned integer\n\n\n\tfunction setValueV1ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1ui(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single unsigned integer vector (from flat array)\n\n\n\tfunction setValueV2ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // Single texture (2D / Cube)\n\n\n\tfunction setValueT1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTexture2D(v || emptyTexture, unit);\n\t}\n\n\tfunction setValueT3D1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture3D(v || emptyTexture3d, unit);\n\t}\n\n\tfunction setValueT6(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTextureCube(v || emptyCubeTexture, unit);\n\t}\n\n\tfunction setValueT2DArray1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture2DArray(v || emptyTexture2dArray, unit);\n\t} // Helper to pick the right setter for the singular case\n\n\n\tfunction getSingularSetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1f;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2f;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3f;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4f;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1i;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2i;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3i;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4i;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1ui;\n\t\t\t// UINT\n\n\t\t\tcase 0x8dc6:\n\t\t\t\treturn setValueV2ui;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8dc7:\n\t\t\t\treturn setValueV3ui;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8dc8:\n\t\t\t\treturn setValueV4ui;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\n\t\t\tcase 0x8dd3:\n\t\t\t\t// UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dc4:\n\t\t\t\t// SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\t\t}\n\t} // Array of scalars\n\n\n\tfunction setValueV1fArray(gl, v) {\n\t\tgl.uniform1fv(this.addr, v);\n\t} // Array of vectors (from flat array or array of THREE.VectorN)\n\n\n\tfunction setValueV2fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 2);\n\t\tgl.uniform2fv(this.addr, data);\n\t}\n\n\tfunction setValueV3fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 3);\n\t\tgl.uniform3fv(this.addr, data);\n\t}\n\n\tfunction setValueV4fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 4);\n\t\tgl.uniform4fv(this.addr, data);\n\t} // Array of matrices (from flat array or array of THREE.MatrixN)\n\n\n\tfunction setValueM2Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 4);\n\t\tgl.uniformMatrix2fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM3Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 9);\n\t\tgl.uniformMatrix3fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM4Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 16);\n\t\tgl.uniformMatrix4fv(this.addr, false, data);\n\t} // Array of integer / boolean\n\n\n\tfunction setValueV1iArray(gl, v) {\n\t\tgl.uniform1iv(this.addr, v);\n\t} // Array of integer / boolean vectors (from flat array)\n\n\n\tfunction setValueV2iArray(gl, v) {\n\t\tgl.uniform2iv(this.addr, v);\n\t}\n\n\tfunction setValueV3iArray(gl, v) {\n\t\tgl.uniform3iv(this.addr, v);\n\t}\n\n\tfunction setValueV4iArray(gl, v) {\n\t\tgl.uniform4iv(this.addr, v);\n\t} // Array of unsigned integer\n\n\n\tfunction setValueV1uiArray(gl, v) {\n\t\tgl.uniform1uiv(this.addr, v);\n\t} // Array of unsigned integer vectors (from flat array)\n\n\n\tfunction setValueV2uiArray(gl, v) {\n\t\tgl.uniform2uiv(this.addr, v);\n\t}\n\n\tfunction setValueV3uiArray(gl, v) {\n\t\tgl.uniform3uiv(this.addr, v);\n\t}\n\n\tfunction setValueV4uiArray(gl, v) {\n\t\tgl.uniform4uiv(this.addr, v);\n\t} // Array of textures (2D / Cube)\n\n\n\tfunction setValueT1Array(gl, v, textures) {\n\t\tconst n = v.length;\n\t\tconst units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTexture2D(v[i] || emptyTexture, units[i]);\n\t\t}\n\t}\n\n\tfunction setValueT6Array(gl, v, textures) {\n\t\tconst n = v.length;\n\t\tconst units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);\n\t\t}\n\t} // Helper to pick the right setter for a pure (bottom-level) array\n\n\n\tfunction getPureArraySetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1fArray;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2fArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3fArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4fArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2Array;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3Array;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4Array;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1iArray;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2iArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3iArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4iArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1uiArray;\n\t\t\t// UINT\n\n\t\t\tcase 0x8dc6:\n\t\t\t\treturn setValueV2uiArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8dc7:\n\t\t\t\treturn setValueV3uiArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8dc8:\n\t\t\t\treturn setValueV4uiArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\t\t}\n\t} // --- Uniform Classes ---\n\n\n\tfunction SingleUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tfunction PureArrayUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function (data) {\n\t\tconst cache = this.cache;\n\n\t\tif (data instanceof Float32Array && cache.length !== data.length) {\n\t\t\tthis.cache = new Float32Array(data.length);\n\t\t}\n\n\t\tcopyArray(cache, data);\n\t};\n\n\tfunction StructuredUniform(id) {\n\t\tthis.id = id;\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t}\n\n\tStructuredUniform.prototype.setValue = function (gl, value, textures) {\n\t\tconst seq = this.seq;\n\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i];\n\t\t\tu.setValue(gl, value[u.id], textures);\n\t\t}\n\t}; // --- Top-level ---\n\t// Parser - builds up the property tree from the path strings\n\n\n\tconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g; // extracts\n\t// \t- the identifier (member name or array index)\n\t//\t- followed by an optional right bracket (found when array index)\n\t//\t- followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform(container, uniformObject) {\n\t\tcontainer.seq.push(uniformObject);\n\t\tcontainer.map[uniformObject.id] = uniformObject;\n\t}\n\n\tfunction parseUniform(activeInfo, addr, container) {\n\t\tconst path = activeInfo.name,\n\t\t\t\t\tpathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile (true) {\n\t\t\tconst match = RePathPart.exec(path),\n\t\t\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\t\t\tlet id = match[1];\n\t\t\tconst idIsIndex = match[2] === ']',\n\t\t\t\t\t\tsubscript = match[3];\n\t\t\tif (idIsIndex) id = id | 0; // convert to integer\n\n\t\t\tif (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\t\t\taddUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\t\t\t\tconst map = container.map;\n\t\t\t\tlet next = map[id];\n\n\t\t\t\tif (next === undefined) {\n\t\t\t\t\tnext = new StructuredUniform(id);\n\t\t\t\t\taddUniform(container, next);\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\t\t\t}\n\t\t}\n\t} // Root Container\n\n\n\tfunction WebGLUniforms(gl, program) {\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t\tconst n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n\t\tfor (let i = 0; i < n; ++i) {\n\t\t\tconst info = gl.getActiveUniform(program, i),\n\t\t\t\t\t\taddr = gl.getUniformLocation(program, info.name);\n\t\t\tparseUniform(info, addr, this);\n\t\t}\n\t}\n\n\tWebGLUniforms.prototype.setValue = function (gl, name, value, textures) {\n\t\tconst u = this.map[name];\n\t\tif (u !== undefined) u.setValue(gl, value, textures);\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function (gl, object, name) {\n\t\tconst v = object[name];\n\t\tif (v !== undefined) this.setValue(gl, name, v);\n\t}; // Static interface\n\n\n\tWebGLUniforms.upload = function (gl, seq, values, textures) {\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i],\n\t\t\t\t\t\tv = values[u.id];\n\n\t\t\tif (v.needsUpdate !== false) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue(gl, v.value, textures);\n\t\t\t}\n\t\t}\n\t};\n\n\tWebGLUniforms.seqWithValue = function (seq, values) {\n\t\tconst r = [];\n\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i];\n\t\t\tif (u.id in values) r.push(u);\n\t\t}\n\n\t\treturn r;\n\t};\n\n\tfunction WebGLShader(gl, type, string) {\n\t\tconst shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, string);\n\t\tgl.compileShader(shader);\n\t\treturn shader;\n\t}\n\n\tlet programIdCount = 0;\n\n\tfunction addLineNumbers(string) {\n\t\tconst lines = string.split('\\n');\n\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tlines[i] = i + 1 + ': ' + lines[i];\n\t\t}\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tfunction getEncodingComponents(encoding) {\n\t\tswitch (encoding) {\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn ['Linear', '( value )'];\n\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn ['sRGB', '( value )'];\n\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn ['RGBE', '( value )'];\n\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn ['RGBM', '( value, 7.0 )'];\n\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn ['RGBM', '( value, 16.0 )'];\n\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn ['RGBD', '( value, 256.0 )'];\n\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn ['LogLuv', '( value )'];\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);\n\t\t\t\treturn ['Linear', '( value )'];\n\t\t}\n\t}\n\n\tfunction getShaderErrors(gl, shader, type) {\n\t\tconst status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\t\tconst log = gl.getShaderInfoLog(shader).trim();\n\t\tif (status && log === '') return ''; // --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tconst source = gl.getShaderSource(shader);\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers(source);\n\t}\n\n\tfunction getTexelDecodingFunction(functionName, encoding) {\n\t\tconst components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';\n\t}\n\n\tfunction getTexelEncodingFunction(functionName, encoding) {\n\t\tconst components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';\n\t}\n\n\tfunction getToneMappingFunction(functionName, toneMapping) {\n\t\tlet toneMappingName;\n\n\t\tswitch (toneMapping) {\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\t}\n\n\tfunction generateExtensions(parameters) {\n\t\tconst chunks = [parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission > 0.0) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n\t\treturn chunks.filter(filterEmptyLine).join('\\n');\n\t}\n\n\tfunction generateDefines(defines) {\n\t\tconst chunks = [];\n\n\t\tfor (const name in defines) {\n\t\t\tconst value = defines[name];\n\t\t\tif (value === false) continue;\n\t\t\tchunks.push('#define ' + name + ' ' + value);\n\t\t}\n\n\t\treturn chunks.join('\\n');\n\t}\n\n\tfunction fetchAttributeLocations(gl, program) {\n\t\tconst attributes = {};\n\t\tconst n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst info = gl.getActiveAttrib(program, i);\n\t\t\tconst name = info.name; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[name] = gl.getAttribLocation(program, name);\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tfunction filterEmptyLine(string) {\n\t\treturn string !== '';\n\t}\n\n\tfunction replaceLightNums(string, parameters) {\n\t\treturn string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\n\t}\n\n\tfunction replaceClippingPlaneNums(string, parameters) {\n\t\treturn string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);\n\t} // Resolve Includes\n\n\n\tconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes(string) {\n\t\treturn string.replace(includePattern, includeReplacer);\n\t}\n\n\tfunction includeReplacer(match, include) {\n\t\tconst string = ShaderChunk[include];\n\n\t\tif (string === undefined) {\n\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t\t}\n\n\t\treturn resolveIncludes(string);\n\t} // Unroll Loops\n\n\n\tconst deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops(string) {\n\t\treturn string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);\n\t}\n\n\tfunction deprecatedLoopReplacer(match, start, end, snippet) {\n\t\tconsole.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');\n\t\treturn loopReplacer(match, start, end, snippet);\n\t}\n\n\tfunction loopReplacer(match, start, end, snippet) {\n\t\tlet string = '';\n\n\t\tfor (let i = parseInt(start); i < parseInt(end); i++) {\n\t\t\tstring += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\n\t\t}\n\n\t\treturn string;\n\t} //\n\n\n\tfunction generatePrecision(parameters) {\n\t\tlet precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\t\tif (parameters.precision === 'highp') {\n\t\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\t\t} else if (parameters.precision === 'mediump') {\n\t\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\t\t} else if (parameters.precision === 'lowp') {\n\t\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\t\t}\n\n\t\treturn precisionstring;\n\t}\n\n\tfunction generateShadowMapTypeDefine(parameters) {\n\t\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif (parameters.shadowMapType === PCFShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\t} else if (parameters.shadowMapType === PCFSoftShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\t} else if (parameters.shadowMapType === VSMShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapTypeDefine(parameters) {\n\t\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapModeDefine(parameters) {\n\t\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapModeDefine;\n\t}\n\n\tfunction generateEnvMapBlendingDefine(parameters) {\n\t\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.combine) {\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\t}\n\n\tfunction WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\n\t\tconst gl = renderer.getContext();\n\t\tconst defines = parameters.defines;\n\t\tlet vertexShader = parameters.vertexShader;\n\t\tlet fragmentShader = parameters.fragmentShader;\n\t\tconst shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\n\t\tconst envMapTypeDefine = generateEnvMapTypeDefine(parameters);\n\t\tconst envMapModeDefine = generateEnvMapModeDefine(parameters);\n\t\tconst envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\n\t\tconst gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n\t\tconst customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);\n\t\tconst customDefines = generateDefines(defines);\n\t\tconst program = gl.createProgram();\n\t\tlet prefixVertex, prefixFragment;\n\t\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\t\tif (parameters.isRawShaderMaterial) {\n\t\t\tprefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixVertex.length > 0) {\n\t\t\t\tprefixVertex += '\\n';\n\t\t\t}\n\n\t\t\tprefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixFragment.length > 0) {\n\t\t\t\tprefixFragment += '\\n';\n\t\t\t}\n\t\t} else {\n\t\t\tprefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '\tattribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '\tattribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '\tattribute vec4 tangent;', '#endif', '#if defined( USE_COLOR_ALPHA )', '\tattribute vec4 color;', '#elif defined( USE_COLOR )', '\tattribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t\tprefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + (parameters.alphaTest % 1 ? '' : '.0') : '', // add '.0' if integer\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\tparameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '', getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t}\n\n\t\tvertexShader = resolveIncludes(vertexShader);\n\t\tvertexShader = replaceLightNums(vertexShader, parameters);\n\t\tvertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n\t\tfragmentShader = resolveIncludes(fragmentShader);\n\t\tfragmentShader = replaceLightNums(fragmentShader, parameters);\n\t\tfragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n\t\tvertexShader = unrollLoops(vertexShader);\n\t\tfragmentShader = unrollLoops(fragmentShader);\n\n\t\tif (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {\n\t\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\t\t\tversionString = '#version 300 es\\n';\n\t\t\tprefixVertex = ['#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') + '\\n' + prefixVertex;\n\t\t\tprefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\\n') + '\\n' + prefixFragment;\n\t\t}\n\n\t\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\t\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tconst glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);\n\t\tconst glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);\n\t\tgl.attachShader(program, glVertexShader);\n\t\tgl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n\t\tif (parameters.index0AttributeName !== undefined) {\n\t\t\tgl.bindAttribLocation(program, 0, parameters.index0AttributeName);\n\t\t} else if (parameters.morphTargets === true) {\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation(program, 0, 'position');\n\t\t}\n\n\t\tgl.linkProgram(program); // check for link errors\n\n\t\tif (renderer.debug.checkShaderErrors) {\n\t\t\tconst programLog = gl.getProgramInfoLog(program).trim();\n\t\t\tconst vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n\t\t\tconst fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n\t\t\tlet runnable = true;\n\t\t\tlet haveDiagnostics = true;\n\n\t\t\tif (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n\t\t\t\trunnable = false;\n\t\t\t\tconst vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\n\t\t\t\tconst fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\n\t\t\t\tconsole.error('THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors);\n\t\t\t} else if (programLog !== '') {\n\t\t\t\tconsole.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);\n\t\t\t} else if (vertexLog === '' || fragmentLog === '') {\n\t\t\t\thaveDiagnostics = false;\n\t\t\t}\n\n\t\t\tif (haveDiagnostics) {\n\t\t\t\tthis.diagnostics = {\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tprogramLog: programLog,\n\t\t\t\t\tvertexShader: {\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\t\t\t\t\t},\n\t\t\t\t\tfragmentShader: {\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} // Clean up\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\n\t\tgl.deleteShader(glVertexShader);\n\t\tgl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n\t\tlet cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\t\t\tif (cachedUniforms === undefined) {\n\t\t\t\tcachedUniforms = new WebGLUniforms(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\t\t}; // set up caching for attribute locations\n\n\n\t\tlet cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\t\t\tif (cachedAttributes === undefined) {\n\t\t\t\tcachedAttributes = fetchAttributeLocations(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\t\t}; // free resource\n\n\n\t\tthis.destroy = function () {\n\t\t\tbindingStates.releaseStatesOfProgram(this);\n\t\t\tgl.deleteProgram(program);\n\t\t\tthis.program = undefined;\n\t\t}; //\n\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\treturn this;\n\t}\n\n\tfunction WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {\n\t\tconst programs = [];\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tconst floatVertexTextures = capabilities.floatVertexTextures;\n\t\tconst maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tconst vertexTextures = capabilities.vertexTextures;\n\t\tlet precision = capabilities.precision;\n\t\tconst shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\t\tconst parameterNames = ['precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor', 'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV', 'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap', 'objectSpaceNormalMap', 'tangentSpaceNormalMap', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap', 'displacementMap', 'specularMap', 'roughnessMap', 'metalnessMap', 'gradientMap', 'alphaMap', 'combine', 'vertexColors', 'vertexAlphas', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2', 'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning', 'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'premultipliedAlpha', 'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights', 'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows', 'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights', 'alphaTest', 'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'sheen', 'transmission', 'transmissionMap', 'thicknessMap'];\n\n\t\tfunction getMaxBones(object) {\n\t\t\tconst skeleton = object.skeleton;\n\t\t\tconst bones = skeleton.bones;\n\n\t\t\tif (floatVertexTextures) {\n\t\t\t\treturn 1024;\n\t\t\t} else {\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//\t- leave some extra space for other uniforms\n\t\t\t\t//\t- limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//\t\t(up to 54 should be safe)\n\t\t\t\tconst nVertexUniforms = maxVertexUniforms;\n\t\t\t\tconst nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n\t\t\t\tconst maxBones = Math.min(nVertexMatrices, bones.length);\n\n\t\t\t\tif (maxBones < bones.length) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\t\t\t}\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap(map) {\n\t\t\tlet encoding;\n\n\t\t\tif (map && map.isTexture) {\n\t\t\t\tencoding = map.encoding;\n\t\t\t} else if (map && map.isWebGLRenderTarget) {\n\t\t\t\tconsole.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\tencoding = map.texture.encoding;\n\t\t\t} else {\n\t\t\t\tencoding = LinearEncoding;\n\t\t\t}\n\n\t\t\treturn encoding;\n\t\t}\n\n\t\tfunction getParameters(material, lights, shadows, scene, object) {\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst envMap = cubemaps.get(material.envMap || environment);\n\t\t\tconst shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tconst maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n\t\t\tif (material.precision !== null) {\n\t\t\t\tprecision = capabilities.getMaxPrecision(material.precision);\n\n\t\t\t\tif (precision !== material.precision) {\n\t\t\t\t\tconsole.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet vertexShader, fragmentShader;\n\n\t\t\tif (shaderID) {\n\t\t\t\tconst shader = ShaderLib[shaderID];\n\t\t\t\tvertexShader = shader.vertexShader;\n\t\t\t\tfragmentShader = shader.fragmentShader;\n\t\t\t} else {\n\t\t\t\tvertexShader = material.vertexShader;\n\t\t\t\tfragmentShader = material.fragmentShader;\n\t\t\t}\n\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\tconst parameters = {\n\t\t\t\tisWebGL2: isWebGL2,\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: material.type,\n\t\t\t\tvertexShader: vertexShader,\n\t\t\t\tfragmentShader: fragmentShader,\n\t\t\t\tdefines: material.defines,\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\t\tglslVersion: material.glslVersion,\n\t\t\t\tprecision: precision,\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n\t\t\t\tmap: !!material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap(material.map),\n\t\t\t\tmatcap: !!material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap(material.matcap),\n\t\t\t\tenvMap: !!envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap(envMap),\n\t\t\t\tenvMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n\t\t\t\tlightMap: !!material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n\t\t\t\taoMap: !!material.aoMap,\n\t\t\t\temissiveMap: !!material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n\t\t\t\tbumpMap: !!material.bumpMap,\n\t\t\t\tnormalMap: !!material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !!material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !!material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !!material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !!material.displacementMap,\n\t\t\t\troughnessMap: !!material.roughnessMap,\n\t\t\t\tmetalnessMap: !!material.metalnessMap,\n\t\t\t\tspecularMap: !!material.specularMap,\n\t\t\t\talphaMap: !!material.alphaMap,\n\t\t\t\tgradientMap: !!material.gradientMap,\n\t\t\t\tsheen: !!material.sheen,\n\t\t\t\ttransmission: !!material.transmission,\n\t\t\t\ttransmissionMap: !!material.transmissionMap,\n\t\t\t\tthicknessMap: !!material.thicknessMap,\n\t\t\t\tcombine: material.combine,\n\t\t\t\tvertexTangents: material.normalMap && material.vertexTangents,\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexAlphas: material.vertexColors === true && object.geometry && object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,\n\t\t\t\tvertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmission || !!material.transmissionMap || !!material.thicknessMap,\n\t\t\t\tuvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmission || !!material.transmissionMap || !!material.thicknessMap) && !!material.displacementMap,\n\t\t\t\tfog: !!fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: fog && fog.isFogExp2,\n\t\t\t\tflatShading: !!material.flatShading,\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\t\tskinning: object.isSkinnedMesh === true && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\t\tnumClipIntersection: clipping.numIntersection,\n\t\t\t\tdithering: material.dithering,\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\t\t\t\tdepthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\t\t\t};\n\t\t\treturn parameters;\n\t\t}\n\n\t\tfunction getProgramCacheKey(parameters) {\n\t\t\tconst array = [];\n\n\t\t\tif (parameters.shaderID) {\n\t\t\t\tarray.push(parameters.shaderID);\n\t\t\t} else {\n\t\t\t\tarray.push(parameters.fragmentShader);\n\t\t\t\tarray.push(parameters.vertexShader);\n\t\t\t}\n\n\t\t\tif (parameters.defines !== undefined) {\n\t\t\t\tfor (const name in parameters.defines) {\n\t\t\t\t\tarray.push(name);\n\t\t\t\t\tarray.push(parameters.defines[name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parameters.isRawShaderMaterial === false) {\n\t\t\t\tfor (let i = 0; i < parameterNames.length; i++) {\n\t\t\t\t\tarray.push(parameters[parameterNames[i]]);\n\t\t\t\t}\n\n\t\t\t\tarray.push(renderer.outputEncoding);\n\t\t\t\tarray.push(renderer.gammaFactor);\n\t\t\t}\n\n\t\t\tarray.push(parameters.customProgramCacheKey);\n\t\t\treturn array.join();\n\t\t}\n\n\t\tfunction getUniforms(material) {\n\t\t\tconst shaderID = shaderIDs[material.type];\n\t\t\tlet uniforms;\n\n\t\t\tif (shaderID) {\n\t\t\t\tconst shader = ShaderLib[shaderID];\n\t\t\t\tuniforms = UniformsUtils.clone(shader.uniforms);\n\t\t\t} else {\n\t\t\t\tuniforms = material.uniforms;\n\t\t\t}\n\n\t\t\treturn uniforms;\n\t\t}\n\n\t\tfunction acquireProgram(parameters, cacheKey) {\n\t\t\tlet program; // Check if code has been already compiled\n\n\t\t\tfor (let p = 0, pl = programs.length; p < pl; p++) {\n\t\t\t\tconst preexistingProgram = programs[p];\n\n\t\t\t\tif (preexistingProgram.cacheKey === cacheKey) {\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++program.usedTimes;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (program === undefined) {\n\t\t\t\tprogram = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n\t\t\t\tprograms.push(program);\n\t\t\t}\n\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction releaseProgram(program) {\n\t\t\tif (--program.usedTimes === 0) {\n\t\t\t\t// Remove from unordered set\n\t\t\t\tconst i = programs.indexOf(program);\n\t\t\t\tprograms[i] = programs[programs.length - 1];\n\t\t\t\tprograms.pop(); // Free WebGL resources\n\n\t\t\t\tprogram.destroy();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tgetUniforms: getUniforms,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\t}\n\n\tfunction WebGLProperties() {\n\t\tlet properties = new WeakMap();\n\n\t\tfunction get(object) {\n\t\t\tlet map = properties.get(object);\n\n\t\t\tif (map === undefined) {\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set(object, map);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}\n\n\t\tfunction remove(object) {\n\t\t\tproperties.delete(object);\n\t\t}\n\n\t\tfunction update(object, key, value) {\n\t\t\tproperties.get(object)[key] = value;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tproperties = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction painterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.program !== b.program) {\n\t\t\treturn a.program.id - b.program.id;\n\t\t} else if (a.material.id !== b.material.id) {\n\t\t\treturn a.material.id - b.material.id;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn a.z - b.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction reversePainterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn b.z - a.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction WebGLRenderList(properties) {\n\t\tconst renderItems = [];\n\t\tlet renderItemsIndex = 0;\n\t\tconst opaque = [];\n\t\tconst transmissive = [];\n\t\tconst transparent = [];\n\t\tconst defaultProgram = {\n\t\t\tid: -1\n\t\t};\n\n\t\tfunction init() {\n\t\t\trenderItemsIndex = 0;\n\t\t\topaque.length = 0;\n\t\t\ttransmissive.length = 0;\n\t\t\ttransparent.length = 0;\n\t\t}\n\n\t\tfunction getNextRenderItem(object, geometry, material, groupOrder, z, group) {\n\t\t\tlet renderItem = renderItems[renderItemsIndex];\n\t\t\tconst materialProperties = properties.get(material);\n\n\t\t\tif (renderItem === undefined) {\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\t\t\t\trenderItems[renderItemsIndex] = renderItem;\n\t\t\t} else {\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\t\t\t}\n\n\t\t\trenderItemsIndex++;\n\t\t\treturn renderItem;\n\t\t}\n\n\t\tfunction push(object, geometry, material, groupOrder, z, group) {\n\t\t\tconst renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\ttransmissive.push(renderItem);\n\t\t\t} else if (material.transparent === true) {\n\t\t\t\ttransparent.push(renderItem);\n\t\t\t} else {\n\t\t\t\topaque.push(renderItem);\n\t\t\t}\n\t\t}\n\n\t\tfunction unshift(object, geometry, material, groupOrder, z, group) {\n\t\t\tconst renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\ttransmissive.unshift(renderItem);\n\t\t\t} else if (material.transparent === true) {\n\t\t\t\ttransparent.unshift(renderItem);\n\t\t\t} else {\n\t\t\t\topaque.unshift(renderItem);\n\t\t\t}\n\t\t}\n\n\t\tfunction sort(customOpaqueSort, customTransparentSort) {\n\t\t\tif (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\n\t\t\tif (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);\n\t\t\tif (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);\n\t\t}\n\n\t\tfunction finish() {\n\t\t\t// Clear references from inactive renderItems in the list\n\t\t\tfor (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {\n\t\t\t\tconst renderItem = renderItems[i];\n\t\t\t\tif (renderItem.id === null) break;\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransmissive: transmissive,\n\t\t\ttransparent: transparent,\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\t\t\tsort: sort\n\t\t};\n\t}\n\n\tfunction WebGLRenderLists(properties) {\n\t\tlet lists = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth) {\n\t\t\tlet list;\n\n\t\t\tif (lists.has(scene) === false) {\n\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\tlists.set(scene, [list]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= lists.get(scene).length) {\n\t\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\t\tlists.get(scene).push(list);\n\t\t\t\t} else {\n\t\t\t\t\tlist = lists.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tlists = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction UniformsCache() {\n\t\tconst lights = {};\n\t\treturn {\n\t\t\tget: function (light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tlet uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction ShadowUniformsCache() {\n\t\tconst lights = {};\n\t\treturn {\n\t\t\tget: function (light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tlet uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tlet nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst(lightA, lightB) {\n\t\treturn (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n\t}\n\n\tfunction WebGLLights(extensions, capabilities) {\n\t\tconst cache = new UniformsCache();\n\t\tconst shadowCache = ShadowUniformsCache();\n\t\tconst state = {\n\t\t\tversion: 0,\n\t\t\thash: {\n\t\t\t\tdirectionalLength: -1,\n\t\t\t\tpointLength: -1,\n\t\t\t\tspotLength: -1,\n\t\t\t\trectAreaLength: -1,\n\t\t\t\themiLength: -1,\n\t\t\t\tnumDirectionalShadows: -1,\n\t\t\t\tnumPointShadows: -1,\n\t\t\t\tnumSpotShadows: -1\n\t\t\t},\n\t\t\tambient: [0, 0, 0],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\trectAreaLTC1: null,\n\t\t\trectAreaLTC2: null,\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\t\t};\n\n\t\tfor (let i = 0; i < 9; i++) state.probe.push(new Vector3());\n\n\t\tconst vector3 = new Vector3();\n\t\tconst matrix4 = new Matrix4();\n\t\tconst matrix42 = new Matrix4();\n\n\t\tfunction setup(lights) {\n\t\t\tlet r = 0,\n\t\t\t\t\tg = 0,\n\t\t\t\t\tb = 0;\n\n\t\t\tfor (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);\n\n\t\t\tlet directionalLength = 0;\n\t\t\tlet pointLength = 0;\n\t\t\tlet spotLength = 0;\n\t\t\tlet rectAreaLength = 0;\n\t\t\tlet hemiLength = 0;\n\t\t\tlet numDirectionalShadows = 0;\n\t\t\tlet numPointShadows = 0;\n\t\t\tlet numSpotShadows = 0;\n\t\t\tlights.sort(shadowCastingLightsFirst);\n\n\t\t\tfor (let i = 0, l = lights.length; i < l; i++) {\n\t\t\t\tconst light = lights[i];\n\t\t\t\tconst color = light.color;\n\t\t\t\tconst intensity = light.intensity;\n\t\t\t\tconst distance = light.distance;\n\t\t\t\tconst shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n\t\t\t\tif (light.isAmbientLight) {\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\t\t\t\t} else if (light.isLightProbe) {\n\t\t\t\t\tfor (let j = 0; j < 9; j++) {\n\t\t\t\t\t\tstate.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n\t\t\t\t\t}\n\t\t\t\t} else if (light.isDirectionalLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.directionalShadow[directionalLength] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[directionalLength] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumDirectionalShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[directionalLength] = uniforms;\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.color.copy(color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.distance = distance;\n\t\t\t\t\tuniforms.coneCos = Math.cos(light.angle);\n\t\t\t\t\tuniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.spotShadow[spotLength] = shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[spotLength] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[spotLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumSpotShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[spotLength] = uniforms;\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tconst uniforms = cache.get(light); // (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\n\t\t\t\t\tuniforms.color.copy(color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\t\t\t\t\tuniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\t\t\t\t\tstate.rectArea[rectAreaLength] = uniforms;\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\t\t\t\t\t\tstate.pointShadow[pointLength] = shadowUniforms;\n\t\t\t\t\t\tstate.pointShadowMap[pointLength] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[pointLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumPointShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[pointLength] = uniforms;\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.skyColor.copy(light.color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n\t\t\t\t\tstate.hemi[hemiLength] = uniforms;\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rectAreaLength > 0) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t// WebGL 2\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t} else {\n\t\t\t\t\t// WebGL 1\n\t\t\t\t\tif (extensions.has('OES_texture_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t\t} else if (extensions.has('OES_texture_half_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.ambient[0] = r;\n\t\t\tstate.ambient[1] = g;\n\t\t\tstate.ambient[2] = b;\n\t\t\tconst hash = state.hash;\n\n\t\t\tif (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\t\tstate.version = nextVersion++;\n\t\t\t}\n\t\t}\n\n\t\tfunction setupView(lights, camera) {\n\t\t\tlet directionalLength = 0;\n\t\t\tlet pointLength = 0;\n\t\t\tlet spotLength = 0;\n\t\t\tlet rectAreaLength = 0;\n\t\t\tlet hemiLength = 0;\n\t\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tfor (let i = 0, l = lights.length; i < l; i++) {\n\t\t\t\tconst light = lights[i];\n\n\t\t\t\tif (light.isDirectionalLight) {\n\t\t\t\t\tconst uniforms = state.directional[directionalLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tconst uniforms = state.spot[spotLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix);\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tconst uniforms = state.rectArea[rectAreaLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy(light.matrixWorld);\n\t\t\t\t\tmatrix4.premultiply(viewMatrix);\n\t\t\t\t\tmatrix42.extractRotation(matrix4);\n\t\t\t\t\tuniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\t\t\t\t\tuniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4(matrix42);\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4(matrix42);\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tconst uniforms = state.point[pointLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix);\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tconst uniforms = state.hemi[hemiLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tuniforms.direction.normalize();\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tsetupView: setupView,\n\t\t\tstate: state\n\t\t};\n\t}\n\n\tfunction WebGLRenderState(extensions, capabilities) {\n\t\tconst lights = new WebGLLights(extensions, capabilities);\n\t\tconst lightsArray = [];\n\t\tconst shadowsArray = [];\n\n\t\tfunction init() {\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\t\t}\n\n\t\tfunction pushLight(light) {\n\t\t\tlightsArray.push(light);\n\t\t}\n\n\t\tfunction pushShadow(shadowLight) {\n\t\t\tshadowsArray.push(shadowLight);\n\t\t}\n\n\t\tfunction setupLights() {\n\t\t\tlights.setup(lightsArray);\n\t\t}\n\n\t\tfunction setupLightsView(camera) {\n\t\t\tlights.setupView(lightsArray, camera);\n\t\t}\n\n\t\tconst state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\t\t\tlights: lights\n\t\t};\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\t\t\tsetupLightsView: setupLightsView,\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\t}\n\n\tfunction WebGLRenderStates(extensions, capabilities) {\n\t\tlet renderStates = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth = 0) {\n\t\t\tlet renderState;\n\n\t\t\tif (renderStates.has(scene) === false) {\n\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\trenderStates.set(scene, [renderState]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= renderStates.get(scene).length) {\n\t\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\t\trenderStates.get(scene).push(renderState);\n\t\t\t\t} else {\n\t\t\t\t\trenderState = renderStates.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn renderState;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\trenderStates = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\t/**\n\t * parameters = {\n\t *\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t * }\n\t */\n\n\tclass MeshDepthMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshDepthMaterial';\n\t\t\tthis.depthPacking = BasicDepthPacking;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.depthPacking = source.depthPacking;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\n\t *\treferencePosition: <float>,\n\t *\tnearDistance: <float>,\n\t *\tfarDistance: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tclass MeshDistanceMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshDistanceMaterial';\n\t\t\tthis.referencePosition = new Vector3();\n\t\t\tthis.nearDistance = 1;\n\t\t\tthis.farDistance = 1000;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.fog = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.referencePosition.copy(source.referencePosition);\n\t\t\tthis.nearDistance = source.nearDistance;\n\t\t\tthis.farDistance = source.farDistance;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\\n\\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean * HALF_SAMPLE_RATE;\\n\\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\tfunction WebGLShadowMap(_renderer, _objects, _capabilities) {\n\t\tlet _frustum = new Frustum();\n\n\t\tconst _shadowMapSize = new Vector2(),\n\t\t\t\t\t_viewportSize = new Vector2(),\n\t\t\t\t\t_viewport = new Vector4(),\n\t\t\t\t\t_depthMaterials = [],\n\t\t\t\t\t_distanceMaterials = [],\n\t\t\t\t\t_materialCache = {},\n\t\t\t\t\t_maxTextureSize = _capabilities.maxTextureSize;\n\n\t\tconst shadowSide = {\n\t\t\t0: BackSide,\n\t\t\t1: FrontSide,\n\t\t\t2: DoubleSide\n\t\t};\n\t\tconst shadowMaterialVertical = new ShaderMaterial({\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\tresolution: {\n\t\t\t\t\tvalue: new Vector2()\n\t\t\t\t},\n\t\t\t\tradius: {\n\t\t\t\t\tvalue: 4.0\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: vsm_vert,\n\t\t\tfragmentShader: vsm_frag\n\t\t});\n\t\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\t\tconst fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));\n\t\tconst fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\n\t\tconst scope = this;\n\t\tthis.enabled = false;\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function (lights, scene, camera) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (scope.autoUpdate === false && scope.needsUpdate === false) return;\n\t\t\tif (lights.length === 0) return;\n\n\t\t\tconst currentRenderTarget = _renderer.getRenderTarget();\n\n\t\t\tconst activeCubeFace = _renderer.getActiveCubeFace();\n\n\t\t\tconst activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tconst _state = _renderer.state; // Set GL state for depth map.\n\n\t\t\t_state.setBlending(NoBlending);\n\n\t\t\t_state.buffers.color.setClear(1, 1, 1, 1);\n\n\t\t\t_state.buffers.depth.setTest(true);\n\n\t\t\t_state.setScissorTest(false); // render depth map\n\n\n\t\t\tfor (let i = 0, il = lights.length; i < il; i++) {\n\t\t\t\tconst light = lights[i];\n\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\tif (shadow === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\n\n\t\t\t\t_shadowMapSize.copy(shadow.mapSize);\n\n\t\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply(shadowFrameExtents);\n\n\t\t\t\t_viewportSize.copy(shadow.mapSize);\n\n\t\t\t\tif (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {\n\t\t\t\t\tif (_shadowMapSize.x > _maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_shadowMapSize.y > _maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tconst pars = {\n\t\t\t\t\t\tminFilter: LinearFilter,\n\t\t\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null) {\n\t\t\t\t\tconst pars = {\n\t\t\t\t\t\tminFilter: NearestFilter,\n\t\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor (let vp = 0; vp < viewportCount; vp++) {\n\t\t\t\t\tconst viewport = shadow.getViewport(vp);\n\n\t\t\t\t\t_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);\n\n\t\t\t\t\t_state.viewport(_viewport);\n\n\t\t\t\t\tshadow.updateMatrices(light, vp);\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\t\t\t\t\trenderObject(scene, camera, shadow.camera, light, this.type);\n\t\t\t\t} // do blur pass for VSM\n\n\n\t\t\t\tif (!shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tVSMPass(shadow, camera);\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\n\t\t};\n\n\t\tfunction VSMPass(shadow, camera) {\n\t\t\tconst geometry = _objects.update(fullScreenMesh); // vertical pass\n\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.mapPass);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass\n\n\n\t\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);\n\t\t}\n\n\t\tfunction getDepthMaterialVariant(useMorphing) {\n\t\t\tconst index = useMorphing << 0;\n\t\t\tlet material = _depthMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDepthMaterial({\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\t\t\t\t\tmorphTargets: useMorphing\n\t\t\t\t});\n\t\t\t\t_depthMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant(useMorphing) {\n\t\t\tconst index = useMorphing << 0;\n\t\t\tlet material = _distanceMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDistanceMaterial({\n\t\t\t\t\tmorphTargets: useMorphing\n\t\t\t\t});\n\t\t\t\t_distanceMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {\n\t\t\tlet result = null;\n\t\t\tlet getMaterialVariant = getDepthMaterialVariant;\n\t\t\tlet customMaterial = object.customDepthMaterial;\n\n\t\t\tif (light.isPointLight === true) {\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\t\t}\n\n\t\t\tif (customMaterial === undefined) {\n\t\t\t\tlet useMorphing = false;\n\n\t\t\t\tif (material.morphTargets === true) {\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\t\t\t}\n\n\t\t\t\tresult = getMaterialVariant(useMorphing);\n\t\t\t} else {\n\t\t\t\tresult = customMaterial;\n\t\t\t}\n\n\t\t\tif (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\t\t\t\tconst keyA = result.uuid,\n\t\t\t\t\t\t\tkeyB = material.uuid;\n\t\t\t\tlet materialsForVariant = _materialCache[keyA];\n\n\t\t\t\tif (materialsForVariant === undefined) {\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[keyA] = materialsForVariant;\n\t\t\t\t}\n\n\t\t\t\tlet cachedMaterial = materialsForVariant[keyB];\n\n\t\t\t\tif (cachedMaterial === undefined) {\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[keyB] = cachedMaterial;\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif (type === VSMShadowMap) {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : material.side;\n\t\t\t} else {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\n\t\t\t\tresult.referencePosition.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction renderObject(object, camera, shadowCamera, light, type) {\n\t\t\tif (object.visible === false) return;\n\t\t\tconst visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible && (object.isMesh || object.isLine || object.isPoints)) {\n\t\t\t\tif ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n\t\t\t\t\tconst geometry = _objects.update(object);\n\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor (let k = 0, kl = groups.length; k < kl; k++) {\n\t\t\t\t\t\t\tconst group = groups[k];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\tconst depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\trenderObject(children[i], camera, shadowCamera, light, type);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction WebGLState(gl, extensions, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\t\t\tlet locked = false;\n\t\t\tconst color = new Vector4();\n\t\t\tlet currentColorMask = null;\n\t\t\tconst currentColorClear = new Vector4(0, 0, 0, 0);\n\t\t\treturn {\n\t\t\t\tsetMask: function (colorMask) {\n\t\t\t\t\tif (currentColorMask !== colorMask && !locked) {\n\t\t\t\t\t\tgl.colorMask(colorMask, colorMask, colorMask, colorMask);\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (r, g, b, a, premultipliedAlpha) {\n\t\t\t\t\tif (premultipliedAlpha === true) {\n\t\t\t\t\t\tr *= a;\n\t\t\t\t\t\tg *= a;\n\t\t\t\t\t\tb *= a;\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set(r, g, b, a);\n\n\t\t\t\t\tif (currentColorClear.equals(color) === false) {\n\t\t\t\t\t\tgl.clearColor(r, g, b, a);\n\t\t\t\t\t\tcurrentColorClear.copy(color);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set(-1, 0, 0, 0); // set to invalid state\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\t\t\tlet locked = false;\n\t\t\tlet currentDepthMask = null;\n\t\t\tlet currentDepthFunc = null;\n\t\t\tlet currentDepthClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function (depthTest) {\n\t\t\t\t\tif (depthTest) {\n\t\t\t\t\t\tenable(gl.DEPTH_TEST);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdisable(gl.DEPTH_TEST);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function (depthMask) {\n\t\t\t\t\tif (currentDepthMask !== depthMask && !locked) {\n\t\t\t\t\t\tgl.depthMask(depthMask);\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function (depthFunc) {\n\t\t\t\t\tif (currentDepthFunc !== depthFunc) {\n\t\t\t\t\t\tif (depthFunc) {\n\t\t\t\t\t\t\tswitch (depthFunc) {\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.NEVER);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.ALWAYS);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LESS);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.EQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.GEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.GREATER);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.NOTEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (depth) {\n\t\t\t\t\tif (currentDepthClear !== depth) {\n\t\t\t\t\t\tgl.clearDepth(depth);\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\t\t\tlet locked = false;\n\t\t\tlet currentStencilMask = null;\n\t\t\tlet currentStencilFunc = null;\n\t\t\tlet currentStencilRef = null;\n\t\t\tlet currentStencilFuncMask = null;\n\t\t\tlet currentStencilFail = null;\n\t\t\tlet currentStencilZFail = null;\n\t\t\tlet currentStencilZPass = null;\n\t\t\tlet currentStencilClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function (stencilTest) {\n\t\t\t\t\tif (!locked) {\n\t\t\t\t\t\tif (stencilTest) {\n\t\t\t\t\t\t\tenable(gl.STENCIL_TEST);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisable(gl.STENCIL_TEST);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function (stencilMask) {\n\t\t\t\t\tif (currentStencilMask !== stencilMask && !locked) {\n\t\t\t\t\t\tgl.stencilMask(stencilMask);\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function (stencilFunc, stencilRef, stencilMask) {\n\t\t\t\t\tif (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n\t\t\t\t\t\tgl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetOp: function (stencilFail, stencilZFail, stencilZPass) {\n\t\t\t\t\tif (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n\t\t\t\t\t\tgl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (stencil) {\n\t\t\t\t\tif (currentStencilClear !== stencil) {\n\t\t\t\t\t\tgl.clearStencil(stencil);\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t} //\n\n\n\t\tconst colorBuffer = new ColorBuffer();\n\t\tconst depthBuffer = new DepthBuffer();\n\t\tconst stencilBuffer = new StencilBuffer();\n\t\tlet enabledCapabilities = {};\n\t\tlet xrFramebuffer = null;\n\t\tlet currentBoundFramebuffers = {};\n\t\tlet currentProgram = null;\n\t\tlet currentBlendingEnabled = false;\n\t\tlet currentBlending = null;\n\t\tlet currentBlendEquation = null;\n\t\tlet currentBlendSrc = null;\n\t\tlet currentBlendDst = null;\n\t\tlet currentBlendEquationAlpha = null;\n\t\tlet currentBlendSrcAlpha = null;\n\t\tlet currentBlendDstAlpha = null;\n\t\tlet currentPremultipledAlpha = false;\n\t\tlet currentFlipSided = null;\n\t\tlet currentCullFace = null;\n\t\tlet currentLineWidth = null;\n\t\tlet currentPolygonOffsetFactor = null;\n\t\tlet currentPolygonOffsetUnits = null;\n\t\tconst maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n\t\tlet lineWidthAvailable = false;\n\t\tlet version = 0;\n\t\tconst glVersion = gl.getParameter(gl.VERSION);\n\n\t\tif (glVersion.indexOf('WebGL') !== -1) {\n\t\t\tversion = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 1.0;\n\t\t} else if (glVersion.indexOf('OpenGL ES') !== -1) {\n\t\t\tversion = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 2.0;\n\t\t}\n\n\t\tlet currentTextureSlot = null;\n\t\tlet currentBoundTextures = {};\n\t\tconst scissorParam = gl.getParameter(gl.SCISSOR_BOX);\n\t\tconst viewportParam = gl.getParameter(gl.VIEWPORT);\n\t\tconst currentScissor = new Vector4().fromArray(scissorParam);\n\t\tconst currentViewport = new Vector4().fromArray(viewportParam);\n\n\t\tfunction createTexture(type, target, count) {\n\t\t\tconst data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n\t\t\tconst texture = gl.createTexture();\n\t\t\tgl.bindTexture(type, texture);\n\t\t\tgl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\tgl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tgl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tconst emptyTextures = {};\n\t\temptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);\n\t\temptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); // init\n\n\t\tcolorBuffer.setClear(0, 0, 0, 1);\n\t\tdepthBuffer.setClear(1);\n\t\tstencilBuffer.setClear(0);\n\t\tenable(gl.DEPTH_TEST);\n\t\tdepthBuffer.setFunc(LessEqualDepth);\n\t\tsetFlipSided(false);\n\t\tsetCullFace(CullFaceBack);\n\t\tenable(gl.CULL_FACE);\n\t\tsetBlending(NoBlending); //\n\n\t\tfunction enable(id) {\n\t\t\tif (enabledCapabilities[id] !== true) {\n\t\t\t\tgl.enable(id);\n\t\t\t\tenabledCapabilities[id] = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction disable(id) {\n\t\t\tif (enabledCapabilities[id] !== false) {\n\t\t\t\tgl.disable(id);\n\t\t\t\tenabledCapabilities[id] = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindXRFramebuffer(framebuffer) {\n\t\t\tif (framebuffer !== xrFramebuffer) {\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\t\t\t\txrFramebuffer = framebuffer;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindFramebuffer(target, framebuffer) {\n\t\t\tif (framebuffer === null && xrFramebuffer !== null) framebuffer = xrFramebuffer; // use active XR framebuffer if available\n\n\t\t\tif (currentBoundFramebuffers[target] !== framebuffer) {\n\t\t\t\tgl.bindFramebuffer(target, framebuffer);\n\t\t\t\tcurrentBoundFramebuffers[target] = framebuffer;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\n\t\t\t\t\tif (target === gl.DRAW_FRAMEBUFFER) {\n\t\t\t\t\t\tcurrentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (target === gl.FRAMEBUFFER) {\n\t\t\t\t\t\tcurrentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction useProgram(program) {\n\t\t\tif (currentProgram !== program) {\n\t\t\t\tgl.useProgram(program);\n\t\t\t\tcurrentProgram = program;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tconst equationToGL = {\n\t\t\t[AddEquation]: gl.FUNC_ADD,\n\t\t\t[SubtractEquation]: gl.FUNC_SUBTRACT,\n\t\t\t[ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT\n\t\t};\n\n\t\tif (isWebGL2) {\n\t\t\tequationToGL[MinEquation] = gl.MIN;\n\t\t\tequationToGL[MaxEquation] = gl.MAX;\n\t\t} else {\n\t\t\tconst extension = extensions.get('EXT_blend_minmax');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tequationToGL[MinEquation] = extension.MIN_EXT;\n\t\t\t\tequationToGL[MaxEquation] = extension.MAX_EXT;\n\t\t\t}\n\t\t}\n\n\t\tconst factorToGL = {\n\t\t\t[ZeroFactor]: gl.ZERO,\n\t\t\t[OneFactor]: gl.ONE,\n\t\t\t[SrcColorFactor]: gl.SRC_COLOR,\n\t\t\t[SrcAlphaFactor]: gl.SRC_ALPHA,\n\t\t\t[SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,\n\t\t\t[DstColorFactor]: gl.DST_COLOR,\n\t\t\t[DstAlphaFactor]: gl.DST_ALPHA,\n\t\t\t[OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,\n\t\t\t[OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,\n\t\t\t[OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,\n\t\t\t[OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA\n\t\t};\n\n\t\tfunction setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n\t\t\tif (blending === NoBlending) {\n\t\t\t\tif (currentBlendingEnabled === true) {\n\t\t\t\t\tdisable(gl.BLEND);\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentBlendingEnabled === false) {\n\t\t\t\tenable(gl.BLEND);\n\t\t\t\tcurrentBlendingEnabled = true;\n\t\t\t}\n\n\t\t\tif (blending !== CustomBlending) {\n\t\t\t\tif (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n\t\t\t\t\tif (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n\t\t\t\t\t\tgl.blendEquation(gl.FUNC_ADD);\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (premultipliedAlpha) {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ONE, gl.ONE);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t} // custom blending\n\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n\t\t\t\tgl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\t\t}\n\n\t\t\tif (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n\t\t\t\tgl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\t\t}\n\n\t\tfunction setMaterial(material, frontFaceCW) {\n\t\t\tmaterial.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);\n\t\t\tlet flipSided = material.side === BackSide;\n\t\t\tif (frontFaceCW) flipSided = !flipSided;\n\t\t\tsetFlipSided(flipSided);\n\t\t\tmaterial.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n\t\t\tdepthBuffer.setFunc(material.depthFunc);\n\t\t\tdepthBuffer.setTest(material.depthTest);\n\t\t\tdepthBuffer.setMask(material.depthWrite);\n\t\t\tcolorBuffer.setMask(material.colorWrite);\n\t\t\tconst stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest(stencilWrite);\n\n\t\t\tif (stencilWrite) {\n\t\t\t\tstencilBuffer.setMask(material.stencilWriteMask);\n\t\t\t\tstencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n\t\t\t\tstencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n\t\t\t}\n\n\t\t\tsetPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n\t\t\tmaterial.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\t\t} //\n\n\n\t\tfunction setFlipSided(flipSided) {\n\t\t\tif (currentFlipSided !== flipSided) {\n\t\t\t\tif (flipSided) {\n\t\t\t\t\tgl.frontFace(gl.CW);\n\t\t\t\t} else {\n\t\t\t\t\tgl.frontFace(gl.CCW);\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\t\t\t}\n\t\t}\n\n\t\tfunction setCullFace(cullFace) {\n\t\t\tif (cullFace !== CullFaceNone) {\n\t\t\t\tenable(gl.CULL_FACE);\n\n\t\t\t\tif (cullFace !== currentCullFace) {\n\t\t\t\t\tif (cullFace === CullFaceBack) {\n\t\t\t\t\t\tgl.cullFace(gl.BACK);\n\t\t\t\t\t} else if (cullFace === CullFaceFront) {\n\t\t\t\t\t\tgl.cullFace(gl.FRONT);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgl.cullFace(gl.FRONT_AND_BACK);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(gl.CULL_FACE);\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\t\t}\n\n\t\tfunction setLineWidth(width) {\n\t\t\tif (width !== currentLineWidth) {\n\t\t\t\tif (lineWidthAvailable) gl.lineWidth(width);\n\t\t\t\tcurrentLineWidth = width;\n\t\t\t}\n\t\t}\n\n\t\tfunction setPolygonOffset(polygonOffset, factor, units) {\n\t\t\tif (polygonOffset) {\n\t\t\t\tenable(gl.POLYGON_OFFSET_FILL);\n\n\t\t\t\tif (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n\t\t\t\t\tgl.polygonOffset(factor, units);\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(gl.POLYGON_OFFSET_FILL);\n\t\t\t}\n\t\t}\n\n\t\tfunction setScissorTest(scissorTest) {\n\t\t\tif (scissorTest) {\n\t\t\t\tenable(gl.SCISSOR_TEST);\n\t\t\t} else {\n\t\t\t\tdisable(gl.SCISSOR_TEST);\n\t\t\t}\n\t\t} // texture\n\n\n\t\tfunction activeTexture(webglSlot) {\n\t\t\tif (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\tif (currentTextureSlot !== webglSlot) {\n\t\t\t\tgl.activeTexture(webglSlot);\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindTexture(webglType, webglTexture) {\n\t\t\tif (currentTextureSlot === null) {\n\t\t\t\tactiveTexture();\n\t\t\t}\n\n\t\t\tlet boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture === undefined) {\n\t\t\t\tboundTexture = {\n\t\t\t\t\ttype: undefined,\n\t\t\t\t\ttexture: undefined\n\t\t\t\t};\n\t\t\t\tcurrentBoundTextures[currentTextureSlot] = boundTexture;\n\t\t\t}\n\n\t\t\tif (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n\t\t\t\tgl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\t\t\t}\n\t\t}\n\n\t\tfunction unbindTexture() {\n\t\t\tconst boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture !== undefined && boundTexture.type !== undefined) {\n\t\t\t\tgl.bindTexture(boundTexture.type, null);\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\t\t\t}\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.compressedTexImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage3D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage3D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction scissor(scissor) {\n\t\t\tif (currentScissor.equals(scissor) === false) {\n\t\t\t\tgl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n\t\t\t\tcurrentScissor.copy(scissor);\n\t\t\t}\n\t\t}\n\n\t\tfunction viewport(viewport) {\n\t\t\tif (currentViewport.equals(viewport) === false) {\n\t\t\t\tgl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n\t\t\t\tcurrentViewport.copy(viewport);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction reset() {\n\t\t\t// reset state\n\t\t\tgl.disable(gl.BLEND);\n\t\t\tgl.disable(gl.CULL_FACE);\n\t\t\tgl.disable(gl.DEPTH_TEST);\n\t\t\tgl.disable(gl.POLYGON_OFFSET_FILL);\n\t\t\tgl.disable(gl.SCISSOR_TEST);\n\t\t\tgl.disable(gl.STENCIL_TEST);\n\t\t\tgl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\t\t\tgl.blendEquation(gl.FUNC_ADD);\n\t\t\tgl.blendFunc(gl.ONE, gl.ZERO);\n\t\t\tgl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);\n\t\t\tgl.colorMask(true, true, true, true);\n\t\t\tgl.clearColor(0, 0, 0, 0);\n\t\t\tgl.depthMask(true);\n\t\t\tgl.depthFunc(gl.LESS);\n\t\t\tgl.clearDepth(1);\n\t\t\tgl.stencilMask(0xffffffff);\n\t\t\tgl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);\n\t\t\tgl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n\t\t\tgl.clearStencil(0);\n\t\t\tgl.cullFace(gl.BACK);\n\t\t\tgl.frontFace(gl.CCW);\n\t\t\tgl.polygonOffset(0, 0);\n\t\t\tgl.activeTexture(gl.TEXTURE0);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\t\t\tif (isWebGL2 === true) {\n\t\t\t\tgl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n\t\t\t\tgl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n\t\t\t}\n\n\t\t\tgl.useProgram(null);\n\t\t\tgl.lineWidth(1);\n\t\t\tgl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals\n\n\t\t\tenabledCapabilities = {};\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\t\t\txrFramebuffer = null;\n\t\t\tcurrentBoundFramebuffers = {};\n\t\t\tcurrentProgram = null;\n\t\t\tcurrentBlendingEnabled = false;\n\t\t\tcurrentBlending = null;\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\t\t\tcurrentPremultipledAlpha = false;\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\t\t\tcurrentLineWidth = null;\n\t\t\tcurrentPolygonOffsetFactor = null;\n\t\t\tcurrentPolygonOffsetUnits = null;\n\t\t\tcurrentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tcurrentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\t\t}\n\n\t\treturn {\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tbindFramebuffer: bindFramebuffer,\n\t\t\tbindXRFramebuffer: bindXRFramebuffer,\n\t\t\tuseProgram: useProgram,\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\t\t\tsetScissorTest: setScissorTest,\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\t\t\treset: reset\n\t\t};\n\t}\n\n\tfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst maxTextures = capabilities.maxTextures;\n\t\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\t\tconst maxTextureSize = capabilities.maxTextureSize;\n\t\tconst maxSamples = capabilities.maxSamples;\n\n\t\tconst _videoTextures = new WeakMap();\n\n\t\tlet _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n\t\tlet useOffscreenCanvas = false;\n\n\t\ttry {\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n\t\t} catch (err) {// Ignore any errors\n\t\t}\n\n\t\tfunction createCanvas(width, height) {\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\t\t\treturn useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t}\n\n\t\tfunction resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n\t\t\tlet scale = 1; // handle case if texture exceeds max size\n\n\t\t\tif (image.width > maxSize || image.height > maxSize) {\n\t\t\t\tscale = maxSize / Math.max(image.width, image.height);\n\t\t\t} // only perform resize if necessary\n\n\n\t\t\tif (scale < 1 || needsPowerOfTwo === true) {\n\t\t\t\t// only perform resize for certain image types\n\t\t\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t\t\tconst floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n\t\t\t\t\tconst width = floor(scale * image.width);\n\t\t\t\t\tconst height = floor(scale * image.height);\n\t\t\t\t\tif (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n\t\t\t\t\tconst canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t\tconst context = canvas.getContext('2d');\n\t\t\t\t\tcontext.drawImage(image, 0, 0, width, height);\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n\t\t\t\t\treturn canvas;\n\t\t\t\t} else {\n\t\t\t\t\tif ('data' in image) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn image;\n\t\t}\n\n\t\tfunction isPowerOfTwo$1(image) {\n\t\t\treturn isPowerOfTwo(image.width) && isPowerOfTwo(image.height);\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo(texture) {\n\t\t\tif (isWebGL2) return false;\n\t\t\treturn texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps(texture, supportsMips) {\n\t\t\treturn texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction generateMipmap(target, texture, width, height) {\n\t\t\t_gl.generateMipmap(target);\n\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\ttextureProperties.__maxMipLevel = Math.log2(Math.max(width, height));\n\t\t}\n\n\t\tfunction getInternalFormat(internalFormatName, glFormat, glType) {\n\t\t\tif (isWebGL2 === false) return glFormat;\n\n\t\t\tif (internalFormatName !== null) {\n\t\t\t\tif (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n\t\t\t}\n\n\t\t\tlet internalFormat = glFormat;\n\n\t\t\tif (glFormat === _gl.RED) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.R32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\n\t\t\t}\n\n\t\t\tif (glFormat === _gl.RGB) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.RGB32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGB16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8;\n\t\t\t}\n\n\t\t\tif (glFormat === _gl.RGBA) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGBA8;\n\t\t\t}\n\n\t\t\tif (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {\n\t\t\t\textensions.get('EXT_color_buffer_float');\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\t\t} // Fallback filters for non-power-of-2 textures\n\n\n\t\tfunction filterFallback(f) {\n\t\t\tif (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n\t\t\t\treturn _gl.NEAREST;\n\t\t\t}\n\n\t\t\treturn _gl.LINEAR;\n\t\t} //\n\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tdeallocateTexture(texture);\n\n\t\t\tif (texture.isVideoTexture) {\n\t\t\t\t_videoTextures.delete(texture);\n\t\t\t}\n\n\t\t\tinfo.memory.textures--;\n\t\t}\n\n\t\tfunction onRenderTargetDispose(event) {\n\t\t\tconst renderTarget = event.target;\n\t\t\trenderTarget.removeEventListener('dispose', onRenderTargetDispose);\n\t\t\tdeallocateRenderTarget(renderTarget);\n\t\t} //\n\n\n\t\tfunction deallocateTexture(texture) {\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (textureProperties.__webglInit === undefined) return;\n\n\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\tproperties.remove(texture);\n\t\t}\n\n\t\tfunction deallocateRenderTarget(renderTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (!renderTarget) return;\n\n\t\t\tif (textureProperties.__webglTexture !== undefined) {\n\t\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\t\tinfo.memory.textures--;\n\t\t\t}\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\trenderTarget.depthTexture.dispose();\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n\t\t\t\tif (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\tif (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n\t\t\t\tif (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLMultipleRenderTargets) {\n\t\t\t\tfor (let i = 0, il = texture.length; i < il; i++) {\n\t\t\t\t\tconst attachmentProperties = properties.get(texture[i]);\n\n\t\t\t\t\tif (attachmentProperties.__webglTexture) {\n\t\t\t\t\t\t_gl.deleteTexture(attachmentProperties.__webglTexture);\n\n\t\t\t\t\t\tinfo.memory.textures--;\n\t\t\t\t\t}\n\n\t\t\t\t\tproperties.remove(texture[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tproperties.remove(texture);\n\t\t\tproperties.remove(renderTarget);\n\t\t} //\n\n\n\t\tlet textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\t\t\ttextureUnits = 0;\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\t\t\tconst textureUnit = textureUnits;\n\n\t\t\tif (textureUnit >= maxTextures) {\n\t\t\t\tconsole.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\t\t\treturn textureUnit;\n\t\t} //\n\n\n\t\tfunction setTexture2D(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (texture.isVideoTexture) updateVideoTexture(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tconst image = texture.image;\n\n\t\t\t\tif (image === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n\t\t\t\t} else if (image.complete === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n\t\t\t\t} else {\n\t\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture2DArray(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture3D(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTextureCube(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadCubeTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\t\t}\n\n\t\tconst wrappingToGL = {\n\t\t\t[RepeatWrapping]: _gl.REPEAT,\n\t\t\t[ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,\n\t\t\t[MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT\n\t\t};\n\t\tconst filterToGL = {\n\t\t\t[NearestFilter]: _gl.NEAREST,\n\t\t\t[NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,\n\t\t\t[NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,\n\t\t\t[LinearFilter]: _gl.LINEAR,\n\t\t\t[LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,\n\t\t\t[LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR\n\t\t};\n\n\t\tfunction setTextureParameters(textureType, texture, supportsMips) {\n\t\t\tif (supportsMips) {\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n\n\t\t\t\tif (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n\t\t\t} else {\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n\t\t\t\tif (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);\n\t\t\t\t}\n\n\t\t\t\tif (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n\n\t\t\t\tif (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tconst extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tif (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n\n\t\t\t\tif (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only\n\n\t\t\t\tif (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n\t\t\t\t\t_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n\t\t\t\t\tproperties.get(texture).__currentAnisotropy = texture.anisotropy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction initTexture(textureProperties, texture) {\n\t\t\tif (textureProperties.__webglInit === undefined) {\n\t\t\t\ttextureProperties.__webglInit = true;\n\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\t\t}\n\n\t\tfunction uploadTexture(textureProperties, texture, slot) {\n\t\t\tlet textureType = _gl.TEXTURE_2D;\n\t\t\tif (texture.isDataTexture2DArray) textureType = _gl.TEXTURE_2D_ARRAY;\n\t\t\tif (texture.isDataTexture3D) textureType = _gl.TEXTURE_3D;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(textureType, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n\t\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;\n\t\t\tconst image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n\t\t\tconst supportsMips = isPowerOfTwo$1(image) || isWebGL2,\n\t\t\t\t\t\tglFormat = utils.convert(texture.format);\n\t\t\tlet glType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(textureType, texture, supportsMips);\n\t\t\tlet mipmap;\n\t\t\tconst mipmaps = texture.mipmaps;\n\n\t\t\tif (texture.isDepthTexture) {\n\t\t\t\t// populate depth texture with dummy data\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\t\t\t\t} else if (texture.type === UnsignedIntType) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\t\t\t\t\t} else if (texture.type === UnsignedInt248Type) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tconsole.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} // validation checks for WebGL 1\n\n\n\t\t\t\tif (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n\t\t\t\t\tif (texture.type !== UnsignedInt248Type) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n\t\t\t} else if (texture.isDataTexture) {\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t} else if (texture.isCompressedTexture) {\n\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\tmipmap = mipmaps[i];\n\n\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\tstate.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else if (texture.isDataTexture2DArray) {\n\t\t\t\tstate.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else if (texture.isDataTexture3D) {\n\t\t\t\tstate.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else {\n\t\t\t\t// regular Texture (image, video, canvas)\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tgenerateMipmap(textureType, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t}\n\n\t\tfunction uploadCubeTexture(textureProperties, texture, slot) {\n\t\t\tif (texture.image.length !== 6) return;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n\t\t\tconst isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n\t\t\tconst isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n\t\t\tconst cubeImage = [];\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tif (!isCompressed && !isDataTexture) {\n\t\t\t\t\tcubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n\t\t\t\t} else {\n\t\t\t\t\tcubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst image = cubeImage[0],\n\t\t\t\t\t\tsupportsMips = isPowerOfTwo$1(image) || isWebGL2,\n\t\t\t\t\t\tglFormat = utils.convert(texture.format),\n\t\t\t\t\t\tglType = utils.convert(texture.type),\n\t\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\t\t\tlet mipmaps;\n\n\t\t\tif (isCompressed) {\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tmipmaps = cubeImage[i].mipmaps;\n\n\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\n\t\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else {\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tif (isDataTexture) {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n\n\t\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[i].image;\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);\n\n\t\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap(_gl.TEXTURE_CUBE_MAP, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t} // Render targets\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\n\n\t\tfunction setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {\n\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\tconst glType = utils.convert(texture.type);\n\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\tif (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\tstate.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);\n\t\t\t} else {\n\t\t\t\tstate.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n\t\tfunction setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n\t\t\tif (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n\t\t\t\tlet glInternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif (depthTexture && depthTexture.isDepthTexture) {\n\t\t\t\t\t\tif (depthTexture.type === FloatType) {\n\t\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\t\t\t\t\t} else if (depthTexture.type === UnsignedIntType) {\n\t\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n\t\t\t} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n\t\t\t} else {\n\t\t\t\t// Use the first texture for MRT so far\n\t\t\t\tconst texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[0] : renderTarget.texture;\n\t\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\t\tconst glType = utils.convert(texture.type);\n\t\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\t\t} // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n\t\tfunction setupDepthTexture(framebuffer, renderTarget) {\n\t\t\tconst isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n\t\t\tif (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\tif (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\t\t} // upload an empty depth texture with framebuffer size\n\n\n\t\t\tif (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D(renderTarget.depthTexture, 0);\n\n\t\t\tconst webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n\t\t\tif (renderTarget.depthTexture.format === DepthFormat) {\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n\t\t\t} else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown depthTexture format');\n\t\t\t}\n\t\t} // Setup GL resources for a non-texture depth buffer\n\n\n\t\tfunction setupDepthRenderbuffer(renderTarget) {\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\tif (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\t\t\tsetupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n\t\t\t} else {\n\t\t\t\tif (isCube) {\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t} // Set up GL resources for the render target\n\n\n\t\tfunction setupRenderTarget(renderTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\trenderTarget.addEventListener('dispose', onRenderTargetDispose);\n\n\t\t\tif (renderTarget.isWebGLMultipleRenderTargets !== true) {\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\ttextureProperties.__version = texture.version;\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\t\t\tconst isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;\n\t\t\tconst isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n\t\t\tconst isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\n\t\t\tconst supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif (isWebGL2 && texture.format === RGBFormat && (texture.type === FloatType || texture.type === HalfFloatType)) {\n\t\t\t\ttexture.format = RGBAFormat;\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');\n\t\t\t} // Setup framebuffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif (isMultipleRenderTargets) {\n\t\t\t\t\tif (capabilities.drawBuffers) {\n\t\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\t\t\tconst attachmentProperties = properties.get(textures[i]);\n\n\t\t\t\t\t\t\tif (attachmentProperties.__webglTexture === undefined) {\n\t\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\t\t\t\t\t\t\t\tinfo.memory.textures++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');\n\t\t\t\t\t}\n\t\t\t\t} else if (isMultisample) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\t\t\t\tconst glType = utils.convert(texture.type);\n\t\t\t\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\n\t\t\t\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Setup color buffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n\t\t\t\t}\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_CUBE_MAP, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\n\t\t\t} else if (isMultipleRenderTargets) {\n\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\tconst attachment = textures[i];\n\t\t\t\t\tconst attachmentProperties = properties.get(attachment);\n\t\t\t\t\tstate.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);\n\t\t\t\t\tsetTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);\n\n\t\t\t\t\tif (textureNeedsGenerateMipmaps(attachment, supportsMips)) {\n\t\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_2D, attachment, renderTarget.width, renderTarget.height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_2D, null);\n\t\t\t} else {\n\t\t\t\tlet glTextureType = _gl.TEXTURE_2D;\n\n\t\t\t\tif (isRenderTarget3D) {\n\t\t\t\t\t// Render targets containing layers, i.e: Texture 3D and 2d arrays\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\tconst isTexture3D = texture.isDataTexture3D;\n\t\t\t\t\t\tglTextureType = isTexture3D ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(glTextureType, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(glTextureType, texture, supportsMips);\n\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_2D, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_2D, null);\n\t\t\t} // Setup depth and stencil buffers\n\n\n\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\tsetupDepthRenderbuffer(renderTarget);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap(renderTarget) {\n\t\t\tconst supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];\n\n\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\tconst texture = textures[i];\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\n\t\t\t\t\tconst webglTexture = properties.get(texture).__webglTexture;\n\n\t\t\t\t\tstate.bindTexture(target, webglTexture);\n\t\t\t\t\tgenerateMipmap(target, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t\tstate.bindTexture(target, null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget(renderTarget) {\n\t\t\tif (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tconst width = renderTarget.width;\n\t\t\t\t\tconst height = renderTarget.height;\n\t\t\t\t\tlet mask = _gl.COLOR_BUFFER_BIT;\n\t\t\t\t\tif (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\n\t\t\t\t\tif (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\n\t\t\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\t\t\tstate.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\t\tstate.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\t_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\n\n\t\t\t\t\tstate.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);\n\t\t\t\t\tstate.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction getRenderTargetSamples(renderTarget) {\n\t\t\treturn isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n\t\t}\n\n\t\tfunction updateVideoTexture(texture) {\n\t\t\tconst frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n\t\t\tif (_videoTextures.get(texture) !== frame) {\n\t\t\t\t_videoTextures.set(texture, frame);\n\n\t\t\t\ttexture.update();\n\t\t\t}\n\t\t} // backwards compatibility\n\n\n\t\tlet warnedTexture2D = false;\n\t\tlet warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D(texture, slot) {\n\t\t\tif (texture && texture.isWebGLRenderTarget) {\n\t\t\t\tif (warnedTexture2D === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTexture2D = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTexture2D(texture, slot);\n\t\t}\n\n\t\tfunction safeSetTextureCube(texture, slot) {\n\t\t\tif (texture && texture.isWebGLCubeRenderTarget) {\n\t\t\t\tif (warnedTextureCube === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTextureCube = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTextureCube(texture, slot);\n\t\t} //\n\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\t}\n\n\tfunction WebGLUtils(gl, extensions, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert(p) {\n\t\t\tlet extension;\n\t\t\tif (p === UnsignedByteType) return gl.UNSIGNED_BYTE;\n\t\t\tif (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\tif (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\tif (p === UnsignedShort565Type) return gl.UNSIGNED_SHORT_5_6_5;\n\t\t\tif (p === ByteType) return gl.BYTE;\n\t\t\tif (p === ShortType) return gl.SHORT;\n\t\t\tif (p === UnsignedShortType) return gl.UNSIGNED_SHORT;\n\t\t\tif (p === IntType) return gl.INT;\n\t\t\tif (p === UnsignedIntType) return gl.UNSIGNED_INT;\n\t\t\tif (p === FloatType) return gl.FLOAT;\n\n\t\t\tif (p === HalfFloatType) {\n\t\t\t\tif (isWebGL2) return gl.HALF_FLOAT;\n\t\t\t\textension = extensions.get('OES_texture_half_float');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === AlphaFormat) return gl.ALPHA;\n\t\t\tif (p === RGBFormat) return gl.RGB;\n\t\t\tif (p === RGBAFormat) return gl.RGBA;\n\t\t\tif (p === LuminanceFormat) return gl.LUMINANCE;\n\t\t\tif (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;\n\t\t\tif (p === DepthFormat) return gl.DEPTH_COMPONENT;\n\t\t\tif (p === DepthStencilFormat) return gl.DEPTH_STENCIL;\n\t\t\tif (p === RedFormat) return gl.RED; // WebGL2 formats.\n\n\t\t\tif (p === RedIntegerFormat) return gl.RED_INTEGER;\n\t\t\tif (p === RGFormat) return gl.RG;\n\t\t\tif (p === RGIntegerFormat) return gl.RG_INTEGER;\n\t\t\tif (p === RGBIntegerFormat) return gl.RGB_INTEGER;\n\t\t\tif (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;\n\n\t\t\tif (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc1');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\t\tif (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_astc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_BPTC_Format) {\n\t\t\t\textension = extensions.get('EXT_texture_compression_bptc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === UnsignedInt248Type) {\n\t\t\t\tif (isWebGL2) return gl.UNSIGNED_INT_24_8;\n\t\t\t\textension = extensions.get('WEBGL_depth_texture');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tconvert: convert\n\t\t};\n\t}\n\n\tclass ArrayCamera extends PerspectiveCamera {\n\t\tconstructor(array = []) {\n\t\t\tsuper();\n\t\t\tthis.cameras = array;\n\t\t}\n\n\t}\n\n\tArrayCamera.prototype.isArrayCamera = true;\n\n\tclass Group extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Group';\n\t\t}\n\n\t}\n\n\tGroup.prototype.isGroup = true;\n\n\tconst _moveEvent = {\n\t\ttype: 'move'\n\t};\n\n\tclass WebXRController {\n\t\tconstructor() {\n\t\t\tthis._targetRay = null;\n\t\t\tthis._grip = null;\n\t\t\tthis._hand = null;\n\t\t}\n\n\t\tgetHandSpace() {\n\t\t\tif (this._hand === null) {\n\t\t\t\tthis._hand = new Group();\n\t\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\t\tthis._hand.visible = false;\n\t\t\t\tthis._hand.joints = {};\n\t\t\t\tthis._hand.inputState = {\n\t\t\t\t\tpinching: false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn this._hand;\n\t\t}\n\n\t\tgetTargetRaySpace() {\n\t\t\tif (this._targetRay === null) {\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\t\t}\n\n\t\tgetGripSpace() {\n\t\t\tif (this._grip === null) {\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\t\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\t\tthis._grip.angularVelocity = new Vector3();\n\t\t\t}\n\n\t\t\treturn this._grip;\n\t\t}\n\n\t\tdispatchEvent(event) {\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.dispatchEvent(event);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tdisconnect(inputSource) {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'disconnected',\n\t\t\t\tdata: inputSource\n\t\t\t});\n\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.visible = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tupdate(inputSource, frame, referenceSpace) {\n\t\t\tlet inputPose = null;\n\t\t\tlet gripPose = null;\n\t\t\tlet handPose = null;\n\t\t\tconst targetRay = this._targetRay;\n\t\t\tconst grip = this._grip;\n\t\t\tconst hand = this._hand;\n\n\t\t\tif (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n\t\t\t\tif (targetRay !== null) {\n\t\t\t\t\tinputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n\t\t\t\t\tif (inputPose !== null) {\n\t\t\t\t\t\ttargetRay.matrix.fromArray(inputPose.transform.matrix);\n\t\t\t\t\t\ttargetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n\n\t\t\t\t\t\tif (inputPose.linearVelocity) {\n\t\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\t\ttargetRay.linearVelocity.copy(inputPose.linearVelocity);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inputPose.angularVelocity) {\n\t\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\t\ttargetRay.angularVelocity.copy(inputPose.angularVelocity);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.dispatchEvent(_moveEvent);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hand && inputSource.hand) {\n\t\t\t\t\thandPose = true;\n\n\t\t\t\t\tfor (const inputjoint of inputSource.hand.values()) {\n\t\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\t\tconst jointPose = frame.getJointPose(inputjoint, referenceSpace);\n\n\t\t\t\t\t\tif (hand.joints[inputjoint.jointName] === undefined) {\n\t\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\t\tconst joint = new Group();\n\t\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\t\t\tjoint.visible = false;\n\t\t\t\t\t\t\thand.joints[inputjoint.jointName] = joint; // ??\n\n\t\t\t\t\t\t\thand.add(joint);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst joint = hand.joints[inputjoint.jointName];\n\n\t\t\t\t\t\tif (jointPose !== null) {\n\t\t\t\t\t\t\tjoint.matrix.fromArray(jointPose.transform.matrix);\n\t\t\t\t\t\t\tjoint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n\t\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjoint.visible = jointPose !== null;\n\t\t\t\t\t} // Custom events\n\t\t\t\t\t// Check pinchz\n\n\n\t\t\t\t\tconst indexTip = hand.joints['index-finger-tip'];\n\t\t\t\t\tconst thumbTip = hand.joints['thumb-tip'];\n\t\t\t\t\tconst distance = indexTip.position.distanceTo(thumbTip.position);\n\t\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\t\tif (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n\t\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n\t\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (grip !== null && inputSource.gripSpace) {\n\t\t\t\t\t\tgripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n\t\t\t\t\t\tif (gripPose !== null) {\n\t\t\t\t\t\t\tgrip.matrix.fromArray(gripPose.transform.matrix);\n\t\t\t\t\t\t\tgrip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n\n\t\t\t\t\t\t\tif (gripPose.linearVelocity) {\n\t\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\t\tgrip.linearVelocity.copy(gripPose.linearVelocity);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (gripPose.angularVelocity) {\n\t\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\t\tgrip.angularVelocity.copy(gripPose.angularVelocity);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetRay !== null) {\n\t\t\t\ttargetRay.visible = inputPose !== null;\n\t\t\t}\n\n\t\t\tif (grip !== null) {\n\t\t\t\tgrip.visible = gripPose !== null;\n\t\t\t}\n\n\t\t\tif (hand !== null) {\n\t\t\t\thand.visible = handPose !== null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass WebXRManager extends EventDispatcher {\n\t\tconstructor(renderer, gl) {\n\t\t\tsuper();\n\t\t\tconst scope = this;\n\t\t\tconst state = renderer.state;\n\t\t\tlet session = null;\n\t\t\tlet framebufferScaleFactor = 1.0;\n\t\t\tlet referenceSpace = null;\n\t\t\tlet referenceSpaceType = 'local-floor';\n\t\t\tlet pose = null;\n\t\t\tconst controllers = [];\n\t\t\tconst inputSourcesMap = new Map(); //\n\n\t\t\tconst cameraL = new PerspectiveCamera();\n\t\t\tcameraL.layers.enable(1);\n\t\t\tcameraL.viewport = new Vector4();\n\t\t\tconst cameraR = new PerspectiveCamera();\n\t\t\tcameraR.layers.enable(2);\n\t\t\tcameraR.viewport = new Vector4();\n\t\t\tconst cameras = [cameraL, cameraR];\n\t\t\tconst cameraVR = new ArrayCamera();\n\t\t\tcameraVR.layers.enable(1);\n\t\t\tcameraVR.layers.enable(2);\n\t\t\tlet _currentDepthNear = null;\n\t\t\tlet _currentDepthFar = null; //\n\n\t\t\tthis.cameraAutoUpdate = true;\n\t\t\tthis.enabled = false;\n\t\t\tthis.isPresenting = false;\n\n\t\t\tthis.getController = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getTargetRaySpace();\n\t\t\t};\n\n\t\t\tthis.getControllerGrip = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getGripSpace();\n\t\t\t};\n\n\t\t\tthis.getHand = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getHandSpace();\n\t\t\t}; //\n\n\n\t\t\tfunction onSessionEvent(event) {\n\t\t\t\tconst controller = inputSourcesMap.get(event.inputSource);\n\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\ttype: event.type,\n\t\t\t\t\t\tdata: event.inputSource\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction onSessionEnd() {\n\t\t\t\tinputSourcesMap.forEach(function (controller, inputSource) {\n\t\t\t\t\tcontroller.disconnect(inputSource);\n\t\t\t\t});\n\t\t\t\tinputSourcesMap.clear();\n\t\t\t\t_currentDepthNear = null;\n\t\t\t\t_currentDepthFar = null; // restore framebuffer/rendering state\n\n\t\t\t\tstate.bindXRFramebuffer(null);\n\t\t\t\trenderer.setRenderTarget(renderer.getRenderTarget()); //\n\n\t\t\t\tanimation.stop();\n\t\t\t\tscope.isPresenting = false;\n\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\ttype: 'sessionend'\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.setFramebufferScaleFactor = function (value) {\n\t\t\t\tframebufferScaleFactor = value;\n\n\t\t\t\tif (scope.isPresenting === true) {\n\t\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.setReferenceSpaceType = function (value) {\n\t\t\t\treferenceSpaceType = value;\n\n\t\t\t\tif (scope.isPresenting === true) {\n\t\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.getReferenceSpace = function () {\n\t\t\t\treturn referenceSpace;\n\t\t\t};\n\n\t\t\tthis.getSession = function () {\n\t\t\t\treturn session;\n\t\t\t};\n\n\t\t\tthis.setSession = async function (value) {\n\t\t\t\tsession = value;\n\n\t\t\t\tif (session !== null) {\n\t\t\t\t\tsession.addEventListener('select', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('selectstart', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('selectend', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeeze', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeezestart', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeezeend', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('end', onSessionEnd);\n\t\t\t\t\tsession.addEventListener('inputsourceschange', onInputSourcesChange);\n\t\t\t\t\tconst attributes = gl.getContextAttributes();\n\n\t\t\t\t\tif (attributes.xrCompatible !== true) {\n\t\t\t\t\t\tawait gl.makeXRCompatible();\n\t\t\t\t\t}\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t}; // eslint-disable-next-line no-undef\n\n\t\t\t\t\tconst baseLayer = new XRWebGLLayer(session, gl, layerInit);\n\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\tbaseLayer: baseLayer\n\t\t\t\t\t});\n\t\t\t\t\treferenceSpace = await session.requestReferenceSpace(referenceSpaceType);\n\t\t\t\t\tanimation.setContext(session);\n\t\t\t\t\tanimation.start();\n\t\t\t\t\tscope.isPresenting = true;\n\t\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\t\ttype: 'sessionstart'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfunction onInputSourcesChange(event) {\n\t\t\t\tconst inputSources = session.inputSources; // Assign inputSources to available controllers\n\n\t\t\t\tfor (let i = 0; i < controllers.length; i++) {\n\t\t\t\t\tinputSourcesMap.set(inputSources[i], controllers[i]);\n\t\t\t\t} // Notify disconnected\n\n\n\t\t\t\tfor (let i = 0; i < event.removed.length; i++) {\n\t\t\t\t\tconst inputSource = event.removed[i];\n\t\t\t\t\tconst controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\t\tif (controller) {\n\t\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'disconnected',\n\t\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t\t});\n\t\t\t\t\t\tinputSourcesMap.delete(inputSource);\n\t\t\t\t\t}\n\t\t\t\t} // Notify connected\n\n\n\t\t\t\tfor (let i = 0; i < event.added.length; i++) {\n\t\t\t\t\tconst inputSource = event.added[i];\n\t\t\t\t\tconst controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\t\tif (controller) {\n\t\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'connected',\n\t\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tconst cameraLPos = new Vector3();\n\t\t\tconst cameraRPos = new Vector3();\n\t\t\t/**\n\t\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t\t * the cameras' projection and world matrices have already been set.\n\t\t\t * And that near and far planes are identical for both cameras.\n\t\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t\t */\n\n\t\t\tfunction setProjectionFromUnion(camera, cameraL, cameraR) {\n\t\t\t\tcameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n\t\t\t\tcameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n\t\t\t\tconst ipd = cameraLPos.distanceTo(cameraRPos);\n\t\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\t\tconst projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n\t\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t\t// Use the left camera for these values.\n\n\t\t\t\tconst near = projL[14] / (projL[10] - 1);\n\t\t\t\tconst far = projL[14] / (projL[10] + 1);\n\t\t\t\tconst topFov = (projL[9] + 1) / projL[5];\n\t\t\t\tconst bottomFov = (projL[9] - 1) / projL[5];\n\t\t\t\tconst leftFov = (projL[8] - 1) / projL[0];\n\t\t\t\tconst rightFov = (projR[8] + 1) / projR[0];\n\t\t\t\tconst left = near * leftFov;\n\t\t\t\tconst right = near * rightFov; // Calculate the new camera's position offset from the\n\t\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\n\t\t\t\tconst zOffset = ipd / (-leftFov + rightFov);\n\t\t\t\tconst xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n\t\t\t\tcameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tcamera.translateX(xOffset);\n\t\t\t\tcamera.translateZ(zOffset);\n\t\t\t\tcamera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale\n\t\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t\t// although must now be relative to the new union camera.\n\n\t\t\t\tconst near2 = near + zOffset;\n\t\t\t\tconst far2 = far + zOffset;\n\t\t\t\tconst left2 = left - xOffset;\n\t\t\t\tconst right2 = right + (ipd - xOffset);\n\t\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\t\t\t\tcamera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n\t\t\t}\n\n\t\t\tfunction updateCamera(camera, parent) {\n\t\t\t\tif (parent === null) {\n\t\t\t\t\tcamera.matrixWorld.copy(camera.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tcamera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n\t\t\t\t}\n\n\t\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert();\n\t\t\t}\n\n\t\t\tthis.updateCamera = function (camera) {\n\t\t\t\tif (session === null) return;\n\t\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\t\tif (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n\t\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t\t});\n\t\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t\t_currentDepthFar = cameraVR.far;\n\t\t\t\t}\n\n\t\t\t\tconst parent = camera.parent;\n\t\t\t\tconst cameras = cameraVR.cameras;\n\t\t\t\tupdateCamera(cameraVR, parent);\n\n\t\t\t\tfor (let i = 0; i < cameras.length; i++) {\n\t\t\t\t\tupdateCamera(cameras[i], parent);\n\t\t\t\t} // update camera and its children\n\n\n\t\t\t\tcamera.matrixWorld.copy(cameraVR.matrixWorld);\n\t\t\t\tcamera.matrix.copy(cameraVR.matrix);\n\t\t\t\tcamera.matrix.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tconst children = camera.children;\n\n\t\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateMatrixWorld(true);\n\t\t\t\t} // update projection matrix for proper view frustum culling\n\n\n\t\t\t\tif (cameras.length === 2) {\n\t\t\t\t\tsetProjectionFromUnion(cameraVR, cameraL, cameraR);\n\t\t\t\t} else {\n\t\t\t\t\t// assume single camera setup (AR)\n\t\t\t\t\tcameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.getCamera = function () {\n\t\t\t\treturn cameraVR;\n\t\t\t}; // Animation Loop\n\n\n\t\t\tlet onAnimationFrameCallback = null;\n\n\t\t\tfunction onAnimationFrame(time, frame) {\n\t\t\t\tpose = frame.getViewerPose(referenceSpace);\n\n\t\t\t\tif (pose !== null) {\n\t\t\t\t\tconst views = pose.views;\n\t\t\t\t\tconst baseLayer = session.renderState.baseLayer;\n\t\t\t\t\tstate.bindXRFramebuffer(baseLayer.framebuffer);\n\t\t\t\t\tlet cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\t\tif (views.length !== cameraVR.cameras.length) {\n\t\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\t\tcameraVRNeedsUpdate = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0; i < views.length; i++) {\n\t\t\t\t\t\tconst view = views[i];\n\t\t\t\t\t\tconst viewport = baseLayer.getViewport(view);\n\t\t\t\t\t\tconst camera = cameras[i];\n\t\t\t\t\t\tcamera.matrix.fromArray(view.transform.matrix);\n\t\t\t\t\t\tcamera.projectionMatrix.fromArray(view.projectionMatrix);\n\t\t\t\t\t\tcamera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\tcameraVR.matrix.copy(camera.matrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (cameraVRNeedsUpdate === true) {\n\t\t\t\t\t\t\tcameraVR.cameras.push(camera);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tconst inputSources = session.inputSources;\n\n\t\t\t\tfor (let i = 0; i < controllers.length; i++) {\n\t\t\t\t\tconst controller = controllers[i];\n\t\t\t\t\tconst inputSource = inputSources[i];\n\t\t\t\t\tcontroller.update(inputSource, frame, referenceSpace);\n\t\t\t\t}\n\n\t\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n\t\t\t}\n\n\t\t\tconst animation = new WebGLAnimation();\n\t\t\tanimation.setAnimationLoop(onAnimationFrame);\n\n\t\t\tthis.setAnimationLoop = function (callback) {\n\t\t\t\tonAnimationFrameCallback = callback;\n\t\t\t};\n\n\t\t\tthis.dispose = function () {};\n\t\t}\n\n\t}\n\n\tfunction WebGLMaterials(properties) {\n\t\tfunction refreshFogUniforms(uniforms, fog) {\n\t\t\tuniforms.fogColor.value.copy(fog.color);\n\n\t\t\tif (fog.isFog) {\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\t\t\t} else if (fog.isFogExp2) {\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {\n\t\t\tif (material.isMeshBasicMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t} else if (material.isMeshLambertMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsLambert(uniforms, material);\n\t\t\t} else if (material.isMeshToonMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsToon(uniforms, material);\n\t\t\t} else if (material.isMeshPhongMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsPhong(uniforms, material);\n\t\t\t} else if (material.isMeshStandardMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\n\t\t\t\tif (material.isMeshPhysicalMaterial) {\n\t\t\t\t\trefreshUniformsPhysical(uniforms, material, transmissionRenderTarget);\n\t\t\t\t} else {\n\t\t\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isMeshMatcapMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsMatcap(uniforms, material);\n\t\t\t} else if (material.isMeshDepthMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDepth(uniforms, material);\n\t\t\t} else if (material.isMeshDistanceMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDistance(uniforms, material);\n\t\t\t} else if (material.isMeshNormalMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsNormal(uniforms, material);\n\t\t\t} else if (material.isLineBasicMaterial) {\n\t\t\t\trefreshUniformsLine(uniforms, material);\n\n\t\t\t\tif (material.isLineDashedMaterial) {\n\t\t\t\t\trefreshUniformsDash(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isPointsMaterial) {\n\t\t\t\trefreshUniformsPoints(uniforms, material, pixelRatio, height);\n\t\t\t} else if (material.isSpriteMaterial) {\n\t\t\t\trefreshUniformsSprites(uniforms, material);\n\t\t\t} else if (material.isShadowMaterial) {\n\t\t\t\tuniforms.color.value.copy(material.color);\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\t} else if (material.isShaderMaterial) {\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsCommon(uniforms, material) {\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif (material.color) {\n\t\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\t}\n\n\t\t\tif (material.emissive) {\n\t\t\t\tuniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n\t\t\t}\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.specularMap) {\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t}\n\n\t\t\tconst envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\tuniforms.envMap.value = envMap;\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tconst maxMipLevel = properties.get(envMap).__maxMipLevel;\n\n\t\t\t\tif (maxMipLevel !== undefined) {\n\t\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.lightMap) {\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. displacementMap map\n\t\t\t// 4. normal map\n\t\t\t// 5. bump map\n\t\t\t// 6. roughnessMap map\n\t\t\t// 7. metalnessMap map\n\t\t\t// 8. alphaMap map\n\t\t\t// 9. emissiveMap map\n\t\t\t// 10. clearcoat map\n\t\t\t// 11. clearcoat normal map\n\t\t\t// 12. clearcoat roughnessMap map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.specularMap) {\n\t\t\t\tuvScaleMap = material.specularMap;\n\t\t\t} else if (material.displacementMap) {\n\t\t\t\tuvScaleMap = material.displacementMap;\n\t\t\t} else if (material.normalMap) {\n\t\t\t\tuvScaleMap = material.normalMap;\n\t\t\t} else if (material.bumpMap) {\n\t\t\t\tuvScaleMap = material.bumpMap;\n\t\t\t} else if (material.roughnessMap) {\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\t\t\t} else if (material.metalnessMap) {\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t} else if (material.emissiveMap) {\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\t\t\t} else if (material.clearcoatMap) {\n\t\t\t\tuvScaleMap = material.clearcoatMap;\n\t\t\t} else if (material.clearcoatNormalMap) {\n\t\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\t\t\t} else if (material.clearcoatRoughnessMap) {\n\t\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uvScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t} // uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\n\t\t\tlet uv2ScaleMap;\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\t\t\t} else if (material.lightMap) {\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\t\t\t}\n\n\t\t\tif (uv2ScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uv2ScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uv2ScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLine(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t}\n\n\t\tfunction refreshUniformsDash(uniforms, material) {\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\t\t}\n\n\t\tfunction refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsSprites(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLambert(uniforms, material) {\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhong(uniforms, material) {\n\t\t\tuniforms.specular.value.copy(material.specular);\n\t\t\tuniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsToon(uniforms, material) {\n\t\t\tif (material.gradientMap) {\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsStandard(uniforms, material) {\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif (material.roughnessMap) {\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\t\t}\n\n\t\t\tif (material.metalnessMap) {\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tconst envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {\n\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif (material.sheen) uniforms.sheen.value.copy(material.sheen);\n\n\t\t\tif (material.clearcoatMap) {\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatRoughnessMap) {\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatNormalMap) {\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif (material.side === BackSide) {\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\n\t\t\tif (material.transmissionMap) {\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\t\t\t}\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\t\tuniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);\n\t\t\t}\n\n\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\tif (material.thicknessMap) {\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\t\t\t}\n\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\tuniforms.attenuationColor.value.copy(material.attenuationColor);\n\t\t}\n\n\t\tfunction refreshUniformsMatcap(uniforms, material) {\n\t\t\tif (material.matcap) {\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDepth(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDistance(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy(material.referencePosition);\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\t\t}\n\n\t\tfunction refreshUniformsNormal(uniforms, material) {\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\t}\n\n\tfunction createCanvasElement() {\n\t\tconst canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\tcanvas.style.display = 'block';\n\t\treturn canvas;\n\t}\n\n\tfunction WebGLRenderer(parameters) {\n\t\tparameters = parameters || {};\n\n\t\tconst _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\t\t\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tlet currentRenderList = null;\n\t\tlet currentRenderState = null; // render() can be called from within a callback triggered by another render.\n\t\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\t\tconst renderListStack = [];\n\t\tconst renderStateStack = []; // public properties\n\n\t\tthis.domElement = _canvas; // Debug configuration container\n\n\t\tthis.debug = {\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t}; // clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true; // scene graph\n\n\t\tthis.sortObjects = true; // user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false; // physically based shading\n\n\t\tthis.gammaFactor = 2.0; // for backwards compatibility\n\n\t\tthis.outputEncoding = LinearEncoding; // physical lights\n\n\t\tthis.physicallyCorrectLights = false; // tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0; // internal properties\n\n\t\tconst _this = this;\n\n\t\tlet _isContextLost = false; // internal state cache\n\n\t\tlet _currentActiveCubeFace = 0;\n\t\tlet _currentActiveMipmapLevel = 0;\n\t\tlet _currentRenderTarget = null;\n\n\t\tlet _currentMaterialId = -1;\n\n\t\tlet _currentCamera = null;\n\n\t\tconst _currentViewport = new Vector4();\n\n\t\tconst _currentScissor = new Vector4();\n\n\t\tlet _currentScissorTest = null; //\n\n\t\tlet _width = _canvas.width;\n\t\tlet _height = _canvas.height;\n\t\tlet _pixelRatio = 1;\n\t\tlet _opaqueSort = null;\n\t\tlet _transparentSort = null;\n\n\t\tconst _viewport = new Vector4(0, 0, _width, _height);\n\n\t\tconst _scissor = new Vector4(0, 0, _width, _height);\n\n\t\tlet _scissorTest = false; //\n\n\t\tconst _currentDrawBuffers = []; // frustum\n\n\t\tconst _frustum = new Frustum(); // clipping\n\n\n\t\tlet _clippingEnabled = false;\n\t\tlet _localClippingEnabled = false; // transmission\n\n\t\tlet _transmissionRenderTarget = null; // camera matrices cache\n\n\t\tconst _projScreenMatrix = new Matrix4();\n\n\t\tconst _vector3 = new Vector3();\n\n\t\tconst _emptyScene = {\n\t\t\tbackground: null,\n\t\t\tfog: null,\n\t\t\tenvironment: null,\n\t\t\toverrideMaterial: null,\n\t\t\tisScene: true\n\t\t};\n\n\t\tfunction getTargetPixelRatio() {\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\t} // initialize\n\n\n\t\tlet _gl = _context;\n\n\t\tfunction getContext(contextNames, contextAttributes) {\n\t\t\tfor (let i = 0; i < contextNames.length; i++) {\n\t\t\t\tconst contextName = contextNames[i];\n\n\t\t\t\tconst context = _canvas.getContext(contextName, contextAttributes);\n\n\t\t\t\tif (context !== null) return context;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tconst contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t}; // event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\tif (_gl === null) {\n\t\t\t\tconst contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\n\n\t\t\t\tif (_this.isWebGL1Renderer === true) {\n\t\t\t\t\tcontextNames.shift();\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext(contextNames, contextAttributes);\n\n\t\t\t\tif (_gl === null) {\n\t\t\t\t\tif (getContext(contextNames)) {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context with your selected attributes.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n\t\t\tif (_gl.getShaderPrecisionFormat === undefined) {\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'rangeMin': 1,\n\t\t\t\t\t\t'rangeMax': 1,\n\t\t\t\t\t\t'precision': 1\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('THREE.WebGLRenderer: ' + error.message);\n\t\t\tthrow error;\n\t\t}\n\n\t\tlet extensions, capabilities, state, info;\n\t\tlet properties, textures, cubemaps, attributes, geometries, objects;\n\t\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\t\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\t\tlet utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\t\t\textensions = new WebGLExtensions(_gl);\n\t\t\tcapabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\t\t\textensions.init(capabilities);\n\t\t\tutils = new WebGLUtils(_gl, extensions, capabilities);\n\t\t\tstate = new WebGLState(_gl, extensions, capabilities);\n\t\t\t_currentDrawBuffers[0] = _gl.BACK;\n\t\t\tinfo = new WebGLInfo(_gl);\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n\t\t\tcubemaps = new WebGLCubeMaps(_this);\n\t\t\tattributes = new WebGLAttributes(_gl, capabilities);\n\t\t\tbindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\n\t\t\tgeometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n\t\t\tobjects = new WebGLObjects(_gl, geometries, attributes, info);\n\t\t\tmorphtargets = new WebGLMorphtargets(_gl);\n\t\t\tclipping = new WebGLClipping(properties);\n\t\t\tprogramCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);\n\t\t\tmaterials = new WebGLMaterials(properties);\n\t\t\trenderLists = new WebGLRenderLists(properties);\n\t\t\trenderStates = new WebGLRenderStates(extensions, capabilities);\n\t\t\tbackground = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\n\t\t\tshadowMap = new WebGLShadowMap(_this, objects, capabilities);\n\t\t\tbufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tinfo.programs = programCache.programs;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.shadowMap = shadowMap;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\t\t}\n\n\t\tinitGLContext(); // xr\n\n\t\tconst xr = new WebXRManager(_this, _gl);\n\t\tthis.xr = xr; // API\n\n\t\tthis.getContext = function () {\n\t\t\treturn _gl;\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\t\t\treturn _gl.getContextAttributes();\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\t\t\tconst extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.loseContext();\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\t\t\tconst extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.restoreContext();\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\t\t\treturn _pixelRatio;\n\t\t};\n\n\t\tthis.setPixelRatio = function (value) {\n\t\t\tif (value === undefined) return;\n\t\t\t_pixelRatio = value;\n\t\t\tthis.setSize(_width, _height, false);\n\t\t};\n\n\t\tthis.getSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width, _height);\n\t\t};\n\n\t\tthis.setSize = function (width, height, updateStyle) {\n\t\t\tif (xr.isPresenting) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_canvas.width = Math.floor(width * _pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * _pixelRatio);\n\n\t\t\tif (updateStyle !== false) {\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\t\t}\n\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function (width, height, pixelRatio) {\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_pixelRatio = pixelRatio;\n\t\t\t_canvas.width = Math.floor(width * pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * pixelRatio);\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getCurrentViewport = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');\n\t\t\t\ttarget = new Vector4();\n\t\t\t}\n\n\t\t\treturn target.copy(_currentViewport);\n\t\t};\n\n\t\tthis.getViewport = function (target) {\n\t\t\treturn target.copy(_viewport);\n\t\t};\n\n\t\tthis.setViewport = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_viewport.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_viewport.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissor = function (target) {\n\t\t\treturn target.copy(_scissor);\n\t\t};\n\n\t\tthis.setScissor = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_scissor.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_scissor.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\t\t\treturn _scissorTest;\n\t\t};\n\n\t\tthis.setScissorTest = function (boolean) {\n\t\t\tstate.setScissorTest(_scissorTest = boolean);\n\t\t};\n\n\t\tthis.setOpaqueSort = function (method) {\n\t\t\t_opaqueSort = method;\n\t\t};\n\n\t\tthis.setTransparentSort = function (method) {\n\t\t\t_transparentSort = method;\n\t\t}; // Clearing\n\n\n\t\tthis.getClearColor = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getClearColor() now requires a Color as an argument');\n\t\t\t\ttarget = new Color();\n\t\t\t}\n\n\t\t\treturn target.copy(background.getClearColor());\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\t\t\tbackground.setClearColor.apply(background, arguments);\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\t\t\treturn background.getClearAlpha();\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\t\t\tbackground.setClearAlpha.apply(background, arguments);\n\t\t};\n\n\t\tthis.clear = function (color, depth, stencil) {\n\t\t\tlet bits = 0;\n\t\t\tif (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\tif (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t_gl.clear(bits);\n\t\t};\n\n\t\tthis.clearColor = function () {\n\t\t\tthis.clear(true, false, false);\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\t\t\tthis.clear(false, true, false);\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\t\t\tthis.clear(false, false, true);\n\t\t}; //\n\n\n\t\tthis.dispose = function () {\n\t\t\t_canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\txr.dispose();\n\t\t\txr.removeEventListener('sessionstart', onXRSessionStart);\n\t\t\txr.removeEventListener('sessionend', onXRSessionEnd);\n\n\t\t\tif (_transmissionRenderTarget) {\n\t\t\t\t_transmissionRenderTarget.dispose();\n\n\t\t\t\t_transmissionRenderTarget = null;\n\t\t\t}\n\n\t\t\tanimation.stop();\n\t\t}; // Events\n\n\n\t\tfunction onContextLost(event) {\n\t\t\tevent.preventDefault();\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Lost.');\n\t\t\t_isContextLost = true;\n\t\t}\n\n\t\tfunction onContextRestore()\n\t\t/* event */\n\t\t{\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Restored.');\n\t\t\t_isContextLost = false;\n\t\t\tconst infoAutoReset = info.autoReset;\n\t\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\t\tconst shadowMapType = shadowMap.type;\n\t\t\tinitGLContext();\n\t\t\tinfo.autoReset = infoAutoReset;\n\t\t\tshadowMap.enabled = shadowMapEnabled;\n\t\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\t\tshadowMap.type = shadowMapType;\n\t\t}\n\n\t\tfunction onMaterialDispose(event) {\n\t\t\tconst material = event.target;\n\t\t\tmaterial.removeEventListener('dispose', onMaterialDispose);\n\t\t\tdeallocateMaterial(material);\n\t\t} // Buffer deallocation\n\n\n\t\tfunction deallocateMaterial(material) {\n\t\t\treleaseMaterialProgramReferences(material);\n\t\t\tproperties.remove(material);\n\t\t}\n\n\t\tfunction releaseMaterialProgramReferences(material) {\n\t\t\tconst programs = properties.get(material).programs;\n\n\t\t\tif (programs !== undefined) {\n\t\t\t\tprograms.forEach(function (program) {\n\t\t\t\t\tprogramCache.releaseProgram(program);\n\t\t\t\t});\n\t\t\t}\n\t\t} // Buffer rendering\n\n\n\t\tfunction renderObjectImmediate(object, program) {\n\t\t\tobject.render(function (object) {\n\t\t\t\t_this.renderBufferImmediate(object, program);\n\t\t\t});\n\t\t}\n\n\t\tthis.renderBufferImmediate = function (object, program) {\n\t\t\tbindingStates.initAttributes();\n\t\t\tconst buffers = properties.get(object);\n\t\t\tif (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n\t\t\tif (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n\t\t\tif (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n\t\t\tif (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n\t\t\tconst programAttributes = program.getAttributes();\n\n\t\t\tif (object.hasPositions) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.position);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.position, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasNormals) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.normal);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.normal, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasUvs) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.uv);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.uv, 2, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasColors) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.color);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.color, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tbindingStates.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays(_gl.TRIANGLES, 0, object.count);\n\n\t\t\tobject.count = 0;\n\t\t};\n\n\t\tthis.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n\t\t\tif (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tconst frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n\t\t\tconst program = setProgram(camera, scene, material, object);\n\t\t\tstate.setMaterial(material, frontFaceCW); //\n\n\t\t\tlet index = geometry.index;\n\t\t\tconst position = geometry.attributes.position; //\n\n\t\t\tif (index === null) {\n\t\t\t\tif (position === undefined || position.count === 0) return;\n\t\t\t} else if (index.count === 0) {\n\t\t\t\treturn;\n\t\t\t} //\n\n\n\t\t\tlet rangeFactor = 1;\n\n\t\t\tif (material.wireframe === true) {\n\t\t\t\tindex = geometries.getWireframeAttribute(geometry);\n\t\t\t\trangeFactor = 2;\n\t\t\t}\n\n\t\t\tif (material.morphTargets || material.morphNormals) {\n\t\t\t\tmorphtargets.update(object, geometry, material, program);\n\t\t\t}\n\n\t\t\tbindingStates.setup(object, material, program, geometry, index);\n\t\t\tlet attribute;\n\t\t\tlet renderer = bufferRenderer;\n\n\t\t\tif (index !== null) {\n\t\t\t\tattribute = attributes.get(index);\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex(attribute);\n\t\t\t} //\n\n\n\t\t\tconst dataCount = index !== null ? index.count : position.count;\n\t\t\tconst rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tconst rangeCount = geometry.drawRange.count * rangeFactor;\n\t\t\tconst groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tconst groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\t\tconst drawStart = Math.max(rangeStart, groupStart);\n\t\t\tconst drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n\t\t\tconst drawCount = Math.max(0, drawEnd - drawStart + 1);\n\t\t\tif (drawCount === 0) return; //\n\n\t\t\tif (object.isMesh) {\n\t\t\t\tif (material.wireframe === true) {\n\t\t\t\t\tstate.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n\t\t\t\t\trenderer.setMode(_gl.LINES);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(_gl.TRIANGLES);\n\t\t\t\t}\n\t\t\t} else if (object.isLine) {\n\t\t\t\tlet lineWidth = material.linewidth;\n\t\t\t\tif (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth(lineWidth * getTargetPixelRatio());\n\n\t\t\t\tif (object.isLineSegments) {\n\t\t\t\t\trenderer.setMode(_gl.LINES);\n\t\t\t\t} else if (object.isLineLoop) {\n\t\t\t\t\trenderer.setMode(_gl.LINE_LOOP);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(_gl.LINE_STRIP);\n\t\t\t\t}\n\t\t\t} else if (object.isPoints) {\n\t\t\t\trenderer.setMode(_gl.POINTS);\n\t\t\t} else if (object.isSprite) {\n\t\t\t\trenderer.setMode(_gl.TRIANGLES);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, object.count);\n\t\t\t} else if (geometry.isInstancedBufferGeometry) {\n\t\t\t\tconst instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, instanceCount);\n\t\t\t} else {\n\t\t\t\trenderer.render(drawStart, drawCount);\n\t\t\t}\n\t\t}; // Compile\n\n\n\t\tthis.compile = function (scene, camera) {\n\t\t\tcurrentRenderState = renderStates.get(scene);\n\t\t\tcurrentRenderState.init();\n\t\t\tscene.traverseVisible(function (object) {\n\t\t\t\tif (object.isLight && object.layers.test(camera.layers)) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tscene.traverse(function (object) {\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif (material) {\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0; i < material.length; i++) {\n\t\t\t\t\t\t\tconst material2 = material[i];\n\t\t\t\t\t\t\tgetProgram(material2, scene, object);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetProgram(material, scene, object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}; // Animation Loop\n\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time) {\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time);\n\t\t}\n\n\t\tfunction onXRSessionStart() {\n\t\t\tanimation.stop();\n\t\t}\n\n\t\tfunction onXRSessionEnd() {\n\t\t\tanimation.start();\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\t\tif (typeof window !== 'undefined') animation.setContext(window);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop(callback);\n\t\t\tcallback === null ? animation.stop() : animation.start();\n\t\t};\n\n\t\txr.addEventListener('sessionstart', onXRSessionStart);\n\t\txr.addEventListener('sessionend', onXRSessionEnd); // Rendering\n\n\t\tthis.render = function (scene, camera) {\n\t\t\tif (camera !== undefined && camera.isCamera !== true) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_isContextLost === true) return; // update scene graph\n\n\t\t\tif (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n\t\t\tif (camera.parent === null) camera.updateMatrixWorld();\n\n\t\t\tif (xr.enabled === true && xr.isPresenting === true) {\n\t\t\t\tif (xr.cameraAutoUpdate === true) xr.updateCamera(camera);\n\t\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);\n\t\t\tcurrentRenderState = renderStates.get(scene, renderStateStack.length);\n\t\t\tcurrentRenderState.init();\n\t\t\trenderStateStack.push(currentRenderState);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\t_frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n\t\t\tcurrentRenderList = renderLists.get(scene, renderListStack.length);\n\t\t\tcurrentRenderList.init();\n\t\t\trenderListStack.push(currentRenderList);\n\t\t\tprojectObject(scene, camera, 0, _this.sortObjects);\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif (_this.sortObjects === true) {\n\t\t\t\tcurrentRenderList.sort(_opaqueSort, _transparentSort);\n\t\t\t} //\n\n\n\t\t\tif (_clippingEnabled === true) clipping.beginShadows();\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tshadowMap.render(shadowsArray, scene, camera);\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tcurrentRenderState.setupLightsView(camera);\n\t\t\tif (_clippingEnabled === true) clipping.endShadows(); //\n\n\t\t\tif (this.info.autoReset === true) this.info.reset(); //\n\n\t\t\tbackground.render(currentRenderList, scene); // render scene\n\n\t\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\t\t\tconst transparentObjects = currentRenderList.transparent;\n\t\t\tif (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n\t\t\tif (transmissiveObjects.length > 0) renderTransmissiveObjects(opaqueObjects, transmissiveObjects, scene, camera);\n\t\t\tif (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); //\n\n\t\t\tif (_currentRenderTarget !== null) {\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\t\t\ttextures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget(_currentRenderTarget);\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onAfterRender(_this, scene, camera); // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest(true);\n\t\t\tstate.buffers.depth.setMask(true);\n\t\t\tstate.buffers.color.setMask(true);\n\t\t\tstate.setPolygonOffset(false); // _gl.finish();\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = -1;\n\t\t\t_currentCamera = null;\n\t\t\trenderStateStack.pop();\n\n\t\t\tif (renderStateStack.length > 0) {\n\t\t\t\tcurrentRenderState = renderStateStack[renderStateStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderState = null;\n\t\t\t}\n\n\t\t\trenderListStack.pop();\n\n\t\t\tif (renderListStack.length > 0) {\n\t\t\t\tcurrentRenderList = renderListStack[renderListStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderList = null;\n\t\t\t}\n\t\t};\n\n\t\tfunction projectObject(object, camera, groupOrder, sortObjects) {\n\t\t\tif (object.visible === false) return;\n\t\t\tconst visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible) {\n\t\t\t\tif (object.isGroup) {\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\t\t\t\t} else if (object.isLOD) {\n\t\t\t\t\tif (object.autoUpdate === true) object.update(camera);\n\t\t\t\t} else if (object.isLight) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isSprite) {\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update(object);\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isImmediateRenderObject) {\n\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);\n\t\t\t\t} else if (object.isMesh || object.isLine || object.isPoints) {\n\t\t\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\t\t\t// update skeleton only once in a frame\n\t\t\t\t\t\tif (object.skeleton.frame !== info.render.frame) {\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsObject(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update(object);\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tprojectObject(children[i], camera, groupOrder, sortObjects);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderTransmissiveObjects(opaqueObjects, transmissiveObjects, scene, camera) {\n\t\t\tif (_transmissionRenderTarget === null) {\n\t\t\t\t_transmissionRenderTarget = new WebGLRenderTarget(1024, 1024, {\n\t\t\t\t\tgenerateMipmaps: true,\n\t\t\t\t\tminFilter: LinearMipmapLinearFilter,\n\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\twrapS: ClampToEdgeWrapping,\n\t\t\t\t\twrapT: ClampToEdgeWrapping\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst currentRenderTarget = _this.getRenderTarget();\n\n\t\t\t_this.setRenderTarget(_transmissionRenderTarget);\n\n\t\t\t_this.clear();\n\n\t\t\trenderObjects(opaqueObjects, scene, camera);\n\t\t\ttextures.updateRenderTargetMipmap(_transmissionRenderTarget);\n\n\t\t\t_this.setRenderTarget(currentRenderTarget);\n\n\t\t\trenderObjects(transmissiveObjects, scene, camera);\n\t\t}\n\n\t\tfunction renderObjects(renderList, scene, camera) {\n\t\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor (let i = 0, l = renderList.length; i < l; i++) {\n\t\t\t\tconst renderItem = renderList[i];\n\t\t\t\tconst object = renderItem.object;\n\t\t\t\tconst geometry = renderItem.geometry;\n\t\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tconst group = renderItem.group;\n\n\t\t\t\tif (camera.isArrayCamera) {\n\t\t\t\t\tconst cameras = camera.cameras;\n\n\t\t\t\t\tfor (let j = 0, jl = cameras.length; j < jl; j++) {\n\t\t\t\t\t\tconst camera2 = cameras[j];\n\n\t\t\t\t\t\tif (object.layers.test(camera2.layers)) {\n\t\t\t\t\t\t\tstate.viewport(_currentViewport.copy(camera2.viewport));\n\t\t\t\t\t\t\tcurrentRenderState.setupLightsView(camera2);\n\t\t\t\t\t\t\trenderObject(object, scene, camera2, geometry, material, group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trenderObject(object, scene, camera, geometry, material, group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObject(object, scene, camera, geometry, material, group) {\n\t\t\tobject.onBeforeRender(_this, scene, camera, geometry, material, group);\n\t\t\tobject.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\t\t\tobject.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n\t\t\tif (object.isImmediateRenderObject) {\n\t\t\t\tconst program = setProgram(camera, scene, material, object);\n\t\t\t\tstate.setMaterial(material);\n\t\t\t\tbindingStates.reset();\n\t\t\t\trenderObjectImmediate(object, program);\n\t\t\t} else {\n\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\t\t\t}\n\n\t\t\tobject.onAfterRender(_this, scene, camera, geometry, material, group);\n\t\t}\n\n\t\tfunction getProgram(material, scene, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tconst lights = currentRenderState.state.lights;\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tconst lightsStateVersion = lights.state.version;\n\t\t\tconst parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n\t\t\tconst programCacheKey = programCache.getProgramCacheKey(parameters);\n\t\t\tlet programs = materialProperties.programs; // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment);\n\n\t\t\tif (programs === undefined) {\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener('dispose', onMaterialDispose);\n\t\t\t\tprograms = new Map();\n\t\t\t\tmaterialProperties.programs = programs;\n\t\t\t}\n\n\t\t\tlet program = programs.get(programCacheKey);\n\n\t\t\tif (program !== undefined) {\n\t\t\t\t// early out if program and light state is identical\n\t\t\t\tif (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {\n\t\t\t\t\tupdateCommonMaterialProperties(material, parameters);\n\t\t\t\t\treturn program;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparameters.uniforms = programCache.getUniforms(material);\n\t\t\t\tmaterial.onBuild(parameters, _this);\n\t\t\t\tmaterial.onBeforeCompile(parameters, _this);\n\t\t\t\tprogram = programCache.acquireProgram(parameters, programCacheKey);\n\t\t\t\tprograms.set(programCacheKey, program);\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t}\n\n\t\t\tconst uniforms = materialProperties.uniforms;\n\n\t\t\tif (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\t\t\t}\n\n\t\t\tupdateCommonMaterialProperties(material, parameters); // store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights(material);\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t// wire up the material to this renderer's lighting state\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n\t\t\t}\n\n\t\t\tconst progUniforms = program.getUniforms();\n\t\t\tconst uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n\t\t\tmaterialProperties.currentProgram = program;\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction updateCommonMaterialProperties(material, parameters) {\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\t\tmaterialProperties.instancing = parameters.instancing;\n\t\t\tmaterialProperties.skinning = parameters.skinning;\n\t\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\t}\n\n\t\tfunction setProgram(camera, scene, material, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\t\tconst envMap = cubemaps.get(material.envMap || environment);\n\t\t\tconst vertexAlphas = material.vertexColors === true && object.geometry && object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4;\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tconst lights = currentRenderState.state.lights;\n\n\t\t\tif (_clippingEnabled === true) {\n\t\t\t\tif (_localClippingEnabled === true || camera !== _currentCamera) {\n\t\t\t\t\tconst useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\n\t\t\t\t\tclipping.setState(material, camera, useCache);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tlet needsProgramChange = false;\n\n\t\t\tif (material.version === materialProperties.__version) {\n\t\t\t\tif (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.outputEncoding !== encoding) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (object.isInstancedMesh && materialProperties.instancing === false) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (!object.isInstancedMesh && materialProperties.instancing === true) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (object.isSkinnedMesh && materialProperties.skinning === false) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (!object.isSkinnedMesh && materialProperties.skinning === true) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.envMap !== envMap) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (material.fog && materialProperties.fog !== fog) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.vertexAlphas !== vertexAlphas) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tneedsProgramChange = true;\n\t\t\t\tmaterialProperties.__version = material.version;\n\t\t\t} //\n\n\n\t\t\tlet program = materialProperties.currentProgram;\n\n\t\t\tif (needsProgramChange === true) {\n\t\t\t\tprogram = getProgram(material, scene, object);\n\t\t\t}\n\n\t\t\tlet refreshProgram = false;\n\t\t\tlet refreshMaterial = false;\n\t\t\tlet refreshLights = false;\n\t\t\tconst p_uniforms = program.getUniforms(),\n\t\t\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif (state.useProgram(program.program)) {\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\t\t\t}\n\n\t\t\tif (material.id !== _currentMaterialId) {\n\t\t\t\t_currentMaterialId = material.id;\n\t\t\t\trefreshMaterial = true;\n\t\t\t}\n\n\t\t\tif (refreshProgram || _currentCamera !== camera) {\n\t\t\t\tp_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n\t\t\t\tif (capabilities.logarithmicDepthBuffer) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n\t\t\t\t}\n\n\t\t\t\tif (_currentCamera !== camera) {\n\t\t\t\t\t_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true; // set to true on material change\n\n\t\t\t\t\trefreshLights = true; // remains set until update done\n\t\t\t\t} // load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\n\t\t\t\tif (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n\t\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif (uCamPos !== undefined) {\n\t\t\t\t\t\tuCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n\t\t\t\t}\n\t\t\t} // skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\n\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrix');\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n\t\t\t\tconst skeleton = object.skeleton;\n\n\t\t\t\tif (skeleton) {\n\t\t\t\t\tif (capabilities.floatVertexTextures) {\n\t\t\t\t\t\tif (skeleton.boneTexture === null) skeleton.computeBoneTexture();\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n\t\t\t}\n\n\t\t\tif (refreshMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n\n\t\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t\t// the current material requires lighting info\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n\t\t\t\t} // refresh uniforms common to several materials\n\n\n\t\t\t\tif (fog && material.fog) {\n\t\t\t\t\tmaterials.refreshFogUniforms(m_uniforms, fog);\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t}\n\n\t\t\tif (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (material.isSpriteMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'center', object.center);\n\t\t\t} // common matrices\n\n\n\t\t\tp_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n\t\t\treturn program;\n\t\t} // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n\t\tfunction markUniformsLightsNeedsUpdate(uniforms, value) {\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\t}\n\n\t\tfunction materialNeedsLights(material) {\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n\t\t}\n\n\t\tthis.getActiveCubeFace = function () {\n\t\t\treturn _currentActiveCubeFace;\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\t\t\treturn _currentActiveMipmapLevel;\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\t\t\treturn _currentRenderTarget;\n\t\t};\n\n\t\tthis.setRenderTarget = function (renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n\t\t\t\ttextures.setupRenderTarget(renderTarget);\n\t\t\t}\n\n\t\t\tlet framebuffer = null;\n\t\t\tlet isCube = false;\n\t\t\tlet isRenderTarget3D = false;\n\n\t\t\tif (renderTarget) {\n\t\t\t\tconst texture = renderTarget.texture;\n\n\t\t\t\tif (texture.isDataTexture3D || texture.isDataTexture2DArray) {\n\t\t\t\t\tisRenderTarget3D = true;\n\t\t\t\t}\n\n\t\t\t\tconst __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\t\tframebuffer = __webglFramebuffer[activeCubeFace];\n\t\t\t\t\tisCube = true;\n\t\t\t\t} else if (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\t\tframebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n\t\t\t\t} else {\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy(renderTarget.viewport);\n\n\t\t\t\t_currentScissor.copy(renderTarget.scissor);\n\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\t\t} else {\n\t\t\t\t_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissorTest = _scissorTest;\n\t\t\t}\n\n\t\t\tconst framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\tif (framebufferBound && capabilities.drawBuffers) {\n\t\t\t\tlet needsUpdate = false;\n\n\t\t\t\tif (renderTarget) {\n\t\t\t\t\tif (renderTarget.isWebGLMultipleRenderTargets) {\n\t\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\t\tif (_currentDrawBuffers.length !== textures.length || _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0) {\n\t\t\t\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\t\t\t\t_currentDrawBuffers[i] = _gl.COLOR_ATTACHMENT0 + i;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_currentDrawBuffers.length = textures.length;\n\t\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0) {\n\t\t\t\t\t\t\t_currentDrawBuffers[0] = _gl.COLOR_ATTACHMENT0;\n\t\t\t\t\t\t\t_currentDrawBuffers.length = 1;\n\t\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== _gl.BACK) {\n\t\t\t\t\t\t_currentDrawBuffers[0] = _gl.BACK;\n\t\t\t\t\t\t_currentDrawBuffers.length = 1;\n\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (needsUpdate) {\n\t\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t\t_gl.drawBuffers(_currentDrawBuffers);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(_currentDrawBuffers);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport);\n\t\t\tstate.scissor(_currentScissor);\n\t\t\tstate.setScissorTest(_currentScissorTest);\n\n\t\t\tif (isCube) {\n\t\t\t\tconst textureProperties = properties.get(renderTarget.texture);\n\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n\t\t\t} else if (isRenderTarget3D) {\n\t\t\t\tconst textureProperties = properties.get(renderTarget.texture);\n\t\t\t\tconst layer = activeCubeFace || 0;\n\n\t\t\t\t_gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);\n\t\t\t}\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n\t\t\tif (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n\t\t\t\tframebuffer = framebuffer[activeCubeFaceIndex];\n\t\t\t}\n\n\t\t\tif (framebuffer) {\n\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\t\tif (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));\n\n\t\t\t\t\tif (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t!halfFloatSupportedByExt) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\t\t\t\t\tif (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n\t\t\t\t\t\t\t_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\t// restore framebuffer of current render target if necessary\n\t\t\t\t\tconst framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;\n\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function (position, texture, level = 0) {\n\t\t\tconst levelScale = Math.pow(2, -level);\n\t\t\tconst width = Math.floor(texture.image.width * levelScale);\n\t\t\tconst height = Math.floor(texture.image.height * levelScale);\n\t\t\tlet glFormat = utils.convert(texture.format);\n\n\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1120100\n\t\t\t\tif (glFormat === _gl.RGB) glFormat = _gl.RGB8;\n\t\t\t\tif (glFormat === _gl.RGBA) glFormat = _gl.RGBA8;\n\t\t\t}\n\n\t\t\ttextures.setTexture2D(texture, 0);\n\n\t\t\t_gl.copyTexImage2D(_gl.TEXTURE_2D, level, glFormat, position.x, position.y, width, height, 0);\n\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture = function (position, srcTexture, dstTexture, level = 0) {\n\t\t\tconst width = srcTexture.image.width;\n\t\t\tconst height = srcTexture.image.height;\n\t\t\tconst glFormat = utils.convert(dstTexture.format);\n\t\t\tconst glType = utils.convert(dstTexture.type);\n\t\t\ttextures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n\t\t\tif (srcTexture.isDataTexture) {\n\t\t\t\t_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n\t\t\t} else {\n\t\t\t\tif (srcTexture.isCompressedTexture) {\n\t\t\t\t\t_gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);\n\t\t\t\t}\n\t\t\t} // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture, level = 0) {\n\t\t\tif (_this.isWebGL1Renderer) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdata\n\t\t\t} = srcTexture.image;\n\t\t\tconst glFormat = utils.convert(dstTexture.format);\n\t\t\tconst glType = utils.convert(dstTexture.type);\n\t\t\tlet glTarget;\n\n\t\t\tif (dstTexture.isDataTexture3D) {\n\t\t\t\ttextures.setTexture3D(dstTexture, 0);\n\t\t\t\tglTarget = _gl.TEXTURE_3D;\n\t\t\t} else if (dstTexture.isDataTexture2DArray) {\n\t\t\t\ttextures.setTexture2DArray(dstTexture, 0);\n\t\t\t\tglTarget = _gl.TEXTURE_2D_ARRAY;\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n\t\t\tconst unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);\n\n\t\t\tconst unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);\n\n\t\t\tconst unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);\n\n\t\t\tconst unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);\n\n\t\t\tconst unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, width);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, height);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);\n\n\t\t\t_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, sourceBox.max.x - sourceBox.min.x + 1, sourceBox.max.y - sourceBox.min.y + 1, sourceBox.max.z - sourceBox.min.z + 1, glFormat, glType, data);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages); // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.initTexture = function (texture) {\n\t\t\ttextures.setTexture2D(texture, 0);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.resetState = function () {\n\t\t\t_currentActiveCubeFace = 0;\n\t\t\t_currentActiveMipmapLevel = 0;\n\t\t\t_currentRenderTarget = null;\n\t\t\tstate.reset();\n\t\t\tbindingStates.reset();\n\t\t};\n\n\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\tdetail: this\n\t\t\t})); // eslint-disable-line no-undef\n\n\t\t}\n\t}\n\n\tclass WebGL1Renderer extends WebGLRenderer {}\n\n\tWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\n\tclass FogExp2 {\n\t\tconstructor(color, density = 0.00025) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.density = density;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new FogExp2(this.color, this.density);\n\t\t}\n\n\t\ttoJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\t\t}\n\n\t}\n\n\tFogExp2.prototype.isFogExp2 = true;\n\n\tclass Fog {\n\t\tconstructor(color, near = 1, far = 1000) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Fog(this.color, this.near, this.far);\n\t\t}\n\n\t\ttoJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\t\t}\n\n\t}\n\n\tFog.prototype.isFog = true;\n\n\tclass Scene extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Scene';\n\t\t\tthis.background = null;\n\t\t\tthis.environment = null;\n\t\t\tthis.fog = null;\n\t\t\tthis.overrideMaterial = null;\n\t\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\t\tdetail: this\n\t\t\t\t})); // eslint-disable-line no-undef\n\n\t\t\t}\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tif (source.background !== null) this.background = source.background.clone();\n\t\t\tif (source.environment !== null) this.environment = source.environment.clone();\n\t\t\tif (source.fog !== null) this.fog = source.fog.clone();\n\t\t\tif (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tif (this.background !== null) data.object.background = this.background.toJSON(meta);\n\t\t\tif (this.environment !== null) data.object.environment = this.environment.toJSON(meta);\n\t\t\tif (this.fog !== null) data.object.fog = this.fog.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tScene.prototype.isScene = true;\n\n\tclass InterleavedBuffer {\n\t\tconstructor(array, stride) {\n\t\t\tthis.array = array;\n\t\t\tthis.stride = stride;\n\t\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\t\t\tthis.usage = StaticDrawUsage;\n\t\t\tthis.updateRange = {\n\t\t\t\toffset: 0,\n\t\t\t\tcount: -1\n\t\t\t};\n\t\t\tthis.version = 0;\n\t\t\tthis.uuid = generateUUID();\n\t\t}\n\n\t\tonUploadCallback() {}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor (let i = 0, l = this.stride; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(value, offset = 0) {\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t}\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n\t\t\t}\n\n\t\t\tconst array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n\t\t\tconst ib = new this.constructor(array, this.stride);\n\t\t\tib.setUsage(this.usage);\n\t\t\treturn ib;\n\t\t}\n\n\t\tonUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t} // generate UUID for array buffer if necessary\n\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));\n\t\t\t} //\n\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\t\t}\n\n\t}\n\n\tInterleavedBuffer.prototype.isInterleavedBuffer = true;\n\n\tconst _vector$6 = /*@__PURE__*/new Vector3();\n\n\tclass InterleavedBufferAttribute {\n\t\tconstructor(interleavedBuffer, itemSize, offset, normalized) {\n\t\t\tthis.name = '';\n\t\t\tthis.data = interleavedBuffer;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.offset = offset;\n\t\t\tthis.normalized = normalized === true;\n\t\t}\n\n\t\tget count() {\n\t\t\treturn this.data.count;\n\t\t}\n\n\t\tget array() {\n\t\t\treturn this.data.array;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tthis.data.needsUpdate = value;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tfor (let i = 0, l = this.data.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(index, x) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset] = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(index, y) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(index, z) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetW(index, w) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetX(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset];\n\t\t}\n\n\t\tgetY(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 1];\n\t\t}\n\n\t\tgetZ(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 2];\n\t\t}\n\n\t\tgetW(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 3];\n\t\t}\n\n\t\tsetXY(index, x, y) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZ(index, x, y, z) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZW(index, x, y, z, w) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\tthis.data.array[index + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0; i < this.count; i++) {\n\t\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (let j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n\t\t\t} else {\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0; i < this.count; i++) {\n\t\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (let j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t} // deinterleave data and save it as an ordinary buffer attribute for now\n\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// save as true interlaved attribtue\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t}\n\n\tInterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\trotation: <float>,\n\t *\tsizeAttenuation: <bool>\n\t * }\n\t */\n\n\tclass SpriteMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SpriteMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.rotation = 0;\n\t\t\tthis.sizeAttenuation = true;\n\t\t\tthis.transparent = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tlet _geometry;\n\n\tconst _intersectPoint = /*@__PURE__*/new Vector3();\n\n\tconst _worldScale = /*@__PURE__*/new Vector3();\n\n\tconst _mvPosition = /*@__PURE__*/new Vector3();\n\n\tconst _alignedPosition = /*@__PURE__*/new Vector2();\n\n\tconst _rotatedPosition = /*@__PURE__*/new Vector2();\n\n\tconst _viewWorldMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _vA = /*@__PURE__*/new Vector3();\n\n\tconst _vB = /*@__PURE__*/new Vector3();\n\n\tconst _vC = /*@__PURE__*/new Vector3();\n\n\tconst _uvA = /*@__PURE__*/new Vector2();\n\n\tconst _uvB = /*@__PURE__*/new Vector2();\n\n\tconst _uvC = /*@__PURE__*/new Vector2();\n\n\tclass Sprite extends Object3D {\n\t\tconstructor(material) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Sprite';\n\n\t\t\tif (_geometry === undefined) {\n\t\t\t\t_geometry = new BufferGeometry();\n\t\t\t\tconst float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n\t\t\t\tconst interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n\t\t\t\t_geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n\t\t\t\t_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n\t\t\t\t_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n\t\t\t}\n\n\t\t\tthis.geometry = _geometry;\n\t\t\tthis.material = material !== undefined ? material : new SpriteMaterial();\n\t\t\tthis.center = new Vector2(0.5, 0.5);\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tif (raycaster.camera === null) {\n\t\t\t\tconsole.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale(this.matrixWorld);\n\n\t\t\t_viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n\t\t\tthis.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n\t\t\t_mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n\t\t\tif (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n\t\t\t\t_worldScale.multiplyScalar(-_mvPosition.z);\n\t\t\t}\n\n\t\t\tconst rotation = this.material.rotation;\n\t\t\tlet sin, cos;\n\n\t\t\tif (rotation !== 0) {\n\t\t\t\tcos = Math.cos(rotation);\n\t\t\t\tsin = Math.sin(rotation);\n\t\t\t}\n\n\t\t\tconst center = this.center;\n\t\t\ttransformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t_uvA.set(0, 0);\n\n\t\t\t_uvB.set(1, 0);\n\n\t\t\t_uvC.set(1, 1); // check first triangle\n\n\n\t\t\tlet intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);\n\n\t\t\tif (intersect === null) {\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t\t_uvB.set(0, 1);\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);\n\n\t\t\t\tif (intersect === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\t\t\t});\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tif (source.center !== undefined) this.center.copy(source.center);\n\t\t\tthis.material = source.material;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSprite.prototype.isSprite = true;\n\n\tfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n\t\tif (sin !== undefined) {\n\t\t\t_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n\t\t\t_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n\t\t} else {\n\t\t\t_rotatedPosition.copy(_alignedPosition);\n\t\t}\n\n\t\tvertexPosition.copy(mvPosition);\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y; // transform to world space\n\n\t\tvertexPosition.applyMatrix4(_viewWorldMatrix);\n\t}\n\n\tconst _v1$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$1 = /*@__PURE__*/new Vector3();\n\n\tclass LOD extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis._currentLevel = 0;\n\t\t\tthis.type = 'LOD';\n\t\t\tObject.defineProperties(this, {\n\t\t\t\tlevels: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: []\n\t\t\t\t},\n\t\t\t\tisLOD: {\n\t\t\t\t\tvalue: true\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.autoUpdate = true;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source, false);\n\t\t\tconst levels = source.levels;\n\n\t\t\tfor (let i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tconst level = levels[i];\n\t\t\t\tthis.addLevel(level.object.clone(), level.distance);\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\treturn this;\n\t\t}\n\n\t\taddLevel(object, distance = 0) {\n\t\t\tdistance = Math.abs(distance);\n\t\t\tconst levels = this.levels;\n\t\t\tlet l;\n\n\t\t\tfor (l = 0; l < levels.length; l++) {\n\t\t\t\tif (distance < levels[l].distance) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlevels.splice(l, 0, {\n\t\t\t\tdistance: distance,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetCurrentLevel() {\n\t\t\treturn this._currentLevel;\n\t\t}\n\n\t\tgetObjectForDistance(distance) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\tlet i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance < levels[i].distance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn levels[i - 1].object;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\t_v1$2.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(_v1$2);\n\t\t\t\tthis.getObjectForDistance(distance).raycast(raycaster, intersects);\n\t\t\t}\n\t\t}\n\n\t\tupdate(camera) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 1) {\n\t\t\t\t_v1$2.setFromMatrixPosition(camera.matrixWorld);\n\n\t\t\t\t_v2$1.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tconst distance = _v1$2.distanceTo(_v2$1) / camera.zoom;\n\t\t\t\tlevels[0].object.visible = true;\n\t\t\t\tlet i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance >= levels[i].distance) {\n\t\t\t\t\t\tlevels[i - 1].object.visible = false;\n\t\t\t\t\t\tlevels[i].object.visible = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tlevels[i].object.visible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tif (this.autoUpdate === false) data.object.autoUpdate = false;\n\t\t\tdata.object.levels = [];\n\t\t\tconst levels = this.levels;\n\n\t\t\tfor (let i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tconst level = levels[i];\n\t\t\t\tdata.object.levels.push({\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tconst _basePosition = /*@__PURE__*/new Vector3();\n\n\tconst _skinIndex = /*@__PURE__*/new Vector4();\n\n\tconst _skinWeight = /*@__PURE__*/new Vector4();\n\n\tconst _vector$5 = /*@__PURE__*/new Vector3();\n\n\tconst _matrix = /*@__PURE__*/new Matrix4();\n\n\tclass SkinnedMesh extends Mesh {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'SkinnedMesh';\n\t\t\tthis.bindMode = 'attached';\n\t\t\tthis.bindMatrix = new Matrix4();\n\t\t\tthis.bindMatrixInverse = new Matrix4();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy(source.bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(source.bindMatrixInverse);\n\t\t\tthis.skeleton = source.skeleton;\n\t\t\treturn this;\n\t\t}\n\n\t\tbind(skeleton, bindMatrix) {\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif (bindMatrix === undefined) {\n\t\t\t\tthis.updateMatrixWorld(true);\n\t\t\t\tthis.skeleton.calculateInverses();\n\t\t\t\tbindMatrix = this.matrixWorld;\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy(bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(bindMatrix).invert();\n\t\t}\n\n\t\tpose() {\n\t\t\tthis.skeleton.pose();\n\t\t}\n\n\t\tnormalizeSkinWeights() {\n\t\t\tconst vector = new Vector4();\n\t\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor (let i = 0, l = skinWeight.count; i < l; i++) {\n\t\t\t\tvector.x = skinWeight.getX(i);\n\t\t\t\tvector.y = skinWeight.getY(i);\n\t\t\t\tvector.z = skinWeight.getZ(i);\n\t\t\t\tvector.w = skinWeight.getW(i);\n\t\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif (scale !== Infinity) {\n\t\t\t\t\tvector.multiplyScalar(scale);\n\t\t\t\t} else {\n\t\t\t\t\tvector.set(1, 0, 0, 0); // do something reasonable\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n\t\t\t}\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\n\t\t\tif (this.bindMode === 'attached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.matrixWorld).invert();\n\t\t\t} else if (this.bindMode === 'detached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.bindMatrix).invert();\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n\t\t\t}\n\t\t}\n\n\t\tboneTransform(index, target) {\n\t\t\tconst skeleton = this.skeleton;\n\t\t\tconst geometry = this.geometry;\n\n\t\t\t_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n\n\t\t\t_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n\n\t\t\t_basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);\n\n\t\t\ttarget.set(0, 0, 0);\n\n\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\tconst weight = _skinWeight.getComponent(i);\n\n\t\t\t\tif (weight !== 0) {\n\t\t\t\t\tconst boneIndex = _skinIndex.getComponent(i);\n\n\t\t\t\t\t_matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n\n\t\t\t\t\ttarget.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn target.applyMatrix4(this.bindMatrixInverse);\n\t\t}\n\n\t}\n\n\tSkinnedMesh.prototype.isSkinnedMesh = true;\n\n\tclass Bone extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Bone';\n\t\t}\n\n\t}\n\n\tBone.prototype.isBone = true;\n\n\tclass DataTexture extends Texture {\n\t\tconstructor(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.image = {\n\t\t\t\tdata: data || null,\n\t\t\t\twidth: width || 1,\n\t\t\t\theight: height || 1\n\t\t\t};\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\tconst _offsetMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _identityMatrix = /*@__PURE__*/new Matrix4();\n\n\tclass Skeleton {\n\t\tconstructor(bones = [], boneInverses = []) {\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.bones = bones.slice(0);\n\t\t\tthis.boneInverses = boneInverses;\n\t\t\tthis.boneMatrices = null;\n\t\t\tthis.boneTexture = null;\n\t\t\tthis.boneTextureSize = 0;\n\t\t\tthis.frame = -1;\n\t\t\tthis.init();\n\t\t}\n\n\t\tinit() {\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\t\t\tthis.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary\n\n\t\t\tif (boneInverses.length === 0) {\n\t\t\t\tthis.calculateInverses();\n\t\t\t} else {\n\t\t\t\t// handle special case\n\t\t\t\tif (bones.length !== boneInverses.length) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n\t\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\t\t\tthis.boneInverses.push(new Matrix4());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcalculateInverses() {\n\t\t\tthis.boneInverses.length = 0;\n\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst inverse = new Matrix4();\n\n\t\t\t\tif (this.bones[i]) {\n\t\t\t\t\tinverse.copy(this.bones[i].matrixWorld).invert();\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push(inverse);\n\t\t\t}\n\t\t}\n\n\t\tpose() {\n\t\t\t// recover the bind-time world matrices\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tbone.matrixWorld.copy(this.boneInverses[i]).invert();\n\t\t\t\t}\n\t\t\t} // compute the local matrices, positions, rotations and scales\n\n\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t\tbone.matrix.copy(bone.parent.matrixWorld).invert();\n\t\t\t\t\t\tbone.matrix.multiply(bone.matrixWorld);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbone.matrix.copy(bone.matrixWorld);\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\t\t\tconst boneMatrices = this.boneMatrices;\n\t\t\tconst boneTexture = this.boneTexture; // flatten bone matrices to array\n\n\t\t\tfor (let i = 0, il = bones.length; i < il; i++) {\n\t\t\t\t// compute the offset between the current and the original transform\n\t\t\t\tconst matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n\n\t\t\t\t_offsetMatrix.toArray(boneMatrices, i * 16);\n\t\t\t}\n\n\t\t\tif (boneTexture !== null) {\n\t\t\t\tboneTexture.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Skeleton(this.bones, this.boneInverses);\n\t\t}\n\n\t\tcomputeBoneTexture() {\n\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t//\t\t\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t//\twith\t8x8\tpixel texture max\t 16 bones * 4 pixels =\t(8 * 8)\n\t\t\t//\t\t\t 16x16 pixel texture max\t 64 bones * 4 pixels = (16 * 16)\n\t\t\t//\t\t\t 32x32 pixel texture max\t256 bones * 4 pixels = (32 * 32)\n\t\t\t//\t\t\t 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\t\tlet size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix\n\n\t\t\tsize = ceilPowerOfTwo(size);\n\t\t\tsize = Math.max(size, 4);\n\t\t\tconst boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n\t\t\tboneMatrices.set(this.boneMatrices); // copy current values\n\n\t\t\tconst boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n\t\t\tthis.boneMatrices = boneMatrices;\n\t\t\tthis.boneTexture = boneTexture;\n\t\t\tthis.boneTextureSize = size;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetBoneByName(name) {\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone.name === name) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tdispose() {\n\t\t\tif (this.boneTexture !== null) {\n\t\t\t\tthis.boneTexture.dispose();\n\t\t\t\tthis.boneTexture = null;\n\t\t\t}\n\t\t}\n\n\t\tfromJSON(json, bones) {\n\t\t\tthis.uuid = json.uuid;\n\n\t\t\tfor (let i = 0, l = json.bones.length; i < l; i++) {\n\t\t\t\tconst uuid = json.bones[i];\n\t\t\t\tlet bone = bones[uuid];\n\n\t\t\t\tif (bone === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push(bone);\n\t\t\t\tthis.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n\t\t\t}\n\n\t\t\tthis.init();\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Skeleton',\n\t\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t\t},\n\t\t\t\tbones: [],\n\t\t\t\tboneInverses: []\n\t\t\t};\n\t\t\tdata.uuid = this.uuid;\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\n\t\t\tfor (let i = 0, l = bones.length; i < l; i++) {\n\t\t\t\tconst bone = bones[i];\n\t\t\t\tdata.bones.push(bone.uuid);\n\t\t\t\tconst boneInverse = boneInverses[i];\n\t\t\t\tdata.boneInverses.push(boneInverse.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tconst _instanceLocalMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _instanceWorldMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _instanceIntersects = [];\n\n\tconst _mesh = /*@__PURE__*/new Mesh();\n\n\tclass InstancedMesh extends Mesh {\n\t\tconstructor(geometry, material, count) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);\n\t\t\tthis.instanceColor = null;\n\t\t\tthis.count = count;\n\t\t\tthis.frustumCulled = false;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.instanceMatrix.copy(source.instanceMatrix);\n\t\t\tif (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\n\t\t\tthis.count = source.count;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetColorAt(index, color) {\n\t\t\tcolor.fromArray(this.instanceColor.array, index * 3);\n\t\t}\n\n\t\tgetMatrixAt(index, matrix) {\n\t\t\tmatrix.fromArray(this.instanceMatrix.array, index * 16);\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst raycastTimes = this.count;\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\t\t\tif (_mesh.material === undefined) return;\n\n\t\t\tfor (let instanceId = 0; instanceId < raycastTimes; instanceId++) {\n\t\t\t\t// calculate the world matrix for each instance\n\t\t\t\tthis.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n\t\t\t\tfor (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n\t\t\t\t\tconst intersect = _instanceIntersects[i];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push(intersect);\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\t\t\t}\n\t\t}\n\n\t\tsetColorAt(index, color) {\n\t\t\tif (this.instanceColor === null) {\n\t\t\t\tthis.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);\n\t\t\t}\n\n\t\t\tcolor.toArray(this.instanceColor.array, index * 3);\n\t\t}\n\n\t\tsetMatrixAt(index, matrix) {\n\t\t\tmatrix.toArray(this.instanceMatrix.array, index * 16);\n\t\t}\n\n\t\tupdateMorphTargets() {}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tInstancedMesh.prototype.isInstancedMesh = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\tlinecap: \"round\",\n\t *\tlinejoin: \"round\"\n\t * }\n\t */\n\n\tclass LineBasicMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineBasicMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.linewidth = 1;\n\t\t\tthis.linecap = 'round';\n\t\t\tthis.linejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.linewidth = source.linewidth;\n\t\t\tthis.linecap = source.linecap;\n\t\t\tthis.linejoin = source.linejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tconst _start$1 = /*@__PURE__*/new Vector3();\n\n\tconst _end$1 = /*@__PURE__*/new Vector3();\n\n\tconst _inverseMatrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _ray$1 = /*@__PURE__*/new Ray();\n\n\tconst _sphere$1 = /*@__PURE__*/new Sphere();\n\n\tclass Line extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Line';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\tcomputeLineDistances() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\t\tconst lineDistances = [0];\n\n\t\t\t\t\tfor (let i = 1, l = positionAttribute.count; i < l; i++) {\n\t\t\t\t\t\t_start$1.fromBufferAttribute(positionAttribute, i - 1);\n\n\t\t\t\t\t\t_end$1.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\tlineDistances[i] = lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i] += _start$1.distanceTo(_end$1);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst threshold = raycaster.params.Line.threshold;\n\t\t\tconst drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$1.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$1.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$1.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$1) === false) return; //\n\n\t\t\t_inverseMatrix$1.copy(matrixWorld).invert();\n\n\t\t\t_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n\n\t\t\tconst localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tconst localThresholdSq = localThreshold * localThreshold;\n\t\t\tconst vStart = new Vector3();\n\t\t\tconst vEnd = new Vector3();\n\t\t\tconst interSegment = new Vector3();\n\t\t\tconst interRay = new Vector3();\n\t\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end - 1; i < l; i += step) {\n\t\t\t\t\t\tconst a = index.getX(i);\n\t\t\t\t\t\tconst b = index.getX(i + 1);\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, a);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, b);\n\n\t\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end - 1; i < l; i += step) {\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, i);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tLine.prototype.isLine = true;\n\n\tconst _start = /*@__PURE__*/new Vector3();\n\n\tconst _end = /*@__PURE__*/new Vector3();\n\n\tclass LineSegments extends Line {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'LineSegments';\n\t\t}\n\n\t\tcomputeLineDistances() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\t\tconst lineDistances = [];\n\n\t\t\t\t\tfor (let i = 0, l = positionAttribute.count; i < l; i += 2) {\n\t\t\t\t\t\t_start.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\t_end.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tlineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineSegments.prototype.isLineSegments = true;\n\n\tclass LineLoop extends Line {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'LineLoop';\n\t\t}\n\n\t}\n\n\tLineLoop.prototype.isLineLoop = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tsize: <float>,\n\t *\tsizeAttenuation: <bool>\n\t *\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tclass PointsMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PointsMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.size = 1;\n\t\t\tthis.sizeAttenuation = true;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.size = source.size;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tconst _inverseMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _ray = /*@__PURE__*/new Ray();\n\n\tconst _sphere = /*@__PURE__*/new Sphere();\n\n\tconst _position$2 = /*@__PURE__*/new Vector3();\n\n\tclass Points extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new PointsMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Points';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst threshold = raycaster.params.Points.threshold;\n\t\t\tconst drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy(geometry.boundingSphere);\n\n\t\t\t_sphere.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n\t\t\t_inverseMatrix.copy(matrixWorld).invert();\n\n\t\t\t_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);\n\n\t\t\tconst localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, il = end; i < il; i++) {\n\t\t\t\t\t\tconst a = index.getX(i);\n\n\t\t\t\t\t\t_position$2.fromBufferAttribute(positionAttribute, a);\n\n\t\t\t\t\t\ttestPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end; i < l; i++) {\n\t\t\t\t\t\t_position$2.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\ttestPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tPoints.prototype.isPoints = true;\n\n\tfunction testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n\t\tconst rayPointDistanceSq = _ray.distanceSqToPoint(point);\n\n\t\tif (rayPointDistanceSq < localThresholdSq) {\n\t\t\tconst intersectPoint = new Vector3();\n\n\t\t\t_ray.closestPointToPoint(point, intersectPoint);\n\n\t\t\tintersectPoint.applyMatrix4(matrixWorld);\n\t\t\tconst distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt(rayPointDistanceSq),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t}\n\t}\n\n\tclass VideoTexture extends Texture {\n\t\tconstructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tsuper(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.format = format !== undefined ? format : RGBFormat;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tconst scope = this;\n\n\t\t\tfunction updateVideo() {\n\t\t\t\tscope.needsUpdate = true;\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\n\t\t\tif ('requestVideoFrameCallback' in video) {\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.image).copy(this);\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst video = this.image;\n\t\t\tconst hasVideoFrameCallback = ('requestVideoFrameCallback' in video);\n\n\t\t\tif (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tVideoTexture.prototype.isVideoTexture = true;\n\n\tclass CompressedTexture extends Texture {\n\t\tconstructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.mipmaps = mipmaps; // no flipping for cube textures\n\t\t\t// (also flipping doesn't work for compressed textures )\n\n\t\t\tthis.flipY = false; // can't generate mipmaps for compressed textures\n\t\t\t// mips must be embedded in DDS files\n\n\t\t\tthis.generateMipmaps = false;\n\t\t}\n\n\t}\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\tclass CanvasTexture extends Texture {\n\t\tconstructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tsuper(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\tclass DepthTexture extends Texture {\n\t\tconstructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {\n\t\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\t\tif (format !== DepthFormat && format !== DepthStencilFormat) {\n\t\t\t\tthrow new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n\t\t\t}\n\n\t\t\tif (type === undefined && format === DepthFormat) type = UnsignedShortType;\n\t\t\tif (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\tthis.flipY = false;\n\t\t\tthis.generateMipmaps = false;\n\t\t}\n\n\t}\n\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\tclass CircleGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CircleGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tsegments = Math.max(3, segments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // center point\n\n\t\t\tvertices.push(0, 0, 0);\n\t\t\tnormals.push(0, 0, 1);\n\t\t\tuvs.push(0.5, 0.5);\n\n\t\t\tfor (let s = 0, i = 3; s <= segments; s++, i += 3) {\n\t\t\t\tconst segment = thetaStart + s / segments * thetaLength; // vertex\n\n\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\tnormals.push(0, 0, 1); // uvs\n\n\t\t\t\tuv.x = (vertices[i] / radius + 1) / 2;\n\t\t\t\tuv.y = (vertices[i + 1] / radius + 1) / 2;\n\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t} // indices\n\n\n\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\tindices.push(i, i + 1, 0);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass CylinderGeometry extends BufferGeometry {\n\t\tconstructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CylinderGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tconst scope = this;\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\theightSegments = Math.floor(heightSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet index = 0;\n\t\t\tconst indexArray = [];\n\t\t\tconst halfHeight = height / 2;\n\t\t\tlet groupStart = 0; // generate geometry\n\n\t\t\tgenerateTorso();\n\n\t\t\tif (openEnded === false) {\n\t\t\t\tif (radiusTop > 0) generateCap(true);\n\t\t\t\tif (radiusBottom > 0) generateCap(false);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction generateTorso() {\n\t\t\t\tconst normal = new Vector3();\n\t\t\t\tconst vertex = new Vector3();\n\t\t\t\tlet groupCount = 0; // this will be used to calculate the normal\n\n\t\t\t\tconst slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n\t\t\t\tfor (let y = 0; y <= heightSegments; y++) {\n\t\t\t\t\tconst indexRow = [];\n\t\t\t\t\tconst v = y / heightSegments; // calculate the radius of the current row\n\n\t\t\t\t\tconst radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n\t\t\t\t\tfor (let x = 0; x <= radialSegments; x++) {\n\t\t\t\t\t\tconst u = x / radialSegments;\n\t\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\t\t\t\t\t\tconst sinTheta = Math.sin(theta);\n\t\t\t\t\t\tconst cosTheta = Math.cos(theta); // vertex\n\n\t\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\t\tvertex.y = -v * height + halfHeight;\n\t\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\t\tnormal.set(sinTheta, slope, cosTheta).normalize();\n\t\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\t\tuvs.push(u, 1 - v); // save index of vertex in respective row\n\n\t\t\t\t\t\tindexRow.push(index++);\n\t\t\t\t\t} // now save vertices of the row in our index array\n\n\n\t\t\t\t\tindexArray.push(indexRow);\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (let x = 0; x < radialSegments; x++) {\n\t\t\t\t\tfor (let y = 0; y < heightSegments; y++) {\n\t\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\t\tconst a = indexArray[y][x];\n\t\t\t\t\t\tconst b = indexArray[y + 1][x];\n\t\t\t\t\t\tconst c = indexArray[y + 1][x + 1];\n\t\t\t\t\t\tconst d = indexArray[y][x + 1]; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // update group counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\tfunction generateCap(top) {\n\t\t\t\t// save the index of the first center vertex\n\t\t\t\tconst centerIndexStart = index;\n\t\t\t\tconst uv = new Vector2();\n\t\t\t\tconst vertex = new Vector3();\n\t\t\t\tlet groupCount = 0;\n\t\t\t\tconst radius = top === true ? radiusTop : radiusBottom;\n\t\t\t\tconst sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.\n\t\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\t\tfor (let x = 1; x <= radialSegments; x++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertices.push(0, halfHeight * sign, 0); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuvs.push(0.5, 0.5); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // save the index of the last center vertex\n\n\n\t\t\t\tconst centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n\t\t\t\tfor (let x = 0; x <= radialSegments; x++) {\n\t\t\t\t\tconst u = x / radialSegments;\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\t\t\t\t\tconst cosTheta = Math.cos(theta);\n\t\t\t\t\tconst sinTheta = Math.sin(theta); // vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuv.x = cosTheta * 0.5 + 0.5;\n\t\t\t\t\tuv.y = sinTheta * 0.5 * sign + 0.5;\n\t\t\t\t\tuvs.push(uv.x, uv.y); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (let x = 0; x < radialSegments; x++) {\n\t\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\t\tif (top === true) {\n\t\t\t\t\t\t// face top\n\t\t\t\t\t\tindices.push(i, i + 1, c);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// face bottom\n\t\t\t\t\t\tindices.push(i + 1, i, c);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass ConeGeometry extends CylinderGeometry {\n\t\tconstructor(radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n\t\t\tthis.type = 'ConeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t}\n\n\t}\n\n\tclass PolyhedronGeometry extends BufferGeometry {\n\t\tconstructor(vertices, indices, radius = 1, detail = 0) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PolyhedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t}; // default buffer data\n\n\t\t\tconst vertexBuffer = [];\n\t\t\tconst uvBuffer = []; // the subdivision creates the vertex buffer data\n\n\t\t\tsubdivide(detail); // all vertices should lie on a conceptual sphere with a given radius\n\n\t\t\tapplyRadius(radius); // finally, create the uv data\n\n\t\t\tgenerateUVs(); // build non-indexed geometry\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n\n\t\t\tif (detail === 0) {\n\t\t\t\tthis.computeVertexNormals(); // flat normals\n\t\t\t} else {\n\t\t\t\tthis.normalizeNormals(); // smooth normals\n\t\t\t} // helper functions\n\n\n\t\t\tfunction subdivide(detail) {\n\t\t\t\tconst a = new Vector3();\n\t\t\t\tconst b = new Vector3();\n\t\t\t\tconst c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\t\tfor (let i = 0; i < indices.length; i += 3) {\n\t\t\t\t\t// get the vertices of the face\n\t\t\t\t\tgetVertexByIndex(indices[i + 0], a);\n\t\t\t\t\tgetVertexByIndex(indices[i + 1], b);\n\t\t\t\t\tgetVertexByIndex(indices[i + 2], c); // perform subdivision\n\n\t\t\t\t\tsubdivideFace(a, b, c, detail);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction subdivideFace(a, b, c, detail) {\n\t\t\t\tconst cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\t\tconst v = []; // construct all of the vertices for this subdivision\n\n\t\t\t\tfor (let i = 0; i <= cols; i++) {\n\t\t\t\t\tv[i] = [];\n\t\t\t\t\tconst aj = a.clone().lerp(c, i / cols);\n\t\t\t\t\tconst bj = b.clone().lerp(c, i / cols);\n\t\t\t\t\tconst rows = cols - i;\n\n\t\t\t\t\tfor (let j = 0; j <= rows; j++) {\n\t\t\t\t\t\tif (j === 0 && i === cols) {\n\t\t\t\t\t\t\tv[i][j] = aj;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv[i][j] = aj.clone().lerp(bj, j / rows);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // construct all of the faces\n\n\n\t\t\t\tfor (let i = 0; i < cols; i++) {\n\t\t\t\t\tfor (let j = 0; j < 2 * (cols - i) - 1; j++) {\n\t\t\t\t\t\tconst k = Math.floor(j / 2);\n\n\t\t\t\t\t\tif (j % 2 === 0) {\n\t\t\t\t\t\t\tpushVertex(v[i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k]);\n\t\t\t\t\t\t\tpushVertex(v[i][k]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpushVertex(v[i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction applyRadius(radius) {\n\t\t\t\tconst vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\t\tfor (let i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvertex.normalize().multiplyScalar(radius);\n\t\t\t\t\tvertexBuffer[i + 0] = vertex.x;\n\t\t\t\t\tvertexBuffer[i + 1] = vertex.y;\n\t\t\t\t\tvertexBuffer[i + 2] = vertex.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tconst vertex = new Vector3();\n\n\t\t\t\tfor (let i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tconst u = azimuth(vertex) / 2 / Math.PI + 0.5;\n\t\t\t\t\tconst v = inclination(vertex) / Math.PI + 0.5;\n\t\t\t\t\tuvBuffer.push(u, 1 - v);\n\t\t\t\t}\n\n\t\t\t\tcorrectUVs();\n\t\t\t\tcorrectSeam();\n\t\t\t}\n\n\t\t\tfunction correctSeam() {\n\t\t\t\t// handle case when face straddles the seam, see #3269\n\t\t\t\tfor (let i = 0; i < uvBuffer.length; i += 6) {\n\t\t\t\t\t// uv data of a single face\n\t\t\t\t\tconst x0 = uvBuffer[i + 0];\n\t\t\t\t\tconst x1 = uvBuffer[i + 2];\n\t\t\t\t\tconst x2 = uvBuffer[i + 4];\n\t\t\t\t\tconst max = Math.max(x0, x1, x2);\n\t\t\t\t\tconst min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary\n\n\t\t\t\t\tif (max > 0.9 && min < 0.1) {\n\t\t\t\t\t\tif (x0 < 0.2) uvBuffer[i + 0] += 1;\n\t\t\t\t\t\tif (x1 < 0.2) uvBuffer[i + 2] += 1;\n\t\t\t\t\t\tif (x2 < 0.2) uvBuffer[i + 4] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction pushVertex(vertex) {\n\t\t\t\tvertexBuffer.push(vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\n\t\t\tfunction getVertexByIndex(index, vertex) {\n\t\t\t\tconst stride = index * 3;\n\t\t\t\tvertex.x = vertices[stride + 0];\n\t\t\t\tvertex.y = vertices[stride + 1];\n\t\t\t\tvertex.z = vertices[stride + 2];\n\t\t\t}\n\n\t\t\tfunction correctUVs() {\n\t\t\t\tconst a = new Vector3();\n\t\t\t\tconst b = new Vector3();\n\t\t\t\tconst c = new Vector3();\n\t\t\t\tconst centroid = new Vector3();\n\t\t\t\tconst uvA = new Vector2();\n\t\t\t\tconst uvB = new Vector2();\n\t\t\t\tconst uvC = new Vector2();\n\n\t\t\t\tfor (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n\t\t\t\t\ta.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n\t\t\t\t\tb.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n\t\t\t\t\tc.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n\t\t\t\t\tuvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n\t\t\t\t\tuvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n\t\t\t\t\tuvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n\t\t\t\t\tcentroid.copy(a).add(b).add(c).divideScalar(3);\n\t\t\t\t\tconst azi = azimuth(centroid);\n\t\t\t\t\tcorrectUV(uvA, j + 0, a, azi);\n\t\t\t\t\tcorrectUV(uvB, j + 2, b, azi);\n\t\t\t\t\tcorrectUV(uvC, j + 4, c, azi);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction correctUV(uv, stride, vector, azimuth) {\n\t\t\t\tif (azimuth < 0 && uv.x === 1) {\n\t\t\t\t\tuvBuffer[stride] = uv.x - 1;\n\t\t\t\t}\n\n\t\t\t\tif (vector.x === 0 && vector.z === 0) {\n\t\t\t\t\tuvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n\t\t\t\t}\n\t\t\t} // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n\t\t\tfunction azimuth(vector) {\n\t\t\t\treturn Math.atan2(vector.z, -vector.x);\n\t\t\t} // Angle above the XZ plane.\n\n\n\t\t\tfunction inclination(vector) {\n\t\t\t\treturn Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass DodecahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst t = (1 + Math.sqrt(5)) / 2;\n\t\t\tconst r = 1 / t;\n\t\t\tconst vertices = [// (±1, ±1, ±1)\n\t\t\t-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n\t\t\t0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n\t\t\t-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n\t\t\t-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n\t\t\tconst indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'DodecahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\tconst _v0 = new Vector3();\n\n\tconst _v1$1 = new Vector3();\n\n\tconst _normal = new Vector3();\n\n\tconst _triangle = new Triangle();\n\n\tclass EdgesGeometry extends BufferGeometry {\n\t\tconstructor(geometry, thresholdAngle) {\n\t\t\tsuper();\n\t\t\tthis.type = 'EdgesGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tthresholdAngle: thresholdAngle\n\t\t\t};\n\t\t\tthresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow(10, precisionPoints);\n\t\t\tconst thresholdDot = Math.cos(DEG2RAD * thresholdAngle);\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute('position');\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\t\t\tconst indexArr = [0, 0, 0];\n\t\t\tconst vertKeys = ['a', 'b', 'c'];\n\t\t\tconst hashes = new Array(3);\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\n\t\t\tfor (let i = 0; i < indexCount; i += 3) {\n\t\t\t\tif (indexAttr) {\n\t\t\t\t\tindexArr[0] = indexAttr.getX(i);\n\t\t\t\t\tindexArr[1] = indexAttr.getX(i + 1);\n\t\t\t\t\tindexArr[2] = indexAttr.getX(i + 2);\n\t\t\t\t} else {\n\t\t\t\t\tindexArr[0] = i;\n\t\t\t\t\tindexArr[1] = i + 1;\n\t\t\t\t\tindexArr[2] = i + 2;\n\t\t\t\t}\n\n\t\t\t\tconst {\n\t\t\t\t\ta,\n\t\t\t\t\tb,\n\t\t\t\t\tc\n\t\t\t\t} = _triangle;\n\t\t\t\ta.fromBufferAttribute(positionAttr, indexArr[0]);\n\t\t\t\tb.fromBufferAttribute(positionAttr, indexArr[1]);\n\t\t\t\tc.fromBufferAttribute(positionAttr, indexArr[2]);\n\n\t\t\t\t_triangle.getNormal(_normal); // create hashes for the edge from the vertices\n\n\n\t\t\t\thashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;\n\t\t\t\thashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;\n\t\t\t\thashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`; // skip degenerate triangles\n\n\t\t\t\tif (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} // iterate over every edge\n\n\n\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = (j + 1) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[j];\n\t\t\t\t\tconst vecHash1 = hashes[jNext];\n\t\t\t\t\tconst v0 = _triangle[vertKeys[j]];\n\t\t\t\t\tconst v1 = _triangle[vertKeys[jNext]];\n\t\t\t\t\tconst hash = `${vecHash0}_${vecHash1}`;\n\t\t\t\t\tconst reverseHash = `${vecHash1}_${vecHash0}`;\n\n\t\t\t\t\tif (reverseHash in edgeData && edgeData[reverseHash]) {\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n\t\t\t\t\t\t\tvertices.push(v0.x, v0.y, v0.z);\n\t\t\t\t\t\t\tvertices.push(v1.x, v1.y, v1.z);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[reverseHash] = null;\n\t\t\t\t\t} else if (!(hash in edgeData)) {\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[hash] = {\n\t\t\t\t\t\t\tindex0: indexArr[j],\n\t\t\t\t\t\t\tindex1: indexArr[jNext],\n\t\t\t\t\t\t\tnormal: _normal.clone()\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // iterate over all remaining, unmatched edges and add them to the vertex array\n\n\n\t\t\tfor (const key in edgeData) {\n\t\t\t\tif (edgeData[key]) {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tindex0,\n\t\t\t\t\t\tindex1\n\t\t\t\t\t} = edgeData[key];\n\n\t\t\t\t\t_v0.fromBufferAttribute(positionAttr, index0);\n\n\t\t\t\t\t_v1$1.fromBufferAttribute(positionAttr, index1);\n\n\t\t\t\t\tvertices.push(_v0.x, _v0.y, _v0.z);\n\t\t\t\t\tvertices.push(_v1$1.x, _v1$1.y, _v1$1.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t}\n\n\t}\n\n\t/**\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\tconst Earcut = {\n\t\ttriangulate: function (data, holeIndices, dim) {\n\t\t\tdim = dim || 2;\n\t\t\tconst hasHoles = holeIndices && holeIndices.length;\n\t\t\tconst outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\t\t\tlet outerNode = linkedList(data, 0, outerLen, dim, true);\n\t\t\tconst triangles = [];\n\t\t\tif (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\t\t\tlet minX, minY, maxX, maxY, x, y, invSize;\n\t\t\tif (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\t\tif (data.length > 80 * dim) {\n\t\t\t\tminX = maxX = data[0];\n\t\t\t\tminY = maxY = data[1];\n\n\t\t\t\tfor (let i = dim; i < outerLen; i += dim) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t\ty = data[i + 1];\n\t\t\t\t\tif (x < minX) minX = x;\n\t\t\t\t\tif (y < minY) minY = y;\n\t\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\t} // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n\t\t\t\tinvSize = Math.max(maxX - minX, maxY - minY);\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\t\t\t}\n\n\t\t\tearcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\t\t\treturn triangles;\n\t\t}\n\t}; // create a circular doubly linked list from polygon points in the specified winding order\n\n\tfunction linkedList(data, start, end, dim, clockwise) {\n\t\tlet i, last;\n\n\t\tif (clockwise === signedArea(data, start, end, dim) > 0) {\n\t\t\tfor (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n\t\t} else {\n\t\t\tfor (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n\t\t}\n\n\t\tif (last && equals(last, last.next)) {\n\t\t\tremoveNode(last);\n\t\t\tlast = last.next;\n\t\t}\n\n\t\treturn last;\n\t} // eliminate colinear or duplicate points\n\n\n\tfunction filterPoints(start, end) {\n\t\tif (!start) return start;\n\t\tif (!end) end = start;\n\t\tlet p = start,\n\t\t\t\tagain;\n\n\t\tdo {\n\t\t\tagain = false;\n\n\t\t\tif (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n\t\t\t\tremoveNode(p);\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif (p === p.next) break;\n\t\t\t\tagain = true;\n\t\t\t} else {\n\t\t\t\tp = p.next;\n\t\t\t}\n\t\t} while (again || p !== end);\n\n\t\treturn end;\n\t} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\n\tfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n\t\tif (!ear) return; // interlink polygon nodes in z-order\n\n\t\tif (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\t\tlet stop = ear,\n\t\t\t\tprev,\n\t\t\t\tnext; // iterate through ears, slicing them one by one\n\n\t\twhile (ear.prev !== ear.next) {\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push(prev.i / dim);\n\t\t\t\ttriangles.push(ear.i / dim);\n\t\t\t\ttriangles.push(next.i / dim);\n\t\t\t\tremoveNode(ear); // skipping the next vertex leads to less sliver triangles\n\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n\t\t\tif (ear === stop) {\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif (!pass) {\n\t\t\t\t\tearcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n\t\t\t\t} else if (pass === 1) {\n\t\t\t\t\tear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n\t\t\t\t\tearcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n\t\t\t\t} else if (pass === 2) {\n\t\t\t\t\tsplitEarcut(ear, triangles, dim, minX, minY, invSize);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\n\tfunction isEar(ear) {\n\t\tconst a = ear.prev,\n\t\t\t\t\tb = ear,\n\t\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// now make sure we don't have other points inside the potential ear\n\n\t\tlet p = ear.next.next;\n\n\t\twhile (p !== ear.prev) {\n\t\t\tif (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.next;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction isEarHashed(ear, minX, minY, invSize) {\n\t\tconst a = ear.prev,\n\t\t\t\t\tb = ear,\n\t\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// triangle bbox; min & max are calculated like this for speed\n\n\t\tconst minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n\t\t\t\t\tminTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n\t\t\t\t\tmaxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n\t\t\t\t\tmaxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n\t\tconst minZ = zOrder(minTX, minTY, minX, minY, invSize),\n\t\t\t\t\tmaxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\t\tlet p = ear.prevZ,\n\t\t\t\tn = ear.nextZ; // look for points inside the triangle in both directions\n\n\t\twhile (p && p.z >= minZ && n && n.z <= maxZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t} // look for remaining points in decreasing z-order\n\n\n\t\twhile (p && p.z >= minZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t} // look for remaining points in increasing z-order\n\n\n\t\twhile (n && n.z <= maxZ) {\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t}\n\n\t\treturn true;\n\t} // go through all polygon nodes and cure small local self-intersections\n\n\n\tfunction cureLocalIntersections(start, triangles, dim) {\n\t\tlet p = start;\n\n\t\tdo {\n\t\t\tconst a = p.prev,\n\t\t\t\t\t\tb = p.next.next;\n\n\t\t\tif (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\t\t\t\ttriangles.push(a.i / dim);\n\t\t\t\ttriangles.push(p.i / dim);\n\t\t\t\ttriangles.push(b.i / dim); // remove two nodes involved\n\n\t\t\t\tremoveNode(p);\n\t\t\t\tremoveNode(p.next);\n\t\t\t\tp = start = b;\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn filterPoints(p);\n\t} // try splitting polygon into two and triangulate them independently\n\n\n\tfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tlet a = start;\n\n\t\tdo {\n\t\t\tlet b = a.next.next;\n\n\t\t\twhile (b !== a.prev) {\n\t\t\t\tif (a.i !== b.i && isValidDiagonal(a, b)) {\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tlet c = splitPolygon(a, b); // filter colinear points around the cuts\n\n\t\t\t\t\ta = filterPoints(a, a.next);\n\t\t\t\t\tc = filterPoints(c, c.next); // run earcut on each half\n\n\t\t\t\t\tearcutLinked(a, triangles, dim, minX, minY, invSize);\n\t\t\t\t\tearcutLinked(c, triangles, dim, minX, minY, invSize);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\t\t\t}\n\n\t\t\ta = a.next;\n\t\t} while (a !== start);\n\t} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\n\tfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n\t\tconst queue = [];\n\t\tlet i, len, start, end, list;\n\n\t\tfor (i = 0, len = holeIndices.length; i < len; i++) {\n\t\t\tstart = holeIndices[i] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n\t\t\tlist = linkedList(data, start, end, dim, false);\n\t\t\tif (list === list.next) list.steiner = true;\n\t\t\tqueue.push(getLeftmost(list));\n\t\t}\n\n\t\tqueue.sort(compareX); // process holes from left to right\n\n\t\tfor (i = 0; i < queue.length; i++) {\n\t\t\teliminateHole(queue[i], outerNode);\n\t\t\touterNode = filterPoints(outerNode, outerNode.next);\n\t\t}\n\n\t\treturn outerNode;\n\t}\n\n\tfunction compareX(a, b) {\n\t\treturn a.x - b.x;\n\t} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\n\tfunction eliminateHole(hole, outerNode) {\n\t\touterNode = findHoleBridge(hole, outerNode);\n\n\t\tif (outerNode) {\n\t\t\tconst b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n\t\t\tfilterPoints(outerNode, outerNode.next);\n\t\t\tfilterPoints(b, b.next);\n\t\t}\n\t} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\n\tfunction findHoleBridge(hole, outerNode) {\n\t\tlet p = outerNode;\n\t\tconst hx = hole.x;\n\t\tconst hy = hole.y;\n\t\tlet qx = -Infinity,\n\t\t\t\tm; // find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\n\t\tdo {\n\t\t\tif (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n\t\t\t\tconst x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n\t\t\t\tif (x <= hx && x > qx) {\n\t\t\t\t\tqx = x;\n\n\t\t\t\t\tif (x === hx) {\n\t\t\t\t\t\tif (hy === p.y) return p;\n\t\t\t\t\t\tif (hy === p.next.y) return p.next;\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== outerNode);\n\n\t\tif (!m) return null;\n\t\tif (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tconst stop = m,\n\t\t\t\t\tmx = m.x,\n\t\t\t\t\tmy = m.y;\n\t\tlet tanMin = Infinity,\n\t\t\t\ttan;\n\t\tp = m;\n\n\t\tdo {\n\t\t\tif (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\t\t\t\ttan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n\t\t\t\tif (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== stop);\n\n\t\treturn m;\n\t} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\n\tfunction sectorContainsSector(m, p) {\n\t\treturn area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n\t} // interlink polygon nodes in z-order\n\n\n\tfunction indexCurve(start, minX, minY, invSize) {\n\t\tlet p = start;\n\n\t\tdo {\n\t\t\tif (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\t\tsortLinked(p);\n\t} // Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\n\tfunction sortLinked(list) {\n\t\tlet i,\n\t\t\t\tp,\n\t\t\t\tq,\n\t\t\t\te,\n\t\t\t\ttail,\n\t\t\t\tnumMerges,\n\t\t\t\tpSize,\n\t\t\t\tqSize,\n\t\t\t\tinSize = 1;\n\n\t\tdo {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile (p) {\n\t\t\t\tnumMerges++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\n\t\t\t\tfor (i = 0; i < inSize; i++) {\n\t\t\t\t\tpSize++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif (!q) break;\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile (pSize > 0 || qSize > 0 && q) {\n\t\t\t\t\tif (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tail) tail.nextZ = e;else list = e;\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\t\t} while (numMerges > 1);\n\n\t\treturn list;\n\t} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\n\tfunction zOrder(x, y, minX, minY, invSize) {\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * (x - minX) * invSize;\n\t\ty = 32767 * (y - minY) * invSize;\n\t\tx = (x | x << 8) & 0x00FF00FF;\n\t\tx = (x | x << 4) & 0x0F0F0F0F;\n\t\tx = (x | x << 2) & 0x33333333;\n\t\tx = (x | x << 1) & 0x55555555;\n\t\ty = (y | y << 8) & 0x00FF00FF;\n\t\ty = (y | y << 4) & 0x0F0F0F0F;\n\t\ty = (y | y << 2) & 0x33333333;\n\t\ty = (y | y << 1) & 0x55555555;\n\t\treturn x | y << 1;\n\t} // find the leftmost node of a polygon ring\n\n\n\tfunction getLeftmost(start) {\n\t\tlet p = start,\n\t\t\t\tleftmost = start;\n\n\t\tdo {\n\t\t\tif (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn leftmost;\n\t} // check if a point lies within a convex triangle\n\n\n\tfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n\t\treturn (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n\t} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\n\tfunction isValidDiagonal(a, b) {\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n\t\tlocallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n\t\tarea(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n\t\tequals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n\t} // signed area of a triangle\n\n\n\tfunction area(p, q, r) {\n\t\treturn (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n\t} // check if two points are equal\n\n\n\tfunction equals(p1, p2) {\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\t} // check if two segments intersect\n\n\n\tfunction intersects(p1, q1, p2, q2) {\n\t\tconst o1 = sign(area(p1, q1, p2));\n\t\tconst o2 = sign(area(p1, q1, q2));\n\t\tconst o3 = sign(area(p2, q2, p1));\n\t\tconst o4 = sign(area(p2, q2, q1));\n\t\tif (o1 !== o2 && o3 !== o4) return true; // general case\n\n\t\tif (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n\t\tif (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n\t\tif (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n\t\tif (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\t} // for collinear points p, q, r, check if point q lies on segment pr\n\n\n\tfunction onSegment(p, q, r) {\n\t\treturn q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n\t}\n\n\tfunction sign(num) {\n\t\treturn num > 0 ? 1 : num < 0 ? -1 : 0;\n\t} // check if a polygon diagonal intersects any polygon segments\n\n\n\tfunction intersectsPolygon(a, b) {\n\t\tlet p = a;\n\n\t\tdo {\n\t\t\tif (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn false;\n\t} // check if a polygon diagonal is locally inside the polygon\n\n\n\tfunction locallyInside(a, b) {\n\t\treturn area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n\t} // check if the middle point of a polygon diagonal is inside the polygon\n\n\n\tfunction middleInside(a, b) {\n\t\tlet p = a,\n\t\t\t\tinside = false;\n\t\tconst px = (a.x + b.x) / 2,\n\t\t\t\t\tpy = (a.y + b.y) / 2;\n\n\t\tdo {\n\t\t\tif (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn inside;\n\t} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\n\tfunction splitPolygon(a, b) {\n\t\tconst a2 = new Node(a.i, a.x, a.y),\n\t\t\t\t\tb2 = new Node(b.i, b.x, b.y),\n\t\t\t\t\tan = a.next,\n\t\t\t\t\tbp = b.prev;\n\t\ta.next = b;\n\t\tb.prev = a;\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\t\treturn b2;\n\t} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\n\tfunction insertNode(i, x, y, last) {\n\t\tconst p = new Node(i, x, y);\n\n\t\tif (!last) {\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\t\t} else {\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\t\t}\n\n\t\treturn p;\n\t}\n\n\tfunction removeNode(p) {\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\t\tif (p.prevZ) p.prevZ.nextZ = p.nextZ;\n\t\tif (p.nextZ) p.nextZ.prevZ = p.prevZ;\n\t}\n\n\tfunction Node(i, x, y) {\n\t\t// vertex index in coordinates array\n\t\tthis.i = i; // vertex coordinates\n\n\t\tthis.x = x;\n\t\tthis.y = y; // previous and next vertex nodes in a polygon ring\n\n\t\tthis.prev = null;\n\t\tthis.next = null; // z-order curve value\n\n\t\tthis.z = null; // previous and next nodes in z-order\n\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null; // indicates whether this is a steiner point\n\n\t\tthis.steiner = false;\n\t}\n\n\tfunction signedArea(data, start, end, dim) {\n\t\tlet sum = 0;\n\n\t\tfor (let i = start, j = end - dim; i < end; i += dim) {\n\t\t\tsum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n\t\t\tj = i;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\tclass ShapeUtils {\n\t\t// calculate area of the contour polygon\n\t\tstatic area(contour) {\n\t\t\tconst n = contour.length;\n\t\t\tlet a = 0.0;\n\n\t\t\tfor (let p = n - 1, q = 0; q < n; p = q++) {\n\t\t\t\ta += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\t\t}\n\n\t\tstatic isClockWise(pts) {\n\t\t\treturn ShapeUtils.area(pts) < 0;\n\t\t}\n\n\t\tstatic triangulateShape(contour, holes) {\n\t\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\n\t\t\tconst holeIndices = []; // array of hole indices\n\n\t\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts(contour);\n\t\t\taddContour(vertices, contour); //\n\n\t\t\tlet holeIndex = contour.length;\n\t\t\tholes.forEach(removeDupEndPts);\n\n\t\t\tfor (let i = 0; i < holes.length; i++) {\n\t\t\t\tholeIndices.push(holeIndex);\n\t\t\t\tholeIndex += holes[i].length;\n\t\t\t\taddContour(vertices, holes[i]);\n\t\t\t} //\n\n\n\t\t\tconst triangles = Earcut.triangulate(vertices, holeIndices); //\n\n\t\t\tfor (let i = 0; i < triangles.length; i += 3) {\n\t\t\t\tfaces.push(triangles.slice(i, i + 3));\n\t\t\t}\n\n\t\t\treturn faces;\n\t\t}\n\n\t}\n\n\tfunction removeDupEndPts(points) {\n\t\tconst l = points.length;\n\n\t\tif (l > 2 && points[l - 1].equals(points[0])) {\n\t\t\tpoints.pop();\n\t\t}\n\t}\n\n\tfunction addContour(vertices, contour) {\n\t\tfor (let i = 0; i < contour.length; i++) {\n\t\t\tvertices.push(contour[i].x);\n\t\t\tvertices.push(contour[i].y);\n\t\t}\n\t}\n\n\t/**\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *\tcurveSegments: <int>, // number of points on the curves\n\t *\tsteps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *\tdepth: <float>, // Depth to extrude the shape\n\t *\n\t *\tbevelEnabled: <bool>, // turn on bevel\n\t *\tbevelThickness: <float>, // how deep into the original shape bevel goes\n\t *\tbevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *\tbevelOffset: <float>, // how far from shape outline does bevel start\n\t *\tbevelSegments: <int>, // number of bevel layers\n\t *\n\t *\textrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *\tUVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\tclass ExtrudeGeometry extends BufferGeometry {\n\t\tconstructor(shapes, options) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ExtrudeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t\tshapes = Array.isArray(shapes) ? shapes : [shapes];\n\t\t\tconst scope = this;\n\t\t\tconst verticesArray = [];\n\t\t\tconst uvArray = [];\n\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\taddShape(shape);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n\t\t\tthis.computeVertexNormals(); // functions\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tconst placeholder = []; // options\n\n\t\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\t\tlet depth = options.depth !== undefined ? options.depth : 100;\n\t\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\t\t\tconst extrudePath = options.extrudePath;\n\t\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options\n\n\t\t\t\tif (options.amount !== undefined) {\n\t\t\t\t\tconsole.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');\n\t\t\t\t\tdepth = options.amount;\n\t\t\t\t} //\n\n\n\t\t\t\tlet extrudePts,\n\t\t\t\t\t\textrudeByPath = false;\n\t\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\t\tif (extrudePath) {\n\t\t\t\t\textrudePts = extrudePath.getSpacedPoints(steps);\n\t\t\t\t\textrudeByPath = true;\n\t\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\t\t\t\t// SETUP TNB variables\n\t\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\t\tsplineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\t\tbinormal = new Vector3();\n\t\t\t\t\tnormal = new Vector3();\n\t\t\t\t\tposition2 = new Vector3();\n\t\t\t\t} // Safeguards if bevels are not enabled\n\n\n\t\t\t\tif (!bevelEnabled) {\n\t\t\t\t\tbevelSegments = 0;\n\t\t\t\t\tbevelThickness = 0;\n\t\t\t\t\tbevelSize = 0;\n\t\t\t\t\tbevelOffset = 0;\n\t\t\t\t} // Variables initialization\n\n\n\t\t\t\tconst shapePoints = shape.extractPoints(curveSegments);\n\t\t\t\tlet vertices = shapePoints.shape;\n\t\t\t\tconst holes = shapePoints.holes;\n\t\t\t\tconst reverse = !ShapeUtils.isClockWise(vertices);\n\n\t\t\t\tif (reverse) {\n\t\t\t\t\tvertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\n\t\t\t\t\t\tif (ShapeUtils.isClockWise(ahole)) {\n\t\t\t\t\t\t\tholes[h] = ahole.reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst faces = ShapeUtils.triangulateShape(vertices, holes);\n\t\t\t\t/* Vertices */\n\n\t\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\tvertices = vertices.concat(ahole);\n\t\t\t\t}\n\n\t\t\t\tfunction scalePt2(pt, vec, size) {\n\t\t\t\t\tif (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n\t\t\t\t\treturn vec.clone().multiplyScalar(size).add(pt);\n\t\t\t\t}\n\n\t\t\t\tconst vlen = vertices.length,\n\t\t\t\t\t\t\tflen = faces.length; // Find directions for point movement\n\n\t\t\t\tfunction getBevelVec(inPt, inPrev, inNext) {\n\t\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t\t//\t shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t\t//\n\t\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t\t//\tadjacent edges of inPt at a distance of 1 unit on the left side.\n\t\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\t\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\t\t\t\t\tconst v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n\t\t\t\t\tconst collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n\t\t\t\t\tif (Math.abs(collinear0) > Number.EPSILON) {\n\t\t\t\t\t\t// not collinear\n\t\t\t\t\t\t// length of vectors for normalizing\n\t\t\t\t\t\tconst v_prev_len = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\tconst v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n\t\t\t\t\t\tconst ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n\t\t\t\t\t\tconst ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n\t\t\t\t\t\tconst ptNextShift_x = inNext.x - v_next_y / v_next_len;\n\t\t\t\t\t\tconst ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n\t\t\t\t\t\tconst sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n\t\t\t\t\t\tv_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n\t\t\t\t\t\tv_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t\t//\tbut prevent crazy spikes\n\n\t\t\t\t\t\tconst v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n\t\t\t\t\t\tif (v_trans_lensq <= 2) {\n\t\t\t\t\t\t\treturn new Vector2(v_trans_x, v_trans_y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_trans_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// handle special case of collinear edges\n\t\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\t\tif (v_prev_x > Number.EPSILON) {\n\t\t\t\t\t\t\tif (v_next_x > Number.EPSILON) {\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (v_prev_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\tif (v_next_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (direction_eq) {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\t\tv_trans_x = -v_prev_y;\n\t\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n\t\t\t\t}\n\n\t\t\t\tconst contourMovements = [];\n\n\t\t\t\tfor (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\t\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\t\tcontourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);\n\t\t\t\t}\n\n\t\t\t\tconst holesMovements = [];\n\t\t\t\tlet oneHoleMovements,\n\t\t\t\t\t\tverticesMovements = contourMovements.concat();\n\n\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\toneHoleMovements = [];\n\n\t\t\t\t\tfor (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n\t\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\n\t\t\t\t\t\toneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);\n\t\t\t\t\t}\n\n\t\t\t\t\tholesMovements.push(oneHoleMovements);\n\t\t\t\t\tverticesMovements = verticesMovements.concat(oneHoleMovements);\n\t\t\t\t} // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n\t\t\t\tfor (let b = 0; b < bevelSegments; b++) {\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos(t * Math.PI / 2);\n\t\t\t\t\tconst bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\t\t\t\t\tfor (let i = 0, il = contour.length; i < il; i++) {\n\t\t\t\t\t\tconst vert = scalePt2(contour[i], contourMovements[i], bs);\n\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\toneHoleMovements = holesMovements[h];\n\n\t\t\t\t\t\tfor (let i = 0, il = ahole.length; i < il; i++) {\n\t\t\t\t\t\t\tconst vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\t\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst bs = bevelSize + bevelOffset; // Back facing vertices\n\n\t\t\t\tfor (let i = 0; i < vlen; i++) {\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\tv(vert.x, vert.y, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\t\t\t\t\tnormal.copy(splineTube.normals[0]).multiplyScalar(vert.x);\n\t\t\t\t\t\tbinormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);\n\t\t\t\t\t\tposition2.copy(extrudePts[0]).add(normal).add(binormal);\n\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t}\n\t\t\t\t} // Add stepped vertices...\n\t\t\t\t// Including front facing vertices\n\n\n\t\t\t\tfor (let s = 1; s <= steps; s++) {\n\t\t\t\t\tfor (let i = 0; i < vlen; i++) {\n\t\t\t\t\t\tconst vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\tv(vert.x, vert.y, depth / steps * s);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\t\t\t\t\t\tnormal.copy(splineTube.normals[s]).multiplyScalar(vert.x);\n\t\t\t\t\t\t\tbinormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);\n\t\t\t\t\t\t\tposition2.copy(extrudePts[s]).add(normal).add(binormal);\n\t\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // Add bevel segments planes\n\t\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n\t\t\t\tfor (let b = bevelSegments - 1; b >= 0; b--) {\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos(t * Math.PI / 2);\n\t\t\t\t\tconst bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\t\t\t\t\tfor (let i = 0, il = contour.length; i < il; i++) {\n\t\t\t\t\t\tconst vert = scalePt2(contour[i], contourMovements[i], bs);\n\t\t\t\t\t\tv(vert.x, vert.y, depth + z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\toneHoleMovements = holesMovements[h];\n\n\t\t\t\t\t\tfor (let i = 0, il = ahole.length; i < il; i++) {\n\t\t\t\t\t\t\tconst vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\n\t\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\t\tv(vert.x, vert.y, depth + z);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tv(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* Faces */\n\t\t\t\t// Top and bottom faces\n\n\n\t\t\t\tbuildLidFaces(); // Sides faces\n\n\t\t\t\tbuildSideFaces(); /////\tInternal functions\n\n\t\t\t\tfunction buildLidFaces() {\n\t\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\t\tif (bevelEnabled) {\n\t\t\t\t\t\tlet layer = 0; // steps + 1\n\n\t\t\t\t\t\tlet offset = vlen * layer; // Bottom faces\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[2] + offset, face[1] + offset, face[0] + offset);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\t\toffset = vlen * layer; // Top faces\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[0] + offset, face[1] + offset, face[2] + offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Bottom faces\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[2], face[1], face[0]);\n\t\t\t\t\t\t} // Top faces\n\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 0);\n\t\t\t\t} // Create faces for the z-sides of the shape\n\n\n\t\t\t\tfunction buildSideFaces() {\n\t\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\t\tlet layeroffset = 0;\n\t\t\t\t\tsidewalls(contour, layeroffset);\n\t\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\tsidewalls(ahole, layeroffset); //, true\n\n\t\t\t\t\t\tlayeroffset += ahole.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 1);\n\t\t\t\t}\n\n\t\t\t\tfunction sidewalls(contour, layeroffset) {\n\t\t\t\t\tlet i = contour.length;\n\n\t\t\t\t\twhile (--i >= 0) {\n\t\t\t\t\t\tconst j = i;\n\t\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\t\tif (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\t\tfor (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {\n\t\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\t\tconst slen2 = vlen * (s + 1);\n\t\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\t\t\t\t\t\t\tf4(a, b, c, d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction v(x, y, z) {\n\t\t\t\t\tplaceholder.push(x);\n\t\t\t\t\tplaceholder.push(y);\n\t\t\t\t\tplaceholder.push(z);\n\t\t\t\t}\n\n\t\t\t\tfunction f3(a, b, c) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\t\tconst uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t}\n\n\t\t\t\tfunction f4(a, b, c, d) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\t\tconst uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t}\n\n\t\t\t\tfunction addVertex(index) {\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 0]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 1]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 2]);\n\t\t\t\t}\n\n\t\t\t\tfunction addUV(vector2) {\n\t\t\t\t\tuvArray.push(vector2.x);\n\t\t\t\t\tuvArray.push(vector2.y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tconst shapes = this.parameters.shapes;\n\t\t\tconst options = this.parameters.options;\n\t\t\treturn toJSON$1(shapes, options, data);\n\t\t}\n\n\t}\n\n\tconst WorldUVGenerator = {\n\t\tgenerateTopUV: function (geometry, vertices, indexA, indexB, indexC) {\n\t\t\tconst a_x = vertices[indexA * 3];\n\t\t\tconst a_y = vertices[indexA * 3 + 1];\n\t\t\tconst b_x = vertices[indexB * 3];\n\t\t\tconst b_y = vertices[indexB * 3 + 1];\n\t\t\tconst c_x = vertices[indexC * 3];\n\t\t\tconst c_y = vertices[indexC * 3 + 1];\n\t\t\treturn [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n\t\t},\n\t\tgenerateSideWallUV: function (geometry, vertices, indexA, indexB, indexC, indexD) {\n\t\t\tconst a_x = vertices[indexA * 3];\n\t\t\tconst a_y = vertices[indexA * 3 + 1];\n\t\t\tconst a_z = vertices[indexA * 3 + 2];\n\t\t\tconst b_x = vertices[indexB * 3];\n\t\t\tconst b_y = vertices[indexB * 3 + 1];\n\t\t\tconst b_z = vertices[indexB * 3 + 2];\n\t\t\tconst c_x = vertices[indexC * 3];\n\t\t\tconst c_y = vertices[indexC * 3 + 1];\n\t\t\tconst c_z = vertices[indexC * 3 + 2];\n\t\t\tconst d_x = vertices[indexD * 3];\n\t\t\tconst d_y = vertices[indexD * 3 + 1];\n\t\t\tconst d_z = vertices[indexD * 3 + 2];\n\n\t\t\tif (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {\n\t\t\t\treturn [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n\t\t\t} else {\n\t\t\t\treturn [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction toJSON$1(shapes, options, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\tif (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n\t\treturn data;\n\t}\n\n\tclass IcosahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst t = (1 + Math.sqrt(5)) / 2;\n\t\t\tconst vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n\t\t\tconst indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'IcosahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\tclass LatheGeometry extends BufferGeometry {\n\t\tconstructor(points, segments = 12, phiStart = 0, phiLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LatheGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\t\t\tsegments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\t\tphiLength = clamp(phiLength, 0, Math.PI * 2); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst inverseSegments = 1.0 / segments;\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // generate vertices and uvs\n\n\t\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\t\t\t\tconst sin = Math.sin(phi);\n\t\t\t\tconst cos = Math.cos(phi);\n\n\t\t\t\tfor (let j = 0; j <= points.length - 1; j++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = points[j].x * sin;\n\t\t\t\t\tvertex.y = points[j].y;\n\t\t\t\t\tvertex.z = points[j].x * cos;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // uv\n\n\t\t\t\t\tuv.x = i / segments;\n\t\t\t\t\tuv.y = j / (points.length - 1);\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t}\n\t\t\t} // indices\n\n\n\t\t\tfor (let i = 0; i < segments; i++) {\n\t\t\t\tfor (let j = 0; j < points.length - 1; j++) {\n\t\t\t\t\tconst base = j + i * points.length;\n\t\t\t\t\tconst a = base;\n\t\t\t\t\tconst b = base + points.length;\n\t\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\t\tconst d = base + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals\n\n\t\t\tthis.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n\t\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\t\tif (phiLength === Math.PI * 2) {\n\t\t\t\tconst normals = this.attributes.normal.array;\n\t\t\t\tconst n1 = new Vector3();\n\t\t\t\tconst n2 = new Vector3();\n\t\t\t\tconst n = new Vector3(); // this is the buffer offset for the last line of vertices\n\n\t\t\t\tconst base = segments * points.length * 3;\n\n\t\t\t\tfor (let i = 0, j = 0; i < points.length; i++, j += 3) {\n\t\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\t\tn1.x = normals[j + 0];\n\t\t\t\t\tn1.y = normals[j + 1];\n\t\t\t\t\tn1.z = normals[j + 2]; // select the normal of the vertex in the last line\n\n\t\t\t\t\tn2.x = normals[base + j + 0];\n\t\t\t\t\tn2.y = normals[base + j + 1];\n\t\t\t\t\tn2.z = normals[base + j + 2]; // average normals\n\n\t\t\t\t\tn.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n\t\t\t\t\tnormals[j + 0] = normals[base + j + 0] = n.x;\n\t\t\t\t\tnormals[j + 1] = normals[base + j + 1] = n.y;\n\t\t\t\t\tnormals[j + 2] = normals[base + j + 2] = n.z;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass OctahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n\t\t\tconst indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'OctahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\t/**\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\tclass ParametricGeometry extends BufferGeometry {\n\t\tconstructor(func, slices, stacks) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ParametricGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tfunc: func,\n\t\t\t\tslices: slices,\n\t\t\t\tstacks: stacks\n\t\t\t}; // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\t\t\tconst EPS = 0.00001;\n\t\t\tconst normal = new Vector3();\n\t\t\tconst p0 = new Vector3(),\n\t\t\t\t\t\tp1 = new Vector3();\n\t\t\tconst pu = new Vector3(),\n\t\t\t\t\t\tpv = new Vector3();\n\n\t\t\tif (func.length < 3) {\n\t\t\t\tconsole.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');\n\t\t\t} // generate vertices, normals and uvs\n\n\n\t\t\tconst sliceCount = slices + 1;\n\n\t\t\tfor (let i = 0; i <= stacks; i++) {\n\t\t\t\tconst v = i / stacks;\n\n\t\t\t\tfor (let j = 0; j <= slices; j++) {\n\t\t\t\t\tconst u = j / slices; // vertex\n\n\t\t\t\t\tfunc(u, v, p0);\n\t\t\t\t\tvertices.push(p0.x, p0.y, p0.z); // normal\n\t\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\t\tif (u - EPS >= 0) {\n\t\t\t\t\t\tfunc(u - EPS, v, p1);\n\t\t\t\t\t\tpu.subVectors(p0, p1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfunc(u + EPS, v, p1);\n\t\t\t\t\t\tpu.subVectors(p1, p0);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (v - EPS >= 0) {\n\t\t\t\t\t\tfunc(u, v - EPS, p1);\n\t\t\t\t\t\tpv.subVectors(p0, p1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfunc(u, v + EPS, p1);\n\t\t\t\t\t\tpv.subVectors(p1, p0);\n\t\t\t\t\t} // cross product of tangent vectors returns surface normal\n\n\n\t\t\t\t\tnormal.crossVectors(pu, pv).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u, v);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let i = 0; i < stacks; i++) {\n\t\t\t\tfor (let j = 0; j < slices; j++) {\n\t\t\t\t\tconst a = i * sliceCount + j;\n\t\t\t\t\tconst b = i * sliceCount + j + 1;\n\t\t\t\t\tconst c = (i + 1) * sliceCount + j + 1;\n\t\t\t\t\tconst d = (i + 1) * sliceCount + j; // faces one and two\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass RingGeometry extends BufferGeometry {\n\t\tconstructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'RingGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tthetaSegments = Math.max(3, thetaSegments);\n\t\t\tphiSegments = Math.max(1, phiSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // some helper variables\n\n\t\t\tlet radius = innerRadius;\n\t\t\tconst radiusStep = (outerRadius - innerRadius) / phiSegments;\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // generate vertices, normals and uvs\n\n\t\t\tfor (let j = 0; j <= phiSegments; j++) {\n\t\t\t\tfor (let i = 0; i <= thetaSegments; i++) {\n\t\t\t\t\t// values are generate from the inside of the ring to the outside\n\t\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n\t\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, 0, 1); // uv\n\n\t\t\t\t\tuv.x = (vertex.x / outerRadius + 1) / 2;\n\t\t\t\t\tuv.y = (vertex.y / outerRadius + 1) / 2;\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t} // increase the radius for next row of vertices\n\n\n\t\t\t\tradius += radiusStep;\n\t\t\t} // indices\n\n\n\t\t\tfor (let j = 0; j < phiSegments; j++) {\n\t\t\t\tconst thetaSegmentLevel = j * (thetaSegments + 1);\n\n\t\t\t\tfor (let i = 0; i < thetaSegments; i++) {\n\t\t\t\t\tconst segment = i + thetaSegmentLevel;\n\t\t\t\t\tconst a = segment;\n\t\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\t\tconst d = segment + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass ShapeGeometry extends BufferGeometry {\n\t\tconstructor(shapes, curveSegments = 12) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShapeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t}; // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet groupStart = 0;\n\t\t\tlet groupCount = 0; // allow single and array values for \"shapes\" parameter\n\n\t\t\tif (Array.isArray(shapes) === false) {\n\t\t\t\taddShape(shapes);\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\t\taddShape(shapes[i]);\n\t\t\t\t\tthis.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n\t\t\t\t\tgroupStart += groupCount;\n\t\t\t\t\tgroupCount = 0;\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\t\tconst points = shape.extractPoints(curveSegments);\n\t\t\t\tlet shapeVertices = points.shape;\n\t\t\t\tconst shapeHoles = points.holes; // check direction of vertices\n\n\t\t\t\tif (ShapeUtils.isClockWise(shapeVertices) === false) {\n\t\t\t\t\tshapeVertices = shapeVertices.reverse();\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0, l = shapeHoles.length; i < l; i++) {\n\t\t\t\t\tconst shapeHole = shapeHoles[i];\n\n\t\t\t\t\tif (ShapeUtils.isClockWise(shapeHole) === true) {\n\t\t\t\t\t\tshapeHoles[i] = shapeHole.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array\n\n\t\t\t\tfor (let i = 0, l = shapeHoles.length; i < l; i++) {\n\t\t\t\t\tconst shapeHole = shapeHoles[i];\n\t\t\t\t\tshapeVertices = shapeVertices.concat(shapeHole);\n\t\t\t\t} // vertices, normals, uvs\n\n\n\t\t\t\tfor (let i = 0, l = shapeVertices.length; i < l; i++) {\n\t\t\t\t\tconst vertex = shapeVertices[i];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(vertex.x, vertex.y); // world uvs\n\t\t\t\t} // incides\n\n\n\t\t\t\tfor (let i = 0, l = faces.length; i < l; i++) {\n\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\tconst a = face[0] + indexOffset;\n\t\t\t\t\tconst b = face[1] + indexOffset;\n\t\t\t\t\tconst c = face[2] + indexOffset;\n\t\t\t\t\tindices.push(a, b, c);\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tconst shapes = this.parameters.shapes;\n\t\t\treturn toJSON(shapes, data);\n\t\t}\n\n\t}\n\n\tfunction toJSON(shapes, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tclass SphereGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, widthSegments = 8, heightSegments = 6, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SphereGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\twidthSegments = Math.max(3, Math.floor(widthSegments));\n\t\t\theightSegments = Math.max(2, Math.floor(heightSegments));\n\t\t\tconst thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n\t\t\tlet index = 0;\n\t\t\tconst grid = [];\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3(); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // generate vertices, normals and uvs\n\n\t\t\tfor (let iy = 0; iy <= heightSegments; iy++) {\n\t\t\t\tconst verticesRow = [];\n\t\t\t\tconst v = iy / heightSegments; // special case for the poles\n\n\t\t\t\tlet uOffset = 0;\n\n\t\t\t\tif (iy == 0 && thetaStart == 0) {\n\t\t\t\t\tuOffset = 0.5 / widthSegments;\n\t\t\t\t} else if (iy == heightSegments && thetaEnd == Math.PI) {\n\t\t\t\t\tuOffset = -0.5 / widthSegments;\n\t\t\t\t}\n\n\t\t\t\tfor (let ix = 0; ix <= widthSegments; ix++) {\n\t\t\t\t\tconst u = ix / widthSegments; // vertex\n\n\t\t\t\t\tvertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormal.copy(vertex).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u + uOffset, 1 - v);\n\t\t\t\t\tverticesRow.push(index++);\n\t\t\t\t}\n\n\t\t\t\tgrid.push(verticesRow);\n\t\t\t} // indices\n\n\n\t\t\tfor (let iy = 0; iy < heightSegments; iy++) {\n\t\t\t\tfor (let ix = 0; ix < widthSegments; ix++) {\n\t\t\t\t\tconst a = grid[iy][ix + 1];\n\t\t\t\t\tconst b = grid[iy][ix];\n\t\t\t\t\tconst c = grid[iy + 1][ix];\n\t\t\t\t\tconst d = grid[iy + 1][ix + 1];\n\t\t\t\t\tif (iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n\t\t\t\t\tif (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass TetrahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n\t\t\tconst indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'TetrahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\t/**\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *\tfont: <THREE.Font>, // font\n\t *\n\t *\tsize: <float>, // size of the text\n\t *\theight: <float>, // thickness to extrude text\n\t *\tcurveSegments: <int>, // number of points on the curves\n\t *\n\t *\tbevelEnabled: <bool>, // turn on bevel\n\t *\tbevelThickness: <float>, // how deep into text bevel goes\n\t *\tbevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *\tbevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\tclass TextGeometry extends ExtrudeGeometry {\n\t\tconstructor(text, parameters = {}) {\n\t\t\tconst font = parameters.font;\n\n\t\t\tif (!(font && font.isFont)) {\n\t\t\t\tconsole.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n\t\t\t\treturn new BufferGeometry();\n\t\t\t}\n\n\t\t\tconst shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n\t\t\tif (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n\t\t\tif (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n\t\t\tif (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n\t\t\tsuper(shapes, parameters);\n\t\t\tthis.type = 'TextGeometry';\n\t\t}\n\n\t}\n\n\tclass TorusGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TorusGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\ttubularSegments = Math.floor(tubularSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst center = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\tfor (let i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2; // vertex\n\n\t\t\t\t\tvertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n\t\t\t\t\tvertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n\t\t\t\t\tvertex.z = tube * Math.sin(v);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tcenter.x = radius * Math.cos(u);\n\t\t\t\t\tcenter.y = radius * Math.sin(u);\n\t\t\t\t\tnormal.subVectors(vertex, center).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let j = 1; j <= radialSegments; j++) {\n\t\t\t\tfor (let i = 1; i <= tubularSegments; i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tconst a = (tubularSegments + 1) * j + i - 1;\n\t\t\t\t\tconst b = (tubularSegments + 1) * (j - 1) + i - 1;\n\t\t\t\t\tconst c = (tubularSegments + 1) * (j - 1) + i;\n\t\t\t\t\tconst d = (tubularSegments + 1) * j + i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass TorusKnotGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TorusKnotGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\t\ttubularSegments = Math.floor(tubularSegments);\n\t\t\tradialSegments = Math.floor(radialSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\t\t\tconst P1 = new Vector3();\n\t\t\tconst P2 = new Vector3();\n\t\t\tconst B = new Vector3();\n\t\t\tconst T = new Vector3();\n\t\t\tconst N = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (let i = 0; i <= tubularSegments; ++i) {\n\t\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\t\t\tconst u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\t\tcalculatePositionOnCurve(u, p, q, radius, P1);\n\t\t\t\tcalculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n\t\t\t\tT.subVectors(P2, P1);\n\t\t\t\tN.addVectors(P2, P1);\n\t\t\t\tB.crossVectors(T, N);\n\t\t\t\tN.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n\t\t\t\tB.normalize();\n\t\t\t\tN.normalize();\n\n\t\t\t\tfor (let j = 0; j <= radialSegments; ++j) {\n\t\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tconst cx = -tube * Math.cos(v);\n\t\t\t\t\tconst cy = tube * Math.sin(v); // now calculate the final vertex position.\n\t\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\t\tvertex.x = P1.x + (cx * N.x + cy * B.x);\n\t\t\t\t\tvertex.y = P1.y + (cx * N.y + cy * B.y);\n\t\t\t\t\tvertex.z = P1.z + (cx * N.z + cy * B.z);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\t\tnormal.subVectors(vertex, P1).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let j = 1; j <= tubularSegments; j++) {\n\t\t\t\tfor (let i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tconst a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\tconst b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\tconst c = (radialSegments + 1) * j + i;\n\t\t\t\t\tconst d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve\n\n\t\t\tfunction calculatePositionOnCurve(u, p, q, radius, position) {\n\t\t\t\tconst cu = Math.cos(u);\n\t\t\t\tconst su = Math.sin(u);\n\t\t\t\tconst quOverP = q / p * u;\n\t\t\t\tconst cs = Math.cos(quOverP);\n\t\t\t\tposition.x = radius * (2 + cs) * 0.5 * cu;\n\t\t\t\tposition.y = radius * (2 + cs) * su * 0.5;\n\t\t\t\tposition.z = radius * Math.sin(quOverP) * 0.5;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass TubeGeometry extends BufferGeometry {\n\t\tconstructor(path, tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TubeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\t\tconst frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\n\n\t\t\tthis.tangents = frames.tangents;\n\t\t\tthis.normals = frames.normals;\n\t\t\tthis.binormals = frames.binormals; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\t\t\tconst uv = new Vector2();\n\t\t\tlet P = new Vector3(); // buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\t\t\tconst indices = []; // create buffer data\n\n\t\t\tgenerateBufferData(); // build geometry\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\n\n\t\t\tfunction generateBufferData() {\n\t\t\t\tfor (let i = 0; i < tubularSegments; i++) {\n\t\t\t\t\tgenerateSegment(i);\n\t\t\t\t} // if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t\t// at the regular position on the given path\n\t\t\t\t//\n\t\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\n\t\t\t\tgenerateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\n\t\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\t\tgenerateUVs(); // finally create faces\n\n\t\t\t\tgenerateIndices();\n\t\t\t}\n\n\t\t\tfunction generateSegment(i) {\n\t\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\t\t\t\tP = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\n\n\t\t\t\tconst N = frames.normals[i];\n\t\t\t\tconst B = frames.binormals[i]; // generate normals and vertices for the current segment\n\n\t\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tconst sin = Math.sin(v);\n\t\t\t\t\tconst cos = -Math.cos(v); // normal\n\n\t\t\t\t\tnormal.x = cos * N.x + sin * B.x;\n\t\t\t\t\tnormal.y = cos * N.y + sin * B.y;\n\t\t\t\t\tnormal.z = cos * N.z + sin * B.z;\n\t\t\t\t\tnormal.normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // vertex\n\n\t\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\t\tvertex.z = P.z + radius * normal.z;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateIndices() {\n\t\t\t\tfor (let j = 1; j <= tubularSegments; j++) {\n\t\t\t\t\tfor (let i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t\tconst a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\t\tconst b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\t\tconst c = (radialSegments + 1) * j + i;\n\t\t\t\t\t\tconst d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tfor (let i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.path = this.parameters.path.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tclass WireframeGeometry extends BufferGeometry {\n\t\tconstructor(geometry) {\n\t\t\tsuper();\n\t\t\tthis.type = 'WireframeGeometry';\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn;\n\t\t\t} // buffer\n\n\n\t\t\tconst vertices = []; // helper variables\n\n\t\t\tconst edge = [0, 0],\n\t\t\t\t\t\tedges = {};\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\t// indexed BufferGeometry\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif (groups.length === 0) {\n\t\t\t\t\tgroups = [{\n\t\t\t\t\t\tstart: 0,\n\t\t\t\t\t\tcount: indices.count,\n\t\t\t\t\t\tmaterialIndex: 0\n\t\t\t\t\t}];\n\t\t\t\t} // create a data structure that contains all eges without duplicates\n\n\n\t\t\t\tfor (let o = 0, ol = groups.length; o < ol; ++o) {\n\t\t\t\t\tconst group = groups[o];\n\t\t\t\t\tconst start = group.start;\n\t\t\t\t\tconst count = group.count;\n\n\t\t\t\t\tfor (let i = start, l = start + count; i < l; i += 3) {\n\t\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\t\tconst edge1 = indices.getX(i + j);\n\t\t\t\t\t\t\tconst edge2 = indices.getX(i + (j + 1) % 3);\n\t\t\t\t\t\t\tedge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\n\n\t\t\t\t\t\t\tedge[1] = Math.max(edge1, edge2);\n\t\t\t\t\t\t\tconst key = edge[0] + ',' + edge[1];\n\n\t\t\t\t\t\t\tif (edges[key] === undefined) {\n\t\t\t\t\t\t\t\tedges[key] = {\n\t\t\t\t\t\t\t\t\tindex1: edge[0],\n\t\t\t\t\t\t\t\t\tindex2: edge[1]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // generate vertices\n\n\n\t\t\t\tfor (const key in edges) {\n\t\t\t\t\tconst e = edges[key];\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index1);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index2);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// non-indexed BufferGeometry\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor (let i = 0, l = position.count / 3; i < l; i++) {\n\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute(position, index1);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t\tconst index2 = 3 * i + (j + 1) % 3;\n\t\t\t\t\t\tvertex.fromBufferAttribute(position, index2);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t}\n\n\t}\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeGeometry,\n\t\tWireframeGeometry: WireframeGeometry\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <THREE.Color>\n\t * }\n\t */\n\n\tclass ShadowMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShadowMaterial';\n\t\t\tthis.color = new Color(0x000000);\n\t\t\tthis.transparent = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tclass RawShaderMaterial extends ShaderMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper(parameters);\n\t\t\tthis.type = 'RawShaderMaterial';\n\t\t}\n\n\t}\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\troughness: <float>,\n\t *\tmetalness: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\troughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmetalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tenvMapIntensity: <float>\n\t *\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshStandardMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshStandardMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.roughness = 1.0;\n\t\t\tthis.metalness = 0.0;\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.roughnessMap = null;\n\t\t\tthis.metalnessMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.envMapIntensity = 1.0;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.vertexTangents = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': ''\n\t\t\t};\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.roughness = source.roughness;\n\t\t\tthis.metalness = source.metalness;\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.roughnessMap = source.roughnessMap;\n\t\t\tthis.metalnessMap = source.metalnessMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.envMapIntensity = source.envMapIntensity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexTangents = source.vertexTangents;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tclearcoat: <float>,\n\t *\tclearcoatMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatRoughness: <float>,\n\t *\tclearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatNormalScale: <Vector2>,\n\t *\tclearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *\treflectivity: <float>,\n\t *\tior: <float>,\n\t *\n\t *\tsheen: <Color>,\n\t *\n\t *\ttransmission: <float>,\n\t *\ttransmissionMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tthickness: <float>,\n\t *\tthicknessMap: new THREE.Texture( <Image> ),\n\t *\tattenuationDistance: <float>,\n\t *\tattenuationColor: <Color>\n\t * }\n\t */\n\n\tclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': '',\n\t\t\t\t'PHYSICAL': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshPhysicalMaterial';\n\t\t\tthis.clearcoat = 0.0;\n\t\t\tthis.clearcoatMap = null;\n\t\t\tthis.clearcoatRoughness = 0.0;\n\t\t\tthis.clearcoatRoughnessMap = null;\n\t\t\tthis.clearcoatNormalScale = new Vector2(1, 1);\n\t\t\tthis.clearcoatNormalMap = null;\n\t\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\t\tObject.defineProperty(this, 'ior', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);\n\t\t\t\t},\n\t\t\t\tset: function (ior) {\n\t\t\t\t\tthis.reflectivity = clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\t\tthis.transmission = 0.0;\n\t\t\tthis.transmissionMap = null;\n\t\t\tthis.thickness = 0.01;\n\t\t\tthis.thicknessMap = null;\n\t\t\tthis.attenuationDistance = 0.0;\n\t\t\tthis.attenuationColor = new Color(1, 1, 1);\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': '',\n\t\t\t\t'PHYSICAL': ''\n\t\t\t};\n\t\t\tthis.clearcoat = source.clearcoat;\n\t\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\t\tthis.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n\t\t\tthis.reflectivity = source.reflectivity;\n\n\t\t\tif (source.sheen) {\n\t\t\t\tthis.sheen = (this.sheen || new Color()).copy(source.sheen);\n\t\t\t} else {\n\t\t\t\tthis.sheen = null;\n\t\t\t}\n\n\t\t\tthis.transmission = source.transmission;\n\t\t\tthis.transmissionMap = source.transmissionMap;\n\t\t\tthis.thickness = source.thickness;\n\t\t\tthis.thicknessMap = source.thicknessMap;\n\t\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\t\tthis.attenuationColor.copy(source.attenuationColor);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tspecular: <hex>,\n\t *\tshininess: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.MultiplyOperation,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshPhongMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshPhongMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.specular = new Color(0x111111);\n\t\t\tthis.shininess = 30;\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.specular.copy(source.specular);\n\t\t\tthis.shininess = source.shininess;\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\tgradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tclass MeshToonMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'TOON': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshToonMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.gradientMap = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.gradientMap = source.gradientMap;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\topacity: <float>,\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshNormalMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshNormalMaterial';\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tclass MeshLambertMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshLambertMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmatcap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshMatcapMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshMatcapMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.matcap = null;\n\t\t\tthis.map = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.matcap = source.matcap;\n\t\t\tthis.map = source.map;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\n\t *\tscale: <float>,\n\t *\tdashSize: <float>,\n\t *\tgapSize: <float>\n\t * }\n\t */\n\n\tclass LineDashedMaterial extends LineBasicMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineDashedMaterial';\n\t\t\tthis.scale = 1;\n\t\t\tthis.dashSize = 3;\n\t\t\tthis.gapSize = 1;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.scale = source.scale;\n\t\t\tthis.dashSize = source.dashSize;\n\t\t\tthis.gapSize = source.gapSize;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\tconst AnimationUtils = {\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function (array, from, to) {\n\t\t\tif (AnimationUtils.isTypedArray(array)) {\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\n\t\t\t}\n\n\t\t\treturn array.slice(from, to);\n\t\t},\n\t\t// converts an array to a specific type\n\t\tconvertArray: function (array, type, forceClone) {\n\t\t\tif (!array || // let 'undefined' and 'null' pass\n\t\t\t!forceClone && array.constructor === type) return array;\n\n\t\t\tif (typeof type.BYTES_PER_ELEMENT === 'number') {\n\t\t\t\treturn new type(array); // create typed array\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call(array); // create Array\n\t\t},\n\t\tisTypedArray: function (object) {\n\t\t\treturn ArrayBuffer.isView(object) && !(object instanceof DataView);\n\t\t},\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function (times) {\n\t\t\tfunction compareTime(i, j) {\n\t\t\t\treturn times[i] - times[j];\n\t\t\t}\n\n\t\t\tconst n = times.length;\n\t\t\tconst result = new Array(n);\n\n\t\t\tfor (let i = 0; i !== n; ++i) result[i] = i;\n\n\t\t\tresult.sort(compareTime);\n\t\t\treturn result;\n\t\t},\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function (values, stride, order) {\n\t\t\tconst nValues = values.length;\n\t\t\tconst result = new values.constructor(nValues);\n\n\t\t\tfor (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n\t\t\t\tconst srcOffset = order[i] * stride;\n\n\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\tresult[dstOffset++] = values[srcOffset + j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function (jsonKeys, times, values, valuePropertyName) {\n\t\t\tlet i = 1,\n\t\t\t\t\tkey = jsonKeys[0];\n\n\t\t\twhile (key !== undefined && key[valuePropertyName] === undefined) {\n\t\t\t\tkey = jsonKeys[i++];\n\t\t\t}\n\n\t\t\tif (key === undefined) return; // no data\n\n\t\t\tlet value = key[valuePropertyName];\n\t\t\tif (value === undefined) return; // no data\n\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push.apply(values, value); // push all elements\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else if (value.toArray !== undefined) {\n\t\t\t\t// ...assume THREE.Math-ish\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalue.toArray(values, values.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t}\n\t\t},\n\t\tsubclip: function (sourceClip, name, startFrame, endFrame, fps = 30) {\n\t\t\tconst clip = sourceClip.clone();\n\t\t\tclip.name = name;\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tconst track = clip.tracks[i];\n\t\t\t\tconst valueSize = track.getValueSize();\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (let j = 0; j < track.times.length; ++j) {\n\t\t\t\t\tconst frame = track.times[j] * fps;\n\t\t\t\t\tif (frame < startFrame || frame >= endFrame) continue;\n\t\t\t\t\ttimes.push(track.times[j]);\n\n\t\t\t\t\tfor (let k = 0; k < valueSize; ++k) {\n\t\t\t\t\t\tvalues.push(track.values[j * valueSize + k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (times.length === 0) continue;\n\t\t\t\ttrack.times = AnimationUtils.convertArray(times, track.times.constructor);\n\t\t\t\ttrack.values = AnimationUtils.convertArray(values, track.values.constructor);\n\t\t\t\ttracks.push(track);\n\t\t\t}\n\n\t\t\tclip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tlet minStartTime = Infinity;\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tif (minStartTime > clip.tracks[i].times[0]) {\n\t\t\t\t\tminStartTime = clip.tracks[i].times[0];\n\t\t\t\t}\n\t\t\t} // shift all tracks such that clip begins at t=0\n\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tclip.tracks[i].shift(-1 * minStartTime);\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\t\t\treturn clip;\n\t\t},\n\t\tmakeClipAdditive: function (targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {\n\t\t\tif (fps <= 0) fps = 30;\n\t\t\tconst numTracks = referenceClip.tracks.length;\n\t\t\tconst referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame\n\n\t\t\tfor (let i = 0; i < numTracks; ++i) {\n\t\t\t\tconst referenceTrack = referenceClip.tracks[i];\n\t\t\t\tconst referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric\n\n\t\t\t\tif (referenceTrackType === 'bool' || referenceTrackType === 'string') continue; // Find the track in the target clip whose name and type matches the reference track\n\n\t\t\t\tconst targetTrack = targetClip.tracks.find(function (track) {\n\t\t\t\t\treturn track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n\t\t\t\t});\n\t\t\t\tif (targetTrack === undefined) continue;\n\t\t\t\tlet referenceOffset = 0;\n\t\t\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\t\tif (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\treferenceOffset = referenceValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tlet targetOffset = 0;\n\t\t\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\t\t\tif (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\ttargetOffset = targetValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tlet referenceValue; // Find the value to subtract out of the track\n\n\t\t\t\tif (referenceTime <= referenceTrack.times[0]) {\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else if (referenceTime >= referenceTrack.times[lastIndex]) {\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else {\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\tinterpolant.evaluate(referenceTime);\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);\n\t\t\t\t} // Conjugate the quaternion\n\n\n\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\tconst referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray(referenceValue);\n\t\t\t\t} // Subtract the reference value from all of the track values\n\n\n\t\t\t\tconst numTimes = targetTrack.times.length;\n\n\t\t\t\tfor (let j = 0; j < numTimes; ++j) {\n\t\t\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types\n\n\t\t\t\t\t\tfor (let k = 0; k < valueEnd; ++k) {\n\t\t\t\t\t\t\ttargetTrack.values[valueStart + k] -= referenceValue[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\t\t\treturn targetClip;\n\t\t}\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t */\n\tclass Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tthis.parameterPositions = parameterPositions;\n\t\t\tthis._cachedIndex = 0;\n\t\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n\t\t\tthis.sampleValues = sampleValues;\n\t\t\tthis.valueSize = sampleSize;\n\t\t\tthis.settings = null;\n\t\t\tthis.DefaultSettings_ = {};\n\t\t}\n\n\t\tevaluate(t) {\n\t\t\tconst pp = this.parameterPositions;\n\t\t\tlet i1 = this._cachedIndex,\n\t\t\t\t\tt1 = pp[i1],\n\t\t\t\t\tt0 = pp[i1 - 1];\n\n\t\t\tvalidate_interval: {\n\t\t\t\tseek: {\n\t\t\t\t\tlet right;\n\n\t\t\t\t\tlinear_scan: {\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if (!(t < t1)) {\n\t\t\t\t\t\t\tfor (let giveUpAt = i1 + 2;;) {\n\t\t\t\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\t\t\t\tif (t < t0) break forward_scan; // after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t, t0);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[++i1];\n\n\t\t\t\t\t\t\t\tif (t < t1) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the right side of the index\n\n\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} //- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n\t\t\t\t\t\tif (!(t >= t0)) {\n\t\t\t\t\t\t\t// looping?\n\t\t\t\t\t\t\tconst t1global = pp[1];\n\n\t\t\t\t\t\t\tif (t < t1global) {\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\n\t\t\t\t\t\t\t\tt0 = t1global;\n\t\t\t\t\t\t\t} // linear reverse scan\n\n\n\t\t\t\t\t\t\tfor (let giveUpAt = i1 - 2;;) {\n\t\t\t\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\t\t\t\t// before start\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[--i1 - 1];\n\n\t\t\t\t\t\t\t\tif (t >= t0) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the left side of the index\n\n\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} // the interval is valid\n\n\n\t\t\t\t\t\tbreak validate_interval;\n\t\t\t\t\t} // linear scan\n\t\t\t\t\t// binary search\n\n\n\t\t\t\t\twhile (i1 < right) {\n\t\t\t\t\t\tconst mid = i1 + right >>> 1;\n\n\t\t\t\t\t\tif (t < pp[mid]) {\n\t\t\t\t\t\t\tright = mid;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti1 = mid + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[i1];\n\t\t\t\t\tt0 = pp[i1 - 1]; // check boundary cases, again\n\n\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t0, t);\n\t\t\t\t\t}\n\t\t\t\t} // seek\n\n\n\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\tthis.intervalChanged_(i1, t0, t1);\n\t\t\t} // validate_interval\n\n\n\t\t\treturn this.interpolate_(i1, t0, t, t1);\n\t\t}\n\n\t\tgetSettings_() {\n\t\t\treturn this.settings || this.DefaultSettings_;\n\t\t}\n\n\t\tcopySampleValue_(index) {\n\t\t\t// copies a sample value to the result buffer\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = index * stride;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} // Template methods for derived classes:\n\n\n\t\tinterpolate_()\n\t\t/* i1, t0, t, t1 */\n\t\t{\n\t\t\tthrow new Error('call to abstract method'); // implementations shall return this.resultBuffer\n\t\t}\n\n\t\tintervalChanged_()\n\t\t/* i1, t0, t1 */\n\t\t{// empty\n\t\t}\n\n\t} // ALIAS DEFINITIONS\n\n\n\tInterpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;\n\tInterpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t */\n\n\tclass CubicInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t\tthis._weightPrev = -0;\n\t\t\tthis._offsetPrev = -0;\n\t\t\tthis._weightNext = -0;\n\t\t\tthis._offsetNext = -0;\n\t\t\tthis.DefaultSettings_ = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\t\t}\n\n\t\tintervalChanged_(i1, t0, t1) {\n\t\t\tconst pp = this.parameterPositions;\n\t\t\tlet iPrev = i1 - 2,\n\t\t\t\t\tiNext = i1 + 1,\n\t\t\t\t\ttPrev = pp[iPrev],\n\t\t\t\t\ttNext = pp[iNext];\n\n\t\t\tif (tPrev === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingStart) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tNext === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingEnd) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[1] - pp[0];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst halfDt = (t1 - t0) * 0.5,\n\t\t\t\t\t\tstride = this.valueSize;\n\t\t\tthis._weightPrev = halfDt / (t0 - tPrev);\n\t\t\tthis._weightNext = halfDt / (tNext - t1);\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\to1 = i1 * stride,\n\t\t\t\t\t\to0 = o1 - stride,\n\t\t\t\t\t\toP = this._offsetPrev,\n\t\t\t\t\t\toN = this._offsetNext,\n\t\t\t\t\t\twP = this._weightPrev,\n\t\t\t\t\t\twN = this._weightNext,\n\t\t\t\t\t\tp = (t - t0) / (t1 - t0),\n\t\t\t\t\t\tpp = p * p,\n\t\t\t\t\t\tppp = pp * p; // evaluate polynomials\n\n\t\t\tconst sP = -wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tconst s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n\t\t\tconst s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n\t\t\tconst sN = wN * ppp - wN * pp; // combine data linearly\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\tclass LinearInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset1 = i1 * stride,\n\t\t\t\t\t\toffset0 = offset1 - stride,\n\t\t\t\t\t\tweight1 = (t - t0) / (t1 - t0),\n\t\t\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t */\n\n\tclass DiscreteInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1\n\t\t/*, t0, t, t1 */\n\t\t) {\n\t\t\treturn this.copySampleValue_(i1 - 1);\n\t\t}\n\n\t}\n\n\tclass KeyframeTrack {\n\t\tconstructor(name, times, values, interpolation) {\n\t\t\tif (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n\t\t\tif (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n\t\t\tthis.name = name;\n\t\t\tthis.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n\t\t\tthis.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n\t\t\tthis.setInterpolation(interpolation || this.DefaultInterpolation);\n\t\t} // Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\n\t\tstatic toJSON(track) {\n\t\t\tconst trackType = track.constructor;\n\t\t\tlet json; // derived classes can define a static toJSON method\n\n\t\t\tif (trackType.toJSON !== this.toJSON) {\n\t\t\t\tjson = trackType.toJSON(track);\n\t\t\t} else {\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray(track.times, Array),\n\t\t\t\t\t'values': AnimationUtils.convertArray(track.values, Array)\n\t\t\t\t};\n\t\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\t\tif (interpolation !== track.DefaultInterpolation) {\n\t\t\t\t\tjson.interpolation = interpolation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\t\t}\n\n\t\tInterpolantFactoryMethodDiscrete(result) {\n\t\t\treturn new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tInterpolantFactoryMethodLinear(result) {\n\t\t\treturn new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tInterpolantFactoryMethodSmooth(result) {\n\t\t\treturn new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tsetInterpolation(interpolation) {\n\t\t\tlet factoryMethod;\n\n\t\t\tswitch (interpolation) {\n\t\t\t\tcase InterpolateDiscrete:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (factoryMethod === undefined) {\n\t\t\t\tconst message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\t\tif (this.createInterpolant === undefined) {\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif (interpolation !== this.DefaultInterpolation) {\n\t\t\t\t\t\tthis.setInterpolation(this.DefaultInterpolation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(message); // fatal, in this case\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconsole.warn('THREE.KeyframeTrack:', message);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetInterpolation() {\n\t\t\tswitch (this.createInterpolant) {\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\t\t\t\treturn InterpolateSmooth;\n\t\t\t}\n\t\t}\n\n\t\tgetValueSize() {\n\t\t\treturn this.values.length / this.times.length;\n\t\t} // move all keyframes either forwards or backwards in time\n\n\n\t\tshift(timeOffset) {\n\t\t\tif (timeOffset !== 0.0) {\n\t\t\t\tconst times = this.times;\n\n\t\t\t\tfor (let i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] += timeOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\n\n\t\tscale(timeScale) {\n\t\t\tif (timeScale !== 1.0) {\n\t\t\t\tconst times = this.times;\n\n\t\t\t\tfor (let i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] *= timeScale;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\n\n\t\ttrim(startTime, endTime) {\n\t\t\tconst times = this.times,\n\t\t\t\t\t\tnKeys = times.length;\n\t\t\tlet from = 0,\n\t\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile (from !== nKeys && times[from] < startTime) {\n\t\t\t\t++from;\n\t\t\t}\n\n\t\t\twhile (to !== -1 && times[to] > endTime) {\n\t\t\t\t--to;\n\t\t\t}\n\n\t\t\t++to; // inclusive -> exclusive bound\n\n\t\t\tif (from !== 0 || to !== nKeys) {\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif (from >= to) {\n\t\t\t\t\tto = Math.max(to, 1);\n\t\t\t\t\tfrom = to - 1;\n\t\t\t\t}\n\n\t\t\t\tconst stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, from, to);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\n\n\t\tvalidate() {\n\t\t\tlet valid = true;\n\t\t\tconst valueSize = this.getValueSize();\n\n\t\t\tif (valueSize - Math.floor(valueSize) !== 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tconst times = this.times,\n\t\t\t\t\t\tvalues = this.values,\n\t\t\t\t\t\tnKeys = times.length;\n\n\t\t\tif (nKeys === 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Track is empty.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tlet prevTime = null;\n\n\t\t\tfor (let i = 0; i !== nKeys; i++) {\n\t\t\t\tconst currTime = times[i];\n\n\t\t\t\tif (typeof currTime === 'number' && isNaN(currTime)) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (prevTime !== null && prevTime > currTime) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\t\t\t}\n\n\t\t\tif (values !== undefined) {\n\t\t\t\tif (AnimationUtils.isTypedArray(values)) {\n\t\t\t\t\tfor (let i = 0, n = values.length; i !== n; ++i) {\n\t\t\t\t\t\tconst value = values[i];\n\n\t\t\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t} // removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\n\n\t\toptimize() {\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tconst times = AnimationUtils.arraySlice(this.times),\n\t\t\t\t\t\tvalues = AnimationUtils.arraySlice(this.values),\n\t\t\t\t\t\tstride = this.getValueSize(),\n\t\t\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\t\t\t\t\tlastIndex = times.length - 1;\n\t\t\tlet writeIndex = 1;\n\n\t\t\tfor (let i = 1; i < lastIndex; ++i) {\n\t\t\t\tlet keep = false;\n\t\t\t\tconst time = times[i];\n\t\t\t\tconst timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif (time !== timeNext && (i !== 1 || time !== times[0])) {\n\t\t\t\t\tif (!smoothInterpolation) {\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tconst value = values[offset + j];\n\n\t\t\t\t\t\t\tif (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t}\n\t\t\t\t} // in-place compaction\n\n\n\t\t\t\tif (keep) {\n\t\t\t\t\tif (i !== writeIndex) {\n\t\t\t\t\t\ttimes[writeIndex] = times[i];\n\t\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tvalues[writeOffset + j] = values[readOffset + j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t++writeIndex;\n\t\t\t\t}\n\t\t\t} // flush last keyframe (compaction looks ahead)\n\n\n\t\t\tif (lastIndex > 0) {\n\t\t\t\ttimes[writeIndex] = times[lastIndex];\n\n\t\t\t\tfor (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {\n\t\t\t\t\tvalues[writeOffset + j] = values[readOffset + j];\n\t\t\t\t}\n\n\t\t\t\t++writeIndex;\n\t\t\t}\n\n\t\t\tif (writeIndex !== times.length) {\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n\t\t\t} else {\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\tconst times = AnimationUtils.arraySlice(this.times, 0);\n\t\t\tconst values = AnimationUtils.arraySlice(this.values, 0);\n\t\t\tconst TypedKeyframeTrack = this.constructor;\n\t\t\tconst track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.\n\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\t\t\treturn track;\n\t\t}\n\n\t}\n\n\tKeyframeTrack.prototype.TimeBufferType = Float32Array;\n\tKeyframeTrack.prototype.ValueBufferType = Float32Array;\n\tKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n\t/**\n\t * A Track of Boolean keyframe values.\n\t */\n\n\tclass BooleanKeyframeTrack extends KeyframeTrack {}\n\n\tBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n\tBooleanKeyframeTrack.prototype.ValueBufferType = Array;\n\tBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined; // Note: Actually this track could have a optimized / compressed\n\n\t/**\n\t * A Track of keyframe values that represent color.\n\t */\n\n\tclass ColorKeyframeTrack extends KeyframeTrack {}\n\n\tColorKeyframeTrack.prototype.ValueTypeName = 'color'; // ValueBufferType is inherited\n\n\t/**\n\t * A Track of numeric keyframe values.\n\t */\n\n\tclass NumberKeyframeTrack extends KeyframeTrack {}\n\n\tNumberKeyframeTrack.prototype.ValueTypeName = 'number'; // ValueBufferType is inherited\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t */\n\n\tclass QuaternionLinearInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\talpha = (t - t0) / (t1 - t0);\n\t\t\tlet offset = i1 * stride;\n\n\t\t\tfor (let end = offset + stride; offset !== end; offset += 4) {\n\t\t\t\tQuaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\t/**\n\t * A Track of quaternion keyframe values.\n\t */\n\n\tclass QuaternionKeyframeTrack extends KeyframeTrack {\n\t\tInterpolantFactoryMethodLinear(result) {\n\t\t\treturn new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited\n\n\tQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\tQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track that interpolates Strings\n\t */\n\n\tclass StringKeyframeTrack extends KeyframeTrack {}\n\n\tStringKeyframeTrack.prototype.ValueTypeName = 'string';\n\tStringKeyframeTrack.prototype.ValueBufferType = Array;\n\tStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track of vectored keyframe values.\n\t */\n\n\tclass VectorKeyframeTrack extends KeyframeTrack {}\n\n\tVectorKeyframeTrack.prototype.ValueTypeName = 'vector'; // ValueBufferType is inherited\n\n\tclass AnimationClip {\n\t\tconstructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {\n\t\t\tthis.name = name;\n\t\t\tthis.tracks = tracks;\n\t\t\tthis.duration = duration;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tthis.uuid = generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n\t\t\tif (this.duration < 0) {\n\t\t\t\tthis.resetDuration();\n\t\t\t}\n\t\t}\n\n\t\tstatic parse(json) {\n\t\t\tconst tracks = [],\n\t\t\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\t\t\tframeTime = 1.0 / (json.fps || 1.0);\n\n\t\t\tfor (let i = 0, n = jsonTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n\t\t\t}\n\n\t\t\tconst clip = new this(json.name, json.duration, tracks, json.blendMode);\n\t\t\tclip.uuid = json.uuid;\n\t\t\treturn clip;\n\t\t}\n\n\t\tstatic toJSON(clip) {\n\t\t\tconst tracks = [],\n\t\t\t\t\t\tclipTracks = clip.tracks;\n\t\t\tconst json = {\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\t\t\t};\n\n\t\t\tfor (let i = 0, n = clipTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n\t\t\t}\n\n\t\t\treturn json;\n\t\t}\n\n\t\tstatic CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n\t\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < numMorphTargets; i++) {\n\t\t\t\tlet times = [];\n\t\t\t\tlet values = [];\n\t\t\t\ttimes.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n\t\t\t\tvalues.push(0, 1, 0);\n\t\t\t\tconst order = AnimationUtils.getKeyframeOrder(times);\n\t\t\t\ttimes = AnimationUtils.sortedArray(times, 1, order);\n\t\t\t\tvalues = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\n\t\t\t\tif (!noLoop && times[0] === 0) {\n\t\t\t\t\ttimes.push(numMorphTargets);\n\t\t\t\t\tvalues.push(values[0]);\n\t\t\t\t}\n\n\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n\t\t\t}\n\n\t\t\treturn new this(name, -1, tracks);\n\t\t}\n\n\t\tstatic findByName(objectOrClipArray, name) {\n\t\t\tlet clipArray = objectOrClipArray;\n\n\t\t\tif (!Array.isArray(objectOrClipArray)) {\n\t\t\t\tconst o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < clipArray.length; i++) {\n\t\t\t\tif (clipArray[i].name === name) {\n\t\t\t\t\treturn clipArray[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tstatic CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n\t\t\tconst animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n\t\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\n\t\t\tfor (let i = 0, il = morphTargets.length; i < il; i++) {\n\t\t\t\tconst morphTarget = morphTargets[i];\n\t\t\t\tconst parts = morphTarget.name.match(pattern);\n\n\t\t\t\tif (parts && parts.length > 1) {\n\t\t\t\t\tconst name = parts[1];\n\t\t\t\t\tlet animationMorphTargets = animationToMorphTargets[name];\n\n\t\t\t\t\tif (!animationMorphTargets) {\n\t\t\t\t\t\tanimationToMorphTargets[name] = animationMorphTargets = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push(morphTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst clips = [];\n\n\t\t\tfor (const name in animationToMorphTargets) {\n\t\t\t\tclips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));\n\t\t\t}\n\n\t\t\treturn clips;\n\t\t} // parse the animation.hierarchy format\n\n\n\t\tstatic parseAnimation(animation, bones) {\n\t\t\tif (!animation) {\n\t\t\t\tconsole.error('THREE.AnimationClip: No animation in JSONLoader data.');\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif (animationKeys.length !== 0) {\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\t\t\t\t\tAnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n\t\t\t\t\tif (times.length !== 0) {\n\t\t\t\t\t\tdestTracks.push(new trackType(trackName, times, values));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst tracks = [];\n\t\t\tconst clipName = animation.name || 'default';\n\t\t\tconst fps = animation.fps || 30;\n\t\t\tconst blendMode = animation.blendMode; // automatic length determination in AnimationClip.\n\n\t\t\tlet duration = animation.length || -1;\n\t\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor (let h = 0; h < hierarchyTracks.length; h++) {\n\t\t\t\tconst animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n\t\t\t\tif (!animationKeys || animationKeys.length === 0) continue; // process morph targets\n\n\t\t\t\tif (animationKeys[0].morphTargets) {\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tconst morphTargetNames = {};\n\t\t\t\t\tlet k;\n\n\t\t\t\t\tfor (k = 0; k < animationKeys.length; k++) {\n\t\t\t\t\t\tif (animationKeys[k].morphTargets) {\n\t\t\t\t\t\t\tfor (let m = 0; m < animationKeys[k].morphTargets.length; m++) {\n\t\t\t\t\t\t\t\tmorphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} // create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\n\n\t\t\t\t\tfor (const morphTargetName in morphTargetNames) {\n\t\t\t\t\t\tconst times = [];\n\t\t\t\t\t\tconst values = [];\n\n\t\t\t\t\t\tfor (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {\n\t\t\t\t\t\t\tconst animationKey = animationKeys[k];\n\t\t\t\t\t\t\ttimes.push(animationKey.time);\n\t\t\t\t\t\t\tvalues.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * (fps || 1.0);\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\t\t\t\t\tconst boneName = '.bones[' + bones[h].name + ']';\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n\t\t\t\t\taddNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tracks.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst clip = new this(clipName, duration, tracks, blendMode);\n\t\t\treturn clip;\n\t\t}\n\n\t\tresetDuration() {\n\t\t\tconst tracks = this.tracks;\n\t\t\tlet duration = 0;\n\n\t\t\tfor (let i = 0, n = tracks.length; i !== n; ++i) {\n\t\t\t\tconst track = this.tracks[i];\n\t\t\t\tduration = Math.max(duration, track.times[track.times.length - 1]);\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\t\t\treturn this;\n\t\t}\n\n\t\ttrim() {\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].trim(0, this.duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidate() {\n\t\t\tlet valid = true;\n\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tvalid = valid && this.tracks[i].validate();\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t}\n\n\t\toptimize() {\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].optimize();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\ttracks.push(this.tracks[i].clone());\n\t\t\t}\n\n\t\t\treturn new this.constructor(this.name, this.duration, tracks, this.blendMode);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn this.constructor.toJSON(this);\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName(typeName) {\n\t\tswitch (typeName.toLowerCase()) {\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\t\t\t\treturn StringKeyframeTrack;\n\t\t}\n\n\t\tthrow new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n\t}\n\n\tfunction parseKeyframeTrack(json) {\n\t\tif (json.type === undefined) {\n\t\t\tthrow new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n\t\t}\n\n\t\tconst trackType = getTrackTypeForValueTypeName(json.type);\n\n\t\tif (json.times === undefined) {\n\t\t\tconst times = [],\n\t\t\t\t\t\tvalues = [];\n\t\t\tAnimationUtils.flattenJSON(json.keys, times, values, 'value');\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\t\t} // derived classes can define a static parse method\n\n\n\t\tif (trackType.parse !== undefined) {\n\t\t\treturn trackType.parse(json);\n\t\t} else {\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType(json.name, json.times, json.values, json.interpolation);\n\t\t}\n\t}\n\n\tconst Cache = {\n\t\tenabled: false,\n\t\tfiles: {},\n\t\tadd: function (key, file) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[key] = file;\n\t\t},\n\t\tget: function (key) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[key];\n\t\t},\n\t\tremove: function (key) {\n\t\t\tdelete this.files[key];\n\t\t},\n\t\tclear: function () {\n\t\t\tthis.files = {};\n\t\t}\n\t};\n\n\tclass LoadingManager {\n\t\tconstructor(onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tlet isLoading = false;\n\t\t\tlet itemsLoaded = 0;\n\t\t\tlet itemsTotal = 0;\n\t\t\tlet urlModifier = undefined;\n\t\t\tconst handlers = []; // Refer to #5689 for the reason why we don't set .onStart\n\t\t\t// in the constructor\n\n\t\t\tthis.onStart = undefined;\n\t\t\tthis.onLoad = onLoad;\n\t\t\tthis.onProgress = onProgress;\n\t\t\tthis.onError = onError;\n\n\t\t\tthis.itemStart = function (url) {\n\t\t\t\titemsTotal++;\n\n\t\t\t\tif (isLoading === false) {\n\t\t\t\t\tif (scope.onStart !== undefined) {\n\t\t\t\t\t\tscope.onStart(url, itemsLoaded, itemsTotal);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tisLoading = true;\n\t\t\t};\n\n\t\t\tthis.itemEnd = function (url) {\n\t\t\t\titemsLoaded++;\n\n\t\t\t\tif (scope.onProgress !== undefined) {\n\t\t\t\t\tscope.onProgress(url, itemsLoaded, itemsTotal);\n\t\t\t\t}\n\n\t\t\t\tif (itemsLoaded === itemsTotal) {\n\t\t\t\t\tisLoading = false;\n\n\t\t\t\t\tif (scope.onLoad !== undefined) {\n\t\t\t\t\t\tscope.onLoad();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.itemError = function (url) {\n\t\t\t\tif (scope.onError !== undefined) {\n\t\t\t\t\tscope.onError(url);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.resolveURL = function (url) {\n\t\t\t\tif (urlModifier) {\n\t\t\t\t\treturn urlModifier(url);\n\t\t\t\t}\n\n\t\t\t\treturn url;\n\t\t\t};\n\n\t\t\tthis.setURLModifier = function (transform) {\n\t\t\t\turlModifier = transform;\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.addHandler = function (regex, loader) {\n\t\t\t\thandlers.push(regex, loader);\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.removeHandler = function (regex) {\n\t\t\t\tconst index = handlers.indexOf(regex);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\thandlers.splice(index, 2);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.getHandler = function (file) {\n\t\t\t\tfor (let i = 0, l = handlers.length; i < l; i += 2) {\n\t\t\t\t\tconst regex = handlers[i];\n\t\t\t\t\tconst loader = handlers[i + 1];\n\t\t\t\t\tif (regex.global) regex.lastIndex = 0; // see #17920\n\n\t\t\t\t\tif (regex.test(file)) {\n\t\t\t\t\t\treturn loader;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t};\n\t\t}\n\n\t}\n\n\tconst DefaultLoadingManager = new LoadingManager();\n\n\tclass Loader {\n\t\tconstructor(manager) {\n\t\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\t\t\tthis.crossOrigin = 'anonymous';\n\t\t\tthis.withCredentials = false;\n\t\t\tthis.path = '';\n\t\t\tthis.resourcePath = '';\n\t\t\tthis.requestHeader = {};\n\t\t}\n\n\t\tload()\n\t\t/* url, onLoad, onProgress, onError */\n\t\t{}\n\n\t\tloadAsync(url, onProgress) {\n\t\t\tconst scope = this;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tscope.load(url, resolve, onProgress, reject);\n\t\t\t});\n\t\t}\n\n\t\tparse()\n\t\t/* data */\n\t\t{}\n\n\t\tsetCrossOrigin(crossOrigin) {\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetWithCredentials(value) {\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetPath(path) {\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetResourcePath(resourcePath) {\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRequestHeader(requestHeader) {\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tconst loading = {};\n\n\tclass FileLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t} // Check if request is duplicate\n\n\n\t\t\tif (loading[url] !== undefined) {\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} // Check for data: URI\n\n\n\t\t\tconst dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tconst dataUriRegexResult = url.match(dataUriRegex);\n\t\t\tlet request; // Safari can not handle Data URIs through XMLHttpRequest so process manually\n\n\t\t\tif (dataUriRegexResult) {\n\t\t\t\tconst mimeType = dataUriRegexResult[1];\n\t\t\t\tconst isBase64 = !!dataUriRegexResult[2];\n\t\t\t\tlet data = dataUriRegexResult[3];\n\t\t\t\tdata = decodeURIComponent(data);\n\t\t\t\tif (isBase64) data = atob(data);\n\n\t\t\t\ttry {\n\t\t\t\t\tlet response;\n\t\t\t\t\tconst responseType = (this.responseType || '').toLowerCase();\n\n\t\t\t\t\tswitch (responseType) {\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\t\t\t\t\t\t\tconst view = new Uint8Array(data.length);\n\n\t\t\t\t\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\t\t\t\t\tview[i] = data.charCodeAt(i);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (responseType === 'blob') {\n\t\t\t\t\t\t\t\tresponse = new Blob([view.buffer], {\n\t\t\t\t\t\t\t\t\ttype: mimeType\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString(data, mimeType);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = JSON.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 'text' or other\n\t\t\t\t\t\t\tresponse = data;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onLoad) onLoad(response);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onError) onError(error);\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Initialise array for duplicate requests\n\t\t\t\tloading[url] = [];\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\trequest = new XMLHttpRequest();\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.addEventListener('load', function (event) {\n\t\t\t\t\tconst response = this.response;\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tif (this.status === 200 || this.status === 0) {\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\t\t\t\t\tif (this.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.'); // Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\n\t\t\t\t\t\tCache.add(url, response);\n\n\t\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\t\tif (callback.onLoad) callback.onLoad(response);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('progress', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onProgress) callback.onProgress(event);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('error', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('abort', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\tif (this.responseType !== undefined) request.responseType = this.responseType;\n\t\t\t\tif (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;\n\t\t\t\tif (request.overrideMimeType) request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');\n\n\t\t\t\tfor (const header in this.requestHeader) {\n\t\t\t\t\trequest.setRequestHeader(header, this.requestHeader[header]);\n\t\t\t\t}\n\n\t\t\t\trequest.send(null);\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\treturn request;\n\t\t}\n\n\t\tsetResponseType(value) {\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMimeType(value) {\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AnimationLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst animations = [];\n\n\t\t\tfor (let i = 0; i < json.length; i++) {\n\t\t\t\tconst clip = AnimationClip.parse(json[i]);\n\t\t\t\tanimations.push(clip);\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\n\t}\n\n\t/**\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tclass CompressedTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst images = [];\n\t\t\tconst texture = new CompressedTexture();\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tlet loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(url[i], function (buffer) {\n\t\t\t\t\tconst texDatas = scope.parse(buffer, true);\n\t\t\t\t\timages[i] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\tif (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\tif (Array.isArray(url)) {\n\t\t\t\tfor (let i = 0, il = url.length; i < il; ++i) {\n\t\t\t\t\tloadTexture(i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\t\t\t\tloader.load(url, function (buffer) {\n\t\t\t\t\tconst texDatas = scope.parse(buffer, true);\n\n\t\t\t\t\tif (texDatas.isCubemap) {\n\t\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor (let f = 0; f < faces; f++) {\n\t\t\t\t\t\t\timages[f] = {\n\t\t\t\t\t\t\t\tmipmaps: []\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tfor (let i = 0; i < texDatas.mipmapCount; i++) {\n\t\t\t\t\t\t\t\timages[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);\n\t\t\t\t\t\t\t\timages[f].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[f].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[f].height = texDatas.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (texDatas.mipmapCount === 1) {\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\tclass ImageLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tconst image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\n\n\t\t\tfunction onImageLoad() {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tCache.add(url, this);\n\t\t\t\tif (onLoad) onLoad(this);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\tfunction onImageError(event) {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tif (onError) onError(event);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\timage.addEventListener('load', onImageLoad, false);\n\t\t\timage.addEventListener('error', onImageError, false);\n\n\t\t\tif (url.substr(0, 5) !== 'data:') {\n\t\t\t\tif (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\timage.src = url;\n\t\t\treturn image;\n\t\t}\n\n\t}\n\n\tclass CubeTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(urls, onLoad, onProgress, onError) {\n\t\t\tconst texture = new CubeTexture();\n\t\t\tconst loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tlet loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(urls[i], function (image) {\n\t\t\t\t\ttexture.images[i] = image;\n\t\t\t\t\tloaded++;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, undefined, onError);\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < urls.length; ++i) {\n\t\t\t\tloadTexture(i);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\t/**\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tclass DataTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst texture = new DataTexture();\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\tconst texData = scope.parse(buffer);\n\t\t\t\tif (!texData) return;\n\n\t\t\t\tif (texData.image !== undefined) {\n\t\t\t\t\ttexture.image = texData.image;\n\t\t\t\t} else if (texData.data !== undefined) {\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif (texData.encoding !== undefined) {\n\t\t\t\t\ttexture.encoding = texData.encoding;\n\t\t\t\t}\n\n\t\t\t\tif (texData.flipY !== undefined) {\n\t\t\t\t\ttexture.flipY = texData.flipY;\n\t\t\t\t}\n\n\t\t\t\tif (texData.format !== undefined) {\n\t\t\t\t\ttexture.format = texData.format;\n\t\t\t\t}\n\n\t\t\t\tif (texData.type !== undefined) {\n\t\t\t\t\ttexture.type = texData.type;\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmaps !== undefined) {\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmapCount === 1) {\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t}\n\n\t\t\t\tif (texData.generateMipmaps !== undefined) {\n\t\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\tif (onLoad) onLoad(texture, texData);\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\tclass TextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst texture = new Texture();\n\t\t\tconst loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.load(url, function (image) {\n\t\t\t\ttexture.image = image; // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\n\t\t\t\tconst isJPEG = url.search(/\\.jpe?g($|\\?)/i) > 0 || url.search(/^data\\:image\\/jpeg/) === 0;\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif (onLoad !== undefined) {\n\t\t\t\t\tonLoad(texture);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\t/**\n\t * Extensible curve object.\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\tclass Curve {\n\t\tconstructor() {\n\t\t\tthis.type = 'Curve';\n\t\t\tthis.arcLengthDivisions = 200;\n\t\t} // Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\n\t\tgetPoint()\n\t\t/* t, optionalTarget */\n\t\t{\n\t\t\tconsole.warn('THREE.Curve: .getPoint() not implemented.');\n\t\t\treturn null;\n\t\t} // Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\tconst t = this.getUtoTmapping(u);\n\t\t\treturn this.getPoint(t, optionalTarget);\n\t\t} // Get sequence of points using getPoint( t )\n\n\n\t\tgetPoints(divisions = 5) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPoint(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t} // Get sequence of points using getPointAt( u )\n\n\n\t\tgetSpacedPoints(divisions = 5) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPointAt(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t} // Get total curve arc length\n\n\n\t\tgetLength() {\n\t\t\tconst lengths = this.getLengths();\n\t\t\treturn lengths[lengths.length - 1];\n\t\t} // Get list of cumulative segment lengths\n\n\n\t\tgetLengths(divisions = this.arcLengthDivisions) {\n\t\t\tif (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n\t\t\t\treturn this.cacheArcLengths;\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\t\t\tconst cache = [];\n\t\t\tlet current,\n\t\t\t\t\tlast = this.getPoint(0);\n\t\t\tlet sum = 0;\n\t\t\tcache.push(0);\n\n\t\t\tfor (let p = 1; p <= divisions; p++) {\n\t\t\t\tcurrent = this.getPoint(p / divisions);\n\t\t\t\tsum += current.distanceTo(last);\n\t\t\t\tcache.push(sum);\n\t\t\t\tlast = current;\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\t\t}\n\n\t\tupdateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\t\t} // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\n\t\tgetUtoTmapping(u, distance) {\n\t\t\tconst arcLengths = this.getLengths();\n\t\t\tlet i = 0;\n\t\t\tconst il = arcLengths.length;\n\t\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\t\tif (distance) {\n\t\t\t\ttargetArcLength = distance;\n\t\t\t} else {\n\t\t\t\ttargetArcLength = u * arcLengths[il - 1];\n\t\t\t} // binary search for the index with largest value smaller than target u distance\n\n\n\t\t\tlet low = 0,\n\t\t\t\t\thigh = il - 1,\n\t\t\t\t\tcomparison;\n\n\t\t\twhile (low <= high) {\n\t\t\t\ti = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[i] - targetArcLength;\n\n\t\t\t\tif (comparison < 0) {\n\t\t\t\t\tlow = i + 1;\n\t\t\t\t} else if (comparison > 0) {\n\t\t\t\t\thigh = i - 1;\n\t\t\t\t} else {\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif (arcLengths[i] === targetArcLength) {\n\t\t\t\treturn i / (il - 1);\n\t\t\t} // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n\t\t\tconst lengthBefore = arcLengths[i];\n\t\t\tconst lengthAfter = arcLengths[i + 1];\n\t\t\tconst segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n\t\t\tconst segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n\t\t\tconst t = (i + segmentFraction) / (il - 1);\n\t\t\treturn t;\n\t\t} // Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\n\t\tgetTangent(t, optionalTarget) {\n\t\t\tconst delta = 0.0001;\n\t\t\tlet t1 = t - delta;\n\t\t\tlet t2 = t + delta; // Capping in case of danger\n\n\t\t\tif (t1 < 0) t1 = 0;\n\t\t\tif (t2 > 1) t2 = 1;\n\t\t\tconst pt1 = this.getPoint(t1);\n\t\t\tconst pt2 = this.getPoint(t2);\n\t\t\tconst tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n\t\t\ttangent.copy(pt2).sub(pt1).normalize();\n\t\t\treturn tangent;\n\t\t}\n\n\t\tgetTangentAt(u, optionalTarget) {\n\t\t\tconst t = this.getUtoTmapping(u);\n\t\t\treturn this.getTangent(t, optionalTarget);\n\t\t}\n\n\t\tcomputeFrenetFrames(segments, closed) {\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t\t\tconst normal = new Vector3();\n\t\t\tconst tangents = [];\n\t\t\tconst normals = [];\n\t\t\tconst binormals = [];\n\t\t\tconst vec = new Vector3();\n\t\t\tconst mat = new Matrix4(); // compute the tangent vectors for each segment on the curve\n\n\t\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\t\tconst u = i / segments;\n\t\t\t\ttangents[i] = this.getTangentAt(u, new Vector3());\n\t\t\t\ttangents[i].normalize();\n\t\t\t} // select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\n\t\t\tnormals[0] = new Vector3();\n\t\t\tbinormals[0] = new Vector3();\n\t\t\tlet min = Number.MAX_VALUE;\n\t\t\tconst tx = Math.abs(tangents[0].x);\n\t\t\tconst ty = Math.abs(tangents[0].y);\n\t\t\tconst tz = Math.abs(tangents[0].z);\n\n\t\t\tif (tx <= min) {\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set(1, 0, 0);\n\t\t\t}\n\n\t\t\tif (ty <= min) {\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set(0, 1, 0);\n\t\t\t}\n\n\t\t\tif (tz <= min) {\n\t\t\t\tnormal.set(0, 0, 1);\n\t\t\t}\n\n\t\t\tvec.crossVectors(tangents[0], normal).normalize();\n\t\t\tnormals[0].crossVectors(tangents[0], vec);\n\t\t\tbinormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\tnormals[i] = normals[i - 1].clone();\n\t\t\t\tbinormals[i] = binormals[i - 1].clone();\n\t\t\t\tvec.crossVectors(tangents[i - 1], tangents[i]);\n\n\t\t\t\tif (vec.length() > Number.EPSILON) {\n\t\t\t\t\tvec.normalize();\n\t\t\t\t\tconst theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n\t\t\t\t}\n\n\t\t\t\tbinormals[i].crossVectors(tangents[i], normals[i]);\n\t\t\t} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n\t\t\tif (closed === true) {\n\t\t\t\tlet theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n\t\t\t\t\ttheta = -theta;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));\n\t\t\t\t\tbinormals[i].crossVectors(tangents[i], normals[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass EllipseCurve extends Curve {\n\t\tconstructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {\n\t\t\tsuper();\n\t\t\tthis.type = 'EllipseCurve';\n\t\t\tthis.aX = aX;\n\t\t\tthis.aY = aY;\n\t\t\tthis.xRadius = xRadius;\n\t\t\tthis.yRadius = yRadius;\n\t\t\tthis.aStartAngle = aStartAngle;\n\t\t\tthis.aEndAngle = aEndAngle;\n\t\t\tthis.aClockwise = aClockwise;\n\t\t\tthis.aRotation = aRotation;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget) {\n\t\t\tconst point = optionalTarget || new Vector2();\n\t\t\tconst twoPi = Math.PI * 2;\n\t\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\t\tconst samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n\t\t\twhile (deltaAngle < 0) deltaAngle += twoPi;\n\n\t\t\twhile (deltaAngle > twoPi) deltaAngle -= twoPi;\n\n\t\t\tif (deltaAngle < Number.EPSILON) {\n\t\t\t\tif (samePoints) {\n\t\t\t\t\tdeltaAngle = 0;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.aClockwise === true && !samePoints) {\n\t\t\t\tif (deltaAngle === twoPi) {\n\t\t\t\t\tdeltaAngle = -twoPi;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\t\tlet x = this.aX + this.xRadius * Math.cos(angle);\n\t\t\tlet y = this.aY + this.yRadius * Math.sin(angle);\n\n\t\t\tif (this.aRotation !== 0) {\n\t\t\t\tconst cos = Math.cos(this.aRotation);\n\t\t\t\tconst sin = Math.sin(this.aRotation);\n\t\t\t\tconst tx = x - this.aX;\n\t\t\t\tconst ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n\t\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\t\ty = tx * sin + ty * cos + this.aY;\n\t\t\t}\n\n\t\t\treturn point.set(x, y);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.aX = source.aX;\n\t\t\tthis.aY = source.aY;\n\t\t\tthis.xRadius = source.xRadius;\n\t\t\tthis.yRadius = source.yRadius;\n\t\t\tthis.aStartAngle = source.aStartAngle;\n\t\t\tthis.aEndAngle = source.aEndAngle;\n\t\t\tthis.aClockwise = source.aClockwise;\n\t\t\tthis.aRotation = source.aRotation;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.aX = this.aX;\n\t\t\tdata.aY = this.aY;\n\t\t\tdata.xRadius = this.xRadius;\n\t\t\tdata.yRadius = this.yRadius;\n\t\t\tdata.aStartAngle = this.aStartAngle;\n\t\t\tdata.aEndAngle = this.aEndAngle;\n\t\t\tdata.aClockwise = this.aClockwise;\n\t\t\tdata.aRotation = this.aRotation;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.aX = json.aX;\n\t\t\tthis.aY = json.aY;\n\t\t\tthis.xRadius = json.xRadius;\n\t\t\tthis.yRadius = json.yRadius;\n\t\t\tthis.aStartAngle = json.aStartAngle;\n\t\t\tthis.aEndAngle = json.aEndAngle;\n\t\t\tthis.aClockwise = json.aClockwise;\n\t\t\tthis.aRotation = json.aRotation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tclass ArcCurve extends EllipseCurve {\n\t\tconstructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tsuper(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\tthis.type = 'ArcCurve';\n\t\t}\n\n\t}\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\t\tlet c0 = 0,\n\t\t\t\tc1 = 0,\n\t\t\t\tc2 = 0,\n\t\t\t\tc3 = 0;\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *\t p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *\t p(0) = x0, p(1) = x1\n\t\t *\tand\n\t\t *\t p'(0) = t0, p'(1) = t1.\n\t\t */\n\n\t\tfunction init(x0, x1, t0, t1) {\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\t}\n\n\t\treturn {\n\t\t\tinitCatmullRom: function (x0, x1, x2, x3, tension) {\n\t\t\t\tinit(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n\t\t\t},\n\t\t\tinitNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tlet t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n\t\t\t\tlet t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\t\t\t\tinit(x1, x2, t1, t2);\n\t\t\t},\n\t\t\tcalc: function (t) {\n\t\t\t\tconst t2 = t * t;\n\t\t\t\tconst t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\t\t\t}\n\t\t};\n\t} //\n\n\n\tconst tmp = new Vector3();\n\tconst px = new CubicPoly(),\n\t\t\t\tpy = new CubicPoly(),\n\t\t\t\tpz = new CubicPoly();\n\n\tclass CatmullRomCurve3 extends Curve {\n\t\tconstructor(points = [], closed = false, curveType = 'centripetal', tension = 0.5) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CatmullRomCurve3';\n\t\t\tthis.points = points;\n\t\t\tthis.closed = closed;\n\t\t\tthis.curveType = curveType;\n\t\t\tthis.tension = tension;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst points = this.points;\n\t\t\tconst l = points.length;\n\t\t\tconst p = (l - (this.closed ? 0 : 1)) * t;\n\t\t\tlet intPoint = Math.floor(p);\n\t\t\tlet weight = p - intPoint;\n\n\t\t\tif (this.closed) {\n\t\t\t\tintPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n\t\t\t} else if (weight === 0 && intPoint === l - 1) {\n\t\t\t\tintPoint = l - 2;\n\t\t\t\tweight = 1;\n\t\t\t}\n\n\t\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\t\tif (this.closed || intPoint > 0) {\n\t\t\t\tp0 = points[(intPoint - 1) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate first point\n\t\t\t\ttmp.subVectors(points[0], points[1]).add(points[0]);\n\t\t\t\tp0 = tmp;\n\t\t\t}\n\n\t\t\tconst p1 = points[intPoint % l];\n\t\t\tconst p2 = points[(intPoint + 1) % l];\n\n\t\t\tif (this.closed || intPoint + 2 < l) {\n\t\t\t\tp3 = points[(intPoint + 2) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate last point\n\t\t\t\ttmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n\t\t\t\tp3 = tmp;\n\t\t\t}\n\n\t\t\tif (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\t\tlet dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n\t\t\t\tlet dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n\t\t\t\tlet dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n\t\t\t\tif (dt1 < 1e-4) dt1 = 1.0;\n\t\t\t\tif (dt0 < 1e-4) dt0 = dt1;\n\t\t\t\tif (dt2 < 1e-4) dt2 = dt1;\n\t\t\t\tpx.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n\t\t\t\tpy.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n\t\t\t\tpz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n\t\t\t} else if (this.curveType === 'catmullrom') {\n\t\t\t\tpx.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n\t\t\t\tpy.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n\t\t\t\tpz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n\t\t\t}\n\n\t\t\tpoint.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tconst point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\tthis.closed = source.closed;\n\t\t\tthis.curveType = source.curveType;\n\t\t\tthis.tension = source.tension;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.points = [];\n\n\t\t\tfor (let i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tconst point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\tdata.closed = this.closed;\n\t\t\tdata.curveType = this.curveType;\n\t\t\tdata.tension = this.tension;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tconst point = json.points[i];\n\t\t\t\tthis.points.push(new Vector3().fromArray(point));\n\t\t\t}\n\n\t\t\tthis.closed = json.closed;\n\t\t\tthis.curveType = json.curveType;\n\t\t\tthis.tension = json.tension;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\t/**\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\tfunction CatmullRom(t, p0, p1, p2, p3) {\n\t\tconst v0 = (p2 - p0) * 0.5;\n\t\tconst v1 = (p3 - p1) * 0.5;\n\t\tconst t2 = t * t;\n\t\tconst t3 = t * t2;\n\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t} //\n\n\n\tfunction QuadraticBezierP0(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn k * k * p;\n\t}\n\n\tfunction QuadraticBezierP1(t, p) {\n\t\treturn 2 * (1 - t) * t * p;\n\t}\n\n\tfunction QuadraticBezierP2(t, p) {\n\t\treturn t * t * p;\n\t}\n\n\tfunction QuadraticBezier(t, p0, p1, p2) {\n\t\treturn QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n\t} //\n\n\n\tfunction CubicBezierP0(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn k * k * k * p;\n\t}\n\n\tfunction CubicBezierP1(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\t}\n\n\tfunction CubicBezierP2(t, p) {\n\t\treturn 3 * (1 - t) * t * t * p;\n\t}\n\n\tfunction CubicBezierP3(t, p) {\n\t\treturn t * t * t * p;\n\t}\n\n\tfunction CubicBezier(t, p0, p1, p2, p3) {\n\t\treturn CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n\t}\n\n\tclass CubicBezierCurve extends Curve {\n\t\tconstructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubicBezierCurve';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tclass CubicBezierCurve3 extends Curve {\n\t\tconstructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubicBezierCurve3';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tclass LineCurve extends Curve {\n\t\tconstructor(v1 = new Vector2(), v2 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineCurve';\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t}\n\n\t\tgetTangent(t, optionalTarget) {\n\t\t\tconst tangent = optionalTarget || new Vector2();\n\t\t\ttangent.copy(this.v2).sub(this.v1).normalize();\n\t\t\treturn tangent;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tclass LineCurve3 extends Curve {\n\t\tconstructor(v1 = new Vector3(), v2 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineCurve3';\n\t\t\tthis.isLineCurve3 = true;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass QuadraticBezierCurve extends Curve {\n\t\tconstructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'QuadraticBezierCurve';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tclass QuadraticBezierCurve3 extends Curve {\n\t\tconstructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'QuadraticBezierCurve3';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tclass SplineCurve extends Curve {\n\t\tconstructor(points = []) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SplineCurve';\n\t\t\tthis.points = points;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst points = this.points;\n\t\t\tconst p = (points.length - 1) * t;\n\t\t\tconst intPoint = Math.floor(p);\n\t\t\tconst weight = p - intPoint;\n\t\t\tconst p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n\t\t\tconst p1 = points[intPoint];\n\t\t\tconst p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n\t\t\tconst p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\t\t\tpoint.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tconst point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.points = [];\n\n\t\t\tfor (let i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tconst point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tconst point = json.points[i];\n\t\t\t\tthis.points.push(new Vector2().fromArray(point));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *\tcurves, but retains the api of a curve\n\t **************************************************************/\n\n\tclass CurvePath extends Curve {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'CurvePath';\n\t\t\tthis.curves = [];\n\t\t\tthis.autoClose = false; // Automatically closes the path\n\t\t}\n\n\t\tadd(curve) {\n\t\t\tthis.curves.push(curve);\n\t\t}\n\n\t\tclosePath() {\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tconst startPoint = this.curves[0].getPoint(0);\n\t\t\tconst endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n\t\t\tif (!startPoint.equals(endPoint)) {\n\t\t\t\tthis.curves.push(new LineCurve(endPoint, startPoint));\n\t\t\t}\n\t\t} // To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\n\t\tgetPoint(t) {\n\t\t\tconst d = t * this.getLength();\n\t\t\tconst curveLengths = this.getCurveLengths();\n\t\t\tlet i = 0; // To think about boundaries points.\n\n\t\t\twhile (i < curveLengths.length) {\n\t\t\t\tif (curveLengths[i] >= d) {\n\t\t\t\t\tconst diff = curveLengths[i] - d;\n\t\t\t\t\tconst curve = this.curves[i];\n\t\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\t\t\t\treturn curve.getPointAt(u);\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn null; // loop where sum != 0, sum > d , sum+1 <d\n\t\t} // We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\n\t\tgetLength() {\n\t\t\tconst lens = this.getCurveLengths();\n\t\t\treturn lens[lens.length - 1];\n\t\t} // cacheLengths must be recalculated.\n\n\n\t\tupdateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\t\t} // Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\n\t\tgetCurveLengths() {\n\t\t\t// We use cache values if curves and cache array are same length\n\t\t\tif (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n\t\t\t\treturn this.cacheLengths;\n\t\t\t} // Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\n\t\t\tconst lengths = [];\n\t\t\tlet sums = 0;\n\n\t\t\tfor (let i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tsums += this.curves[i].getLength();\n\t\t\t\tlengths.push(sums);\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\t\t\treturn lengths;\n\t\t}\n\n\t\tgetSpacedPoints(divisions = 40) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let i = 0; i <= divisions; i++) {\n\t\t\t\tpoints.push(this.getPoint(i / divisions));\n\t\t\t}\n\n\t\t\tif (this.autoClose) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t}\n\n\t\tgetPoints(divisions = 12) {\n\t\t\tconst points = [];\n\t\t\tlet last;\n\n\t\t\tfor (let i = 0, curves = this.curves; i < curves.length; i++) {\n\t\t\t\tconst curve = curves[i];\n\t\t\t\tconst resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;\n\t\t\t\tconst pts = curve.getPoints(resolution);\n\n\t\t\t\tfor (let j = 0; j < pts.length; j++) {\n\t\t\t\t\tconst point = pts[j];\n\t\t\t\t\tif (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t\tlast = point;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.curves = [];\n\n\t\t\tfor (let i = 0, l = source.curves.length; i < l; i++) {\n\t\t\t\tconst curve = source.curves[i];\n\t\t\t\tthis.curves.push(curve.clone());\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor (let i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tconst curve = this.curves[i];\n\t\t\t\tdata.curves.push(curve.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor (let i = 0, l = json.curves.length; i < l; i++) {\n\t\t\t\tconst curve = json.curves[i];\n\t\t\t\tthis.curves.push(new Curves[curve.type]().fromJSON(curve));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Path extends CurvePath {\n\t\tconstructor(points) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Path';\n\t\t\tthis.currentPoint = new Vector2();\n\n\t\t\tif (points) {\n\t\t\t\tthis.setFromPoints(points);\n\t\t\t}\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.moveTo(points[0].x, points[0].y);\n\n\t\t\tfor (let i = 1, l = points.length; i < l; i++) {\n\t\t\t\tthis.lineTo(points[i].x, points[i].y);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tmoveTo(x, y) {\n\t\t\tthis.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\t\t}\n\n\t\tlineTo(x, y) {\n\t\t\tconst curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tquadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tconst curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tbezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tconst curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tsplineThru(pts\n\t\t/*Array of Vector*/\n\t\t) {\n\t\t\tconst npts = [this.currentPoint.clone()].concat(pts);\n\t\t\tconst curve = new SplineCurve(npts);\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.copy(pts[pts.length - 1]);\n\t\t\treturn this;\n\t\t}\n\n\t\tarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tconst x0 = this.currentPoint.x;\n\t\t\tconst y0 = this.currentPoint.y;\n\t\t\tthis.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t}\n\n\t\tabsarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t}\n\n\t\tellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tconst x0 = this.currentPoint.x;\n\t\t\tconst y0 = this.currentPoint.y;\n\t\t\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\t\t\treturn this;\n\t\t}\n\n\t\tabsellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tconst curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n\t\t\tif (this.curves.length > 0) {\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tconst firstPoint = curve.getPoint(0);\n\n\t\t\t\tif (!firstPoint.equals(this.currentPoint)) {\n\t\t\t\t\tthis.lineTo(firstPoint.x, firstPoint.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.curves.push(curve);\n\t\t\tconst lastPoint = curve.getPoint(1);\n\t\t\tthis.currentPoint.copy(lastPoint);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.currentPoint.copy(source.currentPoint);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.currentPoint.fromArray(json.currentPoint);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Shape extends Path {\n\t\tconstructor(points) {\n\t\t\tsuper(points);\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.type = 'Shape';\n\t\t\tthis.holes = [];\n\t\t}\n\n\t\tgetPointsHoles(divisions) {\n\t\t\tconst holesPts = [];\n\n\t\t\tfor (let i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tholesPts[i] = this.holes[i].getPoints(divisions);\n\t\t\t}\n\n\t\t\treturn holesPts;\n\t\t} // get points of shape and holes (keypoints based on segments parameter)\n\n\n\t\textractPoints(divisions) {\n\t\t\treturn {\n\t\t\t\tshape: this.getPoints(divisions),\n\t\t\t\tholes: this.getPointsHoles(divisions)\n\t\t\t};\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.holes = [];\n\n\t\t\tfor (let i = 0, l = source.holes.length; i < l; i++) {\n\t\t\t\tconst hole = source.holes[i];\n\t\t\t\tthis.holes.push(hole.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor (let i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tconst hole = this.holes[i];\n\t\t\t\tdata.holes.push(hole.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor (let i = 0, l = json.holes.length; i < l; i++) {\n\t\t\t\tconst hole = json.holes[i];\n\t\t\t\tthis.holes.push(new Path().fromJSON(hole));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Light extends Object3D {\n\t\tconstructor(color, intensity = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Light';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.intensity = intensity;\n\t\t}\n\n\t\tdispose() {// Empty here in base class; some subclasses override.\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.intensity = source.intensity;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\t\t\tif (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n\t\t\tif (this.distance !== undefined) data.object.distance = this.distance;\n\t\t\tif (this.angle !== undefined) data.object.angle = this.angle;\n\t\t\tif (this.decay !== undefined) data.object.decay = this.decay;\n\t\t\tif (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n\t\t\tif (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tLight.prototype.isLight = true;\n\n\tclass HemisphereLight extends Light {\n\t\tconstructor(skyColor, groundColor, intensity) {\n\t\t\tsuper(skyColor, intensity);\n\t\t\tthis.type = 'HemisphereLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.groundColor = new Color(groundColor);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.groundColor.copy(source.groundColor);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tHemisphereLight.prototype.isHemisphereLight = true;\n\n\tconst _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _lightPositionWorld$1 = /*@__PURE__*/new Vector3();\n\n\tconst _lookTarget$1 = /*@__PURE__*/new Vector3();\n\n\tclass LightShadow {\n\t\tconstructor(camera) {\n\t\t\tthis.camera = camera;\n\t\t\tthis.bias = 0;\n\t\t\tthis.normalBias = 0;\n\t\t\tthis.radius = 1;\n\t\t\tthis.mapSize = new Vector2(512, 512);\n\t\t\tthis.map = null;\n\t\t\tthis.mapPass = null;\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.autoUpdate = true;\n\t\t\tthis.needsUpdate = false;\n\t\t\tthis._frustum = new Frustum();\n\t\t\tthis._frameExtents = new Vector2(1, 1);\n\t\t\tthis._viewportCount = 1;\n\t\t\tthis._viewports = [new Vector4(0, 0, 1, 1)];\n\t\t}\n\n\t\tgetViewportCount() {\n\t\t\treturn this._viewportCount;\n\t\t}\n\n\t\tgetFrustum() {\n\t\t\treturn this._frustum;\n\t\t}\n\n\t\tupdateMatrices(light) {\n\t\t\tconst shadowCamera = this.camera;\n\t\t\tconst shadowMatrix = this.matrix;\n\n\t\t\t_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tshadowCamera.position.copy(_lightPositionWorld$1);\n\n\t\t\t_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);\n\n\t\t\tshadowCamera.lookAt(_lookTarget$1);\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix$1);\n\n\t\t\tshadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n\t\t\tshadowMatrix.multiply(shadowCamera.projectionMatrix);\n\t\t\tshadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n\t\t}\n\n\t\tgetViewport(viewportIndex) {\n\t\t\treturn this._viewports[viewportIndex];\n\t\t}\n\n\t\tgetFrameExtents() {\n\t\t\treturn this._frameExtents;\n\t\t}\n\n\t\tdispose() {\n\t\t\tif (this.map) {\n\t\t\t\tthis.map.dispose();\n\t\t\t}\n\n\t\t\tif (this.mapPass) {\n\t\t\t\tthis.mapPass.dispose();\n\t\t\t}\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.camera = source.camera.clone();\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\t\t\tthis.mapSize.copy(source.mapSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst object = {};\n\t\t\tif (this.bias !== 0) object.bias = this.bias;\n\t\t\tif (this.normalBias !== 0) object.normalBias = this.normalBias;\n\t\t\tif (this.radius !== 1) object.radius = this.radius;\n\t\t\tif (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n\t\t\tobject.camera = this.camera.toJSON(false).object;\n\t\t\tdelete object.camera.matrix;\n\t\t\treturn object;\n\t\t}\n\n\t}\n\n\tclass SpotLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new PerspectiveCamera(50, 1, 0.5, 500));\n\t\t\tthis.focus = 1;\n\t\t}\n\n\t\tupdateMatrices(light) {\n\t\t\tconst camera = this.camera;\n\t\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tconst far = light.distance || camera.far;\n\n\t\t\tif (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\tsuper.updateMatrices(light);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.focus = source.focus;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpotLightShadow.prototype.isSpotLightShadow = true;\n\n\tclass SpotLight extends Light {\n\t\tconstructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'SpotLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.target = new Object3D();\n\t\t\tthis.distance = distance;\n\t\t\tthis.angle = angle;\n\t\t\tthis.penumbra = penumbra;\n\t\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\tthis.shadow = new SpotLightShadow();\n\t\t}\n\n\t\tget power() {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / Math.PI;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpotLight.prototype.isSpotLight = true;\n\n\tconst _projScreenMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _lightPositionWorld = /*@__PURE__*/new Vector3();\n\n\tconst _lookTarget = /*@__PURE__*/new Vector3();\n\n\tclass PointLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new PerspectiveCamera(90, 1, 0.5, 500));\n\t\t\tthis._frameExtents = new Vector2(4, 2);\n\t\t\tthis._viewportCount = 6;\n\t\t\tthis._viewports = [// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//\txzXZ\n\t\t\t//\t y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\t\t\t// positive X\n\t\t\tnew Vector4(2, 1, 1, 1), // negative X\n\t\t\tnew Vector4(0, 1, 1, 1), // positive Z\n\t\t\tnew Vector4(3, 1, 1, 1), // negative Z\n\t\t\tnew Vector4(1, 1, 1, 1), // positive Y\n\t\t\tnew Vector4(3, 0, 1, 1), // negative Y\n\t\t\tnew Vector4(1, 0, 1, 1)];\n\t\t\tthis._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n\t\t\tthis._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n\t\t}\n\n\t\tupdateMatrices(light, viewportIndex = 0) {\n\t\t\tconst camera = this.camera;\n\t\t\tconst shadowMatrix = this.matrix;\n\t\t\tconst far = light.distance || camera.far;\n\n\t\t\tif (far !== camera.far) {\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tcamera.position.copy(_lightPositionWorld);\n\n\t\t\t_lookTarget.copy(camera.position);\n\n\t\t\t_lookTarget.add(this._cubeDirections[viewportIndex]);\n\n\t\t\tcamera.up.copy(this._cubeUps[viewportIndex]);\n\t\t\tcamera.lookAt(_lookTarget);\n\t\t\tcamera.updateMatrixWorld();\n\t\t\tshadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix);\n\t\t}\n\n\t}\n\n\tPointLightShadow.prototype.isPointLightShadow = true;\n\n\tclass PointLight extends Light {\n\t\tconstructor(color, intensity, distance = 0, decay = 1) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'PointLight';\n\t\t\tthis.distance = distance;\n\t\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\tthis.shadow = new PointLightShadow();\n\t\t}\n\n\t\tget power() {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * 4 * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / (4 * Math.PI);\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tPointLight.prototype.isPointLight = true;\n\n\tclass OrthographicCamera extends Camera {\n\t\tconstructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000) {\n\t\t\tsuper();\n\t\t\tthis.type = 'OrthographicCamera';\n\t\t\tthis.zoom = 1;\n\t\t\tthis.view = null;\n\t\t\tthis.left = left;\n\t\t\tthis.right = right;\n\t\t\tthis.top = top;\n\t\t\tthis.bottom = bottom;\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tclearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tupdateProjectionMatrix() {\n\t\t\tconst dx = (this.right - this.left) / (2 * this.zoom);\n\t\t\tconst dy = (this.top - this.bottom) / (2 * this.zoom);\n\t\t\tconst cx = (this.right + this.left) / 2;\n\t\t\tconst cy = (this.top + this.bottom) / 2;\n\t\t\tlet left = cx - dx;\n\t\t\tlet right = cx + dx;\n\t\t\tlet top = cy + dy;\n\t\t\tlet bottom = cy - dy;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tconst scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n\t\t\t\tconst scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tOrthographicCamera.prototype.isOrthographicCamera = true;\n\n\tclass DirectionalLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n\t\t}\n\n\t}\n\n\tDirectionalLightShadow.prototype.isDirectionalLightShadow = true;\n\n\tclass DirectionalLight extends Light {\n\t\tconstructor(color, intensity) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'DirectionalLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.target = new Object3D();\n\t\t\tthis.shadow = new DirectionalLightShadow();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tDirectionalLight.prototype.isDirectionalLight = true;\n\n\tclass AmbientLight extends Light {\n\t\tconstructor(color, intensity) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'AmbientLight';\n\t\t}\n\n\t}\n\n\tAmbientLight.prototype.isAmbientLight = true;\n\n\tclass RectAreaLight extends Light {\n\t\tconstructor(color, intensity, width = 10, height = 10) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'RectAreaLight';\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tRectAreaLight.prototype.isRectAreaLight = true;\n\n\t/**\n\t * Primary reference:\n\t *\t https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *\t https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\t// 3-band SH defined by 9 coefficients\n\n\tclass SphericalHarmonics3 {\n\t\tconstructor() {\n\t\t\tthis.coefficients = [];\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients.push(new Vector3());\n\t\t\t}\n\t\t}\n\n\t\tset(coefficients) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].copy(coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tzero() {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\n\n\t\tgetAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z;\n\t\t\tconst coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 0.488603 * y);\n\t\t\ttarget.addScaledVector(coeff[2], 0.488603 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 0.488603 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 1.092548 * (x * y));\n\t\t\ttarget.addScaledVector(coeff[5], 1.092548 * (y * z));\n\t\t\ttarget.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n\t\t\ttarget.addScaledVector(coeff[7], 1.092548 * (x * z));\n\t\t\ttarget.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n\t\t\treturn target;\n\t\t} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\n\n\t\tgetIrradianceAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z;\n\t\t\tconst coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\t\t\t// band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n\t\t\ttarget.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n\t\t\ttarget.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n\t\t\ttarget.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n\t\t\ttarget.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n\t\t\ttarget.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\t\t}\n\n\t\tadd(sh) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].add(sh.coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledSH(sh, s) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].addScaledVector(sh.coefficients[i], s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(s) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].multiplyScalar(s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tlerp(sh, alpha) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].lerp(sh.coefficients[i], alpha);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(sh) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tif (!this.coefficients[i].equals(sh.coefficients[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tcopy(sh) {\n\t\t\treturn this.set(sh.coefficients);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tconst coefficients = this.coefficients;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].fromArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst coefficients = this.coefficients;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].toArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn array;\n\t\t} // evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\n\n\t\tstatic getBasisAt(normal, shBasis) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z; // band 0\n\n\t\t\tshBasis[0] = 0.282095; // band 1\n\n\t\t\tshBasis[1] = 0.488603 * y;\n\t\t\tshBasis[2] = 0.488603 * z;\n\t\t\tshBasis[3] = 0.488603 * x; // band 2\n\n\t\t\tshBasis[4] = 1.092548 * x * y;\n\t\t\tshBasis[5] = 1.092548 * y * z;\n\t\t\tshBasis[6] = 0.315392 * (3 * z * z - 1);\n\t\t\tshBasis[7] = 1.092548 * x * z;\n\t\t\tshBasis[8] = 0.546274 * (x * x - y * y);\n\t\t}\n\n\t}\n\n\tSphericalHarmonics3.prototype.isSphericalHarmonics3 = true;\n\n\tclass LightProbe extends Light {\n\t\tconstructor(sh = new SphericalHarmonics3(), intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tthis.sh = sh;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.sh.copy(source.sh);\n\t\t\treturn this;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\n\t\t\tthis.sh.fromArray(json.sh);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.sh = this.sh.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tLightProbe.prototype.isLightProbe = true;\n\n\tclass MaterialLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t\tthis.textures = {};\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst textures = this.textures;\n\n\t\t\tfunction getTexture(name) {\n\t\t\t\tif (textures[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.MaterialLoader: Undefined texture', name);\n\t\t\t\t}\n\n\t\t\t\treturn textures[name];\n\t\t\t}\n\n\t\t\tconst material = new Materials[json.type]();\n\t\t\tif (json.uuid !== undefined) material.uuid = json.uuid;\n\t\t\tif (json.name !== undefined) material.name = json.name;\n\t\t\tif (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n\t\t\tif (json.roughness !== undefined) material.roughness = json.roughness;\n\t\t\tif (json.metalness !== undefined) material.metalness = json.metalness;\n\t\t\tif (json.sheen !== undefined) material.sheen = new Color().setHex(json.sheen);\n\t\t\tif (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n\t\t\tif (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n\t\t\tif (json.shininess !== undefined) material.shininess = json.shininess;\n\t\t\tif (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n\t\t\tif (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\t\tif (json.transmission !== undefined) material.transmission = json.transmission;\n\t\t\tif (json.thickness !== undefined) material.thickness = json.thickness;\n\t\t\tif (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;\n\t\t\tif (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);\n\t\t\tif (json.fog !== undefined) material.fog = json.fog;\n\t\t\tif (json.flatShading !== undefined) material.flatShading = json.flatShading;\n\t\t\tif (json.blending !== undefined) material.blending = json.blending;\n\t\t\tif (json.combine !== undefined) material.combine = json.combine;\n\t\t\tif (json.side !== undefined) material.side = json.side;\n\t\t\tif (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;\n\t\t\tif (json.opacity !== undefined) material.opacity = json.opacity;\n\t\t\tif (json.transparent !== undefined) material.transparent = json.transparent;\n\t\t\tif (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n\t\t\tif (json.depthTest !== undefined) material.depthTest = json.depthTest;\n\t\t\tif (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n\t\t\tif (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n\t\t\tif (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n\t\t\tif (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n\t\t\tif (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n\t\t\tif (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n\t\t\tif (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n\t\t\tif (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n\t\t\tif (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n\t\t\tif (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n\t\t\tif (json.wireframe !== undefined) material.wireframe = json.wireframe;\n\t\t\tif (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif (json.rotation !== undefined) material.rotation = json.rotation;\n\t\t\tif (json.linewidth !== 1) material.linewidth = json.linewidth;\n\t\t\tif (json.dashSize !== undefined) material.dashSize = json.dashSize;\n\t\t\tif (json.gapSize !== undefined) material.gapSize = json.gapSize;\n\t\t\tif (json.scale !== undefined) material.scale = json.scale;\n\t\t\tif (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n\t\t\tif (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\t\tif (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\t\t\tif (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;\n\t\t\tif (json.morphNormals !== undefined) material.morphNormals = json.morphNormals;\n\t\t\tif (json.dithering !== undefined) material.dithering = json.dithering;\n\t\t\tif (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;\n\t\t\tif (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;\n\t\t\tif (json.vertexTangents !== undefined) material.vertexTangents = json.vertexTangents;\n\t\t\tif (json.visible !== undefined) material.visible = json.visible;\n\t\t\tif (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n\t\t\tif (json.userData !== undefined) material.userData = json.userData;\n\n\t\t\tif (json.vertexColors !== undefined) {\n\t\t\t\tif (typeof json.vertexColors === 'number') {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors > 0 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\t\t\t\t}\n\t\t\t} // Shader Material\n\n\n\t\t\tif (json.uniforms !== undefined) {\n\t\t\t\tfor (const name in json.uniforms) {\n\t\t\t\t\tconst uniform = json.uniforms[name];\n\t\t\t\t\tmaterial.uniforms[name] = {};\n\n\t\t\t\t\tswitch (uniform.type) {\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = getTexture(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Color().setHex(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector2().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = uniform.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json.defines !== undefined) material.defines = json.defines;\n\t\t\tif (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n\t\t\tif (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n\t\t\tif (json.extensions !== undefined) {\n\t\t\t\tfor (const key in json.extensions) {\n\t\t\t\t\tmaterial.extensions[key] = json.extensions[key];\n\t\t\t\t}\n\t\t\t} // Deprecated\n\n\n\t\t\tif (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n\t\t\t// for PointsMaterial\n\n\t\t\tif (json.size !== undefined) material.size = json.size;\n\t\t\tif (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n\t\t\tif (json.map !== undefined) material.map = getTexture(json.map);\n\t\t\tif (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n\t\t\tif (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n\t\t\tif (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n\t\t\tif (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n\t\t\tif (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n\t\t\tif (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n\t\t\tif (json.normalScale !== undefined) {\n\t\t\t\tlet normalScale = json.normalScale;\n\n\t\t\t\tif (Array.isArray(normalScale) === false) {\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\t\t\t\tnormalScale = [normalScale, normalScale];\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray(normalScale);\n\t\t\t}\n\n\t\t\tif (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n\t\t\tif (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n\t\t\tif (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n\t\t\tif (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n\t\t\tif (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n\t\t\tif (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n\t\t\tif (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n\t\t\tif (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n\t\t\tif (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n\t\t\tif (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n\t\t\tif (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n\t\t\tif (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n\t\t\tif (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n\t\t\tif (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n\t\t\tif (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n\t\t\tif (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n\t\t\tif (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n\t\t\tif (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n\t\t\tif (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n\t\t\tif (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n\t\t\tif (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n\t\t\tif (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n\t\t\tif (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);\n\t\t\treturn material;\n\t\t}\n\n\t\tsetTextures(value) {\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass LoaderUtils {\n\t\tstatic decodeText(array) {\n\t\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\t\treturn new TextDecoder().decode(array);\n\t\t\t} // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\n\t\t\tlet s = '';\n\n\t\t\tfor (let i = 0, il = array.length; i < il; i++) {\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode(array[i]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// merges multi-byte utf-8 characters.\n\t\t\t\treturn decodeURIComponent(escape(s));\n\t\t\t} catch (e) {\n\t\t\t\t// see #16358\n\t\t\t\treturn s;\n\t\t\t}\n\t\t}\n\n\t\tstatic extractUrlBase(url) {\n\t\t\tconst index = url.lastIndexOf('/');\n\t\t\tif (index === -1) return './';\n\t\t\treturn url.substr(0, index + 1);\n\t\t}\n\n\t}\n\n\tclass InstancedBufferGeometry extends BufferGeometry {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'InstancedBufferGeometry';\n\t\t\tthis.instanceCount = Infinity;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.instanceCount = source.instanceCount;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON(this);\n\t\t\tdata.instanceCount = this.instanceCount;\n\t\t\tdata.isInstancedBufferGeometry = true;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tInstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\n\tclass InstancedBufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized, meshPerAttribute) {\n\t\t\tif (typeof normalized === 'number') {\n\t\t\t\tmeshPerAttribute = normalized;\n\t\t\t\tnormalized = false;\n\t\t\t\tconsole.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');\n\t\t\t}\n\n\t\t\tsuper(array, itemSize, normalized);\n\t\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\t\t\tdata.isInstancedBufferAttribute = true;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tInstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\n\tclass BufferGeometryLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst interleavedBufferMap = {};\n\t\t\tconst arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer(json, uuid) {\n\t\t\t\tif (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n\t\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tconst interleavedBuffer = interleavedBuffers[uuid];\n\t\t\t\tconst buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n\t\t\t\tconst array = getTypedArray(interleavedBuffer.type, buffer);\n\t\t\t\tconst ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\t\t\t\tinterleavedBufferMap[uuid] = ib;\n\t\t\t\treturn ib;\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer(json, uuid) {\n\t\t\t\tif (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n\t\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\t\tconst arrayBuffer = arrayBuffers[uuid];\n\t\t\t\tconst ab = new Uint32Array(arrayBuffer).buffer;\n\t\t\t\tarrayBufferMap[uuid] = ab;\n\t\t\t\treturn ab;\n\t\t\t}\n\n\t\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\t\t\tconst index = json.data.index;\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tconst typedArray = getTypedArray(index.type, index.array);\n\t\t\t\tgeometry.setIndex(new BufferAttribute(typedArray, 1));\n\t\t\t}\n\n\t\t\tconst attributes = json.data.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tlet bufferAttribute;\n\n\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t} else {\n\t\t\t\t\tconst typedArray = getTypedArray(attribute.type, attribute.array);\n\t\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t}\n\n\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\tif (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);\n\n\t\t\t\tif (attribute.updateRange !== undefined) {\n\t\t\t\t\tbufferAttribute.updateRange.offset = attribute.updateRange.offset;\n\t\t\t\t\tbufferAttribute.updateRange.count = attribute.updateRange.count;\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute(key, bufferAttribute);\n\t\t\t}\n\n\t\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\t\tif (morphAttributes) {\n\t\t\t\tfor (const key in morphAttributes) {\n\t\t\t\t\tconst attributeArray = morphAttributes[key];\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor (let i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\t\tconst attribute = attributeArray[i];\n\t\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst typedArray = getTypedArray(attribute.type, attribute.array);\n\t\t\t\t\t\t\tbufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\t\t\tarray.push(bufferAttribute);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[key] = array;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif (morphTargetsRelative) {\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\t\t\t}\n\n\t\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif (groups !== undefined) {\n\t\t\t\tfor (let i = 0, n = groups.length; i !== n; ++i) {\n\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\tgeometry.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\t\tif (boundingSphere !== undefined) {\n\t\t\t\tconst center = new Vector3();\n\n\t\t\t\tif (boundingSphere.center !== undefined) {\n\t\t\t\t\tcenter.fromArray(boundingSphere.center);\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n\t\t\t}\n\n\t\t\tif (json.name) geometry.name = json.name;\n\t\t\tif (json.userData) geometry.userData = json.userData;\n\t\t\treturn geometry;\n\t\t}\n\n\t}\n\n\tclass ObjectLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tlet json = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (onError !== undefined) onError(error);\n\t\t\t\t\tconsole.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst metadata = json.metadata;\n\n\t\t\t\tif (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n\t\t\t\t\tconsole.error('THREE.ObjectLoader: Can\\'t load ' + url);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscope.parse(json, onLoad);\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json, onLoad) {\n\t\t\tconst animations = this.parseAnimations(json.animations);\n\t\t\tconst shapes = this.parseShapes(json.shapes);\n\t\t\tconst geometries = this.parseGeometries(json.geometries, shapes);\n\t\t\tconst images = this.parseImages(json.images, function () {\n\t\t\t\tif (onLoad !== undefined) onLoad(object);\n\t\t\t});\n\t\t\tconst textures = this.parseTextures(json.textures, images);\n\t\t\tconst materials = this.parseMaterials(json.materials, textures);\n\t\t\tconst object = this.parseObject(json.object, geometries, materials, animations);\n\t\t\tconst skeletons = this.parseSkeletons(json.skeletons, object);\n\t\t\tthis.bindSkeletons(object, skeletons); //\n\n\t\t\tif (onLoad !== undefined) {\n\t\t\t\tlet hasImages = false;\n\n\t\t\t\tfor (const uuid in images) {\n\t\t\t\t\tif (images[uuid] instanceof HTMLImageElement) {\n\t\t\t\t\t\thasImages = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hasImages === false) onLoad(object);\n\t\t\t}\n\n\t\t\treturn object;\n\t\t}\n\n\t\tparseShapes(json) {\n\t\t\tconst shapes = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst shape = new Shape().fromJSON(json[i]);\n\t\t\t\t\tshapes[shape.uuid] = shape;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t}\n\n\t\tparseSkeletons(json, object) {\n\t\t\tconst skeletons = {};\n\t\t\tconst bones = {}; // generate bone lookup table\n\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isBone) bones[child.uuid] = child;\n\t\t\t}); // create skeletons\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst skeleton = new Skeleton().fromJSON(json[i], bones);\n\t\t\t\t\tskeletons[skeleton.uuid] = skeleton;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn skeletons;\n\t\t}\n\n\t\tparseGeometries(json, shapes) {\n\t\t\tconst geometries = {};\n\t\t\tlet geometryShapes;\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tlet geometry;\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tswitch (data.type) {\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.detail);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (let j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tconst shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.curveSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (let j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tconst shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif (extrudePath !== undefined) {\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.options);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\t\t\t\t\t\t\tconsole.error('THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) geometry.name = data.name;\n\t\t\t\t\tif (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;\n\t\t\t\t\tgeometries[data.uuid] = geometry;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn geometries;\n\t\t}\n\n\t\tparseMaterials(json, textures) {\n\t\t\tconst cache = {}; // MultiMaterial\n\n\t\t\tconst materials = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tconst loader = new MaterialLoader();\n\t\t\t\tloader.setTextures(textures);\n\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tif (data.type === 'MultiMaterial') {\n\t\t\t\t\t\t// Deprecated\n\t\t\t\t\t\tconst array = [];\n\n\t\t\t\t\t\tfor (let j = 0; j < data.materials.length; j++) {\n\t\t\t\t\t\t\tconst material = data.materials[j];\n\n\t\t\t\t\t\t\tif (cache[material.uuid] === undefined) {\n\t\t\t\t\t\t\t\tcache[material.uuid] = loader.parse(material);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push(cache[material.uuid]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = array;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (cache[data.uuid] === undefined) {\n\t\t\t\t\t\t\tcache[data.uuid] = loader.parse(data);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = cache[data.uuid];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn materials;\n\t\t}\n\n\t\tparseAnimations(json) {\n\t\t\tconst animations = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0; i < json.length; i++) {\n\t\t\t\t\tconst data = json[i];\n\t\t\t\t\tconst clip = AnimationClip.parse(data);\n\t\t\t\t\tanimations[clip.uuid] = clip;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\n\t\tparseImages(json, onLoad) {\n\t\t\tconst scope = this;\n\t\t\tconst images = {};\n\t\t\tlet loader;\n\n\t\t\tfunction loadImage(url) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\treturn loader.load(url, function () {\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, undefined, function () {\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction deserializeImage(image) {\n\t\t\t\tif (typeof image === 'string') {\n\t\t\t\t\tconst url = image;\n\t\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n\t\t\t\t\treturn loadImage(path);\n\t\t\t\t} else {\n\t\t\t\t\tif (image.data) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: getTypedArray(image.type, image.data),\n\t\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\t\theight: image.height\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json !== undefined && json.length > 0) {\n\t\t\t\tconst manager = new LoadingManager(onLoad);\n\t\t\t\tloader = new ImageLoader(manager);\n\t\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\n\t\t\t\tfor (let i = 0, il = json.length; i < il; i++) {\n\t\t\t\t\tconst image = json[i];\n\t\t\t\t\tconst url = image.url;\n\n\t\t\t\t\tif (Array.isArray(url)) {\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\t\t\t\t\t\timages[image.uuid] = [];\n\n\t\t\t\t\t\tfor (let j = 0, jl = url.length; j < jl; j++) {\n\t\t\t\t\t\t\tconst currentUrl = url[j];\n\t\t\t\t\t\t\tconst deserializedImage = deserializeImage(currentUrl);\n\n\t\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\t\tif (deserializedImage instanceof HTMLImageElement) {\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(deserializedImage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// load single image\n\t\t\t\t\t\tconst deserializedImage = deserializeImage(image.url);\n\n\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\timages[image.uuid] = deserializedImage;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn images;\n\t\t}\n\n\t\tparseTextures(json, images) {\n\t\t\tfunction parseConstant(value, type) {\n\t\t\t\tif (typeof value === 'number') return value;\n\t\t\t\tconsole.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n\t\t\t\treturn type[value];\n\t\t\t}\n\n\t\t\tconst textures = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tif (data.image === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (images[data.image] === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined image', data.image);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet texture;\n\t\t\t\t\tconst image = images[data.image];\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\ttexture = new CubeTexture(image);\n\t\t\t\t\t\tif (image.length === 6) texture.needsUpdate = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (image && image.data) {\n\t\t\t\t\t\t\ttexture = new DataTexture(image.data, image.width, image.height);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexture = new Texture(image);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (image) texture.needsUpdate = true; // textures can have undefined image data\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) texture.name = data.name;\n\t\t\t\t\tif (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n\t\t\t\t\tif (data.offset !== undefined) texture.offset.fromArray(data.offset);\n\t\t\t\t\tif (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n\t\t\t\t\tif (data.center !== undefined) texture.center.fromArray(data.center);\n\t\t\t\t\tif (data.rotation !== undefined) texture.rotation = data.rotation;\n\n\t\t\t\t\tif (data.wrap !== undefined) {\n\t\t\t\t\t\ttexture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n\t\t\t\t\t\ttexture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.format !== undefined) texture.format = data.format;\n\t\t\t\t\tif (data.type !== undefined) texture.type = data.type;\n\t\t\t\t\tif (data.encoding !== undefined) texture.encoding = data.encoding;\n\t\t\t\t\tif (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n\t\t\t\t\tif (data.flipY !== undefined) texture.flipY = data.flipY;\n\t\t\t\t\tif (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\t\tif (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\t\ttextures[data.uuid] = texture;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn textures;\n\t\t}\n\n\t\tparseObject(data, geometries, materials, animations) {\n\t\t\tlet object;\n\n\t\t\tfunction getGeometry(name) {\n\t\t\t\tif (geometries[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined geometry', name);\n\t\t\t\t}\n\n\t\t\t\treturn geometries[name];\n\t\t\t}\n\n\t\t\tfunction getMaterial(name) {\n\t\t\t\tif (name === undefined) return undefined;\n\n\t\t\t\tif (Array.isArray(name)) {\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor (let i = 0, l = name.length; i < l; i++) {\n\t\t\t\t\t\tconst uuid = name[i];\n\n\t\t\t\t\t\tif (materials[uuid] === undefined) {\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', uuid);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push(materials[uuid]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\t\t\t\t}\n\n\t\t\t\tif (materials[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', name);\n\t\t\t\t}\n\n\t\t\t\treturn materials[name];\n\t\t\t}\n\n\t\t\tlet geometry, material;\n\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'Scene':\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif (data.background !== undefined) {\n\t\t\t\t\t\tif (Number.isInteger(data.background)) {\n\t\t\t\t\t\t\tobject.background = new Color(data.background);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.fog !== undefined) {\n\t\t\t\t\t\tif (data.fog.type === 'Fog') {\n\t\t\t\t\t\t\tobject.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n\t\t\t\t\t\t} else if (data.fog.type === 'FogExp2') {\n\t\t\t\t\t\t\tobject.fog = new FogExp2(data.fog.color, data.fog.density);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\t\t\t\t\tobject = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n\t\t\t\t\tif (data.focus !== undefined) object.focus = data.focus;\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\t\t\t\t\tobject = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\t\t\t\t\tobject = new AmbientLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tobject = new DirectionalLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tobject = new PointLight(data.color, data.intensity, data.distance, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tobject = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tobject = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tobject = new HemisphereLight(data.color, data.groundColor, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\t\t\t\t\tobject = new LightProbe().fromJSON(data);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new SkinnedMesh(geometry, material);\n\t\t\t\t\tif (data.bindMode !== undefined) object.bindMode = data.bindMode;\n\t\t\t\t\tif (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n\t\t\t\t\tif (data.skeleton !== undefined) object.skeleton = data.skeleton;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new Mesh(geometry, material);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tconst count = data.count;\n\t\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\t\tconst instanceColor = data.instanceColor;\n\t\t\t\t\tobject = new InstancedMesh(geometry, material, count);\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);\n\t\t\t\t\tif (instanceColor !== undefined) object.instanceColor = new BufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\t\t\t\t\tobject = new LOD();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\t\t\t\t\tobject = new Line(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\t\t\t\t\tobject = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\t\t\t\t\tobject = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\t\t\t\t\tobject = new Points(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\t\t\t\t\tobject = new Sprite(getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\t\t\t\t\tobject = new Group();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Bone':\n\t\t\t\t\tobject = new Bone();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tobject = new Object3D();\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\t\t\tif (data.name !== undefined) object.name = data.name;\n\n\t\t\tif (data.matrix !== undefined) {\n\t\t\t\tobject.matrix.fromArray(data.matrix);\n\t\t\t\tif (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\t\tif (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n\t\t\t} else {\n\t\t\t\tif (data.position !== undefined) object.position.fromArray(data.position);\n\t\t\t\tif (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n\t\t\t\tif (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n\t\t\t\tif (data.scale !== undefined) object.scale.fromArray(data.scale);\n\t\t\t}\n\n\t\t\tif (data.castShadow !== undefined) object.castShadow = data.castShadow;\n\t\t\tif (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif (data.shadow) {\n\t\t\t\tif (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\t\tif (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n\t\t\t\tif (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n\t\t\t}\n\n\t\t\tif (data.visible !== undefined) object.visible = data.visible;\n\t\t\tif (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n\t\t\tif (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n\t\t\tif (data.userData !== undefined) object.userData = data.userData;\n\t\t\tif (data.layers !== undefined) object.layers.mask = data.layers;\n\n\t\t\tif (data.children !== undefined) {\n\t\t\t\tconst children = data.children;\n\n\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\tobject.add(this.parseObject(children[i], geometries, materials, animations));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.animations !== undefined) {\n\t\t\t\tconst objectAnimations = data.animations;\n\n\t\t\t\tfor (let i = 0; i < objectAnimations.length; i++) {\n\t\t\t\t\tconst uuid = objectAnimations[i];\n\t\t\t\t\tobject.animations.push(animations[uuid]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.type === 'LOD') {\n\t\t\t\tif (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n\t\t\t\tconst levels = data.levels;\n\n\t\t\t\tfor (let l = 0; l < levels.length; l++) {\n\t\t\t\t\tconst level = levels[l];\n\t\t\t\t\tconst child = object.getObjectByProperty('uuid', level.object);\n\n\t\t\t\t\tif (child !== undefined) {\n\t\t\t\t\t\tobject.addLevel(child, level.distance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn object;\n\t\t}\n\n\t\tbindSkeletons(object, skeletons) {\n\t\t\tif (Object.keys(skeletons).length === 0) return;\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n\t\t\t\t\tconst skeleton = skeletons[child.skeleton];\n\n\t\t\t\t\tif (skeleton === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchild.bind(skeleton, child.bindMatrix);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t/* DEPRECATED */\n\n\n\t\tsetTexturePath(value) {\n\t\t\tconsole.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');\n\t\t\treturn this.setResourcePath(value);\n\t\t}\n\n\t}\n\n\tconst TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\tconst TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\tconst TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\tclass ImageBitmapLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\n\t\t\tif (typeof createImageBitmap === 'undefined') {\n\t\t\t\tconsole.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n\t\t\t}\n\n\t\t\tif (typeof fetch === 'undefined') {\n\t\t\t\tconsole.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n\t\t\t}\n\n\t\t\tthis.options = {\n\t\t\t\tpremultiplyAlpha: 'none'\n\t\t\t};\n\t\t}\n\n\t\tsetOptions(options) {\n\t\t\tthis.options = options;\n\t\t\treturn this;\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tconst fetchOptions = {};\n\t\t\tfetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n\t\t\tfetchOptions.headers = this.requestHeader;\n\t\t\tfetch(url, fetchOptions).then(function (res) {\n\t\t\t\treturn res.blob();\n\t\t\t}).then(function (blob) {\n\t\t\t\treturn createImageBitmap(blob, Object.assign(scope.options, {\n\t\t\t\t\tcolorSpaceConversion: 'none'\n\t\t\t\t}));\n\t\t\t}).then(function (imageBitmap) {\n\t\t\t\tCache.add(url, imageBitmap);\n\t\t\t\tif (onLoad) onLoad(imageBitmap);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}).catch(function (e) {\n\t\t\t\tif (onError) onError(e);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t});\n\t\t\tscope.manager.itemStart(url);\n\t\t}\n\n\t}\n\n\tImageBitmapLoader.prototype.isImageBitmapLoader = true;\n\n\tclass ShapePath {\n\t\tconstructor() {\n\t\t\tthis.type = 'ShapePath';\n\t\t\tthis.color = new Color();\n\t\t\tthis.subPaths = [];\n\t\t\tthis.currentPath = null;\n\t\t}\n\n\t\tmoveTo(x, y) {\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tlineTo(x, y) {\n\t\t\tthis.currentPath.lineTo(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tquadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tthis.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tbezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tthis.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tsplineThru(pts) {\n\t\t\tthis.currentPath.splineThru(pts);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoShapes(isCCW, noHoles) {\n\t\t\tfunction toShapesNoHoles(inSubpaths) {\n\t\t\t\tconst shapes = [];\n\n\t\t\t\tfor (let i = 0, l = inSubpaths.length; i < l; i++) {\n\t\t\t\t\tconst tmpPath = inSubpaths[i];\n\t\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\t\tshapes.push(tmpShape);\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon(inPt, inPolygon) {\n\t\t\t\tconst polyLen = inPolygon.length; // inPt on polygon contour => immediate success\t\tor\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//\twith the horizontal line through inPt, left of inPt\n\t\t\t\t//\tnot counting lowerY endpoints of edges and whole edges on that line\n\n\t\t\t\tlet inside = false;\n\n\t\t\t\tfor (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n\t\t\t\t\tlet edgeLowPt = inPolygon[p];\n\t\t\t\t\tlet edgeHighPt = inPolygon[q];\n\t\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif (Math.abs(edgeDy) > Number.EPSILON) {\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif (edgeDy < 0) {\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[q];\n\t\t\t\t\t\t\tedgeDx = -edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[p];\n\t\t\t\t\t\t\tedgeDy = -edgeDy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n\t\t\t\t\t\tif (inPt.y === edgeLowPt.y) {\n\t\t\t\t\t\t\tif (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n\t\t\t\t\t\t\tif (perpEdge === 0) return true; // inPt is on contour ?\n\n\t\t\t\t\t\t\tif (perpEdge < 0) continue;\n\t\t\t\t\t\t\tinside = !inside; // true intersection left of inPt\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif (inPt.y !== edgeLowPt.y) continue; // parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\n\t\t\t\t\t\tif (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn inside;\n\t\t\t}\n\n\t\t\tconst isClockWise = ShapeUtils.isClockWise;\n\t\t\tconst subPaths = this.subPaths;\n\t\t\tif (subPaths.length === 0) return [];\n\t\t\tif (noHoles === true) return toShapesNoHoles(subPaths);\n\t\t\tlet solid, tmpPath, tmpShape;\n\t\t\tconst shapes = [];\n\n\t\t\tif (subPaths.length === 1) {\n\t\t\t\ttmpPath = subPaths[0];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tlet holesFirst = !isClockWise(subPaths[0].getPoints());\n\t\t\tholesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n\t\t\tconst betterShapeHoles = [];\n\t\t\tconst newShapes = [];\n\t\t\tlet newShapeHoles = [];\n\t\t\tlet mainIdx = 0;\n\t\t\tlet tmpPoints;\n\t\t\tnewShapes[mainIdx] = undefined;\n\t\t\tnewShapeHoles[mainIdx] = [];\n\n\t\t\tfor (let i = 0, l = subPaths.length; i < l; i++) {\n\t\t\t\ttmpPath = subPaths[i];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise(tmpPoints);\n\t\t\t\tsolid = isCCW ? !solid : solid;\n\n\t\t\t\tif (solid) {\n\t\t\t\t\tif (!holesFirst && newShapes[mainIdx]) mainIdx++;\n\t\t\t\t\tnewShapes[mainIdx] = {\n\t\t\t\t\t\ts: new Shape(),\n\t\t\t\t\t\tp: tmpPoints\n\t\t\t\t\t};\n\t\t\t\t\tnewShapes[mainIdx].s.curves = tmpPath.curves;\n\t\t\t\t\tif (holesFirst) mainIdx++;\n\t\t\t\t\tnewShapeHoles[mainIdx] = []; //console.log('cw', i);\n\t\t\t\t} else {\n\t\t\t\t\tnewShapeHoles[mainIdx].push({\n\t\t\t\t\t\th: tmpPath,\n\t\t\t\t\t\tp: tmpPoints[0]\n\t\t\t\t\t}); //console.log('ccw', i);\n\t\t\t\t}\n\t\t\t} // only Holes? -> probably all Shapes with wrong orientation\n\n\n\t\t\tif (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n\t\t\tif (newShapes.length > 1) {\n\t\t\t\tlet ambiguous = false;\n\t\t\t\tconst toChange = [];\n\n\t\t\t\tfor (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tbetterShapeHoles[sIdx] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tconst sho = newShapeHoles[sIdx];\n\n\t\t\t\t\tfor (let hIdx = 0; hIdx < sho.length; hIdx++) {\n\t\t\t\t\t\tconst ho = sho[hIdx];\n\t\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\t\tfor (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n\t\t\t\t\t\t\tif (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n\t\t\t\t\t\t\t\tif (sIdx !== s2Idx) toChange.push({\n\t\t\t\t\t\t\t\t\tfroms: sIdx,\n\t\t\t\t\t\t\t\t\ttos: s2Idx,\n\t\t\t\t\t\t\t\t\thole: hIdx\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[s2Idx].push(ho);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\tbetterShapeHoles[sIdx].push(ho);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // console.log(\"ambiguous: \", ambiguous);\n\n\n\t\t\t\tif (toChange.length > 0) {\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif (!ambiguous) newShapeHoles = betterShapeHoles;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet tmpHoles;\n\n\t\t\tfor (let i = 0, il = newShapes.length; i < il; i++) {\n\t\t\t\ttmpShape = newShapes[i].s;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\ttmpHoles = newShapeHoles[i];\n\n\t\t\t\tfor (let j = 0, jl = tmpHoles.length; j < jl; j++) {\n\t\t\t\t\ttmpShape.holes.push(tmpHoles[j].h);\n\t\t\t\t}\n\t\t\t} //console.log(\"shape\", shapes);\n\n\n\t\t\treturn shapes;\n\t\t}\n\n\t}\n\n\tclass Font {\n\t\tconstructor(data) {\n\t\t\tthis.type = 'Font';\n\t\t\tthis.data = data;\n\t\t}\n\n\t\tgenerateShapes(text, size = 100) {\n\t\t\tconst shapes = [];\n\t\t\tconst paths = createPaths(text, size, this.data);\n\n\t\t\tfor (let p = 0, pl = paths.length; p < pl; p++) {\n\t\t\t\tArray.prototype.push.apply(shapes, paths[p].toShapes());\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t}\n\n\t}\n\n\tfunction createPaths(text, size, data) {\n\t\tconst chars = Array.from(text);\n\t\tconst scale = size / data.resolution;\n\t\tconst line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n\t\tconst paths = [];\n\t\tlet offsetX = 0,\n\t\t\t\toffsetY = 0;\n\n\t\tfor (let i = 0; i < chars.length; i++) {\n\t\t\tconst char = chars[i];\n\n\t\t\tif (char === '\\n') {\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\t\t\t} else {\n\t\t\t\tconst ret = createPath(char, scale, offsetX, offsetY, data);\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push(ret.path);\n\t\t\t}\n\t\t}\n\n\t\treturn paths;\n\t}\n\n\tfunction createPath(char, scale, offsetX, offsetY, data) {\n\t\tconst glyph = data.glyphs[char] || data.glyphs['?'];\n\n\t\tif (!glyph) {\n\t\t\tconsole.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst path = new ShapePath();\n\t\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif (glyph.o) {\n\t\t\tconst outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n\t\t\tfor (let i = 0, l = outline.length; i < l;) {\n\t\t\t\tconst action = outline[i++];\n\n\t\t\t\tswitch (action) {\n\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t// moveTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.moveTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t// lineTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.lineTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\t// quadraticCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t// bezierCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\toffsetX: glyph.ha * scale,\n\t\t\tpath: path\n\t\t};\n\t}\n\n\tFont.prototype.isFont = true;\n\n\tclass FontLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tlet json;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n\t\t\t\t\tjson = JSON.parse(text.substring(65, text.length - 2));\n\t\t\t\t}\n\n\t\t\t\tconst font = scope.parse(json);\n\t\t\t\tif (onLoad) onLoad(font);\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\treturn new Font(json);\n\t\t}\n\n\t}\n\n\tlet _context;\n\n\tconst AudioContext = {\n\t\tgetContext: function () {\n\t\t\tif (_context === undefined) {\n\t\t\t\t_context = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\t}\n\n\t\t\treturn _context;\n\t\t},\n\t\tsetContext: function (value) {\n\t\t\t_context = value;\n\t\t}\n\t};\n\n\tclass AudioLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\ttry {\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tconst bufferCopy = buffer.slice(0);\n\t\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData(bufferCopy, function (audioBuffer) {\n\t\t\t\t\t\tonLoad(audioBuffer);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t}\n\n\tclass HemisphereLightProbe extends LightProbe {\n\t\tconstructor(skyColor, groundColor, intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tconst color1 = new Color().set(skyColor);\n\t\t\tconst color2 = new Color().set(groundColor);\n\t\t\tconst sky = new Vector3(color1.r, color1.g, color1.b);\n\t\t\tconst ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\n\t\t\tconst c0 = Math.sqrt(Math.PI);\n\t\t\tconst c1 = c0 * Math.sqrt(0.75);\n\t\t\tthis.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);\n\t\t\tthis.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);\n\t\t}\n\n\t}\n\n\tHemisphereLightProbe.prototype.isHemisphereLightProbe = true;\n\n\tclass AmbientLightProbe extends LightProbe {\n\t\tconstructor(color, intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tconst color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\n\t\t\tthis.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));\n\t\t}\n\n\t}\n\n\tAmbientLightProbe.prototype.isAmbientLightProbe = true;\n\n\tconst _eyeRight = /*@__PURE__*/new Matrix4();\n\n\tconst _eyeLeft = /*@__PURE__*/new Matrix4();\n\n\tclass StereoCamera {\n\t\tconstructor() {\n\t\t\tthis.type = 'StereoCamera';\n\t\t\tthis.aspect = 1;\n\t\t\tthis.eyeSep = 0.064;\n\t\t\tthis.cameraL = new PerspectiveCamera();\n\t\t\tthis.cameraL.layers.enable(1);\n\t\t\tthis.cameraL.matrixAutoUpdate = false;\n\t\t\tthis.cameraR = new PerspectiveCamera();\n\t\t\tthis.cameraR.layers.enable(2);\n\t\t\tthis.cameraR.matrixAutoUpdate = false;\n\t\t\tthis._cache = {\n\t\t\t\tfocus: null,\n\t\t\t\tfov: null,\n\t\t\t\taspect: null,\n\t\t\t\tnear: null,\n\t\t\t\tfar: null,\n\t\t\t\tzoom: null,\n\t\t\t\teyeSep: null\n\t\t\t};\n\t\t}\n\n\t\tupdate(camera) {\n\t\t\tconst cache = this._cache;\n\t\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif (needsUpdate) {\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tconst projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tconst ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;\n\t\t\t\tlet xmin, xmax; // translate xOffset\n\n\t\t\t\t_eyeLeft.elements[12] = -eyeSepHalf;\n\t\t\t\t_eyeRight.elements[12] = eyeSepHalf; // for left eye\n\n\t\t\t\txmin = -ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n\t\t\t\txmin = -ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraR.projectionMatrix.copy(projectionMatrix);\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n\t\t\tthis.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n\t\t}\n\n\t}\n\n\tclass Clock {\n\t\tconstructor(autoStart = true) {\n\t\t\tthis.autoStart = autoStart;\n\t\t\tthis.startTime = 0;\n\t\t\tthis.oldTime = 0;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = false;\n\t\t}\n\n\t\tstart() {\n\t\t\tthis.startTime = now();\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\t\t}\n\n\t\tstop() {\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\t\t}\n\n\t\tgetElapsedTime() {\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\t\t}\n\n\t\tgetDelta() {\n\t\t\tlet diff = 0;\n\n\t\t\tif (this.autoStart && !this.running) {\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (this.running) {\n\t\t\t\tconst newTime = now();\n\t\t\t\tdiff = (newTime - this.oldTime) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\t\t\t\tthis.elapsedTime += diff;\n\t\t\t}\n\n\t\t\treturn diff;\n\t\t}\n\n\t}\n\n\tfunction now() {\n\t\treturn (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\n\t}\n\n\tconst _position$1 = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$1 = /*@__PURE__*/new Quaternion();\n\n\tconst _scale$1 = /*@__PURE__*/new Vector3();\n\n\tconst _orientation$1 = /*@__PURE__*/new Vector3();\n\n\tclass AudioListener extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'AudioListener';\n\t\t\tthis.context = AudioContext.getContext();\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect(this.context.destination);\n\t\t\tthis.filter = null;\n\t\t\tthis.timeDelta = 0; // private\n\n\t\t\tthis._clock = new Clock();\n\t\t}\n\n\t\tgetInput() {\n\t\t\treturn this.gain;\n\t\t}\n\n\t\tremoveFilter() {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t\tthis.gain.connect(this.context.destination);\n\t\t\t\tthis.filter = null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetFilter() {\n\t\t\treturn this.filter;\n\t\t}\n\n\t\tsetFilter(value) {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t} else {\n\t\t\t\tthis.gain.disconnect(this.context.destination);\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect(this.filter);\n\t\t\tthis.filter.connect(this.context.destination);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMasterVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\n\t\tsetMasterVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tconst listener = this.context.listener;\n\t\t\tconst up = this.up;\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\t\t\tthis.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);\n\n\t\t\t_orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);\n\n\t\t\tif (listener.positionX) {\n\t\t\t\t// code path for Chrome (see #14393)\n\t\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\t\t\t\tlistener.positionX.linearRampToValueAtTime(_position$1.x, endTime);\n\t\t\t\tlistener.positionY.linearRampToValueAtTime(_position$1.y, endTime);\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n\t\t\t\tlistener.upX.linearRampToValueAtTime(up.x, endTime);\n\t\t\t\tlistener.upY.linearRampToValueAtTime(up.y, endTime);\n\t\t\t\tlistener.upZ.linearRampToValueAtTime(up.z, endTime);\n\t\t\t} else {\n\t\t\t\tlistener.setPosition(_position$1.x, _position$1.y, _position$1.z);\n\t\t\t\tlistener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass Audio extends Object3D {\n\t\tconstructor(listener) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Audio';\n\t\t\tthis.listener = listener;\n\t\t\tthis.context = listener.context;\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect(listener.getInput());\n\t\t\tthis.autoplay = false;\n\t\t\tthis.buffer = null;\n\t\t\tthis.detune = 0;\n\t\t\tthis.loop = false;\n\t\t\tthis.loopStart = 0;\n\t\t\tthis.loopEnd = 0;\n\t\t\tthis.offset = 0;\n\t\t\tthis.duration = undefined;\n\t\t\tthis.playbackRate = 1;\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.hasPlaybackControl = true;\n\t\t\tthis.source = null;\n\t\t\tthis.sourceType = 'empty';\n\t\t\tthis._startedAt = 0;\n\t\t\tthis._progress = 0;\n\t\t\tthis._connected = false;\n\t\t\tthis.filters = [];\n\t\t}\n\n\t\tgetOutput() {\n\t\t\treturn this.gain;\n\t\t}\n\n\t\tsetNodeSource(audioNode) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMediaElementSource(mediaElement) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource(mediaElement);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMediaStreamSource(mediaStream) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource(mediaStream);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetBuffer(audioBuffer) {\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\t\t\tif (this.autoplay) this.play();\n\t\t\treturn this;\n\t\t}\n\n\t\tplay(delay = 0) {\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tconsole.warn('THREE.Audio: Audio is already playing.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\t\t\tconst source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind(this);\n\t\t\tsource.start(this._startedAt, this._progress + this.offset, this.duration);\n\t\t\tthis.isPlaying = true;\n\t\t\tthis.source = source;\n\t\t\tthis.setDetune(this.detune);\n\t\t\tthis.setPlaybackRate(this.playbackRate);\n\t\t\treturn this.connect();\n\t\t}\n\n\t\tpause() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\t// update current progress\n\t\t\t\tthis._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n\n\t\t\t\tif (this.loop === true) {\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\t\t\t\t\tthis._progress = this._progress % (this.duration || this.buffer.duration);\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\t\t\t\tthis.isPlaying = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tstop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\t\t\treturn this;\n\t\t}\n\n\t\tconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.connect(this.filters[0]);\n\n\t\t\t\tfor (let i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].connect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].connect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.connect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = true;\n\t\t\treturn this;\n\t\t}\n\n\t\tdisconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.disconnect(this.filters[0]);\n\n\t\t\t\tfor (let i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].disconnect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].disconnect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.disconnect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = false;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetFilters() {\n\t\t\treturn this.filters;\n\t\t}\n\n\t\tsetFilters(value) {\n\t\t\tif (!value) value = [];\n\n\t\t\tif (this._connected === true) {\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value.slice();\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.filters = value.slice();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDetune(value) {\n\t\t\tthis.detune = value;\n\t\t\tif (this.source.detune === undefined) return; // only set detune when available\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetDetune() {\n\t\t\treturn this.detune;\n\t\t}\n\n\t\tgetFilter() {\n\t\t\treturn this.getFilters()[0];\n\t\t}\n\n\t\tsetFilter(filter) {\n\t\t\treturn this.setFilters(filter ? [filter] : []);\n\t\t}\n\n\t\tsetPlaybackRate(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetPlaybackRate() {\n\t\t\treturn this.playbackRate;\n\t\t}\n\n\t\tonEnded() {\n\t\t\tthis.isPlaying = false;\n\t\t}\n\n\t\tgetLoop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn this.loop;\n\t\t}\n\n\t\tsetLoop(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.loop = this.loop;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoopStart(value) {\n\t\t\tthis.loopStart = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoopEnd(value) {\n\t\t\tthis.loopEnd = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\n\t\tsetVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tconst _position = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion = /*@__PURE__*/new Quaternion();\n\n\tconst _scale = /*@__PURE__*/new Vector3();\n\n\tconst _orientation = /*@__PURE__*/new Vector3();\n\n\tclass PositionalAudio extends Audio {\n\t\tconstructor(listener) {\n\t\t\tsuper(listener);\n\t\t\tthis.panner = this.context.createPanner();\n\t\t\tthis.panner.panningModel = 'HRTF';\n\t\t\tthis.panner.connect(this.gain);\n\t\t}\n\n\t\tgetOutput() {\n\t\t\treturn this.panner;\n\t\t}\n\n\t\tgetRefDistance() {\n\t\t\treturn this.panner.refDistance;\n\t\t}\n\n\t\tsetRefDistance(value) {\n\t\t\tthis.panner.refDistance = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetRolloffFactor() {\n\t\t\treturn this.panner.rolloffFactor;\n\t\t}\n\n\t\tsetRolloffFactor(value) {\n\t\t\tthis.panner.rolloffFactor = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetDistanceModel() {\n\t\t\treturn this.panner.distanceModel;\n\t\t}\n\n\t\tsetDistanceModel(value) {\n\t\t\tthis.panner.distanceModel = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMaxDistance() {\n\t\t\treturn this.panner.maxDistance;\n\t\t}\n\n\t\tsetMaxDistance(value) {\n\t\t\tthis.panner.maxDistance = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tif (this.hasPlaybackControl === true && this.isPlaying === false) return;\n\t\t\tthis.matrixWorld.decompose(_position, _quaternion, _scale);\n\n\t\t\t_orientation.set(0, 0, 1).applyQuaternion(_quaternion);\n\n\t\t\tconst panner = this.panner;\n\n\t\t\tif (panner.positionX) {\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\t\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\t\t\t\tpanner.positionX.linearRampToValueAtTime(_position.x, endTime);\n\t\t\t\tpanner.positionY.linearRampToValueAtTime(_position.y, endTime);\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime(_position.z, endTime);\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);\n\t\t\t} else {\n\t\t\t\tpanner.setPosition(_position.x, _position.y, _position.z);\n\t\t\t\tpanner.setOrientation(_orientation.x, _orientation.y, _orientation.z);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass AudioAnalyser {\n\t\tconstructor(audio, fftSize = 2048) {\n\t\t\tthis.analyser = audio.context.createAnalyser();\n\t\t\tthis.analyser.fftSize = fftSize;\n\t\t\tthis.data = new Uint8Array(this.analyser.frequencyBinCount);\n\t\t\taudio.getOutput().connect(this.analyser);\n\t\t}\n\n\t\tgetFrequencyData() {\n\t\t\tthis.analyser.getByteFrequencyData(this.data);\n\t\t\treturn this.data;\n\t\t}\n\n\t\tgetAverageFrequency() {\n\t\t\tlet value = 0;\n\t\t\tconst data = this.getFrequencyData();\n\n\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\tvalue += data[i];\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\t\t}\n\n\t}\n\n\tclass PropertyMixer {\n\t\tconstructor(binding, typeName, valueSize) {\n\t\t\tthis.binding = binding;\n\t\t\tthis.valueSize = valueSize;\n\t\t\tlet mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t\t//\n\t\t\t// interpolators can use .buffer as their .result\n\t\t\t// the data then goes to 'incoming'\n\t\t\t//\n\t\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t\t// the cumulative result and are compared to detect\n\t\t\t// changes\n\t\t\t//\n\t\t\t// 'orig' stores the original state of the property\n\t\t\t//\n\t\t\t// 'add' is used for additive cumulative results\n\t\t\t//\n\t\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t\t// to store intermediate quaternion multiplication results\n\n\t\t\tswitch (typeName) {\n\t\t\t\tcase 'quaternion':\n\t\t\t\t\tmixFunction = this._slerp;\n\t\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 6);\n\t\t\t\t\tthis._workIndex = 5;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'string':\n\t\t\t\tcase 'bool':\n\t\t\t\t\tmixFunction = this._select; // Use the regular mix function and for additive on these types,\n\t\t\t\t\t// additive is not relevant for non-numeric types\n\n\t\t\t\t\tmixFunctionAdditive = this._select;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\t\t\t\t\tthis.buffer = new Array(valueSize * 5);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmixFunction = this._lerp;\n\t\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 5);\n\t\t\t}\n\n\t\t\tthis._mixBufferRegion = mixFunction;\n\t\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\t\tthis._setIdentity = setIdentity;\n\t\t\tthis._origIndex = 3;\n\t\t\tthis._addIndex = 4;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t\tthis.useCount = 0;\n\t\t\tthis.referenceCount = 0;\n\t\t} // accumulate data in the 'incoming' region into 'accu<i>'\n\n\n\t\taccumulate(accuIndex, weight) {\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = accuIndex * stride + stride;\n\t\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\t\tif (currentWeight === 0) {\n\t\t\t\t// accuN := incoming * weight\n\t\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[offset + i] = buffer[i];\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\t\t\t} else {\n\t\t\t\t// accuN := accuN + incoming * weight\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tconst mix = weight / currentWeight;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, 0, mix, stride);\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\t\t} // accumulate data in the 'incoming' region into 'add'\n\n\n\t\taccumulateAdditive(weight) {\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif (this.cumulativeWeightAdditive === 0) {\n\t\t\t\t// add = identity\n\t\t\t\tthis._setIdentity();\n\t\t\t} // add := add + incoming * weight\n\n\n\t\t\tthis._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\t\t} // apply the state of 'accu<i>' to the binding when accus differ\n\n\n\t\tapply(accuIndex) {\n\t\t\tconst stride = this.valueSize,\n\t\t\t\t\t\tbuffer = this.buffer,\n\t\t\t\t\t\toffset = accuIndex * stride + stride,\n\t\t\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\t\t\t\t\t\tbinding = this.binding;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif (weight < 1) {\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n\t\t\t}\n\n\t\t\tif (weightAdditive > 0) {\n\t\t\t\t// accuN := accuN + additive accuN\n\t\t\t\tthis._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n\t\t\t}\n\n\t\t\tfor (let i = stride, e = stride + stride; i !== e; ++i) {\n\t\t\t\tif (buffer[i] !== buffer[i + stride]) {\n\t\t\t\t\t// value has changed -> update scene graph\n\t\t\t\t\tbinding.setValue(buffer, offset);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} // remember the state of the bound property and copy it to both accus\n\n\n\t\tsaveOriginalState() {\n\t\t\tconst binding = this.binding;\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\t\t\tbinding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n\t\t\tfor (let i = stride, e = originalValueOffset; i !== e; ++i) {\n\t\t\t\tbuffer[i] = buffer[originalValueOffset + i % stride];\n\t\t\t} // Add to identity for additive\n\n\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t} // apply the state previously taken via 'saveOriginalState' to the binding\n\n\n\t\trestoreOriginalState() {\n\t\t\tconst originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue(this.buffer, originalValueOffset);\n\t\t}\n\n\t\t_setAdditiveIdentityNumeric() {\n\t\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\tthis.buffer[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t_setAdditiveIdentityQuaternion() {\n\t\t\tthis._setAdditiveIdentityNumeric();\n\n\t\t\tthis.buffer[this._addIndex * this.valueSize + 3] = 1;\n\t\t}\n\n\t\t_setAdditiveIdentityOther() {\n\t\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor (let i = 0; i < this.valueSize; i++) {\n\t\t\t\tthis.buffer[targetIndex + i] = this.buffer[startIndex + i];\n\t\t\t}\n\t\t} // mix functions\n\n\n\t\t_select(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tif (t >= 0.5) {\n\t\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[dstOffset + i] = buffer[srcOffset + i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_slerp(buffer, dstOffset, srcOffset, t) {\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n\t\t}\n\n\t\t_slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tconst workOffset = this._workIndex * stride; // Store result in intermediate buffer offset\n\n\t\t\tQuaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result\n\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n\t\t}\n\n\t\t_lerp(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tconst s = 1 - t;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tconst j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\n\t\t_lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tconst j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n\tconst _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\n\n\tconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\n\tconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\n\n\tconst _directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\n\n\tconst _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\n\n\tconst _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\n\n\tconst _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\n\n\tconst _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\n\n\tconst _supportedObjectNames = ['material', 'materials', 'bones'];\n\n\tclass Composite {\n\t\tconstructor(targetGroup, path, optionalParsedPath) {\n\t\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n\t\t\tthis._targetGroup = targetGroup;\n\t\t\tthis._bindings = targetGroup.subscribe_(path, parsedPath);\n\t\t}\n\n\t\tgetValue(array, offset) {\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t\tbinding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n\t\t\tif (binding !== undefined) binding.getValue(array, offset);\n\t\t}\n\n\t\tsetValue(array, offset) {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].setValue(array, offset);\n\t\t\t}\n\t\t}\n\n\t\tbind() {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].bind();\n\t\t\t}\n\t\t}\n\n\t\tunbind() {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].unbind();\n\t\t\t}\n\t\t}\n\n\t} // Note: This class uses a State pattern on a per-method basis:\n\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t// prototype version of these methods with one that represents\n\t// the bound state. When the property is not found, the methods\n\t// become no-ops.\n\n\n\tclass PropertyBinding {\n\t\tconstructor(rootNode, path, parsedPath) {\n\t\t\tthis.path = path;\n\t\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\t\t\tthis.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n\t\t\tthis.rootNode = rootNode; // initial state of these methods that calls 'bind'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\n\t\tstatic create(root, path, parsedPath) {\n\t\t\tif (!(root && root.isAnimationObjectGroup)) {\n\t\t\t\treturn new PropertyBinding(root, path, parsedPath);\n\t\t\t} else {\n\t\t\t\treturn new PropertyBinding.Composite(root, path, parsedPath);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\n\n\t\tstatic sanitizeNodeName(name) {\n\t\t\treturn name.replace(/\\s/g, '_').replace(_reservedRe, '');\n\t\t}\n\n\t\tstatic parseTrackName(trackName) {\n\t\t\tconst matches = _trackRe.exec(trackName);\n\n\t\t\tif (!matches) {\n\t\t\t\tthrow new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n\t\t\t}\n\n\t\t\tconst results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[2],\n\t\t\t\tobjectName: matches[3],\n\t\t\t\tobjectIndex: matches[4],\n\t\t\t\tpropertyName: matches[5],\n\t\t\t\t// required\n\t\t\t\tpropertyIndex: matches[6]\n\t\t\t};\n\t\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n\n\t\t\tif (lastDot !== undefined && lastDot !== -1) {\n\t\t\t\tconst objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\n\t\t\t\tif (_supportedObjectNames.indexOf(objectName) !== -1) {\n\t\t\t\t\tresults.nodeName = results.nodeName.substring(0, lastDot);\n\t\t\t\t\tresults.objectName = objectName;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (results.propertyName === null || results.propertyName.length === 0) {\n\t\t\t\tthrow new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t}\n\n\t\tstatic findNode(root, nodeName) {\n\t\t\tif (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n\t\t\t\treturn root;\n\t\t\t} // search into skeleton bones.\n\n\n\t\t\tif (root.skeleton) {\n\t\t\t\tconst bone = root.skeleton.getBoneByName(nodeName);\n\n\t\t\t\tif (bone !== undefined) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t} // search into node subtree.\n\n\n\t\t\tif (root.children) {\n\t\t\t\tconst searchNodeSubtree = function (children) {\n\t\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\t\tconst childNode = children[i];\n\n\t\t\t\t\t\tif (childNode.name === nodeName || childNode.uuid === nodeName) {\n\t\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst result = searchNodeSubtree(childNode.children);\n\t\t\t\t\t\tif (result) return result;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t};\n\n\t\t\t\tconst subTreeNode = searchNodeSubtree(root.children);\n\n\t\t\t\tif (subTreeNode) {\n\t\t\t\t\treturn subTreeNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} // these are used to \"bind\" a nonexistent property\n\n\n\t\t_getValue_unavailable() {}\n\n\t\t_setValue_unavailable() {} // Getters\n\n\n\t\t_getValue_direct(buffer, offset) {\n\t\t\tbuffer[offset] = this.node[this.propertyName];\n\t\t}\n\n\t\t_getValue_array(buffer, offset) {\n\t\t\tconst source = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = source.length; i !== n; ++i) {\n\t\t\t\tbuffer[offset++] = source[i];\n\t\t\t}\n\t\t}\n\n\t\t_getValue_arrayElement(buffer, offset) {\n\t\t\tbuffer[offset] = this.resolvedProperty[this.propertyIndex];\n\t\t}\n\n\t\t_getValue_toArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.toArray(buffer, offset);\n\t\t} // Direct\n\n\n\t\t_setValue_direct(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t}\n\n\t\t_setValue_direct_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // EntireArray\n\n\n\t\t_setValue_array(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\t\t}\n\n\t\t_setValue_array_setNeedsUpdate(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // ArrayElement\n\n\n\t\t_setValue_arrayElement(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t}\n\n\t\t_setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // HasToFromArray\n\n\n\t\t_setValue_fromArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t}\n\n\t\t_setValue_fromArray_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}\n\n\t\t_getValue_unbound(targetArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.getValue(targetArray, offset);\n\t\t}\n\n\t\t_setValue_unbound(sourceArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.setValue(sourceArray, offset);\n\t\t} // create getter / setter pair for a property in the scene graph\n\n\n\t\tbind() {\n\t\t\tlet targetObject = this.node;\n\t\t\tconst parsedPath = this.parsedPath;\n\t\t\tconst objectName = parsedPath.objectName;\n\t\t\tconst propertyName = parsedPath.propertyName;\n\t\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif (!targetObject) {\n\t\t\t\ttargetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n\t\t\t\tthis.node = targetObject;\n\t\t\t} // set fail state so we can just 'return' on error\n\n\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable; // ensure there is a value node\n\n\t\t\tif (!targetObject) {\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (objectName) {\n\t\t\t\tlet objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n\t\t\t\tswitch (objectName) {\n\t\t\t\t\tcase 'materials':\n\t\t\t\t\t\tif (!targetObject.material) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!targetObject.material.materials) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\t\t\t\t\t\tif (!targetObject.skeleton) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} // potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n\t\t\t\t\t\tfor (let i = 0; i < targetObject.length; i++) {\n\t\t\t\t\t\t\tif (targetObject[i].name === objectIndex) {\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (targetObject[objectName] === undefined) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[objectName];\n\t\t\t\t}\n\n\t\t\t\tif (objectIndex !== undefined) {\n\t\t\t\t\tif (targetObject[objectIndex] === undefined) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[objectIndex];\n\t\t\t\t}\n\t\t\t} // resolve property\n\n\n\t\t\tconst nodeProperty = targetObject[propertyName];\n\n\t\t\tif (nodeProperty === undefined) {\n\t\t\t\tconst nodeName = parsedPath.nodeName;\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n\t\t\t\treturn;\n\t\t\t} // determine versioning scheme\n\n\n\t\t\tlet versioning = this.Versioning.None;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif (targetObject.needsUpdate !== undefined) {\n\t\t\t\t// material\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n\t\t\t\t// node transform\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t} // determine how the property gets bound\n\n\n\t\t\tlet bindingType = this.BindingType.Direct;\n\n\t\t\tif (propertyIndex !== undefined) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\t\t\tif (propertyName === 'morphTargetInfluences') {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif (!targetObject.geometry) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (targetObject.geometry.isBufferGeometry) {\n\t\t\t\t\t\tif (!targetObject.geometry.morphAttributes) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\t\t\t} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else if (Array.isArray(nodeProperty)) {\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else {\n\t\t\t\tthis.propertyName = propertyName;\n\t\t\t} // select getter / setter\n\n\n\t\t\tthis.getValue = this.GetterByBindingType[bindingType];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n\t\t}\n\n\t\tunbind() {\n\t\t\tthis.node = null; // back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\n\t}\n\n\tPropertyBinding.Composite = Composite;\n\tPropertyBinding.prototype.BindingType = {\n\t\tDirect: 0,\n\t\tEntireArray: 1,\n\t\tArrayElement: 2,\n\t\tHasFromToArray: 3\n\t};\n\tPropertyBinding.prototype.Versioning = {\n\t\tNone: 0,\n\t\tNeedsUpdate: 1,\n\t\tMatrixWorldNeedsUpdate: 2\n\t};\n\tPropertyBinding.prototype.GetterByBindingType = [PropertyBinding.prototype._getValue_direct, PropertyBinding.prototype._getValue_array, PropertyBinding.prototype._getValue_arrayElement, PropertyBinding.prototype._getValue_toArray];\n\tPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[// Direct\n\tPropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [// EntireArray\n\tPropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [// ArrayElement\n\tPropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [// HasToFromArray\n\tPropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate, PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *\t- Add objects you would otherwise pass as 'root' to the\n\t *\t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t *\t- Instead pass this object as 'root'.\n\t *\n\t *\t- You can also add and remove objects later when the mixer\n\t *\t\tis running.\n\t *\n\t * Note:\n\t *\n\t *\t\tObjects of this class appear as one object to the mixer,\n\t *\t\tso cache control of the individual objects must be done\n\t *\t\ton the group.\n\t *\n\t * Limitation:\n\t *\n\t *\t- The animated properties must be compatible among the\n\t *\t\tall objects in the group.\n\t *\n\t *\t- A single property can either be controlled through a\n\t *\t\ttarget group or directly, but not both.\n\t */\n\n\tclass AnimationObjectGroup {\n\t\tconstructor() {\n\t\t\tthis.uuid = generateUUID(); // cached objects followed by the active ones\n\n\t\t\tthis._objects = Array.prototype.slice.call(arguments);\n\t\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t\t// note: read by PropertyBinding.Composite\n\n\t\t\tconst indices = {};\n\t\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tindices[arguments[i].uuid] = i;\n\t\t\t}\n\n\t\t\tthis._paths = []; // inside: string\n\n\t\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\n\t\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\n\t\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\t\tconst scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tobjects: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._objects.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tget bindingsPerObject() {\n\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n\t\tadd() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tpaths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet knownObject = undefined,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tlet index = indicesByUUID[uuid];\n\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\t\t\t\tindex = nObjects++;\n\t\t\t\t\tindicesByUUID[uuid] = index;\n\t\t\t\t\tobjects.push(object); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tbindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n\t\t\t\t\t}\n\t\t\t\t} else if (index < nCachedObjects) {\n\t\t\t\t\tknownObject = objects[index]; // move existing object to the ACTIVE region\n\n\t\t\t\t\tconst firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex];\n\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\tobjects[index] = lastCachedObject;\n\t\t\t\t\tindicesByUUID[uuid] = firstActiveIndex;\n\t\t\t\t\tobjects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex];\n\t\t\t\t\t\tlet binding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\n\t\t\t\t\t\tif (binding === undefined) {\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\t\t\t\t\t\t\tbinding = new PropertyBinding(object, paths[j], parsedPaths[j]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t} else if (objects[index] !== knownObject) {\n\t\t\t\t\tconsole.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t}\n\n\t\tremove() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined && index >= nCachedObjects) {\n\t\t\t\t\t// move existing object into the CACHED region\n\t\t\t\t\tconst lastCachedIndex = nCachedObjects++,\n\t\t\t\t\t\t\t\tfirstActiveObject = objects[lastCachedIndex];\n\t\t\t\t\tindicesByUUID[firstActiveObject.uuid] = index;\n\t\t\t\t\tobjects[index] = firstActiveObject;\n\t\t\t\t\tindicesByUUID[uuid] = lastCachedIndex;\n\t\t\t\t\tobjects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tfirstActive = bindingsForPath[lastCachedIndex],\n\t\t\t\t\t\t\t\t\tbinding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = firstActive;\n\t\t\t\t\t\tbindingsForPath[lastCachedIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // remove & forget\n\n\n\t\tuncache() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined) {\n\t\t\t\t\tdelete indicesByUUID[uuid];\n\n\t\t\t\t\tif (index < nCachedObjects) {\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\t\t\t\t\t\tconst firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex],\n\t\t\t\t\t\t\t\t\tlastIndex = --nObjects,\n\t\t\t\t\t\t\t\t\tlastObject = objects[lastIndex]; // last cached object takes this object's place\n\n\t\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\t\tobjects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = firstActiveIndex;\n\t\t\t\t\t\tobjects[firstActiveIndex] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex],\n\t\t\t\t\t\t\t\t\t\tlast = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\t\t\t\t\t\tconst lastIndex = --nObjects,\n\t\t\t\t\t\t\t\t\tlastObject = objects[lastIndex];\n\n\t\t\t\t\t\tif (lastIndex > 0) {\n\t\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = index;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobjects[index] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tconst bindingsForPath = bindings[j];\n\t\t\t\t\t\t\tbindingsForPath[index] = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // Internal interface used by befriended PropertyBinding.Composite:\n\n\n\t\tsubscribe_(path, parsedPath) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\t\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\t\tlet index = indicesByPath[path];\n\t\t\tconst bindings = this._bindings;\n\t\t\tif (index !== undefined) return bindings[index];\n\t\t\tconst paths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tobjects = this._objects,\n\t\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\t\tbindingsForPath = new Array(nObjects);\n\t\t\tindex = bindings.length;\n\t\t\tindicesByPath[path] = index;\n\t\t\tpaths.push(path);\n\t\t\tparsedPaths.push(parsedPath);\n\t\t\tbindings.push(bindingsForPath);\n\n\t\t\tfor (let i = nCachedObjects, n = objects.length; i !== n; ++i) {\n\t\t\t\tconst object = objects[i];\n\t\t\t\tbindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\t\t}\n\n\t\tunsubscribe_(path) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\t\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\t\t\tindex = indicesByPath[path];\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tconst paths = this._paths,\n\t\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\t\t\tlastBindings = bindings[lastBindingsIndex],\n\t\t\t\t\t\t\tlastBindingsPath = path[lastBindingsIndex];\n\t\t\t\tindicesByPath[lastBindingsPath] = index;\n\t\t\t\tbindings[index] = lastBindings;\n\t\t\t\tbindings.pop();\n\t\t\t\tparsedPaths[index] = parsedPaths[lastBindingsIndex];\n\t\t\t\tparsedPaths.pop();\n\t\t\t\tpaths[index] = paths[lastBindingsIndex];\n\t\t\t\tpaths.pop();\n\t\t\t}\n\t\t}\n\n\t}\n\n\tAnimationObjectGroup.prototype.isAnimationObjectGroup = true;\n\n\tclass AnimationAction {\n\t\tconstructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {\n\t\t\tthis._mixer = mixer;\n\t\t\tthis._clip = clip;\n\t\t\tthis._localRoot = localRoot;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tconst tracks = clip.tracks,\n\t\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\t\tinterpolants = new Array(nTracks);\n\t\t\tconst interpolantSettings = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\n\t\t\tfor (let i = 0; i !== nTracks; ++i) {\n\t\t\t\tconst interpolant = tracks[i].createInterpolant(null);\n\t\t\t\tinterpolants[i] = interpolant;\n\t\t\t\tinterpolant.settings = interpolantSettings;\n\t\t\t}\n\n\t\t\tthis._interpolantSettings = interpolantSettings;\n\t\t\tthis._interpolants = interpolants; // bound by the mixer\n\t\t\t// inside: PropertyMixer (managed by the mixer)\n\n\t\t\tthis._propertyBindings = new Array(nTracks);\n\t\t\tthis._cacheIndex = null; // for the memory manager\n\n\t\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis.loop = LoopRepeat;\n\t\t\tthis._loopCount = -1; // global mixer time when the action is to be started\n\t\t\t// it's set back to 'null' upon start of the action\n\n\t\t\tthis._startTime = null; // scaled local time of the action\n\t\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1;\n\t\t\tthis._effectiveTimeScale = 1;\n\t\t\tthis.weight = 1;\n\t\t\tthis._effectiveWeight = 1;\n\t\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\t\tthis.paused = false; // true -> zero effective time scale\n\n\t\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\t\tthis.clampWhenFinished = false; // keep feeding the last frame?\n\n\t\t\tthis.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n\t\t\tthis.zeroSlopeAtEnd = true; // clips for start, loop and end\n\t\t} // State & Scheduling\n\n\n\t\tplay() {\n\t\t\tthis._mixer._activateAction(this);\n\n\t\t\treturn this;\n\t\t}\n\n\t\tstop() {\n\t\t\tthis._mixer._deactivateAction(this);\n\n\t\t\treturn this.reset();\n\t\t}\n\n\t\treset() {\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\t\t\tthis.time = 0; // restart clip\n\n\t\t\tthis._loopCount = -1; // forget previous loops\n\n\t\t\tthis._startTime = null; // forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\t\t}\n\n\t\tisRunning() {\n\t\t\treturn this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n\t\t} // return true when play has been called\n\n\n\t\tisScheduled() {\n\t\t\treturn this._mixer._isActiveAction(this);\n\t\t}\n\n\t\tstartAt(time) {\n\t\t\tthis._startTime = time;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoop(mode, repetitions) {\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\t\t\treturn this;\n\t\t} // Weight\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\n\n\t\tsetEffectiveWeight(weight) {\n\t\t\tthis.weight = weight; // note: same logic as when updated at runtime\n\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\t\treturn this.stopFading();\n\t\t} // return the weight considering fading and .enabled\n\n\n\t\tgetEffectiveWeight() {\n\t\t\treturn this._effectiveWeight;\n\t\t}\n\n\t\tfadeIn(duration) {\n\t\t\treturn this._scheduleFading(duration, 0, 1);\n\t\t}\n\n\t\tfadeOut(duration) {\n\t\t\treturn this._scheduleFading(duration, 1, 0);\n\t\t}\n\n\t\tcrossFadeFrom(fadeOutAction, duration, warp) {\n\t\t\tfadeOutAction.fadeOut(duration);\n\t\t\tthis.fadeIn(duration);\n\n\t\t\tif (warp) {\n\t\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\t\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\t\t\tfadeOutAction.warp(1.0, startEndRatio, duration);\n\t\t\t\tthis.warp(endStartRatio, 1.0, duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcrossFadeTo(fadeInAction, duration, warp) {\n\t\t\treturn fadeInAction.crossFadeFrom(this, duration, warp);\n\t\t}\n\n\t\tstopFading() {\n\t\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\t\tif (weightInterpolant !== null) {\n\t\t\t\tthis._weightInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(weightInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Time Scale Control\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\n\n\t\tsetEffectiveTimeScale(timeScale) {\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\t\t\treturn this.stopWarping();\n\t\t} // return the time scale considering warping and .paused\n\n\n\t\tgetEffectiveTimeScale() {\n\t\t\treturn this._effectiveTimeScale;\n\t\t}\n\n\t\tsetDuration(duration) {\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\t\t\treturn this.stopWarping();\n\t\t}\n\n\t\tsyncWith(action) {\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\t\t\treturn this.stopWarping();\n\t\t}\n\n\t\thalt(duration) {\n\t\t\treturn this.warp(this._effectiveTimeScale, 0, duration);\n\t\t}\n\n\t\twarp(startTimeScale, endTimeScale, duration) {\n\t\t\tconst mixer = this._mixer,\n\t\t\t\t\t\tnow = mixer.time,\n\t\t\t\t\t\ttimeScale = this.timeScale;\n\t\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tconst times = interpolant.parameterPositions,\n\t\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[0] = startTimeScale / timeScale;\n\t\t\tvalues[1] = endTimeScale / timeScale;\n\t\t\treturn this;\n\t\t}\n\n\t\tstopWarping() {\n\t\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif (timeScaleInterpolant !== null) {\n\t\t\t\tthis._timeScaleInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Object Accessors\n\n\n\t\tgetMixer() {\n\t\t\treturn this._mixer;\n\t\t}\n\n\t\tgetClip() {\n\t\t\treturn this._clip;\n\t\t}\n\n\t\tgetRoot() {\n\t\t\treturn this._localRoot || this._mixer._root;\n\t\t} // Interna\n\n\n\t\t_update(time, deltaTime, timeDirection, accuIndex) {\n\t\t\t// called by the mixer\n\t\t\tif (!this.enabled) {\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\t\t\t\tthis._updateWeight(time);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst startTime = this._startTime;\n\n\t\t\tif (startTime !== null) {\n\t\t\t\t// check for scheduled start of action\n\t\t\t\tconst timeRunning = (time - startTime) * timeDirection;\n\n\t\t\t\tif (timeRunning < 0 || timeDirection === 0) {\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\t\t\t} // start\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\t\t\t} // apply time scale and advance time\n\n\n\t\t\tdeltaTime *= this._updateTimeScale(time);\n\n\t\t\tconst clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\n\t\t\tconst weight = this._updateWeight(time);\n\n\t\t\tif (weight > 0) {\n\t\t\t\tconst interpolants = this._interpolants;\n\t\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\t\tswitch (this.blendMode) {\n\t\t\t\t\tcase AdditiveAnimationBlendMode:\n\t\t\t\t\t\tfor (let j = 0, m = interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\tinterpolants[j].evaluate(clipTime);\n\t\t\t\t\t\t\tpropertyMixers[j].accumulateAdditive(weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfor (let j = 0, m = interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\tinterpolants[j].evaluate(clipTime);\n\t\t\t\t\t\t\tpropertyMixers[j].accumulate(accuIndex, weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_updateWeight(time) {\n\t\t\tlet weight = 0;\n\n\t\t\tif (this.enabled) {\n\t\t\t\tweight = this.weight;\n\t\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tconst interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif (interpolantValue === 0) {\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\t\t}\n\n\t\t_updateTimeScale(time) {\n\t\t\tlet timeScale = 0;\n\n\t\t\tif (!this.paused) {\n\t\t\t\ttimeScale = this.timeScale;\n\t\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tconst interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif (timeScale === 0) {\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\t\t}\n\n\t\t_updateTime(deltaTime) {\n\t\t\tconst duration = this._clip.duration;\n\t\t\tconst loop = this.loop;\n\t\t\tlet time = this.time + deltaTime;\n\t\t\tlet loopCount = this._loopCount;\n\t\t\tconst pingPong = loop === LoopPingPong;\n\n\t\t\tif (deltaTime === 0) {\n\t\t\t\tif (loopCount === -1) return time;\n\t\t\t\treturn pingPong && (loopCount & 1) === 1 ? duration - time : time;\n\t\t\t}\n\n\t\t\tif (loop === LoopOnce) {\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tthis._loopCount = 0;\n\n\t\t\t\t\tthis._setEndings(true, true, false);\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\t\t\t\t\tif (time >= duration) {\n\t\t\t\t\t\ttime = duration;\n\t\t\t\t\t} else if (time < 0) {\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.time = time;\n\t\t\t\t\t\tbreak handle_stop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\taction: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// repetitive Repeat or PingPong\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tif (deltaTime >= 0) {\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(true, this.repetitions === 0, pingPong);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\t\t\t\t\t\tthis._setEndings(this.repetitions === 0, true, pingPong);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (time >= duration || time < 0) {\n\t\t\t\t\t// wrap around\n\t\t\t\t\tconst loopDelta = Math.floor(time / duration); // signed\n\n\t\t\t\t\ttime -= duration * loopDelta;\n\t\t\t\t\tloopCount += Math.abs(loopDelta);\n\t\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif (pending <= 0) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\t\t\t\t\t\tif (pending === 1) {\n\t\t\t\t\t\t\t// entering the last round\n\t\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\n\t\t\t\t\t\t\tthis._setEndings(atStart, !atStart, pingPong);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setEndings(false, false, pingPong);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'loop',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tloopDelta: loopDelta\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.time = time;\n\t\t\t\t}\n\n\t\t\t\tif (pingPong && (loopCount & 1) === 1) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\t\t\t\t\treturn duration - time;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn time;\n\t\t}\n\n\t\t_setEndings(atStart, atEnd, pingPong) {\n\t\t\tconst settings = this._interpolantSettings;\n\n\t\t\tif (pingPong) {\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\t\t\t} else {\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\t\t\tif (atStart) {\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\t\t\t}\n\n\t\t\t\tif (atEnd) {\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingEnd = WrapAroundEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_scheduleFading(duration, weightNow, weightThen) {\n\t\t\tconst mixer = this._mixer,\n\t\t\t\t\t\tnow = mixer.time;\n\t\t\tlet interpolant = this._weightInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tconst times = interpolant.parameterPositions,\n\t\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\tvalues[0] = weightNow;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[1] = weightThen;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AnimationMixer extends EventDispatcher {\n\t\tconstructor(root) {\n\t\t\tsuper();\n\t\t\tthis._root = root;\n\n\t\t\tthis._initMemoryManager();\n\n\t\t\tthis._accuIndex = 0;\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1.0;\n\t\t}\n\n\t\t_bindAction(action, prototypeAction) {\n\t\t\tconst root = action._localRoot || this._root,\n\t\t\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\t\t\tlet bindingsByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingsByName === undefined) {\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingsByName;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i !== nTracks; ++i) {\n\t\t\t\tconst track = tracks[i],\n\t\t\t\t\t\t\ttrackName = track.name;\n\t\t\t\tlet binding = bindingsByName[trackName];\n\n\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t} else {\n\t\t\t\t\tbinding = bindings[i];\n\n\t\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\t\t\t\t\t\tif (binding._cacheIndex === null) {\n\t\t\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n\t\t\t\t\tbinding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t}\n\n\t\t\t\tinterpolants[i].resultBuffer = binding.buffer;\n\t\t\t}\n\t\t}\n\n\t\t_activateAction(action) {\n\t\t\tif (!this._isActiveAction(action)) {\n\t\t\t\tif (action._cacheIndex === null) {\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\t\t\t\t\tconst rootUuid = (action._localRoot || this._root).uuid,\n\t\t\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\t\t\tthis._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n\t\t\t\t\tthis._addInactiveAction(action, clipUuid, rootUuid);\n\t\t\t\t}\n\n\t\t\t\tconst bindings = action._propertyBindings; // increment reference counts / sort out state\n\n\t\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\t\tif (binding.useCount++ === 0) {\n\t\t\t\t\t\tthis._lendBinding(binding);\n\n\t\t\t\t\t\tbinding.saveOriginalState();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction(action);\n\t\t\t}\n\t\t}\n\n\t\t_deactivateAction(action) {\n\t\t\tif (this._isActiveAction(action)) {\n\t\t\t\tconst bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n\t\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\t\tif (--binding.useCount === 0) {\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\t\tthis._takeBackBinding(binding);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction(action);\n\t\t\t}\n\t\t} // Memory manager\n\n\n\t\t_initMemoryManager() {\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._actionsByClip = {}; // inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n\t\t\tthis._nActiveBindings = 0;\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\n\t\t\tthis._nActiveControlInterpolants = 0;\n\t\t\tconst scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._actions.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveActions;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\t\t} // Memory management for AnimationAction objects\n\n\n\t\t_isActiveAction(action) {\n\t\t\tconst index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\t\t}\n\n\t\t_addInactiveAction(action, clipUuid, rootUuid) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip;\n\t\t\tlet actionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip === undefined) {\n\t\t\t\tactionsForClip = {\n\t\t\t\t\tknownActions: [action],\n\t\t\t\t\tactionByRoot: {}\n\t\t\t\t};\n\t\t\t\taction._byClipCacheIndex = 0;\n\t\t\t\tactionsByClip[clipUuid] = actionsForClip;\n\t\t\t} else {\n\t\t\t\tconst knownActions = actionsForClip.knownActions;\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push(action);\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push(action);\n\t\t\tactionsForClip.actionByRoot[rootUuid] = action;\n\t\t}\n\n\t\t_removeInactiveAction(action) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1],\n\t\t\t\t\t\tcacheIndex = action._cacheIndex;\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\tactions.pop();\n\t\t\taction._cacheIndex = null;\n\t\t\tconst clipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\t\tactionsForClip = actionsByClip[clipUuid],\n\t\t\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\t\t\t\t\tlastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n\t\t\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[byClipCacheIndex] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\t\t\taction._byClipCacheIndex = null;\n\t\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\t\t\trootUuid = (action._localRoot || this._root).uuid;\n\t\t\tdelete actionByRoot[rootUuid];\n\n\t\t\tif (knownActionsForClip.length === 0) {\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t}\n\n\t\t_removeInactiveBindingsForAction(action) {\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\tif (--binding.referenceCount === 0) {\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_lendAction(action) {\n\t\t\t// [ active actions |\tinactive actions\t]\n\t\t\t// [\tactive actions >| inactive actions ]\n\t\t\t//\t\t\t\t\t\t\t\t s\t\t\t\ta\n\t\t\t//\t\t\t\t\t\t\t\t\t<-swap->\n\t\t\t//\t\t\t\t\t\t\t\t a\t\t\t\ts\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveActions++,\n\t\t\t\t\t\tfirstInactiveAction = actions[lastActiveIndex];\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[lastActiveIndex] = action;\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = firstInactiveAction;\n\t\t}\n\n\t\t_takeBackAction(action) {\n\t\t\t// [\tactive actions\t| inactive actions ]\n\t\t\t// [ active actions |< inactive actions\t]\n\t\t\t//\t\t\t\ta\t\t\t\ts\n\t\t\t//\t\t\t\t <-swap->\n\t\t\t//\t\t\t\ts\t\t\t\ta\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveActions,\n\t\t\t\t\t\tlastActiveAction = actions[firstInactiveIndex];\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[firstInactiveIndex] = action;\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = lastActiveAction;\n\t\t} // Memory management for PropertyMixer objects\n\n\n\t\t_addInactiveBinding(binding, rootUuid, trackName) {\n\t\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindings = this._bindings;\n\t\t\tlet bindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName === undefined) {\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingByName;\n\t\t\t}\n\n\t\t\tbindingByName[trackName] = binding;\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push(binding);\n\t\t}\n\n\t\t_removeInactiveBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tpropBinding = binding.binding,\n\t\t\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\t\t\ttrackName = propBinding.path,\n\t\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid],\n\t\t\t\t\t\tlastInactiveBinding = bindings[bindings.length - 1],\n\t\t\t\t\t\tcacheIndex = binding._cacheIndex;\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[cacheIndex] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\t\t\tdelete bindingByName[trackName];\n\n\t\t\tif (Object.keys(bindingByName).length === 0) {\n\t\t\t\tdelete bindingsByRoot[rootUuid];\n\t\t\t}\n\t\t}\n\n\t\t_lendBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveBindings++,\n\t\t\t\t\t\tfirstInactiveBinding = bindings[lastActiveIndex];\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[lastActiveIndex] = binding;\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = firstInactiveBinding;\n\t\t}\n\n\t\t_takeBackBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveBindings,\n\t\t\t\t\t\tlastActiveBinding = bindings[firstInactiveIndex];\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[firstInactiveIndex] = binding;\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = lastActiveBinding;\n\t\t} // Memory management of Interpolants for weight and time scale\n\n\n\t\t_lendControlInterpolant() {\n\t\t\tconst interpolants = this._controlInterpolants,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants++;\n\t\t\tlet interpolant = interpolants[lastActiveIndex];\n\n\t\t\tif (interpolant === undefined) {\n\t\t\t\tinterpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[lastActiveIndex] = interpolant;\n\t\t\t}\n\n\t\t\treturn interpolant;\n\t\t}\n\n\t\t_takeBackControlInterpolant(interpolant) {\n\t\t\tconst interpolants = this._controlInterpolants,\n\t\t\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveControlInterpolants,\n\t\t\t\t\t\tlastActiveInterpolant = interpolants[firstInactiveIndex];\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[firstInactiveIndex] = interpolant;\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[prevIndex] = lastActiveInterpolant;\n\t\t} // return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\n\n\t\tclipAction(clip, optionalRoot, blendMode) {\n\t\t\tconst root = optionalRoot || this._root,\n\t\t\t\t\t\trootUuid = root.uuid;\n\t\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n\t\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\t\t\tconst actionsForClip = this._actionsByClip[clipUuid];\n\t\t\tlet prototypeAction = null;\n\n\t\t\tif (blendMode === undefined) {\n\t\t\t\tif (clipObject !== null) {\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\t\t\t\t} else {\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\tconst existingAction = actionsForClip.actionByRoot[rootUuid];\n\n\t\t\t\tif (existingAction !== undefined && existingAction.blendMode === blendMode) {\n\t\t\t\t\treturn existingAction;\n\t\t\t\t} // we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\n\n\t\t\t\tprototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n\t\t\t\tif (clipObject === null) clipObject = prototypeAction._clip;\n\t\t\t} // clip must be known when specified via string\n\n\n\t\t\tif (clipObject === null) return null; // allocate all resources required to run it\n\n\t\t\tconst newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n\n\t\t\tthis._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n\t\t\tthis._addInactiveAction(newAction, clipUuid, rootUuid);\n\n\t\t\treturn newAction;\n\t\t} // get an existing action\n\n\n\t\texistingAction(clip, optionalRoot) {\n\t\t\tconst root = optionalRoot || this._root,\n\t\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\t\tclipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n\t\t\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\treturn actionsForClip.actionByRoot[rootUuid] || null;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} // deactivates all previously scheduled actions\n\n\n\t\tstopAllAction() {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor (let i = nActions - 1; i >= 0; --i) {\n\t\t\t\tactions[i].stop();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // advance the time and update apply the animation\n\n\n\t\tupdate(deltaTime) {\n\t\t\tdeltaTime *= this.timeScale;\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\t\t\ttimeDirection = Math.sign(deltaTime),\n\t\t\t\t\t\taccuIndex = this._accuIndex ^= 1; // run active actions\n\n\t\t\tfor (let i = 0; i !== nActions; ++i) {\n\t\t\t\tconst action = actions[i];\n\n\t\t\t\taction._update(time, deltaTime, timeDirection, accuIndex);\n\t\t\t} // update scene graph\n\n\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor (let i = 0; i !== nBindings; ++i) {\n\t\t\t\tbindings[i].apply(accuIndex);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Allows you to seek to a specific time in an animation.\n\n\n\t\tsetTime(timeInSeconds) {\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\n\t\t\tfor (let i = 0; i < this._actions.length; i++) {\n\t\t\t\tthis._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\t\t\t}\n\n\t\t\treturn this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\t\t} // return this mixer's root target object\n\n\n\t\tgetRoot() {\n\t\t\treturn this._root;\n\t\t} // free all resources specific to a particular clip\n\n\n\t\tuncacheClip(clip) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\t\tactionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\t\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor (let i = 0, n = actionsToRemove.length; i !== n; ++i) {\n\t\t\t\t\tconst action = actionsToRemove[i];\n\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1];\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\t\t} // free all resources specific to a particular root target object\n\n\n\t\tuncacheRoot(root) {\n\t\t\tconst rootUuid = root.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor (const clipUuid in actionsByClip) {\n\t\t\t\tconst actionByRoot = actionsByClip[clipUuid].actionByRoot,\n\t\t\t\t\t\t\taction = actionByRoot[rootUuid];\n\n\t\t\t\tif (action !== undefined) {\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName !== undefined) {\n\t\t\t\tfor (const trackName in bindingByName) {\n\t\t\t\t\tconst binding = bindingByName[trackName];\n\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t} // remove a targeted clip from the cache\n\n\n\t\tuncacheAction(clip, optionalRoot) {\n\t\t\tconst action = this.existingAction(clip, optionalRoot);\n\n\t\t\tif (action !== null) {\n\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tAnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);\n\n\tclass Uniform {\n\t\tconstructor(value) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tconsole.warn('THREE.Uniform: Type parameter is no longer needed.');\n\t\t\t\tvalue = arguments[1];\n\t\t\t}\n\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n\t\t}\n\n\t}\n\n\tclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\t\tconstructor(array, stride, meshPerAttribute = 1) {\n\t\t\tsuper(array, stride);\n\t\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tconst ib = super.clone(data);\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn ib;\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tconst json = super.toJSON(data);\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn json;\n\t\t}\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\n\tclass GLBufferAttribute {\n\t\tconstructor(buffer, type, itemSize, elementSize, count) {\n\t\t\tthis.buffer = buffer;\n\t\t\tthis.type = type;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.elementSize = elementSize;\n\t\t\tthis.count = count;\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetBuffer(buffer) {\n\t\t\tthis.buffer = buffer;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetType(type, elementSize) {\n\t\t\tthis.type = type;\n\t\t\tthis.elementSize = elementSize;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetItemSize(itemSize) {\n\t\t\tthis.itemSize = itemSize;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetCount(count) {\n\t\t\tthis.count = count;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tGLBufferAttribute.prototype.isGLBufferAttribute = true;\n\n\tclass Raycaster {\n\t\tconstructor(origin, direction, near = 0, far = Infinity) {\n\t\t\tthis.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.camera = null;\n\t\t\tthis.layers = new Layers();\n\t\t\tthis.params = {\n\t\t\t\tMesh: {},\n\t\t\t\tLine: {\n\t\t\t\t\tthreshold: 1\n\t\t\t\t},\n\t\t\t\tLOD: {},\n\t\t\t\tPoints: {\n\t\t\t\t\tthreshold: 1\n\t\t\t\t},\n\t\t\t\tSprite: {}\n\t\t\t};\n\t\t}\n\n\t\tset(origin, direction) {\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\t\tthis.ray.set(origin, direction);\n\t\t}\n\n\t\tsetFromCamera(coords, camera) {\n\t\t\tif (camera && camera.isPerspectiveCamera) {\n\t\t\t\tthis.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n\t\t\t\tthis.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n\t\t\t\tthis.camera = camera;\n\t\t\t} else if (camera && camera.isOrthographicCamera) {\n\t\t\t\tthis.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n\n\t\t\t\tthis.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n\t\t\t\tthis.camera = camera;\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n\t\t\t}\n\t\t}\n\n\t\tintersectObject(object, recursive = false, intersects = []) {\n\t\t\tintersectObject(object, this, intersects, recursive);\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\n\t\tintersectObjects(objects, recursive = false, intersects = []) {\n\t\t\tfor (let i = 0, l = objects.length; i < l; i++) {\n\t\t\t\tintersectObject(objects[i], this, intersects, recursive);\n\t\t\t}\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\n\t}\n\n\tfunction ascSort(a, b) {\n\t\treturn a.distance - b.distance;\n\t}\n\n\tfunction intersectObject(object, raycaster, intersects, recursive) {\n\t\tif (object.layers.test(raycaster.layers)) {\n\t\t\tobject.raycast(raycaster, intersects);\n\t\t}\n\n\t\tif (recursive === true) {\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tintersectObject(children[i], raycaster, intersects, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tclass Spherical {\n\t\tconstructor(radius = 1, phi = 0, theta = 0) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi; // polar angle\n\n\t\t\tthis.theta = theta; // azimuthal angle\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(radius, phi, theta) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\t\t\treturn this;\n\t\t} // restrict phi to be betwee EPS and PI-EPS\n\n\n\t\tmakeSafe() {\n\t\t\tconst EPS = 0.000001;\n\t\t\tthis.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t}\n\n\t\tsetFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + y * y + z * z);\n\n\t\t\tif (this.radius === 0) {\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\t\t\t} else {\n\t\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\t\tthis.phi = Math.acos(clamp(y / this.radius, -1, 1));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t */\n\tclass Cylindrical {\n\t\tconstructor(radius = 1, theta = 0, y = 0) {\n\t\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\n\t\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\n\t\t\tthis.y = y; // height above the x-z plane\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(radius, theta, y) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t}\n\n\t\tsetFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + z * z);\n\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tconst _vector$4 = /*@__PURE__*/new Vector2();\n\n\tclass Box2 {\n\t\tconstructor(min = new Vector2(+Infinity, +Infinity), max = new Vector2(-Infinity, -Infinity)) {\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tset(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCenterAndSize(center, size) {\n\t\t\tconst halfSize = _vector$4.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.min.x = this.min.y = +Infinity;\n\t\t\tthis.max.x = this.max.y = -Infinity;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t}\n\n\t\tgetSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getSize() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n\t\t}\n\n\t\tcontainsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n\t\t}\n\n\t\tgetParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\t// using 4 splitting planes to rule out intersections\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\tconst clampedPoint = _vector$4.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t}\n\n\t\tintersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t}\n\n\t}\n\n\tBox2.prototype.isBox2 = true;\n\n\tconst _startP = /*@__PURE__*/new Vector3();\n\n\tconst _startEnd = /*@__PURE__*/new Vector3();\n\n\tclass Line3 {\n\t\tconstructor(start = new Vector3(), end = new Vector3()) {\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t}\n\n\t\tset(start, end) {\n\t\t\tthis.start.copy(start);\n\t\t\tthis.end.copy(end);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(line) {\n\t\t\tthis.start.copy(line.start);\n\t\t\tthis.end.copy(line.end);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.start, this.end).multiplyScalar(0.5);\n\t\t}\n\n\t\tdelta(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .delta() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.subVectors(this.end, this.start);\n\t\t}\n\n\t\tdistanceSq() {\n\t\t\treturn this.start.distanceToSquared(this.end);\n\t\t}\n\n\t\tdistance() {\n\t\t\treturn this.start.distanceTo(this.end);\n\t\t}\n\n\t\tat(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t}\n\n\t\tclosestPointToPointParameter(point, clampToLine) {\n\t\t\t_startP.subVectors(point, this.start);\n\n\t\t\t_startEnd.subVectors(this.end, this.start);\n\n\t\t\tconst startEnd2 = _startEnd.dot(_startEnd);\n\n\t\t\tconst startEnd_startP = _startEnd.dot(_startP);\n\n\t\t\tlet t = startEnd_startP / startEnd2;\n\n\t\t\tif (clampToLine) {\n\t\t\t\tt = clamp(t, 0, 1);\n\t\t\t}\n\n\t\t\treturn t;\n\t\t}\n\n\t\tclosestPointToPoint(point, clampToLine, target) {\n\t\t\tconst t = this.closestPointToPointParameter(point, clampToLine);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tthis.start.applyMatrix4(matrix);\n\t\t\tthis.end.applyMatrix4(matrix);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(line) {\n\t\t\treturn line.start.equals(this.start) && line.end.equals(this.end);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tclass ImmediateRenderObject extends Object3D {\n\t\tconstructor(material) {\n\t\t\tsuper();\n\t\t\tthis.material = material;\n\n\t\t\tthis.render = function ()\n\t\t\t/* renderCallback */\n\t\t\t{};\n\n\t\t\tthis.hasPositions = false;\n\t\t\tthis.hasNormals = false;\n\t\t\tthis.hasColors = false;\n\t\t\tthis.hasUvs = false;\n\t\t\tthis.positionArray = null;\n\t\t\tthis.normalArray = null;\n\t\t\tthis.colorArray = null;\n\t\t\tthis.uvArray = null;\n\t\t\tthis.count = 0;\n\t\t}\n\n\t}\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\tconst _vector$3 = /*@__PURE__*/new Vector3();\n\n\tclass SpotLightHelper extends Object3D {\n\t\tconstructor(light, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\t\tfor (let i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\t\tconst p1 = i / l * Math.PI * 2;\n\t\t\t\tconst p2 = j / l * Math.PI * 2;\n\t\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tthis.cone = new LineSegments(geometry, material);\n\t\t\tthis.add(this.cone);\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.cone.geometry.dispose();\n\t\t\tthis.cone.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tconst coneWidth = coneLength * Math.tan(this.light.angle);\n\t\t\tthis.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\t\t_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\tthis.cone.lookAt(_vector$3);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.cone.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.cone.material.color.copy(this.light.color);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tconst _vector$2 = /*@__PURE__*/new Vector3();\n\n\tconst _boneMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n\tclass SkeletonHelper extends LineSegments {\n\t\tconstructor(object) {\n\t\t\tconst bones = getBoneList(object);\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst vertices = [];\n\t\t\tconst colors = [];\n\t\t\tconst color1 = new Color(0, 0, 1);\n\t\t\tconst color2 = new Color(0, 1, 0);\n\n\t\t\tfor (let i = 0; i < bones.length; i++) {\n\t\t\t\tconst bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tcolors.push(color1.r, color1.g, color1.b);\n\t\t\t\t\tcolors.push(color2.r, color2.g, color2.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false,\n\t\t\t\ttransparent: true\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'SkeletonHelper';\n\t\t\tthis.isSkeletonHelper = true;\n\t\t\tthis.root = object;\n\t\t\tthis.bones = bones;\n\t\t\tthis.matrix = object.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tconst bones = this.bones;\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst position = geometry.getAttribute('position');\n\n\t\t\t_matrixWorldInv.copy(this.root.matrixWorld).invert();\n\n\t\t\tfor (let i = 0, j = 0; i < bones.length; i++) {\n\t\t\t\tconst bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n\n\t\t\t\t\t_vector$2.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);\n\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n\n\t\t\t\t\t_vector$2.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);\n\t\t\t\t\tj += 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tfunction getBoneList(object) {\n\t\tconst boneList = [];\n\n\t\tif (object && object.isBone) {\n\t\t\tboneList.push(object);\n\t\t}\n\n\t\tfor (let i = 0; i < object.children.length; i++) {\n\t\t\tboneList.push.apply(boneList, getBoneList(object.children[i]));\n\t\t}\n\n\t\treturn boneList;\n\t}\n\n\tclass PointLightHelper extends Mesh {\n\t\tconstructor(light, sphereSize, color) {\n\t\t\tconst geometry = new SphereGeometry(sphereSize, 4, 2);\n\t\t\tconst material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.color = color;\n\t\t\tthis.type = 'PointLightHelper';\n\t\t\tthis.matrix = this.light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.update();\n\t\t\t/*\n\t\t\t// TODO: delete this comment?\n\t\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\t\tconst d = light.distance;\n\t\t\tif ( d === 0.0 ) {\n\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t} else {\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t}\n\t\t\tthis.add( this.lightDistance );\n\t\t\t*/\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.material.color.copy(this.light.color);\n\t\t\t}\n\t\t\t/*\n\t\t\tconst d = this.light.distance;\n\t\t\t\tif ( d === 0.0 ) {\n\t\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.lightDistance.visible = true;\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t\t}\n\t\t\t*/\n\n\t\t}\n\n\t}\n\n\tconst _vector$1 = /*@__PURE__*/new Vector3();\n\n\tconst _color1 = /*@__PURE__*/new Color();\n\n\tconst _color2 = /*@__PURE__*/new Color();\n\n\tclass HemisphereLightHelper extends Object3D {\n\t\tconstructor(light, size, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tconst geometry = new OctahedronGeometry(size);\n\t\t\tgeometry.rotateY(Math.PI * 0.5);\n\t\t\tthis.material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tif (this.color === undefined) this.material.vertexColors = true;\n\t\t\tconst position = geometry.getAttribute('position');\n\t\t\tconst colors = new Float32Array(position.count * 3);\n\t\t\tgeometry.setAttribute('color', new BufferAttribute(colors, 3));\n\t\t\tthis.add(new Mesh(geometry, this.material));\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.children[0].geometry.dispose();\n\t\t\tthis.children[0].material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst mesh = this.children[0];\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tconst colors = mesh.geometry.getAttribute('color');\n\n\t\t\t\t_color1.copy(this.light.color);\n\n\t\t\t\t_color2.copy(this.light.groundColor);\n\n\t\t\t\tfor (let i = 0, l = colors.count; i < l; i++) {\n\t\t\t\t\tconst color = i < l / 2 ? _color1 : _color2;\n\t\t\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\t\t\t}\n\n\t\t\tmesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());\n\t\t}\n\n\t}\n\n\tclass GridHelper extends LineSegments {\n\t\tconstructor(size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888) {\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tconst center = divisions / 2;\n\t\t\tconst step = size / divisions;\n\t\t\tconst halfSize = size / 2;\n\t\t\tconst vertices = [],\n\t\t\t\t\t\tcolors = [];\n\n\t\t\tfor (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\t\t\t\tvertices.push(-halfSize, 0, k, halfSize, 0, k);\n\t\t\t\tvertices.push(k, 0, -halfSize, k, 0, halfSize);\n\t\t\t\tconst color = i === center ? color1 : color2;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'GridHelper';\n\t\t}\n\n\t}\n\n\tclass PolarGridHelper extends LineSegments {\n\t\tconstructor(radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888) {\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tconst vertices = [];\n\t\t\tconst colors = []; // create the radials\n\n\t\t\tfor (let i = 0; i <= radials; i++) {\n\t\t\t\tconst v = i / radials * (Math.PI * 2);\n\t\t\t\tconst x = Math.sin(v) * radius;\n\t\t\t\tconst z = Math.cos(v) * radius;\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\tconst color = i & 1 ? color1 : color2;\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t} // create the circles\n\n\n\t\t\tfor (let i = 0; i <= circles; i++) {\n\t\t\t\tconst color = i & 1 ? color1 : color2;\n\t\t\t\tconst r = radius - radius / circles * i;\n\n\t\t\t\tfor (let j = 0; j < divisions; j++) {\n\t\t\t\t\t// first vertex\n\t\t\t\t\tlet v = j / divisions * (Math.PI * 2);\n\t\t\t\t\tlet x = Math.sin(v) * r;\n\t\t\t\t\tlet z = Math.cos(v) * r;\n\t\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\t\tcolors.push(color.r, color.g, color.b); // second vertex\n\n\t\t\t\t\tv = (j + 1) / divisions * (Math.PI * 2);\n\t\t\t\t\tx = Math.sin(v) * r;\n\t\t\t\t\tz = Math.cos(v) * r;\n\t\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'PolarGridHelper';\n\t\t}\n\n\t}\n\n\tconst _v1 = /*@__PURE__*/new Vector3();\n\n\tconst _v2 = /*@__PURE__*/new Vector3();\n\n\tconst _v3 = /*@__PURE__*/new Vector3();\n\n\tclass DirectionalLightHelper extends Object3D {\n\t\tconstructor(light, size, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tif (size === undefined) size = 1;\n\t\t\tlet geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tthis.lightPlane = new Line(geometry, material);\n\t\t\tthis.add(this.lightPlane);\n\t\t\tgeometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\t\t\tthis.targetLine = new Line(geometry, material);\n\t\t\tthis.add(this.targetLine);\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.lightPlane.geometry.dispose();\n\t\t\tthis.lightPlane.material.dispose();\n\t\t\tthis.targetLine.geometry.dispose();\n\t\t\tthis.targetLine.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\t_v1.setFromMatrixPosition(this.light.matrixWorld);\n\n\t\t\t_v2.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\t_v3.subVectors(_v2, _v1);\n\n\t\t\tthis.lightPlane.lookAt(_v2);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.lightPlane.material.color.set(this.color);\n\t\t\t\tthis.targetLine.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.lightPlane.material.color.copy(this.light.color);\n\t\t\t\tthis.targetLine.material.color.copy(this.light.color);\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt(_v2);\n\t\t\tthis.targetLine.scale.z = _v3.length();\n\t\t}\n\n\t}\n\n\tconst _vector = /*@__PURE__*/new Vector3();\n\n\tconst _camera = /*@__PURE__*/new Camera();\n\t/**\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\n\tclass CameraHelper extends LineSegments {\n\t\tconstructor(camera) {\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tconst vertices = [];\n\t\t\tconst colors = [];\n\t\t\tconst pointMap = {}; // colors\n\n\t\t\tconst colorFrustum = new Color(0xffaa00);\n\t\t\tconst colorCone = new Color(0xff0000);\n\t\t\tconst colorUp = new Color(0x00aaff);\n\t\t\tconst colorTarget = new Color(0xffffff);\n\t\t\tconst colorCross = new Color(0x333333); // near\n\n\t\t\taddLine('n1', 'n2', colorFrustum);\n\t\t\taddLine('n2', 'n4', colorFrustum);\n\t\t\taddLine('n4', 'n3', colorFrustum);\n\t\t\taddLine('n3', 'n1', colorFrustum); // far\n\n\t\t\taddLine('f1', 'f2', colorFrustum);\n\t\t\taddLine('f2', 'f4', colorFrustum);\n\t\t\taddLine('f4', 'f3', colorFrustum);\n\t\t\taddLine('f3', 'f1', colorFrustum); // sides\n\n\t\t\taddLine('n1', 'f1', colorFrustum);\n\t\t\taddLine('n2', 'f2', colorFrustum);\n\t\t\taddLine('n3', 'f3', colorFrustum);\n\t\t\taddLine('n4', 'f4', colorFrustum); // cone\n\n\t\t\taddLine('p', 'n1', colorCone);\n\t\t\taddLine('p', 'n2', colorCone);\n\t\t\taddLine('p', 'n3', colorCone);\n\t\t\taddLine('p', 'n4', colorCone); // up\n\n\t\t\taddLine('u1', 'u2', colorUp);\n\t\t\taddLine('u2', 'u3', colorUp);\n\t\t\taddLine('u3', 'u1', colorUp); // target\n\n\t\t\taddLine('c', 't', colorTarget);\n\t\t\taddLine('p', 'c', colorCross); // cross\n\n\t\t\taddLine('cn1', 'cn2', colorCross);\n\t\t\taddLine('cn3', 'cn4', colorCross);\n\t\t\taddLine('cf1', 'cf2', colorCross);\n\t\t\taddLine('cf3', 'cf4', colorCross);\n\n\t\t\tfunction addLine(a, b, color) {\n\t\t\t\taddPoint(a, color);\n\t\t\t\taddPoint(b, color);\n\t\t\t}\n\n\t\t\tfunction addPoint(id, color) {\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\n\t\t\t\tif (pointMap[id] === undefined) {\n\t\t\t\t\tpointMap[id] = [];\n\t\t\t\t}\n\n\t\t\t\tpointMap[id].push(vertices.length / 3 - 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'CameraHelper';\n\t\t\tthis.camera = camera;\n\t\t\tif (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();\n\t\t\tthis.matrix = camera.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.pointMap = pointMap;\n\t\t\tthis.update();\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst pointMap = this.pointMap;\n\t\t\tconst w = 1,\n\t\t\t\t\t\th = 1; // we need just camera projection matrix inverse\n\t\t\t// world matrix must be identity\n\n\t\t\t_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target\n\n\n\t\t\tsetPoint('c', pointMap, geometry, _camera, 0, 0, -1);\n\t\t\tsetPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near\n\n\t\t\tsetPoint('n1', pointMap, geometry, _camera, -w, -h, -1);\n\t\t\tsetPoint('n2', pointMap, geometry, _camera, w, -h, -1);\n\t\t\tsetPoint('n3', pointMap, geometry, _camera, -w, h, -1);\n\t\t\tsetPoint('n4', pointMap, geometry, _camera, w, h, -1); // far\n\n\t\t\tsetPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\n\t\t\tsetPoint('f2', pointMap, geometry, _camera, w, -h, 1);\n\t\t\tsetPoint('f3', pointMap, geometry, _camera, -w, h, 1);\n\t\t\tsetPoint('f4', pointMap, geometry, _camera, w, h, 1); // up\n\n\t\t\tsetPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross\n\n\t\t\tsetPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\n\t\t\tsetPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n\t\t\tsetPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\n\t\t\tsetPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n\t\t\tsetPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);\n\t\t\tsetPoint('cn2', pointMap, geometry, _camera, w, 0, -1);\n\t\t\tsetPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);\n\t\t\tsetPoint('cn4', pointMap, geometry, _camera, 0, h, -1);\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t}\n\n\tfunction setPoint(point, pointMap, geometry, camera, x, y, z) {\n\t\t_vector.set(x, y, z).unproject(camera);\n\n\t\tconst points = pointMap[point];\n\n\t\tif (points !== undefined) {\n\t\t\tconst position = geometry.getAttribute('position');\n\n\t\t\tfor (let i = 0, l = points.length; i < l; i++) {\n\t\t\t\tposition.setXYZ(points[i], _vector.x, _vector.y, _vector.z);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst _box = /*@__PURE__*/new Box3();\n\n\tclass BoxHelper extends LineSegments {\n\t\tconstructor(object, color = 0xffff00) {\n\t\t\tconst indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tconst positions = new Float32Array(8 * 3);\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.object = object;\n\t\t\tthis.type = 'BoxHelper';\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.update();\n\t\t}\n\n\t\tupdate(object) {\n\t\t\tif (object !== undefined) {\n\t\t\t\tconsole.warn('THREE.BoxHelper: .update() has no longer arguments.');\n\t\t\t}\n\n\t\t\tif (this.object !== undefined) {\n\t\t\t\t_box.setFromObject(this.object);\n\t\t\t}\n\n\t\t\tif (_box.isEmpty()) return;\n\t\t\tconst min = _box.min;\n\t\t\tconst max = _box.max;\n\t\t\t/*\n\t\t\t\t5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\t\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tconst position = this.geometry.attributes.position;\n\t\t\tconst array = position.array;\n\t\t\tarray[0] = max.x;\n\t\t\tarray[1] = max.y;\n\t\t\tarray[2] = max.z;\n\t\t\tarray[3] = min.x;\n\t\t\tarray[4] = max.y;\n\t\t\tarray[5] = max.z;\n\t\t\tarray[6] = min.x;\n\t\t\tarray[7] = min.y;\n\t\t\tarray[8] = max.z;\n\t\t\tarray[9] = max.x;\n\t\t\tarray[10] = min.y;\n\t\t\tarray[11] = max.z;\n\t\t\tarray[12] = max.x;\n\t\t\tarray[13] = max.y;\n\t\t\tarray[14] = min.z;\n\t\t\tarray[15] = min.x;\n\t\t\tarray[16] = max.y;\n\t\t\tarray[17] = min.z;\n\t\t\tarray[18] = min.x;\n\t\t\tarray[19] = min.y;\n\t\t\tarray[20] = min.z;\n\t\t\tarray[21] = max.x;\n\t\t\tarray[22] = min.y;\n\t\t\tarray[23] = min.z;\n\t\t\tposition.needsUpdate = true;\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t}\n\n\t\tsetFromObject(object) {\n\t\t\tthis.object = object;\n\t\t\tthis.update();\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tLineSegments.prototype.copy.call(this, source);\n\t\t\tthis.object = source.object;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Box3Helper extends LineSegments {\n\t\tconstructor(box, color = 0xffff00) {\n\t\t\tconst indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tconst positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.box = box;\n\t\t\tthis.type = 'Box3Helper';\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tconst box = this.box;\n\t\t\tif (box.isEmpty()) return;\n\t\t\tbox.getCenter(this.position);\n\t\t\tbox.getSize(this.scale);\n\t\t\tthis.scale.multiplyScalar(0.5);\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tclass PlaneHelper extends Line {\n\t\tconstructor(plane, size = 1, hex = 0xffff00) {\n\t\t\tconst color = hex;\n\t\t\tconst positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.computeBoundingSphere();\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.type = 'PlaneHelper';\n\t\t\tthis.plane = plane;\n\t\t\tthis.size = size;\n\t\t\tconst positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n\t\t\tconst geometry2 = new BufferGeometry();\n\t\t\tgeometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\t\t\tgeometry2.computeBoundingSphere();\n\t\t\tthis.add(new Mesh(geometry2, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\topacity: 0.2,\n\t\t\t\ttransparent: true,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false\n\t\t\t})));\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tlet scale = -this.plane.constant;\n\t\t\tif (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n\t\t\tthis.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n\t\t\tthis.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\t\tthis.lookAt(this.plane.normal);\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tconst _axis = /*@__PURE__*/new Vector3();\n\n\tlet _lineGeometry, _coneGeometry;\n\n\tclass ArrowHelper extends Object3D {\n\t\t// dir is assumed to be normalized\n\t\tconstructor(dir = new Vector3(0, 0, 1), origin = new Vector3(0, 0, 0), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ArrowHelper';\n\n\t\t\tif (_lineGeometry === undefined) {\n\t\t\t\t_lineGeometry = new BufferGeometry();\n\n\t\t\t\t_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n\t\t\t\t_coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);\n\n\t\t\t\t_coneGeometry.translate(0, -0.5, 0);\n\t\t\t}\n\n\t\t\tthis.position.copy(origin);\n\t\t\tthis.line = new Line(_lineGeometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.line.matrixAutoUpdate = false;\n\t\t\tthis.add(this.line);\n\t\t\tthis.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.cone.matrixAutoUpdate = false;\n\t\t\tthis.add(this.cone);\n\t\t\tthis.setDirection(dir);\n\t\t\tthis.setLength(length, headLength, headWidth);\n\t\t}\n\n\t\tsetDirection(dir) {\n\t\t\t// dir is assumed to be normalized\n\t\t\tif (dir.y > 0.99999) {\n\t\t\t\tthis.quaternion.set(0, 0, 0, 1);\n\t\t\t} else if (dir.y < -0.99999) {\n\t\t\t\tthis.quaternion.set(1, 0, 0, 0);\n\t\t\t} else {\n\t\t\t\t_axis.set(dir.z, 0, -dir.x).normalize();\n\n\t\t\t\tconst radians = Math.acos(dir.y);\n\t\t\t\tthis.quaternion.setFromAxisAngle(_axis, radians);\n\t\t\t}\n\t\t}\n\n\t\tsetLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {\n\t\t\tthis.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n\n\t\t\tthis.line.updateMatrix();\n\t\t\tthis.cone.scale.set(headWidth, headLength, headWidth);\n\t\t\tthis.cone.position.y = length;\n\t\t\tthis.cone.updateMatrix();\n\t\t}\n\n\t\tsetColor(color) {\n\t\t\tthis.line.material.color.set(color);\n\t\t\tthis.cone.material.color.set(color);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source, false);\n\t\t\tthis.line.copy(source.line);\n\t\t\tthis.cone.copy(source.cone);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AxesHelper extends LineSegments {\n\t\tconstructor(size = 1) {\n\t\t\tconst vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n\t\t\tconst colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'AxesHelper';\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t}\n\n\tconst _floatView = new Float32Array(1);\n\n\tconst _int32View = new Int32Array(_floatView.buffer);\n\n\tclass DataUtils {\n\t\t// Converts float32 to float16 (stored as uint16 value).\n\t\tstatic toHalfFloat(val) {\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t* used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t* by James Tursa?s half-precision code. */\n\t\t\t_floatView[0] = val;\n\t\t\tconst x = _int32View[0];\n\t\t\tlet bits = x >> 16 & 0x8000;\n\t\t\t/* Get the sign */\n\n\t\t\tlet m = x >> 12 & 0x07ff;\n\t\t\t/* Keep one extra bit for rounding */\n\n\t\t\tconst e = x >> 23 & 0xff;\n\t\t\t/* Using int is faster here */\n\n\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t* half, return signed zero. */\n\n\t\t\tif (e < 103) return bits;\n\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\n\t\t\tif (e > 142) {\n\t\t\t\tbits |= 0x7c00;\n\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\n\t\t\t\tbits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n\t\t\t\treturn bits;\n\t\t\t}\n\t\t\t/* If exponent underflows but not too much, return a denormal */\n\n\n\t\t\tif (e < 113) {\n\t\t\t\tm |= 0x0800;\n\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t* to 1, which is OK. */\n\n\t\t\t\tbits |= (m >> 114 - e) + (m >> 113 - e & 1);\n\t\t\t\treturn bits;\n\t\t\t}\n\n\t\t\tbits |= e - 112 << 10 | m >> 1;\n\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t* the exponent, which is OK. */\n\n\t\t\tbits += m & 1;\n\t\t\treturn bits;\n\t\t}\n\n\t}\n\n\tconst LOD_MIN = 4;\n\tconst LOD_MAX = 8;\n\tconst SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\n\tconst EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n\tconst TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\n\tconst MAX_SAMPLES = 20;\n\tconst ENCODINGS = {\n\t\t[LinearEncoding]: 0,\n\t\t[sRGBEncoding]: 1,\n\t\t[RGBEEncoding]: 2,\n\t\t[RGBM7Encoding]: 3,\n\t\t[RGBM16Encoding]: 4,\n\t\t[RGBDEncoding]: 5,\n\t\t[GammaEncoding]: 6\n\t};\n\tconst backgroundMaterial = new MeshBasicMaterial({\n\t\tside: BackSide,\n\t\tdepthWrite: false,\n\t\tdepthTest: false\n\t});\n\tconst backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);\n\n\tconst _flatCamera = /*@__PURE__*/new OrthographicCamera();\n\n\tconst {\n\t\t_lodPlanes,\n\t\t_sizeLods,\n\t\t_sigmas\n\t} = /*@__PURE__*/_createPlanes();\n\n\tconst _clearColor = /*@__PURE__*/new Color();\n\n\tlet _oldTarget = null; // Golden Ratio\n\n\tconst PHI = (1 + Math.sqrt(5)) / 2;\n\tconst INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\n\tconst _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];\n\t/**\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t *\n\t * Paper: Fast, Accurate Image-Based Lighting\n\t * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n\t*/\n\n\tfunction convertLinearToRGBE(color) {\n\t\tconst maxComponent = Math.max(color.r, color.g, color.b);\n\t\tconst fExp = Math.min(Math.max(Math.ceil(Math.log2(maxComponent)), -128.0), 127.0);\n\t\tcolor.multiplyScalar(Math.pow(2.0, -fExp));\n\t\tconst alpha = (fExp + 128.0) / 255.0;\n\t\treturn alpha;\n\t}\n\n\tclass PMREMGenerator {\n\t\tconstructor(renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t\tthis._pingPongRenderTarget = null;\n\t\t\tthis._blurMaterial = _getBlurShader(MAX_SAMPLES);\n\t\t\tthis._equirectShader = null;\n\t\t\tthis._cubemapShader = null;\n\n\t\t\tthis._compileMaterial(this._blurMaterial);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\n\n\t\tfromScene(scene, sigma = 0, near = 0.1, far = 100) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\n\t\t\tthis._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\n\n\t\t\tif (sigma > 0) {\n\t\t\t\tthis._blur(cubeUVRenderTarget, 0, 0, sigma);\n\t\t\t}\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\n\n\t\tfromEquirectangular(equirectangular) {\n\t\t\treturn this._fromTexture(equirectangular);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\n\n\t\tfromCubemap(cubemap) {\n\t\t\treturn this._fromTexture(cubemap);\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\n\n\t\tcompileCubemapShader() {\n\t\t\tif (this._cubemapShader === null) {\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t\tthis._compileMaterial(this._cubemapShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\n\n\t\tcompileEquirectangularShader() {\n\t\t\tif (this._equirectShader === null) {\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t\tthis._compileMaterial(this._equirectShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\n\n\t\tdispose() {\n\t\t\tthis._blurMaterial.dispose();\n\n\t\t\tif (this._cubemapShader !== null) this._cubemapShader.dispose();\n\t\t\tif (this._equirectShader !== null) this._equirectShader.dispose();\n\n\t\t\tfor (let i = 0; i < _lodPlanes.length; i++) {\n\t\t\t\t_lodPlanes[i].dispose();\n\t\t\t}\n\t\t} // private interface\n\n\n\t\t_cleanup(outputTarget) {\n\t\t\tthis._pingPongRenderTarget.dispose();\n\n\t\t\tthis._renderer.setRenderTarget(_oldTarget);\n\n\t\t\toutputTarget.scissorTest = false;\n\n\t\t\t_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n\t\t}\n\n\t\t_fromTexture(texture) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tconst cubeUVRenderTarget = this._allocateTargets(texture);\n\n\t\t\tthis._textureToCubeUV(texture, cubeUVRenderTarget);\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\n\t\t_allocateTargets(texture) {\n\t\t\t// warning: null texture is valid\n\t\t\tconst params = {\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tformat: RGBEFormat,\n\t\t\t\tencoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,\n\t\t\t\tdepthBuffer: false\n\t\t\t};\n\n\t\t\tconst cubeUVRenderTarget = _createRenderTarget(params);\n\n\t\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget(params);\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\n\t\t_compileMaterial(material) {\n\t\t\tconst tmpMesh = new Mesh(_lodPlanes[0], material);\n\n\t\t\tthis._renderer.compile(tmpMesh, _flatCamera);\n\t\t}\n\n\t\t_sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\n\t\t\tconst fov = 90;\n\t\t\tconst aspect = 1;\n\t\t\tconst cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tconst upSign = [1, -1, 1, 1, 1, 1];\n\t\t\tconst forwardSign = [1, 1, 1, -1, -1, -1];\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst originalAutoClear = renderer.autoClear;\n\t\t\tconst outputEncoding = renderer.outputEncoding;\n\t\t\tconst toneMapping = renderer.toneMapping;\n\t\t\trenderer.getClearColor(_clearColor);\n\t\t\trenderer.toneMapping = NoToneMapping;\n\t\t\trenderer.outputEncoding = LinearEncoding;\n\t\t\trenderer.autoClear = false;\n\t\t\tlet useSolidColor = false;\n\t\t\tconst background = scene.background;\n\n\t\t\tif (background) {\n\t\t\t\tif (background.isColor) {\n\t\t\t\t\tbackgroundMaterial.color.copy(background).convertSRGBToLinear();\n\t\t\t\t\tscene.background = null;\n\t\t\t\t\tconst alpha = convertLinearToRGBE(backgroundMaterial.color);\n\t\t\t\t\tbackgroundMaterial.opacity = alpha;\n\t\t\t\t\tuseSolidColor = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbackgroundMaterial.color.copy(_clearColor).convertSRGBToLinear();\n\t\t\t\tconst alpha = convertLinearToRGBE(backgroundMaterial.color);\n\t\t\t\tbackgroundMaterial.opacity = alpha;\n\t\t\t\tuseSolidColor = true;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst col = i % 3;\n\n\t\t\t\tif (col == 0) {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(forwardSign[i], 0, 0);\n\t\t\t\t} else if (col == 1) {\n\t\t\t\t\tcubeCamera.up.set(0, 0, upSign[i]);\n\t\t\t\t\tcubeCamera.lookAt(0, forwardSign[i], 0);\n\t\t\t\t} else {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(0, 0, forwardSign[i]);\n\t\t\t\t}\n\n\t\t\t\t_setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\n\n\t\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\n\t\t\t\tif (useSolidColor) {\n\t\t\t\t\trenderer.render(backgroundBox, cubeCamera);\n\t\t\t\t}\n\n\t\t\t\trenderer.render(scene, cubeCamera);\n\t\t\t}\n\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.outputEncoding = outputEncoding;\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t}\n\n\t\t_textureToCubeUV(texture, cubeUVRenderTarget) {\n\t\t\tconst renderer = this._renderer;\n\n\t\t\tif (texture.isCubeTexture) {\n\t\t\t\tif (this._cubemapShader == null) {\n\t\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._equirectShader == null) {\n\t\t\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\t\tconst mesh = new Mesh(_lodPlanes[0], material);\n\t\t\tconst uniforms = material.uniforms;\n\t\t\tuniforms['envMap'].value = texture;\n\n\t\t\tif (!texture.isCubeTexture) {\n\t\t\t\tuniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);\n\t\t\t}\n\n\t\t\tuniforms['inputEncoding'].value = ENCODINGS[texture.encoding];\n\t\t\tuniforms['outputEncoding'].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];\n\n\t\t\t_setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\n\n\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\t\t\trenderer.render(mesh, _flatCamera);\n\t\t}\n\n\t\t_applyPMREM(cubeUVRenderTarget) {\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst autoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tfor (let i = 1; i < TOTAL_LODS; i++) {\n\t\t\t\tconst sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);\n\t\t\t\tconst poleAxis = _axisDirections[(i - 1) % _axisDirections.length];\n\n\t\t\t\tthis._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n\t\t\t}\n\n\t\t\trenderer.autoClear = autoClear;\n\t\t}\n\t\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\n\n\t\t_blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n\t\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\t\tthis._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n\n\t\t\tthis._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n\t\t}\n\n\t\t_halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst blurMaterial = this._blurMaterial;\n\n\t\t\tif (direction !== 'latitudinal' && direction !== 'longitudinal') {\n\t\t\t\tconsole.error('blur direction must be either latitudinal or longitudinal!');\n\t\t\t} // Number of standard deviations at which to cut off the discrete approximation.\n\n\n\t\t\tconst STANDARD_DEVIATIONS = 3;\n\t\t\tconst blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);\n\t\t\tconst blurUniforms = blurMaterial.uniforms;\n\t\t\tconst pixels = _sizeLods[lodIn] - 1;\n\t\t\tconst radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n\t\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\t\tconst samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n\n\t\t\tif (samples > MAX_SAMPLES) {\n\t\t\t\tconsole.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);\n\t\t\t}\n\n\t\t\tconst weights = [];\n\t\t\tlet sum = 0;\n\n\t\t\tfor (let i = 0; i < MAX_SAMPLES; ++i) {\n\t\t\t\tconst x = i / sigmaPixels;\n\t\t\t\tconst weight = Math.exp(-x * x / 2);\n\t\t\t\tweights.push(weight);\n\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tsum += weight;\n\t\t\t\t} else if (i < samples) {\n\t\t\t\t\tsum += 2 * weight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < weights.length; i++) {\n\t\t\t\tweights[i] = weights[i] / sum;\n\t\t\t}\n\n\t\t\tblurUniforms['envMap'].value = targetIn.texture;\n\t\t\tblurUniforms['samples'].value = samples;\n\t\t\tblurUniforms['weights'].value = weights;\n\t\t\tblurUniforms['latitudinal'].value = direction === 'latitudinal';\n\n\t\t\tif (poleAxis) {\n\t\t\t\tblurUniforms['poleAxis'].value = poleAxis;\n\t\t\t}\n\n\t\t\tblurUniforms['dTheta'].value = radiansPerPixel;\n\t\t\tblurUniforms['mipInt'].value = LOD_MAX - lodIn;\n\t\t\tblurUniforms['inputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tblurUniforms['outputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tconst outputSize = _sizeLods[lodOut];\n\t\t\tconst x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\n\t\t\tconst y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\n\n\t\t\t_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n\n\t\t\trenderer.setRenderTarget(targetOut);\n\t\t\trenderer.render(blurMesh, _flatCamera);\n\t\t}\n\n\t}\n\n\tfunction _isLDR(texture) {\n\t\tif (texture === undefined || texture.type !== UnsignedByteType) return false;\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\t}\n\n\tfunction _createPlanes() {\n\t\tconst _lodPlanes = [];\n\t\tconst _sizeLods = [];\n\t\tconst _sigmas = [];\n\t\tlet lod = LOD_MAX;\n\n\t\tfor (let i = 0; i < TOTAL_LODS; i++) {\n\t\t\tconst sizeLod = Math.pow(2, lod);\n\n\t\t\t_sizeLods.push(sizeLod);\n\n\t\t\tlet sigma = 1.0 / sizeLod;\n\n\t\t\tif (i > LOD_MAX - LOD_MIN) {\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\n\t\t\t} else if (i == 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\t_sigmas.push(sigma);\n\n\t\t\tconst texelSize = 1.0 / (sizeLod - 1);\n\t\t\tconst min = -texelSize / 2;\n\t\t\tconst max = 1 + texelSize / 2;\n\t\t\tconst uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n\t\t\tconst cubeFaces = 6;\n\t\t\tconst vertices = 6;\n\t\t\tconst positionSize = 3;\n\t\t\tconst uvSize = 2;\n\t\t\tconst faceIndexSize = 1;\n\t\t\tconst position = new Float32Array(positionSize * vertices * cubeFaces);\n\t\t\tconst uv = new Float32Array(uvSize * vertices * cubeFaces);\n\t\t\tconst faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n\n\t\t\tfor (let face = 0; face < cubeFaces; face++) {\n\t\t\t\tconst x = face % 3 * 2 / 3 - 1;\n\t\t\t\tconst y = face > 2 ? 0 : -1;\n\t\t\t\tconst coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n\t\t\t\tposition.set(coordinates, positionSize * vertices * face);\n\t\t\t\tuv.set(uv1, uvSize * vertices * face);\n\t\t\t\tconst fill = [face, face, face, face, face, face];\n\t\t\t\tfaceIndex.set(fill, faceIndexSize * vertices * face);\n\t\t\t}\n\n\t\t\tconst planes = new BufferGeometry();\n\t\t\tplanes.setAttribute('position', new BufferAttribute(position, positionSize));\n\t\t\tplanes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n\t\t\tplanes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n\n\t\t\t_lodPlanes.push(planes);\n\n\t\t\tif (lod > LOD_MIN) {\n\t\t\t\tlod--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t_lodPlanes,\n\t\t\t_sizeLods,\n\t\t\t_sigmas\n\t\t};\n\t}\n\n\tfunction _createRenderTarget(params) {\n\t\tconst cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\t}\n\n\tfunction _setViewport(target, x, y, width, height) {\n\t\ttarget.viewport.set(x, y, width, height);\n\t\ttarget.scissor.set(x, y, width, height);\n\t}\n\n\tfunction _getBlurShader(maxSamples) {\n\t\tconst weights = new Float32Array(maxSamples);\n\t\tconst poleAxis = new Vector3(0, 1, 0);\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'SphericalGaussianBlur',\n\t\t\tdefines: {\n\t\t\t\t'n': maxSamples\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'samples': {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\t'weights': {\n\t\t\t\t\tvalue: weights\n\t\t\t\t},\n\t\t\t\t'latitudinal': {\n\t\t\t\t\tvalue: false\n\t\t\t\t},\n\t\t\t\t'dTheta': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'mipInt': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'poleAxis': {\n\t\t\t\t\tvalue: poleAxis\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getEquirectShader() {\n\t\tconst texelSize = new Vector2(1, 1);\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'EquirectangularToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'texelSize': {\n\t\t\t\t\tvalue: texelSize\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCubemapShader() {\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'CubemapToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t${_getEncodings()}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCommonVertexShader() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`\n\t\t);\n\t}\n\n\tfunction _getEncodings() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t`\n\t\t);\n\t}\n\n\tconst LineStrip = 0;\n\tconst LinePieces = 1;\n\tconst NoColors = 0;\n\tconst FaceColors = 1;\n\tconst VertexColors = 2;\n\tfunction MeshFaceMaterial(materials) {\n\t\tconsole.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\n\t\treturn materials;\n\t}\n\tfunction MultiMaterial(materials = []) {\n\t\tconsole.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\n\t\tmaterials.clone = function () {\n\t\t\treturn materials.slice();\n\t\t};\n\n\t\treturn materials;\n\t}\n\tfunction PointCloud(geometry, material) {\n\t\tconsole.warn('THREE.PointCloud has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction Particle(material) {\n\t\tconsole.warn('THREE.Particle has been renamed to THREE.Sprite.');\n\t\treturn new Sprite(material);\n\t}\n\tfunction ParticleSystem(geometry, material) {\n\t\tconsole.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction PointCloudMaterial(parameters) {\n\t\tconsole.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleBasicMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleSystemMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction Vertex(x, y, z) {\n\t\tconsole.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n\t\treturn new Vector3(x, y, z);\n\t} //\n\n\tfunction DynamicBufferAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');\n\t\treturn new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);\n\t}\n\tfunction Int8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');\n\t\treturn new Int8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');\n\t\treturn new Uint8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8ClampedAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');\n\t\treturn new Uint8ClampedBufferAttribute(array, itemSize);\n\t}\n\tfunction Int16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');\n\t\treturn new Int16BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');\n\t\treturn new Uint16BufferAttribute(array, itemSize);\n\t}\n\tfunction Int32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');\n\t\treturn new Int32BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');\n\t\treturn new Uint32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');\n\t\treturn new Float32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float64Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');\n\t\treturn new Float64BufferAttribute(array, itemSize);\n\t} //\n\n\tCurve.create = function (construct, getPoint) {\n\t\tconsole.log('THREE.Curve.create() has been deprecated');\n\t\tconstruct.prototype = Object.create(Curve.prototype);\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\t\treturn construct;\n\t}; //\n\n\n\tPath.prototype.fromPoints = function (points) {\n\t\tconsole.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\n\t\treturn this.setFromPoints(points);\n\t}; //\n\n\n\tfunction AxisHelper(size) {\n\t\tconsole.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\n\t\treturn new AxesHelper(size);\n\t}\n\tfunction BoundingBoxHelper(object, color) {\n\t\tconsole.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');\n\t\treturn new BoxHelper(object, color);\n\t}\n\tfunction EdgesHelper(object, hex) {\n\t\tconsole.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\n\t\treturn new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\t\tconsole.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\t\tconsole.error('THREE.SkeletonHelper: update() no longer needs to be called.');\n\t};\n\n\tfunction WireframeHelper(object, hex) {\n\t\tconsole.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\n\t\treturn new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t} //\n\n\tLoader.prototype.extractUrlBase = function (url) {\n\t\tconsole.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');\n\t\treturn LoaderUtils.extractUrlBase(url);\n\t};\n\n\tLoader.Handlers = {\n\t\tadd: function ()\n\t\t/* regex, loader */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');\n\t\t},\n\t\tget: function ()\n\t\t/* file */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');\n\t\t}\n\t};\n\tfunction XHRLoader(manager) {\n\t\tconsole.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\n\t\treturn new FileLoader(manager);\n\t}\n\tfunction BinaryTextureLoader(manager) {\n\t\tconsole.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\n\t\treturn new DataTextureLoader(manager);\n\t} //\n\n\tBox2.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox2.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox2.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox2.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tBox3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox3.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox3.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox3.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t};\n\n\tBox3.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tSphere.prototype.empty = function () {\n\t\tconsole.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t}; //\n\n\n\tFrustum.prototype.setFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');\n\t\treturn this.setFromProjectionMatrix(m);\n\t}; //\n\n\n\tLine3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Line3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t}; //\n\n\n\tMatrix3.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix3.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n\t\treturn vector.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.multiplyVector3Array = function ()\n\t/* a */\n\t{\n\t\tconsole.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');\n\t\treturn attribute.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.applyToVector3Array = function ()\n\t/* array, offset, length */\n\t{\n\t\tconsole.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tMatrix4.prototype.extractPosition = function (m) {\n\t\tconsole.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n\t\treturn this.copyPosition(m);\n\t};\n\n\tMatrix4.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix4.prototype.getPosition = function () {\n\t\tconsole.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n\t\treturn new Vector3().setFromMatrixColumn(this, 3);\n\t};\n\n\tMatrix4.prototype.setRotationFromQuaternion = function (q) {\n\t\tconsole.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n\t\treturn this.makeRotationFromQuaternion(q);\n\t};\n\n\tMatrix4.prototype.multiplyToArray = function () {\n\t\tconsole.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\n\t};\n\n\tMatrix4.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector4 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector3Array = function ()\n\t/* a */\n\t{\n\t\tconsole.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateAxis = function (v) {\n\t\tconsole.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n\t\tv.transformDirection(this);\n\t};\n\n\tMatrix4.prototype.crossVector = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.translate = function () {\n\t\tconsole.error('THREE.Matrix4: .translate() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateX = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateX() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateY = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateY() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateZ = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateZ() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateByAxis = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n\t};\n\n\tMatrix4.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');\n\t\treturn attribute.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.applyToVector3Array = function ()\n\t/* array, offset, length */\n\t{\n\t\tconsole.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.makeFrustum = function (left, right, bottom, top, near, far) {\n\t\tconsole.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');\n\t\treturn this.makePerspective(left, right, top, bottom, near, far);\n\t};\n\n\tMatrix4.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tPlane.prototype.isIntersectionLine = function (line) {\n\t\tconsole.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n\t\treturn this.intersectsLine(line);\n\t}; //\n\n\n\tQuaternion.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n\t\treturn vector.applyQuaternion(this);\n\t};\n\n\tQuaternion.prototype.inverse = function () {\n\t\tconsole.warn('THREE.Quaternion: .inverse() has been renamed to invert().');\n\t\treturn this.invert();\n\t}; //\n\n\n\tRay.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tRay.prototype.isIntersectionPlane = function (plane) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n\t\treturn this.intersectsPlane(plane);\n\t};\n\n\tRay.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t}; //\n\n\n\tTriangle.prototype.area = function () {\n\t\tconsole.warn('THREE.Triangle: .area() has been renamed to .getArea().');\n\t\treturn this.getArea();\n\t};\n\n\tTriangle.prototype.barycoordFromPoint = function (point, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn this.getBarycoord(point, target);\n\t};\n\n\tTriangle.prototype.midpoint = function (target) {\n\t\tconsole.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');\n\t\treturn this.getMidpoint(target);\n\t};\n\n\tTriangle.prototypenormal = function (target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn this.getNormal(target);\n\t};\n\n\tTriangle.prototype.plane = function (target) {\n\t\tconsole.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');\n\t\treturn this.getPlane(target);\n\t};\n\n\tTriangle.barycoordFromPoint = function (point, a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn Triangle.getBarycoord(point, a, b, c, target);\n\t};\n\n\tTriangle.normal = function (a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn Triangle.getNormal(a, b, c, target);\n\t}; //\n\n\n\tShape.prototype.extractAllPoints = function (divisions) {\n\t\tconsole.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');\n\t\treturn this.extractPoints(divisions);\n\t};\n\n\tShape.prototype.extrude = function (options) {\n\t\tconsole.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\n\t\treturn new ExtrudeGeometry(this, options);\n\t};\n\n\tShape.prototype.makeGeometry = function (options) {\n\t\tconsole.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\n\t\treturn new ShapeGeometry(this, options);\n\t}; //\n\n\n\tVector2.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector2.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector2.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector3.prototype.setEulerFromRotationMatrix = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n\t};\n\n\tVector3.prototype.setEulerFromQuaternion = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n\t};\n\n\tVector3.prototype.getPositionFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n\t\treturn this.setFromMatrixPosition(m);\n\t};\n\n\tVector3.prototype.getScaleFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n\t\treturn this.setFromMatrixScale(m);\n\t};\n\n\tVector3.prototype.getColumnFromMatrix = function (index, matrix) {\n\t\tconsole.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n\t\treturn this.setFromMatrixColumn(matrix, index);\n\t};\n\n\tVector3.prototype.applyProjection = function (m) {\n\t\tconsole.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');\n\t\treturn this.applyMatrix4(m);\n\t};\n\n\tVector3.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector3.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector3.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector4.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector4.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tObject3D.prototype.getChildByName = function (name) {\n\t\tconsole.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n\t\treturn this.getObjectByName(name);\n\t};\n\n\tObject3D.prototype.renderDepth = function () {\n\t\tconsole.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n\t};\n\n\tObject3D.prototype.translate = function (distance, axis) {\n\t\tconsole.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n\t\treturn this.translateOnAxis(axis, distance);\n\t};\n\n\tObject3D.prototype.getWorldRotation = function () {\n\t\tconsole.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');\n\t};\n\n\tObject3D.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t}\n\t\t}\n\t});\n\n\tMesh.prototype.setDrawMode = function () {\n\t\tconsole.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t};\n\n\tObject.defineProperties(Mesh.prototype, {\n\t\tdrawMode: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');\n\t\t\t\treturn TrianglesDrawMode;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t\t}\n\t\t}\n\t});\n\n\tSkinnedMesh.prototype.initBones = function () {\n\t\tconsole.error('THREE.SkinnedMesh: initBones() has been removed.');\n\t}; //\n\n\n\tPerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n\t\tconsole.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');\n\t\tif (filmGauge !== undefined) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength(focalLength);\n\t}; //\n\n\n\tObject.defineProperties(Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .onlyShadow has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .shadowDarkness has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function ()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(DynamicDrawUsage);\n\t\t\t}\n\t\t}\n\t});\n\n\tBufferAttribute.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tBufferAttribute.prototype.copyIndicesArray = function ()\n\t/* indices */\n\t{\n\t\tconsole.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');\n\t}, BufferAttribute.prototype.setArray = function ()\n\t/* array */\n\t{\n\t\tconsole.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\tBufferGeometry.prototype.addIndex = function (index) {\n\t\tconsole.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n\t\tthis.setIndex(index);\n\t};\n\n\tBufferGeometry.prototype.addAttribute = function (name, attribute) {\n\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');\n\n\t\tif (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n\t\t\treturn this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n\t\t}\n\n\t\tif (name === 'index') {\n\t\t\tconsole.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n\t\t\tthis.setIndex(attribute);\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this.setAttribute(name, attribute);\n\t};\n\n\tBufferGeometry.prototype.addDrawCall = function (start, count, indexOffset) {\n\t\tif (indexOffset !== undefined) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n\t\t}\n\n\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n\t\tthis.addGroup(start, count);\n\t};\n\n\tBufferGeometry.prototype.clearDrawCalls = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n\t\tthis.clearGroups();\n\t};\n\n\tBufferGeometry.prototype.computeOffsets = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n\t};\n\n\tBufferGeometry.prototype.removeAttribute = function (name) {\n\t\tconsole.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');\n\t\treturn this.deleteAttribute(name);\n\t};\n\n\tBufferGeometry.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t});\n\n\tInterleavedBuffer.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tInterleavedBuffer.prototype.setArray = function ()\n\t/* array */\n\t{\n\t\tconsole.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\n\tExtrudeGeometry.prototype.getArrays = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShapeList = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShape = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShape() has been removed.');\n\t}; //\n\n\n\tScene.prototype.dispose = function () {\n\t\tconsole.error('THREE.Scene: .dispose() has been removed.');\n\t}; //\n\n\n\tUniform.prototype.onUpdate = function () {\n\t\tconsole.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');\n\t\treturn this;\n\t}; //\n\n\n\tObject.defineProperties(Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t}\n\t\t},\n\t\toverdraw: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapRGB has been removed.');\n\t\t\t\treturn new Color();\n\t\t\t}\n\t\t},\n\t\tshading: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\tthis.flatShading = value === FlatShading;\n\t\t\t}\n\t\t},\n\t\tstencilMask: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\treturn this.stencilFuncMask;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\tthis.stencilFuncMask = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tWebGLRenderer.prototype.clearTarget = function (renderTarget, color, depth, stencil) {\n\t\tconsole.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');\n\t\tthis.setRenderTarget(renderTarget);\n\t\tthis.clear(color, depth, stencil);\n\t};\n\n\tWebGLRenderer.prototype.animate = function (callback) {\n\t\tconsole.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');\n\t\tthis.setAnimationLoop(callback);\n\t};\n\n\tWebGLRenderer.prototype.getCurrentRenderTarget = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\n\t\treturn this.getRenderTarget();\n\t};\n\n\tWebGLRenderer.prototype.getMaxAnisotropy = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');\n\t\treturn this.capabilities.getMaxAnisotropy();\n\t};\n\n\tWebGLRenderer.prototype.getPrecision = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\n\t\treturn this.capabilities.precision;\n\t};\n\n\tWebGLRenderer.prototype.resetGLState = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\n\t\treturn this.state.reset();\n\t};\n\n\tWebGLRenderer.prototype.supportsFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsHalfFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_half_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsStandardDerivatives = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n\t\treturn this.extensions.get('OES_standard_derivatives');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_s3tc');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_pvrtc');\n\t};\n\n\tWebGLRenderer.prototype.supportsBlendMinMax = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n\t\treturn this.extensions.get('EXT_blend_minmax');\n\t};\n\n\tWebGLRenderer.prototype.supportsVertexTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');\n\t\treturn this.capabilities.vertexTextures;\n\t};\n\n\tWebGLRenderer.prototype.supportsInstancedArrays = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n\t\treturn this.extensions.get('ANGLE_instanced_arrays');\n\t};\n\n\tWebGLRenderer.prototype.enableScissorTest = function (boolean) {\n\t\tconsole.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n\t\tthis.setScissorTest(boolean);\n\t};\n\n\tWebGLRenderer.prototype.initMaterial = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPrePlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPostPlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.updateShadowMap = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setFaceCulling = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.allocTextureUnit = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture2D = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTextureCube = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.getActiveMipMapLevel = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');\n\t\treturn this.getActiveMipmapLevel();\n\t};\n\n\tObject.defineProperties(WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function ()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');\n\t\t\t\treturn this.getContext();\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');\n\t\t\t\treturn this.xr;\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\tthis.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t\treturn 1.0;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function ()\n\t\t\t/* cullFace */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t}\n\t});\n\tfunction WebGLRenderTargetCube(width, height, options) {\n\t\tconsole.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');\n\t\treturn new WebGLCubeRenderTarget(width, options);\n\t} //\n\n\tObject.defineProperties(WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tAudio.prototype.load = function (file) {\n\t\tconsole.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\n\t\tconst scope = this;\n\t\tconst audioLoader = new AudioLoader();\n\t\taudioLoader.load(file, function (buffer) {\n\t\t\tscope.setBuffer(buffer);\n\t\t});\n\t\treturn this;\n\t};\n\n\tAudioAnalyser.prototype.getData = function () {\n\t\tconsole.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n\t\treturn this.getFrequencyData();\n\t}; //\n\n\n\tCubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n\t\tconsole.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\n\t\treturn this.update(renderer, scene);\n\t};\n\n\tCubeCamera.prototype.clear = function (renderer, color, depth, stencil) {\n\t\tconsole.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');\n\t\treturn this.renderTarget.clear(renderer, color, depth, stencil);\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n\t\tconst loader = new TextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tconst texture = loader.load(url, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n\t\tconst loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tconst texture = loader.load(urls, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n\t}; //\n\n\n\tfunction CanvasRenderer() {\n\t\tconsole.error('THREE.CanvasRenderer has been removed');\n\t} //\n\n\tfunction JSONLoader() {\n\t\tconsole.error('THREE.JSONLoader has been removed.');\n\t} //\n\n\tconst SceneUtils = {\n\t\tcreateMultiMaterialObject: function ()\n\t\t/* geometry, materials */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tdetach: function ()\n\t\t/* child, parent, scene */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tattach: function ()\n\t\t/* child, scene, parent */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t}\n\t}; //\n\n\tfunction LensFlare() {\n\t\tconsole.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');\n\t}\n\n\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n\t\t\tdetail: {\n\t\t\t\trevision: REVISION\n\t\t\t}\n\t\t}));\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\tif (typeof window !== 'undefined') {\n\t\tif (window.__THREE__) {\n\t\t\tconsole.warn('WARNING: Multiple instances of Three.js being imported.');\n\t\t} else {\n\t\t\twindow.__THREE__ = REVISION;\n\t\t}\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DataUtils = DataUtils;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float16BufferAttribute = Float16BufferAttribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GLBufferAttribute = GLBufferAttribute;\n\texports.GLSL1 = GLSL1;\n\texports.GLSL3 = GLSL3;\n\texports.GammaEncoding = GammaEncoding;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SplineCurve = SplineCurve;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultipleRenderTargets = WebGLMultipleRenderTargets;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","module.exports = function( THREE ) {\n\t/**\n\t * @author qiao / https://github.com/qiao\n\t * @author mrdoob / http://mrdoob.com\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author erich666 / http://erichaines.com\n\t */\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\n\tfunction OrbitControls( object, domElement ) {\n\n\t\tthis.object = object;\n\n\t\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\tthis.target = new THREE.Vector3();\n\n\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\n\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = 0; // radians\n\t\tthis.maxPolarAngle = Math.PI; // radians\n\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\t\tthis.minAzimuthAngle = - Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.25;\n\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = true;\n\t\tthis.zoomSpeed = 1.0;\n\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 1.0;\n\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = true;\n\t\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t\t// Set to false to disable use of the keys\n\t\tthis.enableKeys = true;\n\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\n\t\t// for reset\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\n\t\t//\n\t\t// public methods\n\t\t//\n\n\t\tthis.getPolarAngle = function () {\n\n\t\t\treturn spherical.phi;\n\n\t\t};\n\n\t\tthis.getAzimuthalAngle = function () {\n\n\t\t\treturn spherical.theta;\n\n\t\t};\n\n\t\tthis.reset = function () {\n\n\t\t\tscope.target.copy( scope.target0 );\n\t\t\tscope.object.position.copy( scope.position0 );\n\t\t\tscope.object.zoom = scope.zoom0;\n\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\tscope.update();\n\n\t\t\tstate = STATE.NONE;\n\n\t\t};\n\n\t\t// this method is exposed, but perhaps it would be better if we can make it private...\n\t\tthis.update = function() {\n\n\t\t\tvar offset = new THREE.Vector3();\n\n\t\t\t// so camera.up is the orbit axis\n\t\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\t\tvar quatInverse = quat.clone().inverse();\n\n\t\t\tvar lastPosition = new THREE.Vector3();\n\t\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\t\treturn function update () {\n\n\t\t\t\tvar position = scope.object.position;\n\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t\t// angle from z-axis around y-axis\n\t\t\t\tspherical.setFromVector3( offset );\n\n\t\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t\t}\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t\t// restrict theta to be between desired limits\n\t\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\t\tspherical.makeSafe();\n\n\n\t\t\t\tspherical.radius *= scale;\n\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t\t// move target to panned location\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tscale = 1;\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t\t// update condition is:\n\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\t\tif ( zoomChanged ||\n\t\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\t\tzoomChanged = false;\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t};\n\n\t\t}();\n\n\t\tthis.dispose = function() {\n\n\t\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t\t};\n\n\t\t//\n\t\t// internals\n\t\t//\n\n\t\tvar scope = this;\n\n\t\tvar changeEvent = { type: 'change' };\n\t\tvar startEvent = { type: 'start' };\n\t\tvar endEvent = { type: 'end' };\n\n\t\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\t\tvar state = STATE.NONE;\n\n\t\tvar EPS = 0.000001;\n\n\t\t// current position in spherical coordinates\n\t\tvar spherical = new THREE.Spherical();\n\t\tvar sphericalDelta = new THREE.Spherical();\n\n\t\tvar scale = 1;\n\t\tvar panOffset = new THREE.Vector3();\n\t\tvar zoomChanged = false;\n\n\t\tvar rotateStart = new THREE.Vector2();\n\t\tvar rotateEnd = new THREE.Vector2();\n\t\tvar rotateDelta = new THREE.Vector2();\n\n\t\tvar panStart = new THREE.Vector2();\n\t\tvar panEnd = new THREE.Vector2();\n\t\tvar panDelta = new THREE.Vector2();\n\n\t\tvar dollyStart = new THREE.Vector2();\n\t\tvar dollyEnd = new THREE.Vector2();\n\t\tvar dollyDelta = new THREE.Vector2();\n\n\t\tfunction getAutoRotationAngle() {\n\n\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t\t}\n\n\t\tfunction getZoomScale() {\n\n\t\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t\t}\n\n\t\tfunction rotateLeft( angle ) {\n\n\t\t\tsphericalDelta.theta -= angle;\n\n\t\t}\n\n\t\tfunction rotateUp( angle ) {\n\n\t\t\tsphericalDelta.phi -= angle;\n\n\t\t}\n\n\t\tvar panLeft = function() {\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\t\tv.multiplyScalar( - distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\tvar panUp = function() {\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\n\t\t\t\tv.multiplyScalar( distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\tvar pan = function() {\n\n\t\t\tvar offset = new THREE.Vector3();\n\n\t\t\treturn function pan ( deltaX, deltaY ) {\n\n\t\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\t\t// perspective\n\t\t\t\t\tvar position = scope.object.position;\n\t\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\t\t// orthographic\n\t\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\t\tscope.enablePan = false;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}();\n\n\t\tfunction dollyIn( dollyScale ) {\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tscale /= dollyScale;\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction dollyOut( dollyScale ) {\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tscale *= dollyScale;\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\t\t// event callbacks - update the object state\n\t\t//\n\n\t\tfunction handleMouseDownRotate( event ) {\n\n\t\t\t//console.log( 'handleMouseDownRotate' );\n\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownDolly( event ) {\n\n\t\t\t//console.log( 'handleMouseDownDolly' );\n\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownPan( event ) {\n\n\t\t\t//console.log( 'handleMouseDownPan' );\n\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseMoveRotate( event ) {\n\n\t\t\t//console.log( 'handleMouseMoveRotate' );\n\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMoveDolly( event ) {\n\n\t\t\t//console.log( 'handleMouseMoveDolly' );\n\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMovePan( event ) {\n\n\t\t\t//console.log( 'handleMouseMovePan' );\n\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseUp( event ) {\n\n\t\t\t//console.log( 'handleMouseUp' );\n\n\t\t}\n\n\t\tfunction handleMouseWheel( event ) {\n\n\t\t\t//console.log( 'handleMouseWheel' );\n\n\t\t\tif ( event.deltaY < 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleKeyDown( event ) {\n\n\t\t\t//console.log( 'handleKeyDown' );\n\n\t\t\tswitch ( event.keyCode ) {\n\n\t\t\t\tcase scope.keys.UP:\n\t\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.LEFT:\n\t\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.RIGHT:\n\t\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction handleTouchStartRotate( event ) {\n\n\t\t\t//console.log( 'handleTouchStartRotate' );\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t}\n\n\t\tfunction handleTouchStartDolly( event ) {\n\n\t\t\t//console.log( 'handleTouchStartDolly' );\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyStart.set( 0, distance );\n\n\t\t}\n\n\t\tfunction handleTouchStartPan( event ) {\n\n\t\t\t//console.log( 'handleTouchStartPan' );\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t}\n\n\t\tfunction handleTouchMoveRotate( event ) {\n\n\t\t\t//console.log( 'handleTouchMoveRotate' );\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchMoveDolly( event ) {\n\n\t\t\t//console.log( 'handleTouchMoveDolly' );\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyEnd.set( 0, distance );\n\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchMovePan( event ) {\n\n\t\t\t//console.log( 'handleTouchMovePan' );\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchEnd( event ) {\n\n\t\t\t//console.log( 'handleTouchEnd' );\n\n\t\t}\n\n\t\t//\n\t\t// event handlers - FSM: listen for events and reset state\n\t\t//\n\n\t\tfunction onMouseDown( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\tstate = STATE.PAN;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseUp( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\thandleMouseUp( event );\n\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onMouseWheel( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\thandleMouseWheel( event );\n\n\t\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t}\n\n\t\tfunction onKeyDown( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\t\thandleKeyDown( event );\n\n\t\t}\n\n\t\tfunction onTouchStart( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tswitch ( event.touches.length ) {\n\n\t\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\thandleTouchStartDolly( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\tswitch ( event.touches.length ) {\n\n\t\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMoveDolly( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchEnd( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\thandleTouchEnd( event );\n\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onContextMenu( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t}\n\n\t\t//\n\n\t\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\t\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\t\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t\t// force an update at start\n\n\t\tthis.update();\n\n\t};\n\n\tOrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\tOrbitControls.prototype.constructor = OrbitControls;\n\n\tObject.defineProperties( OrbitControls.prototype, {\n\n\t\tcenter: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\t\treturn this.target;\n\n\t\t\t}\n\n\t\t},\n\n\t\t// backward compatibility\n\n\t\tnoZoom: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\treturn ! this.enableZoom;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\tthis.enableZoom = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoRotate: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\treturn ! this.enableRotate;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\tthis.enableRotate = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoPan: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\treturn ! this.enablePan;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\tthis.enablePan = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoKeys: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\treturn ! this.enableKeys;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\tthis.enableKeys = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tstaticMoving : {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\treturn ! this.enableDamping;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\tthis.enableDamping = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tdynamicDampingFactor : {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\treturn this.dampingFactor;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\tthis.dampingFactor = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\treturn OrbitControls;\n};\n",null,null,null,null,null,null],"names":["HMR_HOST","HMR_PORT","HMR_SECURE","HMR_ENV_HASH","module","bundle","HMR_BUNDLE_ID","OVERLAY_ID","OldModule","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","undefined","checkedAssets","acceptedAssets","assetsToAccept","location","protocol","indexOf","hostname","port","parent","isParcelRequire","WebSocket","getHostname","getPort","test","ws","onmessage","event","JSON","parse","type","removeErrorOverlay","assets","filter","asset","envHash","handled","forEach","didAccept","hmrAcceptCheck","root","id","depsByBundle","console","clear","hmrApply","i","length","hmrAcceptRun","window","reload","ansiDiagnostic","diagnostics","ansi","stack","codeframe","error","message","hints","join","overlay","createErrorOverlay","html","document","body","appendChild","onerror","e","onclose","warn","getElementById","remove","log","createElement","errorHTML","diagnostic","map","hint","innerHTML","modules","parents","k","d","dep","Array","isArray","concat","getParents","link","newLink","cloneNode","onload","parentNode","removeChild","setAttribute","getAttribute","split","Date","now","insertBefore","nextSibling","cssTimeout","setTimeout","links","querySelectorAll","href","servedFromHMRServer","RegExp","absolute","origin","updateLink","reloadCSS","deps","Function","output","cached","cache","some","v","cb","assetsToAlsoAccept","apply","getRandomNum","max","min","Math","floor","random","constructor","velocity","Vector3","acceleration","wonderTheta","maxSpeed","boost","Start","radius","theta","degToRad","phi","mesh","position","x","sin","cos","y","z","Update","time","ApplyForce","multiplyScalar","add","clampLength","head","clone","lookAt","BuildMesh","geometry","CylinderGeometry","rotateX","material","MeshNormalMaterial","Mesh","f","count","params","seek","maxForce","align","effectiveRange","separate","choesin","group","Group","agents","agent","Agent","Align","Separate","Cohesion","AvoidBoxContainer","currAgent","sumVec","steer","otherAgent","dist","distanceTo","divideScalar","normalize","subVectors","closeVec","Seek","target","toGoalVector","distance","steerVector","sumVector","Avoid","currentCreature","wall","computeBoundingSphere","boundingSphere","toMeVector","pow","rangeWidth","rangeHeight","rangeDepth","resetDescription","addEventListener","className","clearTimeout","Boid","OrbitControls","scene","renderer","fov","near","far","camera","PerspectiveCamera","innerWidth","innerHeight","controls","domElement","autoRotate","enableDamping","dampingFactor","update","_Resize","render","aspect","container","clientWidth","clientHeight","updateProjectionMatrix","setSize","setPixelRatio","devicePixelRatio","entities","WebGLRenderer","antialias","Scene","cameraController","CameraController","ambientLight","AmbientLight","intensity","fog","Fog","setAnimationLoop","Add","entity","inGroup","Entity","Error","global","factory","exports","define","amd","globalThis","self","THREE","REVISION","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","TOUCH","DOLLY_PAN","DOLLY_ROTATE","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipMapNearestFilter","NearestMipmapLinearFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipMapNearestFilter","LinearMipmapLinearFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","NormalAnimationBlendMode","AdditiveAnimationBlendMode","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","ZeroStencilOp","KeepStencilOp","ReplaceStencilOp","IncrementStencilOp","DecrementStencilOp","IncrementWrapStencilOp","DecrementWrapStencilOp","InvertStencilOp","NeverStencilFunc","LessStencilFunc","EqualStencilFunc","LessEqualStencilFunc","GreaterStencilFunc","NotEqualStencilFunc","GreaterEqualStencilFunc","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","StreamDrawUsage","StaticReadUsage","DynamicReadUsage","StreamReadUsage","StaticCopyUsage","DynamicCopyUsage","StreamCopyUsage","GLSL1","GLSL3","listener","_listeners","listeners","hasEventListener","removeEventListener","listenerArray","index","splice","dispatchEvent","array","slice","l","_lut","toString","_seed","DEG2RAD","PI","RAD2DEG","d0","d1","d2","d3","uuid","toUpperCase","value","n","m","a1","a2","b1","b2","t","lambda","dt","lerp","exp","abs","euclideanModulo","low","high","range","s","degrees","radians","ceil","LN2","q","a","b","c","order","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","MathUtils","Object","freeze","__proto__","generateUUID","clamp","mapLinear","inverseLerp","damp","pingpong","smoothstep","smootherstep","randInt","randFloat","randFloatSpread","seededRandom","radToDeg","isPowerOfTwo","ceilPowerOfTwo","floorPowerOfTwo","setQuaternionFromProperEuler","width","height","setScalar","scalar","setX","setY","setComponent","getComponent","copy","w","addVectors","addScalar","addScaledVector","sub","subScalar","multiply","divide","applyMatrix3","elements","clampScalar","minVal","maxVal","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","angle","atan2","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","Vector2","prototype","isVector2","arguments","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","g","h","invert","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","r","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","scale","rotate","translate","matrix","Matrix3","isMatrix3","_canvas","getDataURL","image","src","HTMLCanvasElement","canvas","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","EventDispatcher","Texture","DEFAULT_IMAGE","mapping","DEFAULT_MAPPING","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","defineProperty","name","mipmaps","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","updateMatrix","source","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","isDataTexture","serializeImage","transformUv","uv","needsUpdate","isTexture","HTMLImageElement","ImageBitmap","ImageUtils","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","epsilon","epsilon2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","Vector4","isVector4","options","depth","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","setTexture","WebGLRenderTarget","isWebGLRenderTarget","il","WebGLMultipleRenderTargets","isWebGLMultipleRenderTargets","samples","WebGLMultisampleRenderTarget","isWebGLMultisampleRenderTarget","_x","_y","_z","_w","slerp","qa","qb","qm","slerpQuaternions","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","Number","EPSILON","len","tDir","multiplyQuaternionsFlat","_onChangeCallback","quaternion","setFromEuler","euler","isEuler","_order","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","conjugate","p","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","Quaternion","isQuaternion","multiplyVectors","applyEuler","applyQuaternion","_quaternion$4","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector$c","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","isVector3","Infinity","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","expandByPoint","setFromCenterAndSize","size","halfSize","_vector$b","setFromObject","object","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","boundingBox","computeBoundingBox","_box$3","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","_center","_extents","_v0$2","_v1$7","_v2$3","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","distanceToPoint","clampedPoint","getBoundingSphere","intersect","_points","Box3","isBox3","_testAxis","v0","extents","j","p0","p1","p2","_box$2","_v1$6","_toFarthestPoint","_toPoint","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","missingRadiusHalf","_vector$a","_segCenter","_segDir","_diff","_edge1","_edge2","_normal$1","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","segExtent","a01","b0","s0","sqrDist","extDet","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","sign","DdQxE2","DdE1xQ","QdN","n14","n24","n34","n41","n42","n43","n44","Matrix4","copyPosition","setFromMatrix3","makeBasis","extractRotation","scaleX","_v1$5","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","yx","zx","zy","x2","y2","z2","wx","wy","wz","decompose","_m1$2","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","makeOrthographic","isMatrix4","_matrix$1","_quaternion$3","Euler","DefaultOrder","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","RotationOrders","mask","channel","enable","enableAll","toggle","disable","disableAll","layers","_object3DId","_v1$4","_q1","_m1$1","_target","_position$3","_scale$2","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","DefaultUp","onRotationChange","onQuaternionChange","defineProperties","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","Layers","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","userData","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","isObject3D","removeFromParent","attach","getObjectById","getObjectByProperty","getObjectByName","child","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","force","updateParents","updateChildren","geometries","materials","shapes","skeletons","stringify","isInstancedMesh","instanceMatrix","instanceColor","library","element","isMesh","isLine","isPoints","serialize","parameters","shape","isSkinnedMesh","bindMode","bindMatrix","skeleton","uuids","animation","extractFromCache","values","key","recursive","_vector1","_vector2$1","_normalMatrix","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","referencePoint","Plane","isPlane","_v0$1","_v1$3","_v2$2","_v3$1","_vab","_vac","_vbc","_vap","_vbp","_vcp","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","Triangle","getPlane","d4","vc","d5","d6","vb","va","materialId","blending","side","vertexColors","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","alphaToCoverage","premultipliedAlpha","toneMapped","onBuild","onBeforeCompile","customProgramCacheKey","setValues","newValue","flatShading","currentValue","isColor","isRoot","color","getHex","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","envMap","combine","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationColor","sizeAttenuation","linewidth","dashSize","gapSize","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","morphTargets","morphNormals","srcPlanes","dstPlanes","Material","isMaterial","_colorKeywords","_hslA","_hslB","setRGB","setHex","setStyle","hex","setHSL","hue2rgb","style","string","parseFloat","exec","components","parseInt","handleAlpha","charAt","setColorName","toLowerCase","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","SRGBToLinear","copyLinearToSRGB","LinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpColors","lerpHSL","normalized","Color","NAMES","MeshBasicMaterial","isMeshBasicMaterial","_vector$9","_vector2","itemSize","TypeError","usage","updateRange","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZ","setXYZW","onUpload","BufferAttribute","isBufferAttribute","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float16BufferAttribute","isFloat16BufferAttribute","Float32Array","Float64Array","TYPED_ARRAYS","buffer","_id","_m1","_obj","_offset","_box$1","_boxMorphTargets","_vector$8","attributes","morphAttributes","morphTargetsRelative","groups","drawRange","getIndex","setIndex","arrayMax","Uint32BufferAttribute","Uint16BufferAttribute","deleteAttribute","hasAttribute","addGroup","materialIndex","clearGroups","setDrawRange","tangent","Float32BufferAttribute","morphAttributesPosition","isGLBufferAttribute","morphAttribute","isNaN","Sphere","jl","computeFaceNormals","computeTangents","indices","positions","normals","uvs","nVertices","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","isFinite","handleTriangle","tmp2","n2","handleVertex","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","ab","normalizeNormals","merge","isBufferGeometry","attribute1","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","array2","geometry2","BufferGeometry","newAttribute","convertBufferAttribute","morphArray","keys","hasMorphAttributes","attributeArray","_inverseMatrix$2","_ray$2","Ray","_sphere$3","_vA$1","_vB$1","_vC$1","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA$1","_uvB$1","_uvC$1","_intersectionPoint","_intersectionPointWorld","updateMorphTargets","morphTargetInfluences","morphTargetDictionary","assign","ml","String","raycaster","intersects","intersection","morphPosition","groupMaterial","checkBufferGeometryIntersection","faceIndex","face","isGeometry","morphInfluences","influence","boneTransform","checkIntersection","widthSegments","heightSegments","depthSegments","scope","vertices","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","property","uniforms","merged","cloneUniforms","UniformsUtils","mergeUniforms","default_vertex","default_fragment","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","uniform","ShaderMaterial","isShaderMaterial","Camera","zoom","focus","view","filmGauge","filmOffset","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","tan","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","enabled","offsetX","offsetY","clearViewOffset","skew","isPerspectiveCamera","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","_needsFlipEnvMap","CubeTexture","isCubeTexture","dummy","isInteger","fromEquirectangularTexture","shader","tEquirect","BoxGeometry","currentMinFilter","CubeCamera","stencil","WebGLCubeRenderTarget","_sphere$2","_vector$7","p4","p5","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","isAnimating","animationLoop","requestId","frame","requestAnimationFrame","onAnimationFrame","stop","cancelAnimationFrame","setContext","gl","capabilities","isWebGL2","buffers","WeakMap","bufferType","createBuffer","bindBuffer","bufferData","FLOAT","HALF_FLOAT","UNSIGNED_SHORT","SHORT","UNSIGNED_INT","INT","BYTE","UNSIGNED_BYTE","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","isInterleavedBufferAttribute","get","deleteBuffer","delete","elementSize","updateBuffer","width_half","height_half","segment_width","segment_height","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","envmap_physical_pars_fragment","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmission_fragment","transmission_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","ShaderChunk","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","background","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","physical","transmissionSamplerSize","transmissionSamplerMap","cubemaps","state","objects","clearColor","clearAlpha","planeMesh","boxMesh","currentBackground","currentBackgroundVersion","currentTonemapping","renderList","forceClear","isScene","session","getSession","environmentBlendMode","setClear","autoClear","autoClearColor","autoClearDepth","autoClearStencil","toneMapping","unshift","PlaneGeometry","getClearColor","setClearColor","getClearAlpha","setClearAlpha","maxVertexAttributes","MAX_VERTEX_ATTRIBS","extension","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","program","updateBuffers","getBindingState","bindVertexArrayObject","saveCache","ELEMENT_ARRAY_BUFFER","setupVertexAttributes","createVertexArray","createVertexArrayOES","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","programMap","stateMap","createVertexArrayObject","newAttributes","enabledAttributes","attributeDivisors","cachedAttributes","geometryAttributes","attributesNum","cachedAttribute","geometryAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableVertexAttribArray","stride","vertexAttribIPointer","vertexAttribPointer","isInstancedBufferGeometry","initAttributes","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","_maxInstanceCount","enableAttribute","ARRAY_BUFFER","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","disableUnusedAttributes","reset","geometryId","programId","deleteVertexArrayObject","resetDefaultState","setup","releaseStatesOfGeometry","releaseStatesOfProgram","info","mode","drawArrays","primcount","methodName","setMode","renderInstances","maxAnisotropy","has","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","getMaxPrecision","logarithmicDepthBuffer","maxTextures","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","floatVertexTextures","maxSamples","MAX_SAMPLES","getMaxAnisotropy","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","numPlanes","numIntersection","init","enableLocalClipping","projectPlanes","beginShadows","endShadows","resetGlobalState","setState","useCache","materialProperties","nGlobal","lGlobal","dstArray","clippingState","skipTransform","nPlanes","flatSize","viewMatrix","i4","cubemap","mapTextureMapping","onTextureDispose","getExtension","wireframeAttributes","onGeometryDispose","memory","geometryIndex","geometryPosition","previousAttribute","currentAttribute","updateWireframeAttribute","getWireframeAttribute","drawElements","calls","triangles","lines","instanceCount","TRIANGLES","LINES","LINE_STRIP","LINE_LOOP","POINTS","programs","autoReset","influencesList","workInfluences","objectInfluences","influences","sort","absNumericalSort","MAX_SAFE_INTEGER","numericalSort","morphInfluencesSum","morphBaseInfluence","getUniforms","setValue","updateMap","buffergeometry","onInstancedMeshDispose","instancedMesh","wrapR","DataTexture2DArray","isDataTexture2DArray","DataTexture3D","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","nBlocks","blockSize","firstElem","allocateTextureUnit","uniform1f","addr","uniform2f","arraysEqual","uniform2fv","uniform3f","uniform3fv","uniform4f","uniform4fv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniform1ui","uniform2uiv","uniform3uiv","uniform4uiv","unit","safeSetTexture2D","setTexture3D","safeSetTextureCube","setTexture2DArray","setValueV1f","setValueV2f","setValueV3f","setValueV4f","setValueM2","setValueM3","setValueM4","setValueV1i","setValueV2i","setValueV3i","setValueV4i","setValueV1ui","setValueV2ui","setValueV3ui","setValueV4ui","setValueT1","setValueT3D1","setValueT6","setValueT2DArray1","uniform1fv","flatten","uniform1iv","uniform1uiv","units","allocTexUnits","setValueV1fArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueV1iArray","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV1uiArray","setValueV2uiArray","setValueV3uiArray","setValueV4uiArray","setValueT1Array","setValueT6Array","activeInfo","getSingularSetter","getPureArraySetter","PureArrayUniform","updateCache","seq","StructuredUniform","RePathPart","uniformObject","path","pathLength","lastIndex","match","matchEnd","idIsIndex","subscript","addUniform","SingleUniform","next","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","parseUniform","WebGLUniforms","setOptional","upload","seqWithValue","createShader","shaderSource","compileShader","programIdCount","status","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","trim","getShaderSource","addLineNumbers","functionName","getEncodingComponents","toneMappingName","chunks","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filterEmptyLine","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","numClippingPlanes","numClipIntersection","includePattern","includeReplacer","include","resolveIncludes","deprecatedUnrollLoopPattern","unrollLoopPattern","loopReplacer","deprecatedLoopReplacer","snippet","precisionstring","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapMode","envMapModeDefine","envMapBlendingDefine","cacheKey","generateShadowMapTypeDefine","generateEnvMapTypeDefine","generateEnvMapModeDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","generateExtensions","customDefines","generateDefines","createProgram","prefixVertex","prefixFragment","versionString","isRawShaderMaterial","generatePrecision","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","vertexAlphas","vertexUvs","uvsVertexOnly","skinning","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","getToneMappingFunction","getTexelDecodingFunction","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","getTexelEncodingFunction","outputEncoding","depthPacking","replaceLightNums","replaceClippingPlaneNums","unrollLoops","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","vertexErrors","getShaderErrors","fragmentErrors","getError","VALIDATE_STATUS","prefix","deleteShader","cachedUniforms","fetchAttributeLocations","destroy","deleteProgram","usedTimes","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","bones","nVertexUniforms","nVertexMatrices","shadows","environment","isMeshStandardMaterial","getMaxBones","getTextureEncodingFromMap","isFogExp2","directional","spot","rectArea","hemi","shadowMap","pl","preexistingProgram","WebGLProgram","pop","getParameters","getProgramCacheKey","acquireProgram","releaseProgram","groupOrder","renderItems","renderItemsIndex","opaque","transmissive","defaultProgram","renderItem","getNextRenderItem","customOpaqueSort","customTransparentSort","painterSortStable","reversePainterSortStable","finish","lists","renderCallDepth","list","WebGLRenderList","light","halfWidth","halfHeight","nextVersion","lightA","lightB","UniformsCache","shadowCache","ShadowUniformsCache","hash","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","shadowCastingLightsFirst","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","WebGLLights","lightsArray","shadowsArray","shadowLight","setupLights","setupLightsView","pushLight","pushShadow","renderStates","renderState","WebGLRenderState","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","_renderer","_objects","_capabilities","_frustum","Frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","_maxTextureSize","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","mapPass","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","renderObject","VSMPass","renderBufferDirect","useMorphing","result","getMaterialVariant","getDepthMaterialVariant","customMaterial","customDepthMaterial","getDistanceMaterialVariant","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","shadowCamera","kl","depthMaterial","getDepthMaterial","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","DEPTH_TEST","depthMask","setFunc","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","setOp","stencilOp","clearStencil","colorBuffer","ColorBuffer","DepthBuffer","StencilBuffer","enabledCapabilities","xrFramebuffer","currentBoundFramebuffers","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","lineWidthAvailable","glVersion","VERSION","currentTextureSlot","currentBoundTextures","scissorParam","SCISSOR_BOX","viewportParam","VIEWPORT","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","setFlipSided","setCullFace","CULL_FACE","framebuffer","bindFramebuffer","FRAMEBUFFER","DRAW_FRAMEBUFFER","useProgram","equationToGL","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","MIN","MAX","MIN_EXT","MAX_EXT","factorToGL","ZERO","ONE","SRC_COLOR","SRC_ALPHA","SRC_ALPHA_SATURATE","DST_COLOR","DST_ALPHA","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_DST_ALPHA","BLEND","blendFuncSeparate","blendFunc","blendEquationSeparate","frontFaceCW","setPolygonOffset","SAMPLE_ALPHA_TO_COVERAGE","frontFace","CW","CCW","cullFace","BACK","FRONT","FRONT_AND_BACK","lineWidth","factor","POLYGON_OFFSET_FILL","SCISSOR_TEST","webglSlot","TEXTURE0","activeTexture","webglType","webglTexture","boundTexture","compressedTexImage2D","texImage3D","KEEP","READ_FRAMEBUFFER","bindXRFramebuffer","setMaterial","setLineWidth","unbindTexture","_gl","utils","_videoTextures","useOffscreenCanvas","OffscreenCanvas","err","needsPowerOfTwo","needsNewCanvas","maxSize","createCanvas","supportsMips","generateMipmap","textureProperties","__maxMipLevel","log2","internalFormatName","glFormat","glType","RED","R32F","R16F","R8","RGB","RGB32F","RGB16F","RGB8","RGBA32F","RGBA16F","RGBA8","LINEAR","deallocateTexture","isVideoTexture","onRenderTargetDispose","deallocateRenderTarget","__webglInit","deleteTexture","__webglTexture","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","attachmentProperties","textureUnits","textureUnit","slot","updateVideoTexture","__version","complete","uploadTexture","TEXTURE_2D_ARRAY","TEXTURE_3D","uploadCubeTexture","wrappingToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","filterToGL","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","textureType","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","filterFallback","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","initTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","textureNeedsPowerOfTwo","isPowerOfTwo$1","resizeImage","convert","glInternalFormat","getInternalFormat","setTextureParameters","mipmap","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT24","DEPTH24_STENCIL8","DEPTH_COMPONENT16","DEPTH_STENCIL","isCompressedTexture","textureNeedsGenerateMipmaps","isCompressed","cubeImage","mipmapImage","attachment","textureTarget","framebufferTexture2D","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","isCube","setTexture2D","webglDepthTexture","setupDepthTexture","createRenderbuffer","setupRenderBufferStorage","isMultipleRenderTargets","isRenderTarget3D","createFramebuffer","COLOR_ATTACHMENT0","setupFrameBufferTexture","glTextureType","isTexture3D","setupDepthRenderbuffer","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","blitFramebuffer","warnedTexture2D","warnedTextureCube","setTextureCube","resetTextureUnits","setupRenderTarget","updateRenderTargetMipmap","updateMultisampleRenderTarget","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","LUMINANCE","LUMINANCE_ALPHA","RED_INTEGER","RG","RG_INTEGER","RGB_INTEGER","RGBA_INTEGER","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8","UNSIGNED_INT_24_8_WEBGL","cameras","ArrayCamera","isArrayCamera","isGroup","_moveEvent","_targetRay","_grip","_hand","getHandSpace","joints","inputState","pinching","getTargetRaySpace","hasLinearVelocity","linearVelocity","hasAngularVelocity","angularVelocity","getGripSpace","disconnect","inputSource","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","hand","visibilityState","getPose","targetRaySpace","transform","inputjoint","jointPose","getJointPose","jointName","joint","jointRadius","indexTip","thumbTip","distanceToPinch","threshold","handedness","gripSpace","framebufferScaleFactor","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","cameraAutoUpdate","isPresenting","getController","controller","WebXRController","getControllerGrip","getHand","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","onSessionEvent","onSessionEnd","onInputSourcesChange","getContextAttributes","xrCompatible","makeXRCompatible","layerInit","baseLayer","XRWebGLLayer","updateRenderState","requestReferenceSpace","inputSources","removed","added","cameraLPos","cameraRPos","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","updateCamera","depthNear","depthFar","setProjectionFromUnion","getCamera","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","WebGLAnimation","isFog","density","pixelRatio","transmissionRenderTarget","refreshUniformsCommon","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","uvScaleMap","uv2ScaleMap","refreshFogUniforms","refreshMaterialUniforms","display","createCanvasElement","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","renderListStack","renderStateStack","sortObjects","toneMappingExposure","_this","_isContextLost","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_currentDrawBuffers","_clippingEnabled","_localClippingEnabled","_transmissionRenderTarget","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","contextNames","contextAttributes","contextName","onContextLost","onContextRestore","isWebGL1Renderer","shift","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","WebGLExtensions","WebGLCapabilities","WebGLUtils","WebGLState","WebGLInfo","WebGLProperties","WebGLTextures","WebGLCubeMaps","WebGLAttributes","WebGLBindingStates","WebGLGeometries","WebGLObjects","WebGLMorphtargets","WebGLClipping","WebGLPrograms","WebGLMaterials","WebGLRenderLists","WebGLRenderStates","WebGLBackground","WebGLShadowMap","WebGLBufferRenderer","WebGLIndexedBufferRenderer","initGLContext","WebXRManager","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","onXRSessionStart","onXRSessionEnd","preventDefault","infoAutoReset","shadowMapAutoUpdate","shadowMapNeedsUpdate","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReferences","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","DYNAMIC_DRAW","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","getTargetPixelRatio","isLineSegments","isLineLoop","isSprite","compile","material2","getProgram","projectObject","opaqueObjects","transmissiveObjects","transparentObjects","renderObjects","renderTransmissiveObjects","isLOD","isImmediateRenderObject","camera2","renderObjectImmediate","lightsStateVersion","programCacheKey","updateCommonMaterialProperties","needsLights","materialNeedsLights","progUniforms","uniformsList","needsProgramChange","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","computeBoneTexture","boneTextureSize","markUniformsLightsNeedsUpdate","framebufferBound","drawBuffersWEBGL","layer","framebufferTextureLayer","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","halfFloatSupportedByExt","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","copyTextureToTexture3D","sourceBox","glTarget","unpackRowLen","UNPACK_ROW_LENGTH","unpackImageHeight","UNPACK_IMAGE_HEIGHT","unpackSkipPixels","UNPACK_SKIP_PIXELS","unpackSkipRows","UNPACK_SKIP_ROWS","unpackSkipImages","UNPACK_SKIP_IMAGES","texSubImage3D","resetState","__THREE_DEVTOOLS__","CustomEvent","detail","WebGL1Renderer","FogExp2","arrayBuffers","_uuid","ib","InterleavedBuffer","isInterleavedBuffer","_vector$6","interleavedBuffer","interleavedBuffers","InterleavedBufferAttribute","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","float32Array","transformVertex","Sprite","vertexPosition","mvPosition","_v1$2","_v2$1","_currentLevel","levels","addLevel","getCurrentLevel","getObjectForDistance","_basePosition","_skinIndex","_skinWeight","_vector$5","_matrix","bindMatrixInverse","bind","calculateInverses","normalizeSkinWeights","skinWeight","skinIndex","weight","boneIndex","boneInverses","SkinnedMesh","Bone","isBone","DataTexture","_offsetMatrix","_identityMatrix","boneMatrices","inverse","bone","Skeleton","getBoneByName","fromJSON","json","boneInverse","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","getColorAt","getMatrixAt","raycastTimes","instanceId","setColorAt","setMatrixAt","InstancedMesh","linecap","linejoin","_start$1","_end$1","_inverseMatrix$1","_ray$1","_sphere$1","computeLineDistances","lineDistances","Line","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","distSq","_start","_end","LineSegments","LineLoop","_inverseMatrix","_ray","_sphere","_position$2","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","video","requestVideoFrameCallback","updateVideo","hasVideoFrameCallback","readyState","HAVE_CURRENT_DATA","VideoTexture","CompressedTexture","CanvasTexture","isCanvasTexture","DepthTexture","segments","thetaStart","thetaLength","vertex","segment","radiusTop","radiusBottom","radialSegments","openEnded","indexArray","generateTorso","generateCap","slope","indexRow","sinTheta","cosTheta","centerIndexStart","centerIndexEnd","vertexBuffer","uvBuffer","subdivide","applyRadius","generateUVs","getVertexByIndex","subdivideFace","cols","aj","bj","rows","pushVertex","azimuth","inclination","correctUVs","correctSeam","centroid","azi","correctUV","PolyhedronGeometry","_v0","_v1$1","_normal","_triangle","thresholdAngle","precisionPoints","thresholdDot","indexAttr","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","reverseHash","index0","Earcut","triangulate","holeIndices","dim","hasHoles","outerLen","outerNode","linkedList","prev","invSize","eliminateHoles","earcutLinked","clockwise","last","signedArea","insertNode","removeNode","again","steiner","area","ear","pass","indexCurve","isEarHashed","isEar","filterPoints","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","zOrder","prevZ","nextZ","locallyInside","isValidDiagonal","splitPolygon","queue","getLeftmost","compareX","eliminateHole","hole","findHoleBridge","hx","hy","mx","my","tanMin","sectorContainsSector","sortLinked","tail","numMerges","pSize","qSize","inSize","leftmost","px","py","intersectsPolygon","middleInside","q1","q2","o1","o2","o3","o4","onSegment","num","inside","Node","an","bp","sum","contour","isClockWise","pts","ShapeUtils","triangulateShape","holes","faces","removeDupEndPts","addContour","holeIndex","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","extrudeByPath","splineTube","binormal","position2","getSpacedPoints","computeFrenetFrames","shapePoints","extractPoints","reverse","hl","ahole","pt","vec","vlen","flen","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","contourMovements","getBevelVec","holesMovements","oneHoleMovements","verticesMovements","bs","vert","scalePt2","binormals","buildLidFaces","buildSideFaces","f3","layeroffset","sidewalls","sl","slen1","slen2","f4","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","toJSON$1","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","phiStart","phiLength","inverseSegments","base","n1","func","slices","stacks","EPS","pu","pv","sliceCount","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","indexOffset","shapeVertices","shapeHoles","shapeHole","thetaEnd","grid","verticesRow","uOffset","ExtrudeGeometry","text","font","isFont","generateShapes","tube","tubularSegments","arc","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","cs","closed","frames","P","generateBufferData","generateSegment","generateIndices","getPointAt","edge","edges","o","ol","edge1","edge2","Geometries","BoxBufferGeometry","CircleGeometry","CircleBufferGeometry","ConeGeometry","ConeBufferGeometry","CylinderBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","EdgesGeometry","ExtrudeBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","LatheGeometry","LatheBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","ParametricGeometry","ParametricBufferGeometry","PlaneBufferGeometry","PolyhedronBufferGeometry","RingGeometry","RingBufferGeometry","ShapeGeometry","ShapeBufferGeometry","SphereGeometry","SphereBufferGeometry","TetrahedronGeometry","TetrahedronBufferGeometry","TextGeometry","TextBufferGeometry","TorusGeometry","TorusBufferGeometry","TorusKnotGeometry","TorusKnotBufferGeometry","TubeGeometry","TubeBufferGeometry","WireframeGeometry","RawShaderMaterial","ior","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","compareTime","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","find","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","startIndex","endIndex","interpolant","evaluate","resultBuffer","referenceQuat","numTimes","valueStart","valueEnd","blendMode","parameterPositions","sampleValues","sampleSize","_cachedIndex","settings","DefaultSettings_","pp","validate_interval","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","getSettings_","copySampleValue_","Interpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","trackType","getInterpolation","InterpolantFactoryMethodDiscrete","DiscreteInterpolant","InterpolantFactoryMethodLinear","LinearInterpolant","InterpolantFactoryMethodSmooth","CubicInterpolant","factoryMethod","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","KeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","duration","jsonTracks","frameTime","parseKeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","morphTarget","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","typeName","getTrackTypeForValueTypeName","Cache","files","file","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","DefaultLoadingManager","LoadingManager","manager","crossOrigin","withCredentials","resourcePath","requestHeader","load","loadAsync","Promise","resolve","reject","setCrossOrigin","setWithCredentials","setPath","setResourcePath","setRequestHeader","loading","Loader","dataUriRegex","dataUriRegexResult","request","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","XMLHttpRequest","open","callbacks","overrideMimeType","header","send","setResponseType","setMimeType","FileLoader","AnimationClip","loaded","texDatas","mipmapCount","loadTexture","isCubemap","onImageLoad","onImageError","substr","urls","ImageLoader","texData","isJPEG","search","arcLengthDivisions","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","arcLengths","targetArcLength","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","t2","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","Curve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","twoPi","deltaAngle","samePoints","EllipseCurve","isEllipseCurve","aRadius","ArcCurve","isArcCurve","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","t3","CubicPoly","pz","curveType","intPoint","CatmullRomCurve3","isCatmullRomCurve3","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","v3","CubicBezier","CubicBezierCurve","isCubicBezierCurve","CubicBezierCurve3","isCubicBezierCurve3","LineCurve","isLineCurve","isLineCurve3","QuadraticBezier","QuadraticBezierCurve","isQuadraticBezierCurve","QuadraticBezierCurve3","isQuadraticBezierCurve3","CatmullRom","SplineCurve","isSplineCurve","Curves","LineCurve3","curves","autoClose","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","diff","lens","cacheLengths","sums","CurvePath","currentPoint","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","Path","getPointsHoles","holesPts","Light","HemisphereLight","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","_frameExtents","_viewportCount","_viewports","shadowMatrix","viewportIndex","LightShadow","SpotLightShadow","isSpotLightShadow","power","SpotLight","_lightPositionWorld","_lookTarget","_cubeDirections","_cubeUps","PointLightShadow","PointLight","scaleW","scaleH","OrthographicCamera","DirectionalLightShadow","isDirectionalLightShadow","DirectionalLight","RectAreaLight","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","SphericalHarmonics3","isSphericalHarmonics3","LightProbe","getTexture","shading","setTextures","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","interleavedBufferMap","arrayBufferMap","getArrayBuffer","getTypedArray","arrayBuffer","typedArray","bufferAttribute","getInterleavedBuffer","bufferAttributeConstr","drawcalls","offsets","LoaderUtils","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","hasImages","Shape","geometryShapes","bufferGeometryLoader","BufferGeometryLoader","details","MaterialLoader","loadImage","currentUrl","deserializedImage","deserializeImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","LOD","objectAnimations","setTexturePath","createImageBitmap","fetch","setOptions","fetchOptions","credentials","headers","then","res","blob","colorSpaceConversion","imageBitmap","catch","ImageBitmapLoader","isImageBitmapLoader","subPaths","currentPath","toShapes","isCCW","noHoles","inSubpaths","tmpPath","tmpShape","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","toShapesNoHoles","solid","holesFirst","betterShapeHoles","newShapes","newShapeHoles","mainIdx","tmpPoints","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","isPointInsidePolygon","froms","tos","tmpHoles","paths","createPaths","chars","line_height","yMax","yMin","underlineThickness","char","ret","createPath","glyph","glyphs","familyName","ShapePath","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","action","ha","Font","substring","AudioContext","webkitAudioContext","bufferCopy","decodeAudioData","audioBuffer","sky","ground","HemisphereLightProbe","isHemisphereLightProbe","AmbientLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","eyeSep","_cache","eyeSepHalf","eyeSepOnProjection","ymax","xmin","xmax","autoStart","oldTime","elapsedTime","running","getElapsedTime","getDelta","newTime","performance","_position$1","_quaternion$1","_scale$1","_orientation$1","gain","createGain","connect","destination","timeDelta","_clock","Clock","getInput","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position","_quaternion","_scale","_orientation","Audio","panner","createPanner","panningModel","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accumulate","accuIndex","currentWeight","mix","accumulateAdditive","weightAdditive","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","targetIndex","workOffset","_RESERVED_CHARS_RE","_reservedRe","_wordChar","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","firstValidIndex","nCachedObjects_","bindings","unbind","rootNode","node","findNode","nodeName","_getValue_unbound","_setValue_unbound","create","isAnimationObjectGroup","Composite","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","_getValue_direct","_getValue_array","resolvedProperty","_getValue_arrayElement","_getValue_toArray","_setValue_direct","targetObject","_setValue_direct_setNeedsUpdate","_setValue_direct_setMatrixWorldNeedsUpdate","_setValue_array","dest","_setValue_array_setNeedsUpdate","_setValue_array_setMatrixWorldNeedsUpdate","_setValue_arrayElement","_setValue_arrayElement_setNeedsUpdate","_setValue_arrayElement_setMatrixWorldNeedsUpdate","_setValue_fromArray","_setValue_fromArray_setNeedsUpdate","_setValue_fromArray_setMatrixWorldNeedsUpdate","targetArray","sourceArray","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","AnimationObjectGroup","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","_updateWeight","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_initMemoryManager","_accuIndex","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","PropertyMixer","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","AnimationAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","AnimationMixer","Uniform","InstancedInterleavedBuffer","setType","setItemSize","setCount","GLBufferAttribute","setFromCamera","coords","intersectObject","ascSort","intersectObjects","other","makeSafe","setFromCartesianCoords","_vector$4","Box2","isBox2","_startP","_startEnd","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","ImmediateRenderObject","_vector$3","cone","coneLength","coneWidth","_vector$2","_boneMatrix","_matrixWorldInv","getBoneList","isSkeletonHelper","boneList","sphereSize","_vector$1","_color1","_color2","radials","circles","_v1","_v2","_v3","lightPlane","targetLine","_vector","_camera","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box","positions2","_axis","_lineGeometry","_coneGeometry","headLength","headWidth","setDirection","setColor","_floatView","_int32View","toHalfFloat","val","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","ENCODINGS","backgroundMaterial","backgroundBox","_flatCamera","_lodPlanes","_sizeLods","_sigmas","_createPlanes","_clearColor","_oldTarget","PHI","INV_PHI","_axisDirections","maxComponent","fExp","_pingPongRenderTarget","_blurMaterial","_getBlurShader","_equirectShader","_cubemapShader","_compileMaterial","fromScene","sigma","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","fromEquirectangular","equirectangular","_fromTexture","fromCubemap","compileCubemapShader","_getCubemapShader","compileEquirectangularShader","_getEquirectShader","outputTarget","_setViewport","_textureToCubeUV","_isLDR","_createRenderTarget","tmpMesh","cubeCamera","upSign","forwardSign","originalAutoClear","useSolidColor","convertLinearToRGBE","col","poleAxis","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","STANDARD_DEVIATIONS","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","weights","outputSize","lod","sizeLod","texelSize","cubeFaces","positionSize","uvSize","faceIndexSize","coordinates","fill","shaderMaterial","_getCommonVertexShader","_getEncodings","LineStrip","LinePieces","NoColors","FaceColors","VertexColors","isMultiMaterial","Int8BufferAttribute","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Int16BufferAttribute","Int32BufferAttribute","Float64BufferAttribute","construct","fromPoints","AxesHelper","BoxHelper","GridHelper","setColors","SkeletonHelper","Handlers","DataTextureLoader","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","Line3","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","getInverse","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","prototypenormal","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","getChildByName","renderDepth","getWorldRotation","applyMatrix","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","removeAttribute","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","initMaterial","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","audioLoader","AudioLoader","AudioAnalyser","getData","updateCubeMap","TextureLoader","loadTextureCube","CubeTextureLoader","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","__THREE__","AnimationLoader","ArrowHelper","AudioListener","AxisHelper","BinaryTextureLoader","BoundingBoxHelper","Box3Helper","CameraHelper","CanvasRenderer","CompressedTextureLoader","Cylindrical","DataUtils","DirectionalLightHelper","DynamicBufferAttribute","EdgesHelper","Float32Attribute","Float64Attribute","FontLoader","HemisphereLightHelper","Int16Attribute","Int32Attribute","Int8Attribute","JSONLoader","LensFlare","MeshFaceMaterial","MultiMaterial","ObjectLoader","PMREMGenerator","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PlaneHelper","PointCloud","PointCloudMaterial","PointLightHelper","PolarGridHelper","PositionalAudio","Raycaster","Spherical","SpotLightHelper","StereoCamera","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","WebGLRenderTargetCube","WireframeHelper","XHRLoader"],"version":3,"file":"index.HASH_REF_c75227167347e57df55b258c72166a09.js.map","sourceRoot":"/__parcel_source_root/"}