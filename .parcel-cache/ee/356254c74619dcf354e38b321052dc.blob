{"mappings":"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AAO;;MAER1Z;QACC0Z,OAAO;;MAERw3C;QACCx3C,WAAWmL;;MAEZssC;QACCz3C,WAAWmL;;MAEZsqB;QACCz1B,OAAO;;;IAGT03C;MACCjhB;QACCz2B,OAAO;;;IAGT23C;MACCjhB;QACC12B,OAAO;;MAER43C;QACC53C,QAAQ;;MAET62B;QACC72B,OAAO;;MAER82B;QACC92B,OAAO;;MAER63C;QACC73C,OAAO;;;IAGT83C;MACCliB;QACC51B,OAAO;;MAER61B;QACC71B,OAAO;;;IAGT+3C;MACCriB;QACC11B,OAAO;;MAER21B;QACC31B,OAAO;;;IAGTg4C;MACCxhB;QACCx2B,OAAO;;;IAGTi4C;MACCniB;QACC91B,OAAO;;MAER+1B;QACC/1B,OAAO;;;IAGTk4C;MACCliB;QACCh2B,OAAO;;MAERk2B;QACCl2B,WAAW4G,QAAQ,GAAG;;;IAGxBuxC;MACChiB;QACCn2B,OAAO;;MAERo2B;QACCp2B,OAAO;;MAERq2B;QACCr2B,OAAO;;;IAGTo4C;MACC9hB;QACCt2B,OAAO;;;IAGTq4C;MACC9hB;QACCv2B,OAAO;;;IAGTs4C;MACCvhB;QACC/2B,OAAO;;;IAGTnP;MACC0nD;QACCv4C,OAAO;;MAERw4C;QACCx4C,OAAO;;MAERy4C;QACCz4C,OAAO;;MAER04C;QACC14C,WAAWg7B,MAAM;;;IAGnBgM;MACC2R;QACC34C;;MAED44C;QACC54C;;MAED64C;QACC74C;QACA84C;UACCl6B;UACA6V;;;MAGFskB;QACC/4C;QACA84C;UACCE;UACAC;UACAC;UACAC;;;MAGFC;QACCp5C;;MAEDq5C;QACCr5C;;MAEDs5C;QACCt5C;QACA84C;UACCrkB;UACAlqC;UACAq0B;UACAhxB;UACA2rD;UACAC;UACAC;;;MAGFC;QACC15C;QACA84C;UACCE;UACAC;UACAC;UACAC;;;MAGFQ;QACC35C;;MAED45C;QACC55C;;MAED65C;QACC75C;QACA84C;UACCrkB;UACAlqC;UACAkvD;UACA7rD;;;MAGFksD;QACC95C;QACA84C;UACCE;UACAC;UACAC;UACA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","sources":["./node_modules/@parcel/runtime-browser-hmr/lib/HMRRuntime.js","./src/app.js","./src/setup.js","../node_modules/three/build/three.js","../node_modules/three-orbit-controls/index.js","./node_modules/uuid/index.js","./node_modules/uuid/v1.js","./node_modules/uuid/lib/rng-browser.js","./node_modules/uuid/lib/bytesToUuid.js","./node_modules/uuid/v4.js","./node_modules/@parcel/transformer-js/lib/esmodule-helpers.js"],"sourcesContent":[null,null,null,"/**\n * @license\n * Copyright 2010-2021 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\tconst REVISION = '129';\n\tconst MOUSE = {\n\t\tLEFT: 0,\n\t\tMIDDLE: 1,\n\t\tRIGHT: 2,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2\n\t};\n\tconst TOUCH = {\n\t\tROTATE: 0,\n\t\tPAN: 1,\n\t\tDOLLY_PAN: 2,\n\t\tDOLLY_ROTATE: 3\n\t};\n\tconst CullFaceNone = 0;\n\tconst CullFaceBack = 1;\n\tconst CullFaceFront = 2;\n\tconst CullFaceFrontBack = 3;\n\tconst BasicShadowMap = 0;\n\tconst PCFShadowMap = 1;\n\tconst PCFSoftShadowMap = 2;\n\tconst VSMShadowMap = 3;\n\tconst FrontSide = 0;\n\tconst BackSide = 1;\n\tconst DoubleSide = 2;\n\tconst FlatShading = 1;\n\tconst SmoothShading = 2;\n\tconst NoBlending = 0;\n\tconst NormalBlending = 1;\n\tconst AdditiveBlending = 2;\n\tconst SubtractiveBlending = 3;\n\tconst MultiplyBlending = 4;\n\tconst CustomBlending = 5;\n\tconst AddEquation = 100;\n\tconst SubtractEquation = 101;\n\tconst ReverseSubtractEquation = 102;\n\tconst MinEquation = 103;\n\tconst MaxEquation = 104;\n\tconst ZeroFactor = 200;\n\tconst OneFactor = 201;\n\tconst SrcColorFactor = 202;\n\tconst OneMinusSrcColorFactor = 203;\n\tconst SrcAlphaFactor = 204;\n\tconst OneMinusSrcAlphaFactor = 205;\n\tconst DstAlphaFactor = 206;\n\tconst OneMinusDstAlphaFactor = 207;\n\tconst DstColorFactor = 208;\n\tconst OneMinusDstColorFactor = 209;\n\tconst SrcAlphaSaturateFactor = 210;\n\tconst NeverDepth = 0;\n\tconst AlwaysDepth = 1;\n\tconst LessDepth = 2;\n\tconst LessEqualDepth = 3;\n\tconst EqualDepth = 4;\n\tconst GreaterEqualDepth = 5;\n\tconst GreaterDepth = 6;\n\tconst NotEqualDepth = 7;\n\tconst MultiplyOperation = 0;\n\tconst MixOperation = 1;\n\tconst AddOperation = 2;\n\tconst NoToneMapping = 0;\n\tconst LinearToneMapping = 1;\n\tconst ReinhardToneMapping = 2;\n\tconst CineonToneMapping = 3;\n\tconst ACESFilmicToneMapping = 4;\n\tconst CustomToneMapping = 5;\n\tconst UVMapping = 300;\n\tconst CubeReflectionMapping = 301;\n\tconst CubeRefractionMapping = 302;\n\tconst EquirectangularReflectionMapping = 303;\n\tconst EquirectangularRefractionMapping = 304;\n\tconst CubeUVReflectionMapping = 306;\n\tconst CubeUVRefractionMapping = 307;\n\tconst RepeatWrapping = 1000;\n\tconst ClampToEdgeWrapping = 1001;\n\tconst MirroredRepeatWrapping = 1002;\n\tconst NearestFilter = 1003;\n\tconst NearestMipmapNearestFilter = 1004;\n\tconst NearestMipMapNearestFilter = 1004;\n\tconst NearestMipmapLinearFilter = 1005;\n\tconst NearestMipMapLinearFilter = 1005;\n\tconst LinearFilter = 1006;\n\tconst LinearMipmapNearestFilter = 1007;\n\tconst LinearMipMapNearestFilter = 1007;\n\tconst LinearMipmapLinearFilter = 1008;\n\tconst LinearMipMapLinearFilter = 1008;\n\tconst UnsignedByteType = 1009;\n\tconst ByteType = 1010;\n\tconst ShortType = 1011;\n\tconst UnsignedShortType = 1012;\n\tconst IntType = 1013;\n\tconst UnsignedIntType = 1014;\n\tconst FloatType = 1015;\n\tconst HalfFloatType = 1016;\n\tconst UnsignedShort4444Type = 1017;\n\tconst UnsignedShort5551Type = 1018;\n\tconst UnsignedShort565Type = 1019;\n\tconst UnsignedInt248Type = 1020;\n\tconst AlphaFormat = 1021;\n\tconst RGBFormat = 1022;\n\tconst RGBAFormat = 1023;\n\tconst LuminanceFormat = 1024;\n\tconst LuminanceAlphaFormat = 1025;\n\tconst RGBEFormat = RGBAFormat;\n\tconst DepthFormat = 1026;\n\tconst DepthStencilFormat = 1027;\n\tconst RedFormat = 1028;\n\tconst RedIntegerFormat = 1029;\n\tconst RGFormat = 1030;\n\tconst RGIntegerFormat = 1031;\n\tconst RGBIntegerFormat = 1032;\n\tconst RGBAIntegerFormat = 1033;\n\tconst RGB_S3TC_DXT1_Format = 33776;\n\tconst RGBA_S3TC_DXT1_Format = 33777;\n\tconst RGBA_S3TC_DXT3_Format = 33778;\n\tconst RGBA_S3TC_DXT5_Format = 33779;\n\tconst RGB_PVRTC_4BPPV1_Format = 35840;\n\tconst RGB_PVRTC_2BPPV1_Format = 35841;\n\tconst RGBA_PVRTC_4BPPV1_Format = 35842;\n\tconst RGBA_PVRTC_2BPPV1_Format = 35843;\n\tconst RGB_ETC1_Format = 36196;\n\tconst RGB_ETC2_Format = 37492;\n\tconst RGBA_ETC2_EAC_Format = 37496;\n\tconst RGBA_ASTC_4x4_Format = 37808;\n\tconst RGBA_ASTC_5x4_Format = 37809;\n\tconst RGBA_ASTC_5x5_Format = 37810;\n\tconst RGBA_ASTC_6x5_Format = 37811;\n\tconst RGBA_ASTC_6x6_Format = 37812;\n\tconst RGBA_ASTC_8x5_Format = 37813;\n\tconst RGBA_ASTC_8x6_Format = 37814;\n\tconst RGBA_ASTC_8x8_Format = 37815;\n\tconst RGBA_ASTC_10x5_Format = 37816;\n\tconst RGBA_ASTC_10x6_Format = 37817;\n\tconst RGBA_ASTC_10x8_Format = 37818;\n\tconst RGBA_ASTC_10x10_Format = 37819;\n\tconst RGBA_ASTC_12x10_Format = 37820;\n\tconst RGBA_ASTC_12x12_Format = 37821;\n\tconst RGBA_BPTC_Format = 36492;\n\tconst SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tconst SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tconst SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tconst SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tconst SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tconst SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tconst SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tconst SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tconst SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tconst SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tconst SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tconst SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tconst SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tconst SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tconst LoopOnce = 2200;\n\tconst LoopRepeat = 2201;\n\tconst LoopPingPong = 2202;\n\tconst InterpolateDiscrete = 2300;\n\tconst InterpolateLinear = 2301;\n\tconst InterpolateSmooth = 2302;\n\tconst ZeroCurvatureEnding = 2400;\n\tconst ZeroSlopeEnding = 2401;\n\tconst WrapAroundEnding = 2402;\n\tconst NormalAnimationBlendMode = 2500;\n\tconst AdditiveAnimationBlendMode = 2501;\n\tconst TrianglesDrawMode = 0;\n\tconst TriangleStripDrawMode = 1;\n\tconst TriangleFanDrawMode = 2;\n\tconst LinearEncoding = 3000;\n\tconst sRGBEncoding = 3001;\n\tconst GammaEncoding = 3007;\n\tconst RGBEEncoding = 3002;\n\tconst LogLuvEncoding = 3003;\n\tconst RGBM7Encoding = 3004;\n\tconst RGBM16Encoding = 3005;\n\tconst RGBDEncoding = 3006;\n\tconst BasicDepthPacking = 3200;\n\tconst RGBADepthPacking = 3201;\n\tconst TangentSpaceNormalMap = 0;\n\tconst ObjectSpaceNormalMap = 1;\n\tconst ZeroStencilOp = 0;\n\tconst KeepStencilOp = 7680;\n\tconst ReplaceStencilOp = 7681;\n\tconst IncrementStencilOp = 7682;\n\tconst DecrementStencilOp = 7683;\n\tconst IncrementWrapStencilOp = 34055;\n\tconst DecrementWrapStencilOp = 34056;\n\tconst InvertStencilOp = 5386;\n\tconst NeverStencilFunc = 512;\n\tconst LessStencilFunc = 513;\n\tconst EqualStencilFunc = 514;\n\tconst LessEqualStencilFunc = 515;\n\tconst GreaterStencilFunc = 516;\n\tconst NotEqualStencilFunc = 517;\n\tconst GreaterEqualStencilFunc = 518;\n\tconst AlwaysStencilFunc = 519;\n\tconst StaticDrawUsage = 35044;\n\tconst DynamicDrawUsage = 35048;\n\tconst StreamDrawUsage = 35040;\n\tconst StaticReadUsage = 35045;\n\tconst DynamicReadUsage = 35049;\n\tconst StreamReadUsage = 35041;\n\tconst StaticCopyUsage = 35046;\n\tconst DynamicCopyUsage = 35050;\n\tconst StreamCopyUsage = 35042;\n\tconst GLSL1 = '100';\n\tconst GLSL3 = '300 es';\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\tclass EventDispatcher {\n\t\taddEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) this._listeners = {};\n\t\t\tconst listeners = this._listeners;\n\n\t\t\tif (listeners[type] === undefined) {\n\t\t\t\tlisteners[type] = [];\n\t\t\t}\n\n\t\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\t\tlisteners[type].push(listener);\n\t\t\t}\n\t\t}\n\n\t\thasEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return false;\n\t\t\tconst listeners = this._listeners;\n\t\t\treturn listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\t\t}\n\n\t\tremoveEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tconst listeners = this._listeners;\n\t\t\tconst listenerArray = listeners[type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tconst index = listenerArray.indexOf(listener);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdispatchEvent(event) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tconst listeners = this._listeners;\n\t\t\tconst listenerArray = listeners[event.type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tevent.target = this; // Make a copy, in case listeners are removed while iterating.\n\n\t\t\t\tconst array = listenerArray.slice(0);\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tarray[i].call(this, event);\n\t\t\t\t}\n\n\t\t\t\tevent.target = null;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tconst _lut = [];\n\n\tfor (let i = 0; i < 256; i++) {\n\t\t_lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n\t}\n\n\tlet _seed = 1234567;\n\tconst DEG2RAD = Math.PI / 180;\n\tconst RAD2DEG = 180 / Math.PI; // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\tfunction generateUUID() {\n\t\tconst d0 = Math.random() * 0xffffffff | 0;\n\t\tconst d1 = Math.random() * 0xffffffff | 0;\n\t\tconst d2 = Math.random() * 0xffffffff | 0;\n\t\tconst d3 = Math.random() * 0xffffffff | 0;\n\t\tconst uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n\t\treturn uuid.toUpperCase();\n\t}\n\n\tfunction clamp(value, min, max) {\n\t\treturn Math.max(min, Math.min(max, value));\n\t} // compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\n\tfunction euclideanModulo(n, m) {\n\t\treturn (n % m + m) % m;\n\t} // Linear mapping from range <a1, a2> to range <b1, b2>\n\n\n\tfunction mapLinear(x, a1, a2, b1, b2) {\n\t\treturn b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n\t} // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n\n\n\tfunction inverseLerp(x, y, value) {\n\t\tif (x !== y) {\n\t\t\treturn (value - x) / (y - x);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t} // https://en.wikipedia.org/wiki/Linear_interpolation\n\n\n\tfunction lerp(x, y, t) {\n\t\treturn (1 - t) * x + t * y;\n\t} // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n\n\n\tfunction damp(x, y, lambda, dt) {\n\t\treturn lerp(x, y, 1 - Math.exp(-lambda * dt));\n\t} // https://www.desmos.com/calculator/vcsjnyz7x4\n\n\n\tfunction pingpong(x, length = 1) {\n\t\treturn length - Math.abs(euclideanModulo(x, length * 2) - length);\n\t} // http://en.wikipedia.org/wiki/Smoothstep\n\n\n\tfunction smoothstep(x, min, max) {\n\t\tif (x <= min) return 0;\n\t\tif (x >= max) return 1;\n\t\tx = (x - min) / (max - min);\n\t\treturn x * x * (3 - 2 * x);\n\t}\n\n\tfunction smootherstep(x, min, max) {\n\t\tif (x <= min) return 0;\n\t\tif (x >= max) return 1;\n\t\tx = (x - min) / (max - min);\n\t\treturn x * x * x * (x * (x * 6 - 15) + 10);\n\t} // Random integer from <low, high> interval\n\n\n\tfunction randInt(low, high) {\n\t\treturn low + Math.floor(Math.random() * (high - low + 1));\n\t} // Random float from <low, high> interval\n\n\n\tfunction randFloat(low, high) {\n\t\treturn low + Math.random() * (high - low);\n\t} // Random float from <-range/2, range/2> interval\n\n\n\tfunction randFloatSpread(range) {\n\t\treturn range * (0.5 - Math.random());\n\t} // Deterministic pseudo-random float in the interval [ 0, 1 ]\n\n\n\tfunction seededRandom(s) {\n\t\tif (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm\n\n\t\t_seed = _seed * 16807 % 2147483647;\n\t\treturn (_seed - 1) / 2147483646;\n\t}\n\n\tfunction degToRad(degrees) {\n\t\treturn degrees * DEG2RAD;\n\t}\n\n\tfunction radToDeg(radians) {\n\t\treturn radians * RAD2DEG;\n\t}\n\n\tfunction isPowerOfTwo(value) {\n\t\treturn (value & value - 1) === 0 && value !== 0;\n\t}\n\n\tfunction ceilPowerOfTwo(value) {\n\t\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n\t}\n\n\tfunction floorPowerOfTwo(value) {\n\t\treturn Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n\t}\n\n\tfunction setQuaternionFromProperEuler(q, a, b, c, order) {\n\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t// angles are in radians\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\t\tconst c2 = cos(b / 2);\n\t\tconst s2 = sin(b / 2);\n\t\tconst c13 = cos((a + c) / 2);\n\t\tconst s13 = sin((a + c) / 2);\n\t\tconst c1_3 = cos((a - c) / 2);\n\t\tconst s1_3 = sin((a - c) / 2);\n\t\tconst c3_1 = cos((c - a) / 2);\n\t\tconst s3_1 = sin((c - a) / 2);\n\n\t\tswitch (order) {\n\t\t\tcase 'XYX':\n\t\t\t\tq.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZY':\n\t\t\t\tq.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXZ':\n\t\t\t\tq.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZX':\n\t\t\t\tq.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXY':\n\t\t\t\tq.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYZ':\n\t\t\t\tq.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n\t\t}\n\t}\n\n\tvar MathUtils = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tDEG2RAD: DEG2RAD,\n\t\tRAD2DEG: RAD2DEG,\n\t\tgenerateUUID: generateUUID,\n\t\tclamp: clamp,\n\t\teuclideanModulo: euclideanModulo,\n\t\tmapLinear: mapLinear,\n\t\tinverseLerp: inverseLerp,\n\t\tlerp: lerp,\n\t\tdamp: damp,\n\t\tpingpong: pingpong,\n\t\tsmoothstep: smoothstep,\n\t\tsmootherstep: smootherstep,\n\t\trandInt: randInt,\n\t\trandFloat: randFloat,\n\t\trandFloatSpread: randFloatSpread,\n\t\tseededRandom: seededRandom,\n\t\tdegToRad: degToRad,\n\t\tradToDeg: radToDeg,\n\t\tisPowerOfTwo: isPowerOfTwo,\n\t\tceilPowerOfTwo: ceilPowerOfTwo,\n\t\tfloorPowerOfTwo: floorPowerOfTwo,\n\t\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler\n\t});\n\n\tclass Vector2 {\n\t\tconstructor(x = 0, y = 0) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tget width() {\n\t\t\treturn this.x;\n\t\t}\n\n\t\tset width(value) {\n\t\t\tthis.x = value;\n\t\t}\n\n\t\tget height() {\n\t\t\treturn this.y;\n\t\t}\n\n\t\tset height(value) {\n\t\t\tthis.y = value;\n\t\t}\n\n\t\tset(x, y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6];\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7];\n\t\t\treturn this;\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y;\n\t\t}\n\n\t\tcross(v) {\n\t\t\treturn this.x * v.y - this.y * v.x;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tangle() {\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\t\t\tconst angle = Math.atan2(-this.y, -this.x) + Math.PI;\n\t\t\treturn angle;\n\t\t}\n\n\t\tdistanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t}\n\n\t\tdistanceToSquared(v) {\n\t\t\tconst dx = this.x - v.x,\n\t\t\t\t\t\tdy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\t\t}\n\n\t\tmanhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateAround(center, angle) {\n\t\t\tconst c = Math.cos(angle),\n\t\t\t\t\t\ts = Math.sin(angle);\n\t\t\tconst x = this.x - center.x;\n\t\t\tconst y = this.y - center.y;\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector2.prototype.isVector2 = true;\n\n\tclass Matrix3 {\n\t\tconstructor() {\n\t\t\tthis.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tset(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[1] = n21;\n\t\t\tte[2] = n31;\n\t\t\tte[3] = n12;\n\t\t\tte[4] = n22;\n\t\t\tte[5] = n32;\n\t\t\tte[6] = n13;\n\t\t\tte[7] = n23;\n\t\t\tte[8] = n33;\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\tthis.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(m) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\treturn this;\n\t\t}\n\n\t\textractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrix3Column(this, 0);\n\t\t\tyAxis.setFromMatrix3Column(this, 1);\n\t\t\tzAxis.setFromMatrix3Column(this, 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrix4(m) {\n\t\t\tconst me = m.elements;\n\t\t\tthis.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(m) {\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t}\n\n\t\tpremultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t}\n\n\t\tmultiplyMatrices(a, b) {\n\t\t\tconst ae = a.elements;\n\t\t\tconst be = b.elements;\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = ae[0],\n\t\t\t\t\t\ta12 = ae[3],\n\t\t\t\t\t\ta13 = ae[6];\n\t\t\tconst a21 = ae[1],\n\t\t\t\t\t\ta22 = ae[4],\n\t\t\t\t\t\ta23 = ae[7];\n\t\t\tconst a31 = ae[2],\n\t\t\t\t\t\ta32 = ae[5],\n\t\t\t\t\t\ta33 = ae[8];\n\t\t\tconst b11 = be[0],\n\t\t\t\t\t\tb12 = be[3],\n\t\t\t\t\t\tb13 = be[6];\n\t\t\tconst b21 = be[1],\n\t\t\t\t\t\tb22 = be[4],\n\t\t\t\t\t\tb23 = be[7];\n\t\t\tconst b31 = be[2],\n\t\t\t\t\t\tb32 = be[5],\n\t\t\t\t\t\tb33 = be[8];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[3] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[4] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[5] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[8] *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeterminant() {\n\t\t\tconst te = this.elements;\n\t\t\tconst a = te[0],\n\t\t\t\t\t\tb = te[1],\n\t\t\t\t\t\tc = te[2],\n\t\t\t\t\t\td = te[3],\n\t\t\t\t\t\te = te[4],\n\t\t\t\t\t\tf = te[5],\n\t\t\t\t\t\tg = te[6],\n\t\t\t\t\t\th = te[7],\n\t\t\t\t\t\ti = te[8];\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\t}\n\n\t\tinvert() {\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tn11 = te[0],\n\t\t\t\t\t\tn21 = te[1],\n\t\t\t\t\t\tn31 = te[2],\n\t\t\t\t\t\tn12 = te[3],\n\t\t\t\t\t\tn22 = te[4],\n\t\t\t\t\t\tn32 = te[5],\n\t\t\t\t\t\tn13 = te[6],\n\t\t\t\t\t\tn23 = te[7],\n\t\t\t\t\t\tn33 = te[8],\n\t\t\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\t\t\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tconst detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n31 * n23 - n33 * n21) * detInv;\n\t\t\tte[2] = (n32 * n21 - n31 * n22) * detInv;\n\t\t\tte[3] = t12 * detInv;\n\t\t\tte[4] = (n33 * n11 - n31 * n13) * detInv;\n\t\t\tte[5] = (n31 * n12 - n32 * n11) * detInv;\n\t\t\tte[6] = t13 * detInv;\n\t\t\tte[7] = (n21 * n13 - n23 * n11) * detInv;\n\t\t\tte[8] = (n22 * n11 - n21 * n12) * detInv;\n\t\t\treturn this;\n\t\t}\n\n\t\ttranspose() {\n\t\t\tlet tmp;\n\t\t\tconst m = this.elements;\n\t\t\ttmp = m[1];\n\t\t\tm[1] = m[3];\n\t\t\tm[3] = tmp;\n\t\t\ttmp = m[2];\n\t\t\tm[2] = m[6];\n\t\t\tm[6] = tmp;\n\t\t\ttmp = m[5];\n\t\t\tm[5] = m[7];\n\t\t\tm[7] = tmp;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetNormalMatrix(matrix4) {\n\t\t\treturn this.setFromMatrix4(matrix4).invert().transpose();\n\t\t}\n\n\t\ttransposeIntoArray(r) {\n\t\t\tconst m = this.elements;\n\t\t\tr[0] = m[0];\n\t\t\tr[1] = m[3];\n\t\t\tr[2] = m[6];\n\t\t\tr[3] = m[1];\n\t\t\tr[4] = m[4];\n\t\t\tr[5] = m[7];\n\t\t\tr[6] = m[2];\n\t\t\tr[7] = m[5];\n\t\t\tr[8] = m[8];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n\t\t\tconst c = Math.cos(rotation);\n\t\t\tconst s = Math.sin(rotation);\n\t\t\tthis.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(sx, sy) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= sx;\n\t\t\tte[3] *= sx;\n\t\t\tte[6] *= sx;\n\t\t\tte[1] *= sy;\n\t\t\tte[4] *= sy;\n\t\t\tte[7] *= sy;\n\t\t\treturn this;\n\t\t}\n\n\t\trotate(theta) {\n\t\t\tconst c = Math.cos(theta);\n\t\t\tconst s = Math.sin(theta);\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = te[0],\n\t\t\t\t\t\ta12 = te[3],\n\t\t\t\t\t\ta13 = te[6];\n\t\t\tconst a21 = te[1],\n\t\t\t\t\t\ta22 = te[4],\n\t\t\t\t\t\ta23 = te[7];\n\t\t\tte[0] = c * a11 + s * a21;\n\t\t\tte[3] = c * a12 + s * a22;\n\t\t\tte[6] = c * a13 + s * a23;\n\t\t\tte[1] = -s * a11 + c * a21;\n\t\t\tte[4] = -s * a12 + c * a22;\n\t\t\tte[7] = -s * a13 + c * a23;\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(tx, ty) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] += tx * te[2];\n\t\t\tte[3] += tx * te[5];\n\t\t\tte[6] += tx * te[8];\n\t\t\tte[1] += ty * te[2];\n\t\t\tte[4] += ty * te[5];\n\t\t\tte[7] += ty * te[8];\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(matrix) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = matrix.elements;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\treturn array;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().fromArray(this.elements);\n\t\t}\n\n\t}\n\n\tMatrix3.prototype.isMatrix3 = true;\n\n\tlet _canvas;\n\n\tclass ImageUtils {\n\t\tstatic getDataURL(image) {\n\t\t\tif (/^data:/i.test(image.src)) {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tif (typeof HTMLCanvasElement == 'undefined') {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tlet canvas;\n\n\t\t\tif (image instanceof HTMLCanvasElement) {\n\t\t\t\tcanvas = image;\n\t\t\t} else {\n\t\t\t\tif (_canvas === undefined) _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tconst context = _canvas.getContext('2d');\n\n\t\t\t\tif (image instanceof ImageData) {\n\t\t\t\t\tcontext.putImageData(image, 0, 0);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.drawImage(image, 0, 0, image.width, image.height);\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\t\t\t}\n\n\t\t\tif (canvas.width > 2048 || canvas.height > 2048) {\n\t\t\t\tconsole.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);\n\t\t\t\treturn canvas.toDataURL('image/jpeg', 0.6);\n\t\t\t} else {\n\t\t\t\treturn canvas.toDataURL('image/png');\n\t\t\t}\n\t\t}\n\n\t}\n\n\tlet textureId = 0;\n\n\tclass Texture extends EventDispatcher {\n\t\tconstructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding) {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: textureId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.image = image;\n\t\t\tthis.mipmaps = [];\n\t\t\tthis.mapping = mapping;\n\t\t\tthis.wrapS = wrapS;\n\t\t\tthis.wrapT = wrapT;\n\t\t\tthis.magFilter = magFilter;\n\t\t\tthis.minFilter = minFilter;\n\t\t\tthis.anisotropy = anisotropy;\n\t\t\tthis.format = format;\n\t\t\tthis.internalFormat = null;\n\t\t\tthis.type = type;\n\t\t\tthis.offset = new Vector2(0, 0);\n\t\t\tthis.repeat = new Vector2(1, 1);\n\t\t\tthis.center = new Vector2(0, 0);\n\t\t\tthis.rotation = 0;\n\t\t\tthis.matrixAutoUpdate = true;\n\t\t\tthis.matrix = new Matrix3();\n\t\t\tthis.generateMipmaps = true;\n\t\t\tthis.premultiplyAlpha = false;\n\t\t\tthis.flipY = true;\n\t\t\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t\t//\n\t\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n\t\t\tthis.encoding = encoding;\n\t\t\tthis.version = 0;\n\t\t\tthis.onUpdate = null;\n\t\t}\n\n\t\tupdateMatrix() {\n\t\t\tthis.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice(0);\n\t\t\tthis.mapping = source.mapping;\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\t\t\tthis.anisotropy = source.anisotropy;\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\t\t\tthis.offset.copy(source.offset);\n\t\t\tthis.repeat.copy(source.repeat);\n\t\t\tthis.center.copy(source.center);\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst isRootObject = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (!isRootObject && meta.textures[this.uuid] !== undefined) {\n\t\t\t\treturn meta.textures[this.uuid];\n\t\t\t}\n\n\t\t\tconst output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\t\t\t\tmapping: this.mapping,\n\t\t\t\trepeat: [this.repeat.x, this.repeat.y],\n\t\t\t\toffset: [this.offset.x, this.offset.y],\n\t\t\t\tcenter: [this.center.x, this.center.y],\n\t\t\t\trotation: this.rotation,\n\t\t\t\twrap: [this.wrapS, this.wrapT],\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\t\t\t\tflipY: this.flipY,\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\t\t\t};\n\n\t\t\tif (this.image !== undefined) {\n\t\t\t\t// TODO: Move to THREE.Image\n\t\t\t\tconst image = this.image;\n\n\t\t\t\tif (image.uuid === undefined) {\n\t\t\t\t\timage.uuid = generateUUID(); // UGH\n\t\t\t\t}\n\n\t\t\t\tif (!isRootObject && meta.images[image.uuid] === undefined) {\n\t\t\t\t\tlet url;\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor (let i = 0, l = image.length; i < l; i++) {\n\t\t\t\t\t\t\t// check cube texture with data textures\n\t\t\t\t\t\t\tif (image[i].isDataTexture) {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i].image));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// process single image\n\t\t\t\t\t\turl = serializeImage(image);\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[image.uuid] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\t\t\t}\n\n\t\t\tif (!isRootObject) {\n\t\t\t\tmeta.textures[this.uuid] = output;\n\t\t\t}\n\n\t\t\treturn output;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t\ttransformUv(uv) {\n\t\t\tif (this.mapping !== UVMapping) return uv;\n\t\t\tuv.applyMatrix3(this.matrix);\n\n\t\t\tif (uv.x < 0 || uv.x > 1) {\n\t\t\t\tswitch (this.wrapS) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.x) % 2) === 1) {\n\t\t\t\t\t\t\tuv.x = Math.ceil(uv.x) - uv.x;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (uv.y < 0 || uv.y > 1) {\n\t\t\t\tswitch (this.wrapT) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.y) % 2) === 1) {\n\t\t\t\t\t\t\tuv.y = Math.ceil(uv.y) - uv.y;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.flipY) {\n\t\t\t\tuv.y = 1 - uv.y;\n\t\t\t}\n\n\t\t\treturn uv;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\tTexture.prototype.isTexture = true;\n\n\tfunction serializeImage(image) {\n\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t// default images\n\t\t\treturn ImageUtils.getDataURL(image);\n\t\t} else {\n\t\t\tif (image.data) {\n\t\t\t\t// images of DataTexture\n\t\t\t\treturn {\n\t\t\t\t\tdata: Array.prototype.slice.call(image.data),\n\t\t\t\t\twidth: image.width,\n\t\t\t\t\theight: image.height,\n\t\t\t\t\ttype: image.data.constructor.name\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.Texture: Unable to serialize Texture.');\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t}\n\n\tclass Vector4 {\n\t\tconstructor(x = 0, y = 0, z = 0, w = 1) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t}\n\n\t\tget width() {\n\t\t\treturn this.z;\n\t\t}\n\n\t\tset width(value) {\n\t\t\tthis.z = value;\n\t\t}\n\n\t\tget height() {\n\t\t\treturn this.w;\n\t\t}\n\n\t\tset height(value) {\n\t\t\tthis.w = value;\n\t\t}\n\n\t\tset(x, y, z, w) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetW(w) {\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.w = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tcase 3:\n\t\t\t\t\treturn this.w;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z, this.w);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = v.w !== undefined ? v.w : 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\tthis.w *= v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z,\n\t\t\t\t\t\tw = this.w;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n\t\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tsetAxisAngleFromQuaternion(q) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\t\t// q is assumed to be normalized\n\t\t\tthis.w = 2 * Math.acos(q.w);\n\t\t\tconst s = Math.sqrt(1 - q.w * q.w);\n\n\t\t\tif (s < 0.0001) {\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t} else {\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetAxisAngleFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tlet angle, x, y, z; // variables for result\n\n\t\t\tconst epsilon = 0.01,\n\t\t\t\t\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\n\t\t\t\t\t\t// margin to distinguish between 0 and 180 degrees\n\t\t\tte = m.elements,\n\t\t\t\t\t\tm11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8],\n\t\t\t\t\t\tm21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9],\n\t\t\t\t\t\tm31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10];\n\n\t\t\tif (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\t\t\t\tif (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\t\t\t\t\tthis.set(1, 0, 0, 0);\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\t\t\t\t} // otherwise this singularity is angle = 180\n\n\n\t\t\t\tangle = Math.PI;\n\t\t\t\tconst xx = (m11 + 1) / 2;\n\t\t\t\tconst yy = (m22 + 1) / 2;\n\t\t\t\tconst zz = (m33 + 1) / 2;\n\t\t\t\tconst xy = (m12 + m21) / 4;\n\t\t\t\tconst xz = (m13 + m31) / 4;\n\t\t\t\tconst yz = (m23 + m32) / 4;\n\n\t\t\t\tif (xx > yy && xx > zz) {\n\t\t\t\t\t// m11 is the largest diagonal term\n\t\t\t\t\tif (xx < epsilon) {\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = Math.sqrt(xx);\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\t\t\t\t\t}\n\t\t\t\t} else if (yy > zz) {\n\t\t\t\t\t// m22 is the largest diagonal term\n\t\t\t\t\tif (yy < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty = Math.sqrt(yy);\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\t\t\t\tif (zz < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz = Math.sqrt(zz);\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set(x, y, z, angle);\n\t\t\t\treturn this; // return 180 deg rotation\n\t\t\t} // as we have reached here there are no singularities so we can handle normally\n\n\n\t\t\tlet s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n\t\t\tif (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = (m32 - m23) / s;\n\t\t\tthis.y = (m13 - m31) / s;\n\t\t\tthis.z = (m21 - m12) / s;\n\t\t\tthis.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\tthis.w = Math.min(this.w, v.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\tthis.w = Math.max(this.w, v.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\tthis.w = Math.max(min.w, Math.min(max.w, this.w));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\tthis.w = Math.max(minVal, Math.min(maxVal, this.w));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\tthis.w = Math.floor(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\tthis.w = Math.ceil(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\tthis.w = Math.round(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\tthis.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\tthis.w = -this.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\tthis.w += (v.w - this.w) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\tthis.w = v1.w + (v2.w - v1.w) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\tthis.w = array[offset + 3];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\tarray[offset + 3] = this.w;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\tthis.w = attribute.getW(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\tthis.w = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector4.prototype.isVector4 = true;\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\n\tclass WebGLRenderTarget extends EventDispatcher {\n\t\tconstructor(width, height, options) {\n\t\t\tsuper();\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = 1;\n\t\t\tthis.scissor = new Vector4(0, 0, width, height);\n\t\t\tthis.scissorTest = false;\n\t\t\tthis.viewport = new Vector4(0, 0, width, height);\n\t\t\toptions = options || {};\n\t\t\tthis.texture = new Texture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\tthis.texture.image = {};\n\t\t\tthis.texture.image.width = width;\n\t\t\tthis.texture.image.height = height;\n\t\t\tthis.texture.image.depth = 1;\n\t\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\t}\n\n\t\tsetTexture(texture) {\n\t\t\ttexture.image = {\n\t\t\t\twidth: this.width,\n\t\t\t\theight: this.height,\n\t\t\t\tdepth: this.depth\n\t\t\t};\n\t\t\tthis.texture = texture;\n\t\t}\n\n\t\tsetSize(width, height, depth = 1) {\n\t\t\tif (this.width !== width || this.height !== height || this.depth !== depth) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.depth = depth;\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\t\t\t\tthis.texture.image.depth = depth;\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.viewport.copy(source.viewport);\n\t\t\tthis.texture = source.texture.clone();\n\t\t\tthis.texture.image = { ...this.texture.image\n\t\t\t}; // See #20328.\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tWebGLRenderTarget.prototype.isWebGLRenderTarget = true;\n\n\tclass WebGLMultipleRenderTargets extends WebGLRenderTarget {\n\t\tconstructor(width, height, count) {\n\t\t\tsuper(width, height);\n\t\t\tconst texture = this.texture;\n\t\t\tthis.texture = [];\n\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tthis.texture[i] = texture.clone();\n\t\t\t}\n\t\t}\n\n\t\tsetSize(width, height, depth = 1) {\n\t\t\tif (this.width !== width || this.height !== height || this.depth !== depth) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.depth = depth;\n\n\t\t\t\tfor (let i = 0, il = this.texture.length; i < il; i++) {\n\t\t\t\t\tthis.texture[i].image.width = width;\n\t\t\t\t\tthis.texture[i].image.height = height;\n\t\t\t\t\tthis.texture[i].image.depth = depth;\n\t\t\t\t}\n\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.dispose();\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.viewport.set(0, 0, this.width, this.height);\n\t\t\tthis.scissor.set(0, 0, this.width, this.height);\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\tthis.texture.length = 0;\n\n\t\t\tfor (let i = 0, il = source.texture.length; i < il; i++) {\n\t\t\t\tthis.texture[i] = source.texture[i].clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tWebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;\n\n\tclass WebGLMultisampleRenderTarget extends WebGLRenderTarget {\n\t\tconstructor(width, height, options) {\n\t\t\tsuper(width, height, options);\n\t\t\tthis.samples = 4;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy.call(this, source);\n\t\t\tthis.samples = source.samples;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;\n\n\tclass Quaternion {\n\t\tconstructor(x = 0, y = 0, z = 0, w = 1) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\t\t}\n\n\t\tstatic slerp(qa, qb, qm, t) {\n\t\t\tconsole.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');\n\t\t\treturn qm.slerpQuaternions(qa, qb, t);\n\t\t}\n\n\t\tstatic slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\t\tlet x0 = src0[srcOffset0 + 0],\n\t\t\t\t\ty0 = src0[srcOffset0 + 1],\n\t\t\t\t\tz0 = src0[srcOffset0 + 2],\n\t\t\t\t\tw0 = src0[srcOffset0 + 3];\n\t\t\tconst x1 = src1[srcOffset1 + 0],\n\t\t\t\t\t\ty1 = src1[srcOffset1 + 1],\n\t\t\t\t\t\tz1 = src1[srcOffset1 + 2],\n\t\t\t\t\t\tw1 = src1[srcOffset1 + 3];\n\n\t\t\tif (t === 0) {\n\t\t\t\tdst[dstOffset + 0] = x0;\n\t\t\t\tdst[dstOffset + 1] = y0;\n\t\t\t\tdst[dstOffset + 2] = z0;\n\t\t\t\tdst[dstOffset + 3] = w0;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (t === 1) {\n\t\t\t\tdst[dstOffset + 0] = x1;\n\t\t\t\tdst[dstOffset + 1] = y1;\n\t\t\t\tdst[dstOffset + 2] = z1;\n\t\t\t\tdst[dstOffset + 3] = w1;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n\t\t\t\tlet s = 1 - t;\n\t\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\t\t\t\tdir = cos >= 0 ? 1 : -1,\n\t\t\t\t\t\t\tsqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n\t\t\t\tif (sqrSin > Number.EPSILON) {\n\t\t\t\t\tconst sin = Math.sqrt(sqrSin),\n\t\t\t\t\t\t\t\tlen = Math.atan2(sin, cos * dir);\n\t\t\t\t\ts = Math.sin(s * len) / sin;\n\t\t\t\t\tt = Math.sin(t * len) / sin;\n\t\t\t\t}\n\n\t\t\t\tconst tDir = t * dir;\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n\t\t\t\tif (s === 1 - t) {\n\t\t\t\t\tconst f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdst[dstOffset] = x0;\n\t\t\tdst[dstOffset + 1] = y0;\n\t\t\tdst[dstOffset + 2] = z0;\n\t\t\tdst[dstOffset + 3] = w0;\n\t\t}\n\n\t\tstatic multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n\t\t\tconst x0 = src0[srcOffset0];\n\t\t\tconst y0 = src0[srcOffset0 + 1];\n\t\t\tconst z0 = src0[srcOffset0 + 2];\n\t\t\tconst w0 = src0[srcOffset0 + 3];\n\t\t\tconst x1 = src1[srcOffset1];\n\t\t\tconst y1 = src1[srcOffset1 + 1];\n\t\t\tconst z1 = src1[srcOffset1 + 2];\n\t\t\tconst w1 = src1[srcOffset1 + 3];\n\t\t\tdst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\t\tdst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\t\tdst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\t\tdst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\t\t\treturn dst;\n\t\t}\n\n\t\tget x() {\n\t\t\treturn this._x;\n\t\t}\n\n\t\tset x(value) {\n\t\t\tthis._x = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget y() {\n\t\t\treturn this._y;\n\t\t}\n\n\t\tset y(value) {\n\t\t\tthis._y = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget z() {\n\t\t\treturn this._z;\n\t\t}\n\n\t\tset z(value) {\n\t\t\tthis._z = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget w() {\n\t\t\treturn this._w;\n\t\t}\n\n\t\tset w(value) {\n\t\t\tthis._w = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tset(x, y, z, w) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._w);\n\t\t}\n\n\t\tcopy(quaternion) {\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromEuler(euler, update) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tthrow new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tconst x = euler._x,\n\t\t\t\t\t\ty = euler._y,\n\t\t\t\t\t\tz = euler._z,\n\t\t\t\t\t\torder = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tconst cos = Math.cos;\n\t\t\tconst sin = Math.sin;\n\t\t\tconst c1 = cos(x / 2);\n\t\t\tconst c2 = cos(y / 2);\n\t\t\tconst c3 = cos(z / 2);\n\t\t\tconst s1 = sin(x / 2);\n\t\t\tconst s2 = sin(y / 2);\n\t\t\tconst s3 = sin(z / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromAxisAngle(axis, angle) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\t\t// assumes axis is normalized\n\t\t\tconst halfAngle = angle / 2,\n\t\t\t\t\t\ts = Math.sin(halfAngle);\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos(halfAngle);\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tconst te = m.elements,\n\t\t\t\t\t\tm11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8],\n\t\t\t\t\t\tm21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9],\n\t\t\t\t\t\tm31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10],\n\t\t\t\t\t\ttrace = m11 + m22 + m33;\n\n\t\t\tif (trace > 0) {\n\t\t\t\tconst s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = (m32 - m23) * s;\n\t\t\t\tthis._y = (m13 - m31) * s;\n\t\t\t\tthis._z = (m21 - m12) * s;\n\t\t\t} else if (m11 > m22 && m11 > m33) {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\t\t\t\tthis._w = (m32 - m23) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = (m12 + m21) / s;\n\t\t\t\tthis._z = (m13 + m31) / s;\n\t\t\t} else if (m22 > m33) {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\t\t\t\tthis._w = (m13 - m31) / s;\n\t\t\t\tthis._x = (m12 + m21) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = (m23 + m32) / s;\n\t\t\t} else {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\t\t\t\tthis._w = (m21 - m12) / s;\n\t\t\t\tthis._x = (m13 + m31) / s;\n\t\t\t\tthis._y = (m23 + m32) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromUnitVectors(vFrom, vTo) {\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\t\t\tlet r = vFrom.dot(vTo) + 1;\n\n\t\t\tif (r < Number.EPSILON) {\n\t\t\t\t// vFrom and vTo point in opposite directions\n\t\t\t\tr = 0;\n\n\t\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t} else {\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\t\t}\n\n\t\tangleTo(q) {\n\t\t\treturn 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));\n\t\t}\n\n\t\trotateTowards(q, step) {\n\t\t\tconst angle = this.angleTo(q);\n\t\t\tif (angle === 0) return this;\n\t\t\tconst t = Math.min(1, step / angle);\n\t\t\tthis.slerp(q, t);\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\treturn this.set(0, 0, 0, 1);\n\t\t}\n\n\t\tinvert() {\n\t\t\t// quaternion is assumed to have unit length\n\t\t\treturn this.conjugate();\n\t\t}\n\n\t\tconjugate() {\n\t\t\tthis._x *= -1;\n\t\t\tthis._y *= -1;\n\t\t\tthis._z *= -1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n\t\t}\n\n\t\tnormalize() {\n\t\t\tlet l = this.length();\n\n\t\t\tif (l === 0) {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\t\t\t} else {\n\t\t\t\tl = 1 / l;\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(q, p) {\n\t\t\tif (p !== undefined) {\n\t\t\t\tconsole.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n\t\t\t\treturn this.multiplyQuaternions(q, p);\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions(this, q);\n\t\t}\n\n\t\tpremultiply(q) {\n\t\t\treturn this.multiplyQuaternions(q, this);\n\t\t}\n\n\t\tmultiplyQuaternions(a, b) {\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\t\tconst qax = a._x,\n\t\t\t\t\t\tqay = a._y,\n\t\t\t\t\t\tqaz = a._z,\n\t\t\t\t\t\tqaw = a._w;\n\t\t\tconst qbx = b._x,\n\t\t\t\t\t\tqby = b._y,\n\t\t\t\t\t\tqbz = b._z,\n\t\t\t\t\t\tqbw = b._w;\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tslerp(qb, t) {\n\t\t\tif (t === 0) return this;\n\t\t\tif (t === 1) return this.copy(qb);\n\t\t\tconst x = this._x,\n\t\t\t\t\t\ty = this._y,\n\t\t\t\t\t\tz = this._z,\n\t\t\t\t\t\tw = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif (cosHalfTheta < 0) {\n\t\t\t\tthis._w = -qb._w;\n\t\t\t\tthis._x = -qb._x;\n\t\t\t\tthis._y = -qb._y;\n\t\t\t\tthis._z = -qb._z;\n\t\t\t\tcosHalfTheta = -cosHalfTheta;\n\t\t\t} else {\n\t\t\t\tthis.copy(qb);\n\t\t\t}\n\n\t\t\tif (cosHalfTheta >= 1.0) {\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif (sqrSinHalfTheta <= Number.EPSILON) {\n\t\t\t\tconst s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\t\t\t\tthis.normalize();\n\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n\t\t\tconst halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n\t\t\tconst ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n\t\t\t\t\t\tratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\t\t\tthis._w = w * ratioA + this._w * ratioB;\n\t\t\tthis._x = x * ratioA + this._x * ratioB;\n\t\t\tthis._y = y * ratioA + this._y * ratioB;\n\t\t\tthis._z = z * ratioA + this._z * ratioB;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tslerpQuaternions(qa, qb, t) {\n\t\t\tthis.copy(qa).slerp(qb, t);\n\t\t}\n\n\t\tequals(quaternion) {\n\t\t\treturn quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis._x = array[offset];\n\t\t\tthis._y = array[offset + 1];\n\t\t\tthis._z = array[offset + 2];\n\t\t\tthis._w = array[offset + 3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._w;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index) {\n\t\t\tthis._x = attribute.getX(index);\n\t\t\tthis._y = attribute.getY(index);\n\t\t\tthis._z = attribute.getZ(index);\n\t\t\tthis._w = attribute.getW(index);\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChangeCallback() {}\n\n\t}\n\n\tQuaternion.prototype.isQuaternion = true;\n\n\tclass Vector3 {\n\t\tconstructor(x = 0, y = 0, z = 0) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t}\n\n\t\tset(x, y, z) {\n\t\t\tif (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n\t\t\t\treturn this.multiplyVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyVectors(a, b) {\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion(_quaternion$4.setFromEuler(euler));\n\t\t}\n\n\t\tapplyAxisAngle(axis, angle) {\n\t\t\treturn this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\n\t\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\treturn this.applyMatrix3(m).normalize();\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tconst w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\t\t\tthis.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n\t\t\tthis.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n\t\t\tthis.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst qx = q.x,\n\t\t\t\t\t\tqy = q.y,\n\t\t\t\t\t\tqz = q.z,\n\t\t\t\t\t\tqw = q.w; // calculate quat * vector\n\n\t\t\tconst ix = qw * x + qy * z - qz * y;\n\t\t\tconst iy = qw * y + qz * x - qx * z;\n\t\t\tconst iz = qw * z + qx * y - qy * x;\n\t\t\tconst iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t\t\treturn this;\n\t\t}\n\n\t\tproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n\t\t}\n\n\t\tunproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z;\n\t\t\treturn this.normalize();\n\t\t}\n\n\t\tdivide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\t} // TODO lengthSquared?\n\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tcross(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n\t\t\t\treturn this.crossVectors(v, w);\n\t\t\t}\n\n\t\t\treturn this.crossVectors(this, v);\n\t\t}\n\n\t\tcrossVectors(a, b) {\n\t\t\tconst ax = a.x,\n\t\t\t\t\t\tay = a.y,\n\t\t\t\t\t\taz = a.z;\n\t\t\tconst bx = b.x,\n\t\t\t\t\t\tby = b.y,\n\t\t\t\t\t\tbz = b.z;\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\t\t\treturn this;\n\t\t}\n\n\t\tprojectOnVector(v) {\n\t\t\tconst denominator = v.lengthSq();\n\t\t\tif (denominator === 0) return this.set(0, 0, 0);\n\t\t\tconst scalar = v.dot(this) / denominator;\n\t\t\treturn this.copy(v).multiplyScalar(scalar);\n\t\t}\n\n\t\tprojectOnPlane(planeNormal) {\n\t\t\t_vector$c.copy(this).projectOnVector(planeNormal);\n\n\t\t\treturn this.sub(_vector$c);\n\t\t}\n\n\t\treflect(normal) {\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\t\t\treturn this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));\n\t\t}\n\n\t\tangleTo(v) {\n\t\t\tconst denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n\t\t\tif (denominator === 0) return Math.PI / 2;\n\t\t\tconst theta = this.dot(v) / denominator; // clamp, to handle numerical problems\n\n\t\t\treturn Math.acos(clamp(theta, -1, 1));\n\t\t}\n\n\t\tdistanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t}\n\n\t\tdistanceToSquared(v) {\n\t\t\tconst dx = this.x - v.x,\n\t\t\t\t\t\tdy = this.y - v.y,\n\t\t\t\t\t\tdz = this.z - v.z;\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\t\t}\n\n\t\tmanhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n\t\t}\n\n\t\tsetFromSpherical(s) {\n\t\t\treturn this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n\t\t}\n\n\t\tsetFromSphericalCoords(radius, phi, theta) {\n\t\t\tconst sinPhiRadius = Math.sin(phi) * radius;\n\t\t\tthis.x = sinPhiRadius * Math.sin(theta);\n\t\t\tthis.y = Math.cos(phi) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos(theta);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCylindrical(c) {\n\t\t\treturn this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n\t\t}\n\n\t\tsetFromCylindricalCoords(radius, theta, y) {\n\t\t\tthis.x = radius * Math.sin(theta);\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos(theta);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixPosition(m) {\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[12];\n\t\t\tthis.y = e[13];\n\t\t\tthis.z = e[14];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixScale(m) {\n\t\t\tconst sx = this.setFromMatrixColumn(m, 0).length();\n\t\t\tconst sy = this.setFromMatrixColumn(m, 1).length();\n\t\t\tconst sz = this.setFromMatrixColumn(m, 2).length();\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixColumn(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 4);\n\t\t}\n\n\t\tsetFromMatrix3Column(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 3);\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector3.prototype.isVector3 = true;\n\n\tconst _vector$c = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n\tclass Box3 {\n\t\tconstructor(min = new Vector3(+Infinity, +Infinity, +Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tset(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromArray(array) {\n\t\t\tlet minX = +Infinity;\n\t\t\tlet minY = +Infinity;\n\t\t\tlet minZ = +Infinity;\n\t\t\tlet maxX = -Infinity;\n\t\t\tlet maxY = -Infinity;\n\t\t\tlet maxZ = -Infinity;\n\n\t\t\tfor (let i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\tconst x = array[i];\n\t\t\t\tconst y = array[i + 1];\n\t\t\t\tconst z = array[i + 2];\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromBufferAttribute(attribute) {\n\t\t\tlet minX = +Infinity;\n\t\t\tlet minY = +Infinity;\n\t\t\tlet minZ = +Infinity;\n\t\t\tlet maxX = -Infinity;\n\t\t\tlet maxY = -Infinity;\n\t\t\tlet maxZ = -Infinity;\n\n\t\t\tfor (let i = 0, l = attribute.count; i < l; i++) {\n\t\t\t\tconst x = attribute.getX(i);\n\t\t\t\tconst y = attribute.getY(i);\n\t\t\t\tconst z = attribute.getZ(i);\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCenterAndSize(center, size) {\n\t\t\tconst halfSize = _vector$b.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromObject(object) {\n\t\t\tthis.makeEmpty();\n\t\t\treturn this.expandByObject(object);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.min.x = this.min.y = this.min.z = +Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t}\n\n\t\tgetSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getSize() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByObject(object) {\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tconst geometry = object.geometry;\n\n\t\t\tif (geometry !== undefined) {\n\t\t\t\tif (geometry.boundingBox === null) {\n\t\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\t}\n\n\t\t\t\t_box$3.copy(geometry.boundingBox);\n\n\t\t\t\t_box$3.applyMatrix4(object.matrixWorld);\n\n\t\t\t\tthis.union(_box$3);\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tthis.expandByObject(children[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n\t\t}\n\n\t\tcontainsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n\t\t}\n\n\t\tgetParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint(sphere.center, _vector$b); // If that point is inside the sphere, the AABB and sphere intersect.\n\n\t\t\treturn _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\t\tlet min, max;\n\n\t\t\tif (plane.normal.x > 0) {\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\t\t\t} else {\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\t\t\t}\n\n\t\t\tif (plane.normal.y > 0) {\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\t\t\t}\n\n\t\t\tif (plane.normal.z > 0) {\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\t\t\t}\n\n\t\t\treturn min <= -plane.constant && max >= -plane.constant;\n\t\t}\n\n\t\tintersectsTriangle(triangle) {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} // compute box center and extents\n\n\n\t\t\tthis.getCenter(_center);\n\n\t\t\t_extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n\t\t\t_v0$2.subVectors(triangle.a, _center);\n\n\t\t\t_v1$7.subVectors(triangle.b, _center);\n\n\t\t\t_v2$3.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n\t\t\t_f0.subVectors(_v1$7, _v0$2);\n\n\t\t\t_f1.subVectors(_v2$3, _v1$7);\n\n\t\t\t_f2.subVectors(_v0$2, _v2$3); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n\t\t\tlet axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n\t\t\tif (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // test 3 face normals from the aabb\n\n\n\t\t\taxes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\n\n\t\t\t_triangleNormal.crossVectors(_f0, _f1);\n\n\t\t\taxes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n\t\t\treturn satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents);\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\tconst clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t}\n\n\t\tgetBoundingSphere(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\n\t\t\t}\n\n\t\t\tthis.getCenter(target.center);\n\t\t\ttarget.radius = this.getSize(_vector$b).length() * 0.5;\n\t\t\treturn target;\n\t\t}\n\n\t\tintersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n\t\t\tif (this.isEmpty()) this.makeEmpty();\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n\t\t\t_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n\t\t\t_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n\t\t\t_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n\t\t\t_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n\t\t\t_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n\t\t\t_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n\t\t\t_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n\t\t\t_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n\t\t\tthis.setFromPoints(_points);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t}\n\n\t}\n\n\tBox3.prototype.isBox3 = true;\n\tconst _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\n\tconst _vector$b = /*@__PURE__*/new Vector3();\n\n\tconst _box$3 = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\n\tconst _v0$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v1$7 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$3 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\n\tconst _f0 = /*@__PURE__*/new Vector3();\n\n\tconst _f1 = /*@__PURE__*/new Vector3();\n\n\tconst _f2 = /*@__PURE__*/new Vector3();\n\n\tconst _center = /*@__PURE__*/new Vector3();\n\n\tconst _extents = /*@__PURE__*/new Vector3();\n\n\tconst _triangleNormal = /*@__PURE__*/new Vector3();\n\n\tconst _testAxis = /*@__PURE__*/new Vector3();\n\n\tfunction satForAxes(axes, v0, v1, v2, extents) {\n\t\tfor (let i = 0, j = axes.length - 3; i <= j; i += 3) {\n\t\t\t_testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n\t\t\tconst r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n\t\t\tconst p0 = v0.dot(_testAxis);\n\t\t\tconst p1 = v1.dot(_testAxis);\n\t\t\tconst p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n\t\t\tif (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tconst _box$2 = /*@__PURE__*/new Box3();\n\n\tconst _v1$6 = /*@__PURE__*/new Vector3();\n\n\tconst _toFarthestPoint = /*@__PURE__*/new Vector3();\n\n\tconst _toPoint = /*@__PURE__*/new Vector3();\n\n\tclass Sphere {\n\t\tconstructor(center = new Vector3(), radius = -1) {\n\t\t\tthis.center = center;\n\t\t\tthis.radius = radius;\n\t\t}\n\n\t\tset(center, radius) {\n\t\t\tthis.center.copy(center);\n\t\t\tthis.radius = radius;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points, optionalCenter) {\n\t\t\tconst center = this.center;\n\n\t\t\tif (optionalCenter !== undefined) {\n\t\t\t\tcenter.copy(optionalCenter);\n\t\t\t} else {\n\t\t\t\t_box$2.setFromPoints(points).getCenter(center);\n\t\t\t}\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt(maxRadiusSq);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(sphere) {\n\t\t\tthis.center.copy(sphere.center);\n\t\t\tthis.radius = sphere.radius;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\treturn this.radius < 0;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.center.set(0, 0, 0);\n\t\t\tthis.radius = -1;\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.distanceToSquared(this.center) <= this.radius * this.radius;\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn point.distanceTo(this.center) - this.radius;\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\tconst radiusSum = this.radius + sphere.radius;\n\t\t\treturn sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsSphere(this);\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\treturn Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tconst deltaLengthSq = this.center.distanceToSquared(point);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.copy(point);\n\n\t\t\tif (deltaLengthSq > this.radius * this.radius) {\n\t\t\t\ttarget.sub(this.center).normalize();\n\t\t\t\ttarget.multiplyScalar(this.radius).add(this.center);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t}\n\n\t\tgetBoundingBox(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .getBoundingBox() target is now required');\n\t\t\t\ttarget = new Box3();\n\t\t\t}\n\n\t\t\tif (this.isEmpty()) {\n\t\t\t\t// Empty sphere produces empty bounding box\n\t\t\t\ttarget.makeEmpty();\n\t\t\t\treturn target;\n\t\t\t}\n\n\t\t\ttarget.set(this.center, this.center);\n\t\t\ttarget.expandByScalar(this.radius);\n\t\t\treturn target;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tthis.center.applyMatrix4(matrix);\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.center.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n\t\t\t_toPoint.subVectors(point, this.center);\n\n\t\t\tconst lengthSq = _toPoint.lengthSq();\n\n\t\t\tif (lengthSq > this.radius * this.radius) {\n\t\t\t\tconst length = Math.sqrt(lengthSq);\n\t\t\t\tconst missingRadiusHalf = (length - this.radius) * 0.5; // Nudge this sphere towards the target point. Add half the missing distance to radius,\n\t\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\n\t\t\t\t// the whole missing distance were just added to radius.\n\n\t\t\t\tthis.center.add(_toPoint.multiplyScalar(missingRadiusHalf / length));\n\t\t\t\tthis.radius += missingRadiusHalf;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(sphere) {\n\t\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n\t\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\n\t\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\n\t\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\n\t\t\t_toFarthestPoint.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);\n\n\t\t\tthis.expandByPoint(_v1$6.copy(sphere.center).add(_toFarthestPoint));\n\t\t\tthis.expandByPoint(_v1$6.copy(sphere.center).sub(_toFarthestPoint));\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(sphere) {\n\t\t\treturn sphere.center.equals(this.center) && sphere.radius === this.radius;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tconst _vector$a = /*@__PURE__*/new Vector3();\n\n\tconst _segCenter = /*@__PURE__*/new Vector3();\n\n\tconst _segDir = /*@__PURE__*/new Vector3();\n\n\tconst _diff = /*@__PURE__*/new Vector3();\n\n\tconst _edge1 = /*@__PURE__*/new Vector3();\n\n\tconst _edge2 = /*@__PURE__*/new Vector3();\n\n\tconst _normal$1 = /*@__PURE__*/new Vector3();\n\n\tclass Ray {\n\t\tconstructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {\n\t\t\tthis.origin = origin;\n\t\t\tthis.direction = direction;\n\t\t}\n\n\t\tset(origin, direction) {\n\t\t\tthis.origin.copy(origin);\n\t\t\tthis.direction.copy(direction);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(ray) {\n\t\t\tthis.origin.copy(ray.origin);\n\t\t\tthis.direction.copy(ray.direction);\n\t\t\treturn this;\n\t\t}\n\n\t\tat(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(t).add(this.origin);\n\t\t}\n\n\t\tlookAt(v) {\n\t\t\tthis.direction.copy(v).sub(this.origin).normalize();\n\t\t\treturn this;\n\t\t}\n\n\t\trecast(t) {\n\t\t\tthis.origin.copy(this.at(t, _vector$a));\n\t\t\treturn this;\n\t\t}\n\n\t\tclosestPointToPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(point, this.origin);\n\t\t\tconst directionDistance = target.dot(this.direction);\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn target.copy(this.origin);\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn Math.sqrt(this.distanceSqToPoint(point));\n\t\t}\n\n\t\tdistanceSqToPoint(point) {\n\t\t\tconst directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn this.origin.distanceToSquared(point);\n\t\t\t}\n\n\t\t\t_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n\t\t\treturn _vector$a.distanceToSquared(point);\n\t\t}\n\n\t\tdistanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\t\t\t_segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n\t\t\t_segDir.copy(v1).sub(v0).normalize();\n\n\t\t\t_diff.copy(this.origin).sub(_segCenter);\n\n\t\t\tconst segExtent = v0.distanceTo(v1) * 0.5;\n\t\t\tconst a01 = -this.direction.dot(_segDir);\n\n\t\t\tconst b0 = _diff.dot(this.direction);\n\n\t\t\tconst b1 = -_diff.dot(_segDir);\n\n\t\t\tconst c = _diff.lengthSq();\n\n\t\t\tconst det = Math.abs(1 - a01 * a01);\n\t\t\tlet s0, s1, sqrDist, extDet;\n\n\t\t\tif (det > 0) {\n\t\t\t\t// The ray and segment are not parallel.\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif (s0 >= 0) {\n\t\t\t\t\tif (s1 >= -extDet) {\n\t\t\t\t\t\tif (s1 <= extDet) {\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// region 1\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 5\n\t\t\t\t\t\ts1 = -segExtent;\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (s1 <= -extDet) {\n\t\t\t\t\t\t// region 4\n\t\t\t\t\t\ts0 = Math.max(0, -(-a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else if (s1 <= extDet) {\n\t\t\t\t\t\t// region 3\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 2\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Ray and segment are parallel.\n\t\t\t\ts1 = a01 > 0 ? -segExtent : segExtent;\n\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t}\n\n\t\t\tif (optionalPointOnRay) {\n\t\t\t\toptionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n\t\t\t}\n\n\t\t\tif (optionalPointOnSegment) {\n\t\t\t\toptionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\t\t}\n\n\t\tintersectSphere(sphere, target) {\n\t\t\t_vector$a.subVectors(sphere.center, this.origin);\n\n\t\t\tconst tca = _vector$a.dot(this.direction);\n\n\t\t\tconst d2 = _vector$a.dot(_vector$a) - tca * tca;\n\t\t\tconst radius2 = sphere.radius * sphere.radius;\n\t\t\tif (d2 > radius2) return null;\n\t\t\tconst thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n\t\t\tconst t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n\t\t\tconst t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n\t\t\tif (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\n\t\t\tif (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n\t\t\treturn this.at(t0, target);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\treturn this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n\t\t}\n\n\t\tdistanceToPlane(plane) {\n\t\t\tconst denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (plane.distanceToPoint(this.origin) === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} // Null is preferable to undefined since undefined means.... it is undefined\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\t\t}\n\n\t\tintersectPlane(plane, target) {\n\t\t\tconst t = this.distanceToPlane(plane);\n\n\t\t\tif (t === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this.at(t, target);\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\t// check if the ray lies on the plane first\n\t\t\tconst distToPoint = plane.distanceToPoint(this.origin);\n\n\t\t\tif (distToPoint === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator * distToPoint < 0) {\n\t\t\t\treturn true;\n\t\t\t} // ray origin is behind the plane (and is pointing behind it)\n\n\n\t\t\treturn false;\n\t\t}\n\n\t\tintersectBox(box, target) {\n\t\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\t\tconst invdirx = 1 / this.direction.x,\n\t\t\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\t\t\tinvdirz = 1 / this.direction.z;\n\t\t\tconst origin = this.origin;\n\n\t\t\tif (invdirx >= 0) {\n\t\t\t\ttmin = (box.min.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.max.x - origin.x) * invdirx;\n\t\t\t} else {\n\t\t\t\ttmin = (box.max.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.min.x - origin.x) * invdirx;\n\t\t\t}\n\n\t\t\tif (invdiry >= 0) {\n\t\t\t\ttymin = (box.min.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.max.y - origin.y) * invdiry;\n\t\t\t} else {\n\t\t\t\ttymin = (box.max.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.min.y - origin.y) * invdiry;\n\t\t\t}\n\n\t\t\tif (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif (tymin > tmin || tmin !== tmin) tmin = tymin;\n\t\t\tif (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n\t\t\tif (invdirz >= 0) {\n\t\t\t\ttzmin = (box.min.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.max.z - origin.z) * invdirz;\n\t\t\t} else {\n\t\t\t\ttzmin = (box.max.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.min.z - origin.z) * invdirz;\n\t\t\t}\n\n\t\t\tif (tmin > tzmax || tzmin > tmax) return null;\n\t\t\tif (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n\t\t\tif (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n\t\t\tif (tmax < 0) return null;\n\t\t\treturn this.at(tmin >= 0 ? tmin : tmax, target);\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn this.intersectBox(box, _vector$a) !== null;\n\t\t}\n\n\t\tintersectTriangle(a, b, c, backfaceCulling, target) {\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\t\t_edge1.subVectors(b, a);\n\n\t\t\t_edge2.subVectors(c, a);\n\n\t\t\t_normal$1.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//\t |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//\t |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//\t |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n\t\t\tlet DdN = this.direction.dot(_normal$1);\n\t\t\tlet sign;\n\n\t\t\tif (DdN > 0) {\n\t\t\t\tif (backfaceCulling) return null;\n\t\t\t\tsign = 1;\n\t\t\t} else if (DdN < 0) {\n\t\t\t\tsign = -1;\n\t\t\t\tDdN = -DdN;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_diff.subVectors(this.origin, a);\n\n\t\t\tconst DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n\t\t\tif (DdQxE2 < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n\t\t\tif (DdE1xQ < 0) {\n\t\t\t\treturn null;\n\t\t\t} // b1+b2 > 1, no intersection\n\n\n\t\t\tif (DdQxE2 + DdE1xQ > DdN) {\n\t\t\t\treturn null;\n\t\t\t} // Line intersects triangle, check if ray does.\n\n\n\t\t\tconst QdN = -sign * _diff.dot(_normal$1); // t < 0, no intersection\n\n\n\t\t\tif (QdN < 0) {\n\t\t\t\treturn null;\n\t\t\t} // Ray intersects triangle.\n\n\n\t\t\treturn this.at(QdN / DdN, target);\n\t\t}\n\n\t\tapplyMatrix4(matrix4) {\n\t\t\tthis.origin.applyMatrix4(matrix4);\n\t\t\tthis.direction.transformDirection(matrix4);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(ray) {\n\t\t\treturn ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tclass Matrix4 {\n\t\tconstructor() {\n\t\t\tthis.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tset(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[4] = n12;\n\t\t\tte[8] = n13;\n\t\t\tte[12] = n14;\n\t\t\tte[1] = n21;\n\t\t\tte[5] = n22;\n\t\t\tte[9] = n23;\n\t\t\tte[13] = n24;\n\t\t\tte[2] = n31;\n\t\t\tte[6] = n32;\n\t\t\tte[10] = n33;\n\t\t\tte[14] = n34;\n\t\t\tte[3] = n41;\n\t\t\tte[7] = n42;\n\t\t\tte[11] = n43;\n\t\t\tte[15] = n44;\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\tthis.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Matrix4().fromArray(this.elements);\n\t\t}\n\n\t\tcopy(m) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\tte[9] = me[9];\n\t\t\tte[10] = me[10];\n\t\t\tte[11] = me[11];\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\tte[15] = me[15];\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyPosition(m) {\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tme = m.elements;\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrix3(m) {\n\t\t\tconst me = m.elements;\n\t\t\tthis.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\textractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrixColumn(this, 0);\n\t\t\tyAxis.setFromMatrixColumn(this, 1);\n\t\t\tzAxis.setFromMatrixColumn(this, 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeBasis(xAxis, yAxis, zAxis) {\n\t\t\tthis.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\textractRotation(m) {\n\t\t\t// this method does not support reflection matrices\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\n\t\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();\n\n\t\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();\n\n\t\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();\n\n\t\t\tte[0] = me[0] * scaleX;\n\t\t\tte[1] = me[1] * scaleX;\n\t\t\tte[2] = me[2] * scaleX;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = me[4] * scaleY;\n\t\t\tte[5] = me[5] * scaleY;\n\t\t\tte[6] = me[6] * scaleY;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = me[8] * scaleZ;\n\t\t\tte[9] = me[9] * scaleZ;\n\t\t\tte[10] = me[10] * scaleZ;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationFromEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tconst te = this.elements;\n\t\t\tconst x = euler.x,\n\t\t\t\t\t\ty = euler.y,\n\t\t\t\t\t\tz = euler.z;\n\t\t\tconst a = Math.cos(x),\n\t\t\t\t\t\tb = Math.sin(x);\n\t\t\tconst c = Math.cos(y),\n\t\t\t\t\t\td = Math.sin(y);\n\t\t\tconst e = Math.cos(z),\n\t\t\t\t\t\tf = Math.sin(z);\n\n\t\t\tif (euler.order === 'XYZ') {\n\t\t\t\tconst ae = a * e,\n\t\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -c * f;\n\t\t\t\tte[8] = d;\n\t\t\t\tte[1] = af + be * d;\n\t\t\t\tte[5] = ae - bf * d;\n\t\t\t\tte[9] = -b * c;\n\t\t\t\tte[2] = bf - ae * d;\n\t\t\t\tte[6] = be + af * d;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YXZ') {\n\t\t\t\tconst ce = c * e,\n\t\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce + df * b;\n\t\t\t\tte[4] = de * b - cf;\n\t\t\t\tte[8] = a * d;\n\t\t\t\tte[1] = a * f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b;\n\t\t\t\tte[2] = cf * b - de;\n\t\t\t\tte[6] = df + ce * b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZXY') {\n\t\t\t\tconst ce = c * e,\n\t\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce - df * b;\n\t\t\t\tte[4] = -a * f;\n\t\t\t\tte[8] = de + cf * b;\n\t\t\t\tte[1] = cf + de * b;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = df - ce * b;\n\t\t\t\tte[2] = -a * d;\n\t\t\t\tte[6] = b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZYX') {\n\t\t\t\tconst ae = a * e,\n\t\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = be * d - af;\n\t\t\t\tte[8] = ae * d + bf;\n\t\t\t\tte[1] = c * f;\n\t\t\t\tte[5] = bf * d + ae;\n\t\t\t\tte[9] = af * d - be;\n\t\t\t\tte[2] = -d;\n\t\t\t\tte[6] = b * c;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YZX') {\n\t\t\t\tconst ac = a * c,\n\t\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = bd - ac * f;\n\t\t\t\tte[8] = bc * f + ad;\n\t\t\t\tte[1] = f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b * e;\n\t\t\t\tte[2] = -d * e;\n\t\t\t\tte[6] = ad * f + bc;\n\t\t\t\tte[10] = ac - bd * f;\n\t\t\t} else if (euler.order === 'XZY') {\n\t\t\t\tconst ac = a * c,\n\t\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -f;\n\t\t\t\tte[8] = d * e;\n\t\t\t\tte[1] = ac * f + bd;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = ad * f - bc;\n\t\t\t\tte[2] = bc * f - ad;\n\t\t\t\tte[6] = b * e;\n\t\t\t\tte[10] = bd * f + ac;\n\t\t\t} // bottom row\n\n\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0; // last column\n\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationFromQuaternion(q) {\n\t\t\treturn this.compose(_zero, q, _one);\n\t\t}\n\n\t\tlookAt(eye, target, up) {\n\t\t\tconst te = this.elements;\n\n\t\t\t_z.subVectors(eye, target);\n\n\t\t\tif (_z.lengthSq() === 0) {\n\t\t\t\t// eye and target are in the same position\n\t\t\t\t_z.z = 1;\n\t\t\t}\n\n\t\t\t_z.normalize();\n\n\t\t\t_x.crossVectors(up, _z);\n\n\t\t\tif (_x.lengthSq() === 0) {\n\t\t\t\t// up and z are parallel\n\t\t\t\tif (Math.abs(up.z) === 1) {\n\t\t\t\t\t_z.x += 0.0001;\n\t\t\t\t} else {\n\t\t\t\t\t_z.z += 0.0001;\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\n\t\t\t\t_x.crossVectors(up, _z);\n\t\t\t}\n\n\t\t\t_x.normalize();\n\n\t\t\t_y.crossVectors(_z, _x);\n\n\t\t\tte[0] = _x.x;\n\t\t\tte[4] = _y.x;\n\t\t\tte[8] = _z.x;\n\t\t\tte[1] = _x.y;\n\t\t\tte[5] = _y.y;\n\t\t\tte[9] = _z.y;\n\t\t\tte[2] = _x.z;\n\t\t\tte[6] = _y.z;\n\t\t\tte[10] = _z.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(m, n) {\n\t\t\tif (n !== undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n\t\t\t\treturn this.multiplyMatrices(m, n);\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t}\n\n\t\tpremultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t}\n\n\t\tmultiplyMatrices(a, b) {\n\t\t\tconst ae = a.elements;\n\t\t\tconst be = b.elements;\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = ae[0],\n\t\t\t\t\t\ta12 = ae[4],\n\t\t\t\t\t\ta13 = ae[8],\n\t\t\t\t\t\ta14 = ae[12];\n\t\t\tconst a21 = ae[1],\n\t\t\t\t\t\ta22 = ae[5],\n\t\t\t\t\t\ta23 = ae[9],\n\t\t\t\t\t\ta24 = ae[13];\n\t\t\tconst a31 = ae[2],\n\t\t\t\t\t\ta32 = ae[6],\n\t\t\t\t\t\ta33 = ae[10],\n\t\t\t\t\t\ta34 = ae[14];\n\t\t\tconst a41 = ae[3],\n\t\t\t\t\t\ta42 = ae[7],\n\t\t\t\t\t\ta43 = ae[11],\n\t\t\t\t\t\ta44 = ae[15];\n\t\t\tconst b11 = be[0],\n\t\t\t\t\t\tb12 = be[4],\n\t\t\t\t\t\tb13 = be[8],\n\t\t\t\t\t\tb14 = be[12];\n\t\t\tconst b21 = be[1],\n\t\t\t\t\t\tb22 = be[5],\n\t\t\t\t\t\tb23 = be[9],\n\t\t\t\t\t\tb24 = be[13];\n\t\t\tconst b31 = be[2],\n\t\t\t\t\t\tb32 = be[6],\n\t\t\t\t\t\tb33 = be[10],\n\t\t\t\t\t\tb34 = be[14];\n\t\t\tconst b41 = be[3],\n\t\t\t\t\t\tb42 = be[7],\n\t\t\t\t\t\tb43 = be[11],\n\t\t\t\t\t\tb44 = be[15];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[8] *= s;\n\t\t\tte[12] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[9] *= s;\n\t\t\tte[13] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[10] *= s;\n\t\t\tte[14] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[11] *= s;\n\t\t\tte[15] *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeterminant() {\n\t\t\tconst te = this.elements;\n\t\t\tconst n11 = te[0],\n\t\t\t\t\t\tn12 = te[4],\n\t\t\t\t\t\tn13 = te[8],\n\t\t\t\t\t\tn14 = te[12];\n\t\t\tconst n21 = te[1],\n\t\t\t\t\t\tn22 = te[5],\n\t\t\t\t\t\tn23 = te[9],\n\t\t\t\t\t\tn24 = te[13];\n\t\t\tconst n31 = te[2],\n\t\t\t\t\t\tn32 = te[6],\n\t\t\t\t\t\tn33 = te[10],\n\t\t\t\t\t\tn34 = te[14];\n\t\t\tconst n41 = te[3],\n\t\t\t\t\t\tn42 = te[7],\n\t\t\t\t\t\tn43 = te[11],\n\t\t\t\t\t\tn44 = te[15]; //TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n\t\t}\n\n\t\ttranspose() {\n\t\t\tconst te = this.elements;\n\t\t\tlet tmp;\n\t\t\ttmp = te[1];\n\t\t\tte[1] = te[4];\n\t\t\tte[4] = tmp;\n\t\t\ttmp = te[2];\n\t\t\tte[2] = te[8];\n\t\t\tte[8] = tmp;\n\t\t\ttmp = te[6];\n\t\t\tte[6] = te[9];\n\t\t\tte[9] = tmp;\n\t\t\ttmp = te[3];\n\t\t\tte[3] = te[12];\n\t\t\tte[12] = tmp;\n\t\t\ttmp = te[7];\n\t\t\tte[7] = te[13];\n\t\t\tte[13] = tmp;\n\t\t\ttmp = te[11];\n\t\t\tte[11] = te[14];\n\t\t\tte[14] = tmp;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetPosition(x, y, z) {\n\t\t\tconst te = this.elements;\n\n\t\t\tif (x.isVector3) {\n\t\t\t\tte[12] = x.x;\n\t\t\t\tte[13] = x.y;\n\t\t\t\tte[14] = x.z;\n\t\t\t} else {\n\t\t\t\tte[12] = x;\n\t\t\t\tte[13] = y;\n\t\t\t\tte[14] = z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tinvert() {\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tn11 = te[0],\n\t\t\t\t\t\tn21 = te[1],\n\t\t\t\t\t\tn31 = te[2],\n\t\t\t\t\t\tn41 = te[3],\n\t\t\t\t\t\tn12 = te[4],\n\t\t\t\t\t\tn22 = te[5],\n\t\t\t\t\t\tn32 = te[6],\n\t\t\t\t\t\tn42 = te[7],\n\t\t\t\t\t\tn13 = te[8],\n\t\t\t\t\t\tn23 = te[9],\n\t\t\t\t\t\tn33 = te[10],\n\t\t\t\t\t\tn43 = te[11],\n\t\t\t\t\t\tn14 = te[12],\n\t\t\t\t\t\tn24 = te[13],\n\t\t\t\t\t\tn34 = te[14],\n\t\t\t\t\t\tn44 = te[15],\n\t\t\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tconst detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n\t\t\tte[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n\t\t\tte[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n\t\t\tte[4] = t12 * detInv;\n\t\t\tte[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n\t\t\tte[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n\t\t\tte[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n\t\t\tte[8] = t13 * detInv;\n\t\t\tte[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n\t\t\tte[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n\t\t\tte[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n\t\t\tte[12] = t14 * detInv;\n\t\t\tte[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n\t\t\tte[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n\t\t\tte[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(v) {\n\t\t\tconst te = this.elements;\n\t\t\tconst x = v.x,\n\t\t\t\t\t\ty = v.y,\n\t\t\t\t\t\tz = v.z;\n\t\t\tte[0] *= x;\n\t\t\tte[4] *= y;\n\t\t\tte[8] *= z;\n\t\t\tte[1] *= x;\n\t\t\tte[5] *= y;\n\t\t\tte[9] *= z;\n\t\t\tte[2] *= x;\n\t\t\tte[6] *= y;\n\t\t\tte[10] *= z;\n\t\t\tte[3] *= x;\n\t\t\tte[7] *= y;\n\t\t\tte[11] *= z;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMaxScaleOnAxis() {\n\t\t\tconst te = this.elements;\n\t\t\tconst scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n\t\t\tconst scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n\t\t\tconst scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\t\t\treturn Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n\t\t}\n\n\t\tmakeTranslation(x, y, z) {\n\t\t\tthis.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationX(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationY(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationZ(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationAxis(axis, angle) {\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t\tconst c = Math.cos(angle);\n\t\t\tconst s = Math.sin(angle);\n\t\t\tconst t = 1 - c;\n\t\t\tconst x = axis.x,\n\t\t\t\t\t\ty = axis.y,\n\t\t\t\t\t\tz = axis.z;\n\t\t\tconst tx = t * x,\n\t\t\t\t\t\tty = t * y;\n\t\t\tthis.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeScale(x, y, z) {\n\t\t\tthis.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeShear(xy, xz, yx, yz, zx, zy) {\n\t\t\tthis.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tcompose(position, quaternion, scale) {\n\t\t\tconst te = this.elements;\n\t\t\tconst x = quaternion._x,\n\t\t\t\t\t\ty = quaternion._y,\n\t\t\t\t\t\tz = quaternion._z,\n\t\t\t\t\t\tw = quaternion._w;\n\t\t\tconst x2 = x + x,\n\t\t\t\t\t\ty2 = y + y,\n\t\t\t\t\t\tz2 = z + z;\n\t\t\tconst xx = x * x2,\n\t\t\t\t\t\txy = x * y2,\n\t\t\t\t\t\txz = x * z2;\n\t\t\tconst yy = y * y2,\n\t\t\t\t\t\tyz = y * z2,\n\t\t\t\t\t\tzz = z * z2;\n\t\t\tconst wx = w * x2,\n\t\t\t\t\t\twy = w * y2,\n\t\t\t\t\t\twz = w * z2;\n\t\t\tconst sx = scale.x,\n\t\t\t\t\t\tsy = scale.y,\n\t\t\t\t\t\tsz = scale.z;\n\t\t\tte[0] = (1 - (yy + zz)) * sx;\n\t\t\tte[1] = (xy + wz) * sx;\n\t\t\tte[2] = (xz - wy) * sx;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = (xy - wz) * sy;\n\t\t\tte[5] = (1 - (xx + zz)) * sy;\n\t\t\tte[6] = (yz + wx) * sy;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = (xz + wy) * sz;\n\t\t\tte[9] = (yz - wx) * sz;\n\t\t\tte[10] = (1 - (xx + yy)) * sz;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = position.x;\n\t\t\tte[13] = position.y;\n\t\t\tte[14] = position.z;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tdecompose(position, quaternion, scale) {\n\t\t\tconst te = this.elements;\n\n\t\t\tlet sx = _v1$5.set(te[0], te[1], te[2]).length();\n\n\t\t\tconst sy = _v1$5.set(te[4], te[5], te[6]).length();\n\n\t\t\tconst sz = _v1$5.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n\n\t\t\tconst det = this.determinant();\n\t\t\tif (det < 0) sx = -sx;\n\t\t\tposition.x = te[12];\n\t\t\tposition.y = te[13];\n\t\t\tposition.z = te[14]; // scale the rotation part\n\n\t\t\t_m1$2.copy(this);\n\n\t\t\tconst invSX = 1 / sx;\n\t\t\tconst invSY = 1 / sy;\n\t\t\tconst invSZ = 1 / sz;\n\t\t\t_m1$2.elements[0] *= invSX;\n\t\t\t_m1$2.elements[1] *= invSX;\n\t\t\t_m1$2.elements[2] *= invSX;\n\t\t\t_m1$2.elements[4] *= invSY;\n\t\t\t_m1$2.elements[5] *= invSY;\n\t\t\t_m1$2.elements[6] *= invSY;\n\t\t\t_m1$2.elements[8] *= invSZ;\n\t\t\t_m1$2.elements[9] *= invSZ;\n\t\t\t_m1$2.elements[10] *= invSZ;\n\t\t\tquaternion.setFromRotationMatrix(_m1$2);\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakePerspective(left, right, top, bottom, near, far) {\n\t\t\tif (far === undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n\t\t\t}\n\n\t\t\tconst te = this.elements;\n\t\t\tconst x = 2 * near / (right - left);\n\t\t\tconst y = 2 * near / (top - bottom);\n\t\t\tconst a = (right + left) / (right - left);\n\t\t\tconst b = (top + bottom) / (top - bottom);\n\t\t\tconst c = -(far + near) / (far - near);\n\t\t\tconst d = -2 * far * near / (far - near);\n\t\t\tte[0] = x;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = a;\n\t\t\tte[12] = 0;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = y;\n\t\t\tte[9] = b;\n\t\t\tte[13] = 0;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = c;\n\t\t\tte[14] = d;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = -1;\n\t\t\tte[15] = 0;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeOrthographic(left, right, top, bottom, near, far) {\n\t\t\tconst te = this.elements;\n\t\t\tconst w = 1.0 / (right - left);\n\t\t\tconst h = 1.0 / (top - bottom);\n\t\t\tconst p = 1.0 / (far - near);\n\t\t\tconst x = (right + left) * w;\n\t\t\tconst y = (top + bottom) * h;\n\t\t\tconst z = (far + near) * p;\n\t\t\tte[0] = 2 * w;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = 0;\n\t\t\tte[12] = -x;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = 2 * h;\n\t\t\tte[9] = 0;\n\t\t\tte[13] = -y;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = -2 * p;\n\t\t\tte[14] = -z;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(matrix) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = matrix.elements;\n\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\tarray[offset + 9] = te[9];\n\t\t\tarray[offset + 10] = te[10];\n\t\t\tarray[offset + 11] = te[11];\n\t\t\tarray[offset + 12] = te[12];\n\t\t\tarray[offset + 13] = te[13];\n\t\t\tarray[offset + 14] = te[14];\n\t\t\tarray[offset + 15] = te[15];\n\t\t\treturn array;\n\t\t}\n\n\t}\n\n\tMatrix4.prototype.isMatrix4 = true;\n\n\tconst _v1$5 = /*@__PURE__*/new Vector3();\n\n\tconst _m1$2 = /*@__PURE__*/new Matrix4();\n\n\tconst _zero = /*@__PURE__*/new Vector3(0, 0, 0);\n\n\tconst _one = /*@__PURE__*/new Vector3(1, 1, 1);\n\n\tconst _x = /*@__PURE__*/new Vector3();\n\n\tconst _y = /*@__PURE__*/new Vector3();\n\n\tconst _z = /*@__PURE__*/new Vector3();\n\n\tconst _matrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n\tclass Euler {\n\t\tconstructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order;\n\t\t}\n\n\t\tget x() {\n\t\t\treturn this._x;\n\t\t}\n\n\t\tset x(value) {\n\t\t\tthis._x = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget y() {\n\t\t\treturn this._y;\n\t\t}\n\n\t\tset y(value) {\n\t\t\tthis._y = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget z() {\n\t\t\treturn this._z;\n\t\t}\n\n\t\tset z(value) {\n\t\t\tthis._z = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget order() {\n\t\t\treturn this._order;\n\t\t}\n\n\t\tset order(value) {\n\t\t\tthis._order = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tset(x, y, z, order) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._order);\n\t\t}\n\n\t\tcopy(euler) {\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromRotationMatrix(m, order, update) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tconst te = m.elements;\n\t\t\tconst m11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8];\n\t\t\tconst m21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9];\n\t\t\tconst m31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10];\n\t\t\torder = order || this._order;\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._y = Math.asin(clamp(m13, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m13) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = Math.asin(-clamp(m23, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m23) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = Math.asin(clamp(m32, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m32) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._y = Math.asin(-clamp(m31, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m31) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._z = Math.asin(clamp(m21, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m21) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._z = Math.asin(-clamp(m12, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m12) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tthis._order = order;\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromQuaternion(q, order, update) {\n\t\t\t_matrix$1.makeRotationFromQuaternion(q);\n\n\t\t\treturn this.setFromRotationMatrix(_matrix$1, order, update);\n\t\t}\n\n\t\tsetFromVector3(v, order) {\n\t\t\treturn this.set(v.x, v.y, v.z, order || this._order);\n\t\t}\n\n\t\treorder(newOrder) {\n\t\t\t// WARNING: this discards revolution information -bhouston\n\t\t\t_quaternion$3.setFromEuler(this);\n\n\t\t\treturn this.setFromQuaternion(_quaternion$3, newOrder);\n\t\t}\n\n\t\tequals(euler) {\n\t\t\treturn euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n\t\t}\n\n\t\tfromArray(array) {\n\t\t\tthis._x = array[0];\n\t\t\tthis._y = array[1];\n\t\t\tthis._z = array[2];\n\t\t\tif (array[3] !== undefined) this._order = array[3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._order;\n\t\t\treturn array;\n\t\t}\n\n\t\ttoVector3(optionalResult) {\n\t\t\tif (optionalResult) {\n\t\t\t\treturn optionalResult.set(this._x, this._y, this._z);\n\t\t\t} else {\n\t\t\t\treturn new Vector3(this._x, this._y, this._z);\n\t\t\t}\n\t\t}\n\n\t\t_onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChangeCallback() {}\n\n\t}\n\n\tEuler.prototype.isEuler = true;\n\tEuler.DefaultOrder = 'XYZ';\n\tEuler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\n\n\tclass Layers {\n\t\tconstructor() {\n\t\t\tthis.mask = 1 | 0;\n\t\t}\n\n\t\tset(channel) {\n\t\t\tthis.mask = 1 << channel | 0;\n\t\t}\n\n\t\tenable(channel) {\n\t\t\tthis.mask |= 1 << channel | 0;\n\t\t}\n\n\t\tenableAll() {\n\t\t\tthis.mask = 0xffffffff | 0;\n\t\t}\n\n\t\ttoggle(channel) {\n\t\t\tthis.mask ^= 1 << channel | 0;\n\t\t}\n\n\t\tdisable(channel) {\n\t\t\tthis.mask &= ~(1 << channel | 0);\n\t\t}\n\n\t\tdisableAll() {\n\t\t\tthis.mask = 0;\n\t\t}\n\n\t\ttest(layers) {\n\t\t\treturn (this.mask & layers.mask) !== 0;\n\t\t}\n\n\t}\n\n\tlet _object3DId = 0;\n\n\tconst _v1$4 = /*@__PURE__*/new Vector3();\n\n\tconst _q1 = /*@__PURE__*/new Quaternion();\n\n\tconst _m1$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _target = /*@__PURE__*/new Vector3();\n\n\tconst _position$3 = /*@__PURE__*/new Vector3();\n\n\tconst _scale$2 = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$2 = /*@__PURE__*/new Quaternion();\n\n\tconst _xAxis = /*@__PURE__*/new Vector3(1, 0, 0);\n\n\tconst _yAxis = /*@__PURE__*/new Vector3(0, 1, 0);\n\n\tconst _zAxis = /*@__PURE__*/new Vector3(0, 0, 1);\n\n\tconst _addedEvent = {\n\t\ttype: 'added'\n\t};\n\tconst _removedEvent = {\n\t\ttype: 'removed'\n\t};\n\n\tclass Object3D extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: _object3DId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'Object3D';\n\t\t\tthis.parent = null;\n\t\t\tthis.children = [];\n\t\t\tthis.up = Object3D.DefaultUp.clone();\n\t\t\tconst position = new Vector3();\n\t\t\tconst rotation = new Euler();\n\t\t\tconst quaternion = new Quaternion();\n\t\t\tconst scale = new Vector3(1, 1, 1);\n\n\t\t\tfunction onRotationChange() {\n\t\t\t\tquaternion.setFromEuler(rotation, false);\n\t\t\t}\n\n\t\t\tfunction onQuaternionChange() {\n\t\t\t\trotation.setFromQuaternion(quaternion, undefined, false);\n\t\t\t}\n\n\t\t\trotation._onChange(onRotationChange);\n\n\t\t\tquaternion._onChange(onQuaternionChange);\n\n\t\t\tObject.defineProperties(this, {\n\t\t\t\tposition: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: position\n\t\t\t\t},\n\t\t\t\trotation: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: rotation\n\t\t\t\t},\n\t\t\t\tquaternion: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: quaternion\n\t\t\t\t},\n\t\t\t\tscale: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: scale\n\t\t\t\t},\n\t\t\t\tmodelViewMatrix: {\n\t\t\t\t\tvalue: new Matrix4()\n\t\t\t\t},\n\t\t\t\tnormalMatrix: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.matrixWorld = new Matrix4();\n\t\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\tthis.layers = new Layers();\n\t\t\tthis.visible = true;\n\t\t\tthis.castShadow = false;\n\t\t\tthis.receiveShadow = false;\n\t\t\tthis.frustumCulled = true;\n\t\t\tthis.renderOrder = 0;\n\t\t\tthis.animations = [];\n\t\t\tthis.userData = {};\n\t\t}\n\n\t\tonBeforeRender() {}\n\n\t\tonAfterRender() {}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\t\t\tthis.matrix.premultiply(matrix);\n\t\t\tthis.matrix.decompose(this.position, this.quaternion, this.scale);\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\tthis.quaternion.premultiply(q);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRotationFromAxisAngle(axis, angle) {\n\t\t\t// assumes axis is normalized\n\t\t\tthis.quaternion.setFromAxisAngle(axis, angle);\n\t\t}\n\n\t\tsetRotationFromEuler(euler) {\n\t\t\tthis.quaternion.setFromEuler(euler, true);\n\t\t}\n\n\t\tsetRotationFromMatrix(m) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tthis.quaternion.setFromRotationMatrix(m);\n\t\t}\n\n\t\tsetRotationFromQuaternion(q) {\n\t\t\t// assumes q is normalized\n\t\t\tthis.quaternion.copy(q);\n\t\t}\n\n\t\trotateOnAxis(axis, angle) {\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.multiply(_q1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateOnWorldAxis(axis, angle) {\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.premultiply(_q1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateX(angle) {\n\t\t\treturn this.rotateOnAxis(_xAxis, angle);\n\t\t}\n\n\t\trotateY(angle) {\n\t\t\treturn this.rotateOnAxis(_yAxis, angle);\n\t\t}\n\n\t\trotateZ(angle) {\n\t\t\treturn this.rotateOnAxis(_zAxis, angle);\n\t\t}\n\n\t\ttranslateOnAxis(axis, distance) {\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_v1$4.copy(axis).applyQuaternion(this.quaternion);\n\n\t\t\tthis.position.add(_v1$4.multiplyScalar(distance));\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslateX(distance) {\n\t\t\treturn this.translateOnAxis(_xAxis, distance);\n\t\t}\n\n\t\ttranslateY(distance) {\n\t\t\treturn this.translateOnAxis(_yAxis, distance);\n\t\t}\n\n\t\ttranslateZ(distance) {\n\t\t\treturn this.translateOnAxis(_zAxis, distance);\n\t\t}\n\n\t\tlocalToWorld(vector) {\n\t\t\treturn vector.applyMatrix4(this.matrixWorld);\n\t\t}\n\n\t\tworldToLocal(vector) {\n\t\t\treturn vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n\t\t}\n\n\t\tlookAt(x, y, z) {\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\t\t\tif (x.isVector3) {\n\t\t\t\t_target.copy(x);\n\t\t\t} else {\n\t\t\t\t_target.set(x, y, z);\n\t\t\t}\n\n\t\t\tconst parent = this.parent;\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_position$3.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\tif (this.isCamera || this.isLight) {\n\t\t\t\t_m1$1.lookAt(_position$3, _target, this.up);\n\t\t\t} else {\n\t\t\t\t_m1$1.lookAt(_target, _position$3, this.up);\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix(_m1$1);\n\n\t\t\tif (parent) {\n\t\t\t\t_m1$1.extractRotation(parent.matrixWorld);\n\n\t\t\t\t_q1.setFromRotationMatrix(_m1$1);\n\n\t\t\t\tthis.quaternion.premultiply(_q1.invert());\n\t\t\t}\n\t\t}\n\n\t\tadd(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.add(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object === this) {\n\t\t\t\tconsole.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object && object.isObject3D) {\n\t\t\t\tif (object.parent !== null) {\n\t\t\t\t\tobject.parent.remove(object);\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push(object);\n\t\t\t\tobject.dispatchEvent(_addedEvent);\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tremove(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.remove(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst index = this.children.indexOf(object);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice(index, 1);\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tremoveFromParent() {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tparent.remove(this);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclear() {\n\t\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\t\tconst object = this.children[i];\n\t\t\t\tobject.parent = null;\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\tthis.children.length = 0;\n\t\t\treturn this;\n\t\t}\n\n\t\tattach(object) {\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_m1$1.copy(this.matrixWorld).invert();\n\n\t\t\tif (object.parent !== null) {\n\t\t\t\tobject.parent.updateWorldMatrix(true, false);\n\n\t\t\t\t_m1$1.multiply(object.parent.matrixWorld);\n\t\t\t}\n\n\t\t\tobject.applyMatrix4(_m1$1);\n\t\t\tthis.add(object);\n\t\t\tobject.updateWorldMatrix(false, true);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetObjectById(id) {\n\t\t\treturn this.getObjectByProperty('id', id);\n\t\t}\n\n\t\tgetObjectByName(name) {\n\t\t\treturn this.getObjectByProperty('name', name);\n\t\t}\n\n\t\tgetObjectByProperty(name, value) {\n\t\t\tif (this[name] === value) return this;\n\n\t\t\tfor (let i = 0, l = this.children.length; i < l; i++) {\n\t\t\t\tconst child = this.children[i];\n\t\t\t\tconst object = child.getObjectByProperty(name, value);\n\n\t\t\t\tif (object !== undefined) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tgetWorldPosition(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldPosition() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\treturn target.setFromMatrixPosition(this.matrixWorld);\n\t\t}\n\n\t\tgetWorldQuaternion(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldQuaternion() target is now required');\n\t\t\t\ttarget = new Quaternion();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position$3, target, _scale$2);\n\t\t\treturn target;\n\t\t}\n\n\t\tgetWorldScale(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldScale() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position$3, _quaternion$2, target);\n\t\t\treturn target;\n\t\t}\n\n\t\tgetWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tconst e = this.matrixWorld.elements;\n\t\t\treturn target.set(e[8], e[9], e[10]).normalize();\n\t\t}\n\n\t\traycast() {}\n\n\t\ttraverse(callback) {\n\t\t\tcallback(this);\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverse(callback);\n\t\t\t}\n\t\t}\n\n\t\ttraverseVisible(callback) {\n\t\t\tif (this.visible === false) return;\n\t\t\tcallback(this);\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverseVisible(callback);\n\t\t\t}\n\t\t}\n\n\t\ttraverseAncestors(callback) {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tcallback(parent);\n\t\t\t\tparent.traverseAncestors(callback);\n\t\t\t}\n\t\t}\n\n\t\tupdateMatrix() {\n\t\t\tthis.matrix.compose(this.position, this.quaternion, this.scale);\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.matrixWorldNeedsUpdate || force) {\n\t\t\t\tif (this.parent === null) {\n\t\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\t\tforce = true;\n\t\t\t} // update children\n\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].updateMatrixWorld(force);\n\t\t\t}\n\t\t}\n\n\t\tupdateWorldMatrix(updateParents, updateChildren) {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (updateParents === true && parent !== null) {\n\t\t\t\tparent.updateWorldMatrix(true, false);\n\t\t\t}\n\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.parent === null) {\n\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t} else {\n\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t} // update children\n\n\n\t\t\tif (updateChildren === true) {\n\t\t\t\tconst children = this.children;\n\n\t\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateWorldMatrix(false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tconst isRootObject = meta === undefined || typeof meta === 'string';\n\t\t\tconst output = {}; // meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\n\t\t\tif (isRootObject) {\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {},\n\t\t\t\t\tskeletons: {},\n\t\t\t\t\tanimations: {}\n\t\t\t\t};\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\t\t\t} // standard Object3D serialization\n\n\n\t\t\tconst object = {};\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\t\t\tif (this.name !== '') object.name = this.name;\n\t\t\tif (this.castShadow === true) object.castShadow = true;\n\t\t\tif (this.receiveShadow === true) object.receiveShadow = true;\n\t\t\tif (this.visible === false) object.visible = false;\n\t\t\tif (this.frustumCulled === false) object.frustumCulled = false;\n\t\t\tif (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\t\t\tif (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n\t\t\tif (this.isInstancedMesh) {\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\t\tif (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();\n\t\t\t} //\n\n\n\t\t\tfunction serialize(library, element) {\n\t\t\t\tif (library[element.uuid] === undefined) {\n\t\t\t\t\tlibrary[element.uuid] = element.toJSON(meta);\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\t\t\t}\n\n\t\t\tif (this.isMesh || this.isLine || this.isPoints) {\n\t\t\t\tobject.geometry = serialize(meta.geometries, this.geometry);\n\t\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\t\tif (parameters !== undefined && parameters.shapes !== undefined) {\n\t\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\t\tif (Array.isArray(shapes)) {\n\t\t\t\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\t\t\t\tconst shape = shapes[i];\n\t\t\t\t\t\t\tserialize(meta.shapes, shape);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tserialize(meta.shapes, shapes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isSkinnedMesh) {\n\t\t\t\tobject.bindMode = this.bindMode;\n\t\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\t\tif (this.skeleton !== undefined) {\n\t\t\t\t\tserialize(meta.skeletons, this.skeleton);\n\t\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.material !== undefined) {\n\t\t\t\tif (Array.isArray(this.material)) {\n\t\t\t\t\tconst uuids = [];\n\n\t\t\t\t\tfor (let i = 0, l = this.material.length; i < l; i++) {\n\t\t\t\t\t\tuuids.push(serialize(meta.materials, this.material[i]));\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\t\t\t\t} else {\n\t\t\t\t\tobject.material = serialize(meta.materials, this.material);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.children.length > 0) {\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\t\t\tobject.children.push(this.children[i].toJSON(meta).object);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.animations.length > 0) {\n\t\t\t\tobject.animations = [];\n\n\t\t\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\t\t\tconst animation = this.animations[i];\n\t\t\t\t\tobject.animations.push(serialize(meta.animations, animation));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRootObject) {\n\t\t\t\tconst geometries = extractFromCache(meta.geometries);\n\t\t\t\tconst materials = extractFromCache(meta.materials);\n\t\t\t\tconst textures = extractFromCache(meta.textures);\n\t\t\t\tconst images = extractFromCache(meta.images);\n\t\t\t\tconst shapes = extractFromCache(meta.shapes);\n\t\t\t\tconst skeletons = extractFromCache(meta.skeletons);\n\t\t\t\tconst animations = extractFromCache(meta.animations);\n\t\t\t\tif (geometries.length > 0) output.geometries = geometries;\n\t\t\t\tif (materials.length > 0) output.materials = materials;\n\t\t\t\tif (textures.length > 0) output.textures = textures;\n\t\t\t\tif (images.length > 0) output.images = images;\n\t\t\t\tif (shapes.length > 0) output.shapes = shapes;\n\t\t\t\tif (skeletons.length > 0) output.skeletons = skeletons;\n\t\t\t\tif (animations.length > 0) output.animations = animations;\n\t\t\t}\n\n\t\t\toutput.object = object;\n\t\t\treturn output; // extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (const key in cache) {\n\t\t\t\t\tconst data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\n\t\tclone(recursive) {\n\t\t\treturn new this.constructor().copy(this, recursive);\n\t\t}\n\n\t\tcopy(source, recursive = true) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.up.copy(source.up);\n\t\t\tthis.position.copy(source.position);\n\t\t\tthis.rotation.order = source.rotation.order;\n\t\t\tthis.quaternion.copy(source.quaternion);\n\t\t\tthis.scale.copy(source.scale);\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.matrixWorld.copy(source.matrixWorld);\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\n\t\t\tif (recursive === true) {\n\t\t\t\tfor (let i = 0; i < source.children.length; i++) {\n\t\t\t\t\tconst child = source.children[i];\n\t\t\t\t\tthis.add(child.clone());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3(0, 1, 0);\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\tObject3D.prototype.isObject3D = true;\n\n\tconst _vector1 = /*@__PURE__*/new Vector3();\n\n\tconst _vector2$1 = /*@__PURE__*/new Vector3();\n\n\tconst _normalMatrix = /*@__PURE__*/new Matrix3();\n\n\tclass Plane {\n\t\tconstructor(normal = new Vector3(1, 0, 0), constant = 0) {\n\t\t\t// normal is assumed to be normalized\n\t\t\tthis.normal = normal;\n\t\t\tthis.constant = constant;\n\t\t}\n\n\t\tset(normal, constant) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = constant;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponents(x, y, z, w) {\n\t\t\tthis.normal.set(x, y, z);\n\t\t\tthis.constant = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromNormalAndCoplanarPoint(normal, point) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = -point.dot(this.normal);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCoplanarPoints(a, b, c) {\n\t\t\tconst normal = _vector1.subVectors(c, b).cross(_vector2$1.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\n\t\t\tthis.setFromNormalAndCoplanarPoint(normal, a);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(plane) {\n\t\t\tthis.normal.copy(plane.normal);\n\t\t\tthis.constant = plane.constant;\n\t\t\treturn this;\n\t\t}\n\n\t\tnormalize() {\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar(inverseNormalLength);\n\t\t\tthis.constant *= inverseNormalLength;\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.constant *= -1;\n\t\t\tthis.normal.negate();\n\t\t\treturn this;\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn this.normal.dot(point) + this.constant;\n\t\t}\n\n\t\tdistanceToSphere(sphere) {\n\t\t\treturn this.distanceToPoint(sphere.center) - sphere.radius;\n\t\t}\n\n\t\tprojectPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .projectPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n\t\t}\n\n\t\tintersectLine(line, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .intersectLine() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tconst direction = line.delta(_vector1);\n\t\t\tconst denominator = this.normal.dot(direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (this.distanceToPoint(line.start) === 0) {\n\t\t\t\t\treturn target.copy(line.start);\n\t\t\t\t} // Unsure if this is the correct method to handle this case.\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n\t\t\tif (t < 0 || t > 1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn target.copy(direction).multiplyScalar(t).add(line.start);\n\t\t}\n\n\t\tintersectsLine(line) {\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\t\tconst startSign = this.distanceToPoint(line.start);\n\t\t\tconst endSign = this.distanceToPoint(line.end);\n\t\t\treturn startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsPlane(this);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\treturn sphere.intersectsPlane(this);\n\t\t}\n\n\t\tcoplanarPoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .coplanarPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.constant);\n\t\t}\n\n\t\tapplyMatrix4(matrix, optionalNormalMatrix) {\n\t\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n\n\t\t\tconst referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n\t\t\tconst normal = this.normal.applyMatrix3(normalMatrix).normalize();\n\t\t\tthis.constant = -referencePoint.dot(normal);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.constant -= offset.dot(this.normal);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(plane) {\n\t\t\treturn plane.normal.equals(this.normal) && plane.constant === this.constant;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tPlane.prototype.isPlane = true;\n\n\tconst _v0$1 = /*@__PURE__*/new Vector3();\n\n\tconst _v1$3 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v3$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vab = /*@__PURE__*/new Vector3();\n\n\tconst _vac = /*@__PURE__*/new Vector3();\n\n\tconst _vbc = /*@__PURE__*/new Vector3();\n\n\tconst _vap = /*@__PURE__*/new Vector3();\n\n\tconst _vbp = /*@__PURE__*/new Vector3();\n\n\tconst _vcp = /*@__PURE__*/new Vector3();\n\n\tclass Triangle {\n\t\tconstructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t}\n\n\t\tstatic getNormal(a, b, c, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getNormal() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(c, b);\n\n\t\t\t_v0$1.subVectors(a, b);\n\n\t\t\ttarget.cross(_v0$1);\n\t\t\tconst targetLengthSq = target.lengthSq();\n\n\t\t\tif (targetLengthSq > 0) {\n\t\t\t\treturn target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n\t\t\t}\n\n\t\t\treturn target.set(0, 0, 0);\n\t\t} // static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n\n\t\tstatic getBarycoord(point, a, b, c, target) {\n\t\t\t_v0$1.subVectors(c, a);\n\n\t\t\t_v1$3.subVectors(b, a);\n\n\t\t\t_v2$2.subVectors(point, a);\n\n\t\t\tconst dot00 = _v0$1.dot(_v0$1);\n\n\t\t\tconst dot01 = _v0$1.dot(_v1$3);\n\n\t\t\tconst dot02 = _v0$1.dot(_v2$2);\n\n\t\t\tconst dot11 = _v1$3.dot(_v1$3);\n\n\t\t\tconst dot12 = _v1$3.dot(_v2$2);\n\n\t\t\tconst denom = dot00 * dot11 - dot01 * dot01;\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getBarycoord() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t} // collinear or singular triangle\n\n\n\t\t\tif (denom === 0) {\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set(-2, -1, -1);\n\t\t\t}\n\n\t\t\tconst invDenom = 1 / denom;\n\t\t\tconst u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\t\t\tconst v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n\t\t\treturn target.set(1 - u - v, v, u);\n\t\t}\n\n\t\tstatic containsPoint(point, a, b, c) {\n\t\t\tthis.getBarycoord(point, a, b, c, _v3$1);\n\t\t\treturn _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;\n\t\t}\n\n\t\tstatic getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n\t\t\tthis.getBarycoord(point, p1, p2, p3, _v3$1);\n\t\t\ttarget.set(0, 0);\n\t\t\ttarget.addScaledVector(uv1, _v3$1.x);\n\t\t\ttarget.addScaledVector(uv2, _v3$1.y);\n\t\t\ttarget.addScaledVector(uv3, _v3$1.z);\n\t\t\treturn target;\n\t\t}\n\n\t\tstatic isFrontFacing(a, b, c, direction) {\n\t\t\t_v0$1.subVectors(c, b);\n\n\t\t\t_v1$3.subVectors(a, b); // strictly front facing\n\n\n\t\t\treturn _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n\t\t}\n\n\t\tset(a, b, c) {\n\t\t\tthis.a.copy(a);\n\t\t\tthis.b.copy(b);\n\t\t\tthis.c.copy(c);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPointsAndIndices(points, i0, i1, i2) {\n\t\t\tthis.a.copy(points[i0]);\n\t\t\tthis.b.copy(points[i1]);\n\t\t\tthis.c.copy(points[i2]);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(triangle) {\n\t\t\tthis.a.copy(triangle.a);\n\t\t\tthis.b.copy(triangle.b);\n\t\t\tthis.c.copy(triangle.c);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetArea() {\n\t\t\t_v0$1.subVectors(this.c, this.b);\n\n\t\t\t_v1$3.subVectors(this.a, this.b);\n\n\t\t\treturn _v0$1.cross(_v1$3).length() * 0.5;\n\t\t}\n\n\t\tgetMidpoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getMidpoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n\t\t}\n\n\t\tgetNormal(target) {\n\t\t\treturn Triangle.getNormal(this.a, this.b, this.c, target);\n\t\t}\n\n\t\tgetPlane(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getPlane() target is now required');\n\t\t\t\ttarget = new Plane();\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints(this.a, this.b, this.c);\n\t\t}\n\n\t\tgetBarycoord(point, target) {\n\t\t\treturn Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n\t\t}\n\n\t\tgetUV(point, uv1, uv2, uv3, target) {\n\t\t\treturn Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn Triangle.containsPoint(point, this.a, this.b, this.c);\n\t\t}\n\n\t\tisFrontFacing(direction) {\n\t\t\treturn Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsTriangle(this);\n\t\t}\n\n\t\tclosestPointToPoint(p, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tconst a = this.a,\n\t\t\t\t\t\tb = this.b,\n\t\t\t\t\t\tc = this.c;\n\t\t\tlet v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors(b, a);\n\n\t\t\t_vac.subVectors(c, a);\n\n\t\t\t_vap.subVectors(p, a);\n\n\t\t\tconst d1 = _vab.dot(_vap);\n\n\t\t\tconst d2 = _vac.dot(_vap);\n\n\t\t\tif (d1 <= 0 && d2 <= 0) {\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy(a);\n\t\t\t}\n\n\t\t\t_vbp.subVectors(p, b);\n\n\t\t\tconst d3 = _vab.dot(_vbp);\n\n\t\t\tconst d4 = _vac.dot(_vbp);\n\n\t\t\tif (d3 >= 0 && d4 <= d3) {\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy(b);\n\t\t\t}\n\n\t\t\tconst vc = d1 * d4 - d3 * d2;\n\n\t\t\tif (vc <= 0 && d1 >= 0 && d3 <= 0) {\n\t\t\t\tv = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vab, v);\n\t\t\t}\n\n\t\t\t_vcp.subVectors(p, c);\n\n\t\t\tconst d5 = _vab.dot(_vcp);\n\n\t\t\tconst d6 = _vac.dot(_vcp);\n\n\t\t\tif (d6 >= 0 && d5 <= d6) {\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy(c);\n\t\t\t}\n\n\t\t\tconst vb = d5 * d2 - d1 * d6;\n\n\t\t\tif (vb <= 0 && d2 >= 0 && d6 <= 0) {\n\t\t\t\tw = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vac, w);\n\t\t\t}\n\n\t\t\tconst va = d3 * d6 - d5 * d4;\n\n\t\t\tif (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n\t\t\t\t_vbc.subVectors(c, b);\n\n\t\t\t\tw = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n\t\t\t\treturn target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n\t\t\t} // face region\n\n\n\t\t\tconst denom = 1 / (va + vb + vc); // u = va * denom\n\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\t\t\treturn target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n\t\t}\n\n\t\tequals(triangle) {\n\t\t\treturn triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n\t\t}\n\n\t}\n\n\tlet materialId = 0;\n\n\tclass Material extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: materialId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'Material';\n\t\t\tthis.fog = true;\n\t\t\tthis.blending = NormalBlending;\n\t\t\tthis.side = FrontSide;\n\t\t\tthis.vertexColors = false;\n\t\t\tthis.opacity = 1;\n\t\t\tthis.transparent = false;\n\t\t\tthis.blendSrc = SrcAlphaFactor;\n\t\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\t\tthis.blendEquation = AddEquation;\n\t\t\tthis.blendSrcAlpha = null;\n\t\t\tthis.blendDstAlpha = null;\n\t\t\tthis.blendEquationAlpha = null;\n\t\t\tthis.depthFunc = LessEqualDepth;\n\t\t\tthis.depthTest = true;\n\t\t\tthis.depthWrite = true;\n\t\t\tthis.stencilWriteMask = 0xff;\n\t\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\t\tthis.stencilRef = 0;\n\t\t\tthis.stencilFuncMask = 0xff;\n\t\t\tthis.stencilFail = KeepStencilOp;\n\t\t\tthis.stencilZFail = KeepStencilOp;\n\t\t\tthis.stencilZPass = KeepStencilOp;\n\t\t\tthis.stencilWrite = false;\n\t\t\tthis.clippingPlanes = null;\n\t\t\tthis.clipIntersection = false;\n\t\t\tthis.clipShadows = false;\n\t\t\tthis.shadowSide = null;\n\t\t\tthis.colorWrite = true;\n\t\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\t\tthis.polygonOffset = false;\n\t\t\tthis.polygonOffsetFactor = 0;\n\t\t\tthis.polygonOffsetUnits = 0;\n\t\t\tthis.dithering = false;\n\t\t\tthis.alphaTest = 0;\n\t\t\tthis.alphaToCoverage = false;\n\t\t\tthis.premultipliedAlpha = false;\n\t\t\tthis.visible = true;\n\t\t\tthis.toneMapped = true;\n\t\t\tthis.userData = {};\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tonBuild()\n\t\t/* shaderobject, renderer */\n\t\t{}\n\n\t\tonBeforeCompile()\n\t\t/* shaderobject, renderer */\n\t\t{}\n\n\t\tcustomProgramCacheKey() {\n\t\t\treturn this.onBeforeCompile.toString();\n\t\t}\n\n\t\tsetValues(values) {\n\t\t\tif (values === undefined) return;\n\n\t\t\tfor (const key in values) {\n\t\t\t\tconst newValue = values[key];\n\n\t\t\t\tif (newValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Material: \\'' + key + '\\' parameter is undefined.');\n\t\t\t\t\tcontinue;\n\t\t\t\t} // for backward compatability if shading is set in the constructor\n\n\n\t\t\t\tif (key === 'shading') {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\t\tthis.flatShading = newValue === FlatShading ? true : false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst currentValue = this[key];\n\n\t\t\t\tif (currentValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue && currentValue.isColor) {\n\t\t\t\t\tcurrentValue.set(newValue);\n\t\t\t\t} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n\t\t\t\t\tcurrentValue.copy(newValue);\n\t\t\t\t} else {\n\t\t\t\t\tthis[key] = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst isRoot = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (isRoot) {\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard Material serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.color && this.color.isColor) data.color = this.color.getHex();\n\t\t\tif (this.roughness !== undefined) data.roughness = this.roughness;\n\t\t\tif (this.metalness !== undefined) data.metalness = this.metalness;\n\t\t\tif (this.sheen && this.sheen.isColor) data.sheen = this.sheen.getHex();\n\t\t\tif (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n\t\t\tif (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n\t\t\tif (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n\t\t\tif (this.shininess !== undefined) data.shininess = this.shininess;\n\t\t\tif (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n\t\t\tif (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\t\tif (this.clearcoatMap && this.clearcoatMap.isTexture) {\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n\t\t\tif (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n\t\t\tif (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n\n\t\t\tif (this.lightMap && this.lightMap.isTexture) {\n\t\t\t\tdata.lightMap = this.lightMap.toJSON(meta).uuid;\n\t\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.aoMap && this.aoMap.isTexture) {\n\t\t\t\tdata.aoMap = this.aoMap.toJSON(meta).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.bumpMap && this.bumpMap.isTexture) {\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON(meta).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\t\t\t}\n\n\t\t\tif (this.normalMap && this.normalMap.isTexture) {\n\t\t\t\tdata.normalMap = this.normalMap.toJSON(meta).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.displacementMap && this.displacementMap.isTexture) {\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON(meta).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\t\t\t}\n\n\t\t\tif (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n\t\t\tif (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n\t\t\tif (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n\t\t\tif (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n\t\t\tif (this.envMap && this.envMap.isTexture) {\n\t\t\t\tdata.envMap = this.envMap.toJSON(meta).uuid;\n\t\t\t\tif (this.combine !== undefined) data.combine = this.combine;\n\t\t\t}\n\n\t\t\tif (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n\t\t\tif (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;\n\t\t\tif (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;\n\n\t\t\tif (this.gradientMap && this.gradientMap.isTexture) {\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.transmission !== undefined) data.transmission = this.transmission;\n\t\t\tif (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;\n\t\t\tif (this.thickness !== undefined) data.thickness = this.thickness;\n\t\t\tif (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;\n\t\t\tif (this.attenuationDistance !== undefined) data.attenuationDistance = this.attenuationDistance;\n\t\t\tif (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();\n\t\t\tif (this.size !== undefined) data.size = this.size;\n\t\t\tif (this.shadowSide !== null) data.shadowSide = this.shadowSide;\n\t\t\tif (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n\t\t\tif (this.blending !== NormalBlending) data.blending = this.blending;\n\t\t\tif (this.side !== FrontSide) data.side = this.side;\n\t\t\tif (this.vertexColors) data.vertexColors = true;\n\t\t\tif (this.opacity < 1) data.opacity = this.opacity;\n\t\t\tif (this.transparent === true) data.transparent = this.transparent;\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\t\t\tdata.colorWrite = this.colorWrite;\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n\t\t\tif (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n\t\t\tif (this.polygonOffset === true) data.polygonOffset = true;\n\t\t\tif (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\t\tif (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\t\t\tif (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n\t\t\tif (this.dashSize !== undefined) data.dashSize = this.dashSize;\n\t\t\tif (this.gapSize !== undefined) data.gapSize = this.gapSize;\n\t\t\tif (this.scale !== undefined) data.scale = this.scale;\n\t\t\tif (this.dithering === true) data.dithering = true;\n\t\t\tif (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n\t\t\tif (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;\n\t\t\tif (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif (this.wireframe === true) data.wireframe = this.wireframe;\n\t\t\tif (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n\t\t\tif (this.morphTargets === true) data.morphTargets = true;\n\t\t\tif (this.morphNormals === true) data.morphNormals = true;\n\t\t\tif (this.flatShading === true) data.flatShading = this.flatShading;\n\t\t\tif (this.visible === false) data.visible = false;\n\t\t\tif (this.toneMapped === false) data.toneMapped = false;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (const key in cache) {\n\t\t\t\t\tconst data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\n\t\t\tif (isRoot) {\n\t\t\t\tconst textures = extractFromCache(meta.textures);\n\t\t\t\tconst images = extractFromCache(meta.images);\n\t\t\t\tif (textures.length > 0) data.textures = textures;\n\t\t\t\tif (images.length > 0) data.images = images;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.vertexColors = source.vertexColors;\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\t\t\tconst srcPlanes = source.clippingPlanes;\n\t\t\tlet dstPlanes = null;\n\n\t\t\tif (srcPlanes !== null) {\n\t\t\t\tconst n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array(n);\n\n\t\t\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\t\t\tdstPlanes[i] = srcPlanes[i].clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.shadowSide = source.shadowSide;\n\t\t\tthis.colorWrite = source.colorWrite;\n\t\t\tthis.precision = source.precision;\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\t\tthis.dithering = source.dithering;\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.toneMapped = source.toneMapped;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t}\n\n\tMaterial.prototype.isMaterial = true;\n\n\tconst _colorKeywords = {\n\t\t'aliceblue': 0xF0F8FF,\n\t\t'antiquewhite': 0xFAEBD7,\n\t\t'aqua': 0x00FFFF,\n\t\t'aquamarine': 0x7FFFD4,\n\t\t'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC,\n\t\t'bisque': 0xFFE4C4,\n\t\t'black': 0x000000,\n\t\t'blanchedalmond': 0xFFEBCD,\n\t\t'blue': 0x0000FF,\n\t\t'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A,\n\t\t'burlywood': 0xDEB887,\n\t\t'cadetblue': 0x5F9EA0,\n\t\t'chartreuse': 0x7FFF00,\n\t\t'chocolate': 0xD2691E,\n\t\t'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED,\n\t\t'cornsilk': 0xFFF8DC,\n\t\t'crimson': 0xDC143C,\n\t\t'cyan': 0x00FFFF,\n\t\t'darkblue': 0x00008B,\n\t\t'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B,\n\t\t'darkgray': 0xA9A9A9,\n\t\t'darkgreen': 0x006400,\n\t\t'darkgrey': 0xA9A9A9,\n\t\t'darkkhaki': 0xBDB76B,\n\t\t'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F,\n\t\t'darkorange': 0xFF8C00,\n\t\t'darkorchid': 0x9932CC,\n\t\t'darkred': 0x8B0000,\n\t\t'darksalmon': 0xE9967A,\n\t\t'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B,\n\t\t'darkslategray': 0x2F4F4F,\n\t\t'darkslategrey': 0x2F4F4F,\n\t\t'darkturquoise': 0x00CED1,\n\t\t'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493,\n\t\t'deepskyblue': 0x00BFFF,\n\t\t'dimgray': 0x696969,\n\t\t'dimgrey': 0x696969,\n\t\t'dodgerblue': 0x1E90FF,\n\t\t'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0,\n\t\t'forestgreen': 0x228B22,\n\t\t'fuchsia': 0xFF00FF,\n\t\t'gainsboro': 0xDCDCDC,\n\t\t'ghostwhite': 0xF8F8FF,\n\t\t'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520,\n\t\t'gray': 0x808080,\n\t\t'green': 0x008000,\n\t\t'greenyellow': 0xADFF2F,\n\t\t'grey': 0x808080,\n\t\t'honeydew': 0xF0FFF0,\n\t\t'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C,\n\t\t'indigo': 0x4B0082,\n\t\t'ivory': 0xFFFFF0,\n\t\t'khaki': 0xF0E68C,\n\t\t'lavender': 0xE6E6FA,\n\t\t'lavenderblush': 0xFFF0F5,\n\t\t'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD,\n\t\t'lightblue': 0xADD8E6,\n\t\t'lightcoral': 0xF08080,\n\t\t'lightcyan': 0xE0FFFF,\n\t\t'lightgoldenrodyellow': 0xFAFAD2,\n\t\t'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90,\n\t\t'lightgrey': 0xD3D3D3,\n\t\t'lightpink': 0xFFB6C1,\n\t\t'lightsalmon': 0xFFA07A,\n\t\t'lightseagreen': 0x20B2AA,\n\t\t'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899,\n\t\t'lightslategrey': 0x778899,\n\t\t'lightsteelblue': 0xB0C4DE,\n\t\t'lightyellow': 0xFFFFE0,\n\t\t'lime': 0x00FF00,\n\t\t'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6,\n\t\t'magenta': 0xFF00FF,\n\t\t'maroon': 0x800000,\n\t\t'mediumaquamarine': 0x66CDAA,\n\t\t'mediumblue': 0x0000CD,\n\t\t'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB,\n\t\t'mediumseagreen': 0x3CB371,\n\t\t'mediumslateblue': 0x7B68EE,\n\t\t'mediumspringgreen': 0x00FA9A,\n\t\t'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585,\n\t\t'midnightblue': 0x191970,\n\t\t'mintcream': 0xF5FFFA,\n\t\t'mistyrose': 0xFFE4E1,\n\t\t'moccasin': 0xFFE4B5,\n\t\t'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080,\n\t\t'oldlace': 0xFDF5E6,\n\t\t'olive': 0x808000,\n\t\t'olivedrab': 0x6B8E23,\n\t\t'orange': 0xFFA500,\n\t\t'orangered': 0xFF4500,\n\t\t'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA,\n\t\t'palegreen': 0x98FB98,\n\t\t'paleturquoise': 0xAFEEEE,\n\t\t'palevioletred': 0xDB7093,\n\t\t'papayawhip': 0xFFEFD5,\n\t\t'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F,\n\t\t'pink': 0xFFC0CB,\n\t\t'plum': 0xDDA0DD,\n\t\t'powderblue': 0xB0E0E6,\n\t\t'purple': 0x800080,\n\t\t'rebeccapurple': 0x663399,\n\t\t'red': 0xFF0000,\n\t\t'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1,\n\t\t'saddlebrown': 0x8B4513,\n\t\t'salmon': 0xFA8072,\n\t\t'sandybrown': 0xF4A460,\n\t\t'seagreen': 0x2E8B57,\n\t\t'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D,\n\t\t'silver': 0xC0C0C0,\n\t\t'skyblue': 0x87CEEB,\n\t\t'slateblue': 0x6A5ACD,\n\t\t'slategray': 0x708090,\n\t\t'slategrey': 0x708090,\n\t\t'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F,\n\t\t'steelblue': 0x4682B4,\n\t\t'tan': 0xD2B48C,\n\t\t'teal': 0x008080,\n\t\t'thistle': 0xD8BFD8,\n\t\t'tomato': 0xFF6347,\n\t\t'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE,\n\t\t'wheat': 0xF5DEB3,\n\t\t'white': 0xFFFFFF,\n\t\t'whitesmoke': 0xF5F5F5,\n\t\t'yellow': 0xFFFF00,\n\t\t'yellowgreen': 0x9ACD32\n\t};\n\tconst _hslA = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\tconst _hslB = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\n\tfunction hue2rgb(p, q, t) {\n\t\tif (t < 0) t += 1;\n\t\tif (t > 1) t -= 1;\n\t\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\t\tif (t < 1 / 2) return q;\n\t\tif (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n\t\treturn p;\n\t}\n\n\tfunction SRGBToLinear(c) {\n\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t}\n\n\tfunction LinearToSRGB(c) {\n\t\treturn c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n\t}\n\n\tclass Color {\n\t\tconstructor(r, g, b) {\n\t\t\tif (g === undefined && b === undefined) {\n\t\t\t\t// r is THREE.Color, hex or string\n\t\t\t\treturn this.set(r);\n\t\t\t}\n\n\t\t\treturn this.setRGB(r, g, b);\n\t\t}\n\n\t\tset(value) {\n\t\t\tif (value && value.isColor) {\n\t\t\t\tthis.copy(value);\n\t\t\t} else if (typeof value === 'number') {\n\t\t\t\tthis.setHex(value);\n\t\t\t} else if (typeof value === 'string') {\n\t\t\t\tthis.setStyle(value);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetHex(hex) {\n\t\t\thex = Math.floor(hex);\n\t\t\tthis.r = (hex >> 16 & 255) / 255;\n\t\t\tthis.g = (hex >> 8 & 255) / 255;\n\t\t\tthis.b = (hex & 255) / 255;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRGB(r, g, b) {\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetHSL(h, s, l) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = euclideanModulo(h, 1);\n\t\t\ts = clamp(s, 0, 1);\n\t\t\tl = clamp(l, 0, 1);\n\n\t\t\tif (s === 0) {\n\t\t\t\tthis.r = this.g = this.b = l;\n\t\t\t} else {\n\t\t\t\tconst p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\t\tconst q = 2 * l - p;\n\t\t\t\tthis.r = hue2rgb(q, p, h + 1 / 3);\n\t\t\t\tthis.g = hue2rgb(q, p, h);\n\t\t\t\tthis.b = hue2rgb(q, p, h - 1 / 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetStyle(style) {\n\t\t\tfunction handleAlpha(string) {\n\t\t\t\tif (string === undefined) return;\n\n\t\t\t\tif (parseFloat(string) < 1) {\n\t\t\t\t\tconsole.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet m;\n\n\t\t\tif (m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(style)) {\n\t\t\t\t// rgb / hsl\n\t\t\t\tlet color;\n\t\t\t\tconst name = m[1];\n\t\t\t\tconst components = m[2];\n\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(255, parseInt(color[1], 10)) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min(255, parseInt(color[2], 10)) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min(255, parseInt(color[3], 10)) / 255;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(100, parseInt(color[1], 10)) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min(100, parseInt(color[2], 10)) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min(100, parseInt(color[3], 10)) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\t\t\t\t\t\tif (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tconst h = parseFloat(color[1]) / 360;\n\t\t\t\t\t\t\tconst s = parseInt(color[2], 10) / 100;\n\t\t\t\t\t\t\tconst l = parseInt(color[3], 10) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this.setHSL(h, s, l);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n\t\t\t\t// hex color\n\t\t\t\tconst hex = m[1];\n\t\t\t\tconst size = hex.length;\n\n\t\t\t\tif (size === 3) {\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t} else if (size === 6) {\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style && style.length > 0) {\n\t\t\t\treturn this.setColorName(style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetColorName(style) {\n\t\t\t// color keywords\n\t\t\tconst hex = _colorKeywords[style.toLowerCase()];\n\n\t\t\tif (hex !== undefined) {\n\t\t\t\t// red\n\t\t\t\tthis.setHex(hex);\n\t\t\t} else {\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn('THREE.Color: Unknown color ' + style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.r, this.g, this.b);\n\t\t}\n\n\t\tcopy(color) {\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyGammaToLinear(color, gammaFactor = 2.0) {\n\t\t\tthis.r = Math.pow(color.r, gammaFactor);\n\t\t\tthis.g = Math.pow(color.g, gammaFactor);\n\t\t\tthis.b = Math.pow(color.b, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyLinearToGamma(color, gammaFactor = 2.0) {\n\t\t\tconst safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n\t\t\tthis.r = Math.pow(color.r, safeInverse);\n\t\t\tthis.g = Math.pow(color.g, safeInverse);\n\t\t\tthis.b = Math.pow(color.b, safeInverse);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertGammaToLinear(gammaFactor) {\n\t\t\tthis.copyGammaToLinear(this, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertLinearToGamma(gammaFactor) {\n\t\t\tthis.copyLinearToGamma(this, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopySRGBToLinear(color) {\n\t\t\tthis.r = SRGBToLinear(color.r);\n\t\t\tthis.g = SRGBToLinear(color.g);\n\t\t\tthis.b = SRGBToLinear(color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyLinearToSRGB(color) {\n\t\t\tthis.r = LinearToSRGB(color.r);\n\t\t\tthis.g = LinearToSRGB(color.g);\n\t\t\tthis.b = LinearToSRGB(color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertSRGBToLinear() {\n\t\t\tthis.copySRGBToLinear(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertLinearToSRGB() {\n\t\t\tthis.copyLinearToSRGB(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetHex() {\n\t\t\treturn this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n\t\t}\n\n\t\tgetHexString() {\n\t\t\treturn ('000000' + this.getHex().toString(16)).slice(-6);\n\t\t}\n\n\t\tgetHSL(target) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Color: .getHSL() target is now required');\n\t\t\t\ttarget = {\n\t\t\t\t\th: 0,\n\t\t\t\t\ts: 0,\n\t\t\t\t\tl: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst r = this.r,\n\t\t\t\t\t\tg = this.g,\n\t\t\t\t\t\tb = this.b;\n\t\t\tconst max = Math.max(r, g, b);\n\t\t\tconst min = Math.min(r, g, b);\n\t\t\tlet hue, saturation;\n\t\t\tconst lightness = (min + max) / 2.0;\n\n\t\t\tif (min === max) {\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\t\t\t} else {\n\t\t\t\tconst delta = max - min;\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase r:\n\t\t\t\t\t\thue = (g - b) / delta + (g < b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase g:\n\t\t\t\t\t\thue = (b - r) / delta + 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase b:\n\t\t\t\t\t\thue = (r - g) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\t\t\treturn target;\n\t\t}\n\n\t\tgetStyle() {\n\t\t\treturn 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n\t\t}\n\n\t\toffsetHSL(h, s, l) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\t_hslA.h += h;\n\t\t\t_hslA.s += s;\n\t\t\t_hslA.l += l;\n\t\t\tthis.setHSL(_hslA.h, _hslA.s, _hslA.l);\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(color) {\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\taddColors(color1, color2) {\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(color) {\n\t\t\tthis.r = Math.max(0, this.r - color.r);\n\t\t\tthis.g = Math.max(0, this.g - color.g);\n\t\t\tthis.b = Math.max(0, this.b - color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(color) {\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerp(color, alpha) {\n\t\t\tthis.r += (color.r - this.r) * alpha;\n\t\t\tthis.g += (color.g - this.g) * alpha;\n\t\t\tthis.b += (color.b - this.b) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpColors(color1, color2, alpha) {\n\t\t\tthis.r = color1.r + (color2.r - color1.r) * alpha;\n\t\t\tthis.g = color1.g + (color2.g - color1.g) * alpha;\n\t\t\tthis.b = color1.b + (color2.b - color1.b) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpHSL(color, alpha) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\tcolor.getHSL(_hslB);\n\t\t\tconst h = lerp(_hslA.h, _hslB.h, alpha);\n\t\t\tconst s = lerp(_hslA.s, _hslB.s, alpha);\n\t\t\tconst l = lerp(_hslA.l, _hslB.l, alpha);\n\t\t\tthis.setHSL(h, s, l);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(c) {\n\t\t\treturn c.r === this.r && c.g === this.g && c.b === this.b;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.r = array[offset];\n\t\t\tthis.g = array[offset + 1];\n\t\t\tthis.b = array[offset + 2];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.r;\n\t\t\tarray[offset + 1] = this.g;\n\t\t\tarray[offset + 2] = this.b;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index) {\n\t\t\tthis.r = attribute.getX(index);\n\t\t\tthis.g = attribute.getY(index);\n\t\t\tthis.b = attribute.getZ(index);\n\n\t\t\tif (attribute.normalized === true) {\n\t\t\t\t// assuming Uint8Array\n\t\t\t\tthis.r /= 255;\n\t\t\t\tthis.g /= 255;\n\t\t\t\tthis.b /= 255;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn this.getHex();\n\t\t}\n\n\t}\n\n\tColor.NAMES = _colorKeywords;\n\tColor.prototype.isColor = true;\n\tColor.prototype.r = 1;\n\tColor.prototype.g = 1;\n\tColor.prototype.b = 1;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\tdepthTest: <bool>,\n\t *\tdepthWrite: <bool>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tclass MeshBasicMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshBasicMaterial';\n\t\t\tthis.color = new Color(0xffffff); // emissive\n\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tconst _vector$9 = /*@__PURE__*/new Vector3();\n\n\tconst _vector2 = /*@__PURE__*/new Vector2();\n\n\tclass BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tif (Array.isArray(array)) {\n\t\t\t\tthrow new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n\t\t\t}\n\n\t\t\tthis.name = '';\n\t\t\tthis.array = array;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\t\tthis.normalized = normalized === true;\n\t\t\tthis.usage = StaticDrawUsage;\n\t\t\tthis.updateRange = {\n\t\t\t\toffset: 0,\n\t\t\t\tcount: -1\n\t\t\t};\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tonUploadCallback() {}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor (let i = 0, l = this.itemSize; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyArray(array) {\n\t\t\tthis.array.set(array);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyColorsArray(colors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = colors.length; i < l; i++) {\n\t\t\t\tlet color = colors[i];\n\n\t\t\t\tif (color === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n\t\t\t\t\tcolor = new Color();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = color.r;\n\t\t\t\tarray[offset++] = color.g;\n\t\t\t\tarray[offset++] = color.b;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector2sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector2();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector3sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector3();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector4sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector4();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t\tarray[offset++] = vector.w;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tif (this.itemSize === 2) {\n\t\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector2.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector2.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXY(i, _vector2.x, _vector2.y);\n\t\t\t\t}\n\t\t\t} else if (this.itemSize === 3) {\n\t\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector$9.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector$9.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(value, offset = 0) {\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetX(index) {\n\t\t\treturn this.array[index * this.itemSize];\n\t\t}\n\n\t\tsetX(index, x) {\n\t\t\tthis.array[index * this.itemSize] = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetY(index) {\n\t\t\treturn this.array[index * this.itemSize + 1];\n\t\t}\n\n\t\tsetY(index, y) {\n\t\t\tthis.array[index * this.itemSize + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetZ(index) {\n\t\t\treturn this.array[index * this.itemSize + 2];\n\t\t}\n\n\t\tsetZ(index, z) {\n\t\t\tthis.array[index * this.itemSize + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetW(index) {\n\t\t\treturn this.array[index * this.itemSize + 3];\n\t\t}\n\n\t\tsetW(index, w) {\n\t\t\tthis.array[index * this.itemSize + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXY(index, x, y) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZ(index, x, y, z) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZW(index, x, y, z, w) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\tthis.array[index + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tonUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.array, this.itemSize).copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call(this.array),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.usage !== StaticDrawUsage) data.usage = this.usage;\n\t\t\tif (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tBufferAttribute.prototype.isBufferAttribute = true; //\n\n\tclass Int8BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int8Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint8BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint8Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint8ClampedArray(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Int16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Int32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Float16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tFloat16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\n\tclass Float32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Float32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Float64BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Float64Array(array), itemSize, normalized);\n\t\t}\n\n\t} //\n\n\tfunction arrayMax(array) {\n\t\tif (array.length === 0) return -Infinity;\n\t\tlet max = array[0];\n\n\t\tfor (let i = 1, l = array.length; i < l; ++i) {\n\t\t\tif (array[i] > max) max = array[i];\n\t\t}\n\n\t\treturn max;\n\t}\n\n\tconst TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\tUint8ClampedArray: Uint8ClampedArray,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\tfunction getTypedArray(type, buffer) {\n\t\treturn new TYPED_ARRAYS[type](buffer);\n\t}\n\n\tlet _id = 0;\n\n\tconst _m1 = /*@__PURE__*/new Matrix4();\n\n\tconst _obj = /*@__PURE__*/new Object3D();\n\n\tconst _offset = /*@__PURE__*/new Vector3();\n\n\tconst _box$1 = /*@__PURE__*/new Box3();\n\n\tconst _boxMorphTargets = /*@__PURE__*/new Box3();\n\n\tconst _vector$8 = /*@__PURE__*/new Vector3();\n\n\tclass BufferGeometry extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: _id++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'BufferGeometry';\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.morphTargetsRelative = false;\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\t\t\tthis.drawRange = {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: Infinity\n\t\t\t};\n\t\t\tthis.userData = {};\n\t\t}\n\n\t\tgetIndex() {\n\t\t\treturn this.index;\n\t\t}\n\n\t\tsetIndex(index) {\n\t\t\tif (Array.isArray(index)) {\n\t\t\t\tthis.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n\t\t\t} else {\n\t\t\t\tthis.index = index;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetAttribute(name) {\n\t\t\treturn this.attributes[name];\n\t\t}\n\n\t\tsetAttribute(name, attribute) {\n\t\t\tthis.attributes[name] = attribute;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeleteAttribute(name) {\n\t\t\tdelete this.attributes[name];\n\t\t\treturn this;\n\t\t}\n\n\t\thasAttribute(name) {\n\t\t\treturn this.attributes[name] !== undefined;\n\t\t}\n\n\t\taddGroup(start, count, materialIndex = 0) {\n\t\t\tthis.groups.push({\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex\n\t\t\t});\n\t\t}\n\n\t\tclearGroups() {\n\t\t\tthis.groups = [];\n\t\t}\n\n\t\tsetDrawRange(start, count) {\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tconst position = this.attributes.position;\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tposition.needsUpdate = true;\n\t\t\t}\n\n\t\t\tconst normal = this.attributes.normal;\n\n\t\t\tif (normal !== undefined) {\n\t\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\t\t\t\tnormal.applyNormalMatrix(normalMatrix);\n\t\t\t\tnormal.needsUpdate = true;\n\t\t\t}\n\n\t\t\tconst tangent = this.attributes.tangent;\n\n\t\t\tif (tangent !== undefined) {\n\t\t\t\ttangent.transformDirection(matrix);\n\t\t\t\ttangent.needsUpdate = true;\n\t\t\t}\n\n\t\t\tif (this.boundingBox !== null) {\n\t\t\t\tthis.computeBoundingBox();\n\t\t\t}\n\n\t\t\tif (this.boundingSphere !== null) {\n\t\t\t\tthis.computeBoundingSphere();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\t_m1.makeRotationFromQuaternion(q);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateX(angle) {\n\t\t\t// rotate geometry around world x-axis\n\t\t\t_m1.makeRotationX(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateY(angle) {\n\t\t\t// rotate geometry around world y-axis\n\t\t\t_m1.makeRotationY(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateZ(angle) {\n\t\t\t// rotate geometry around world z-axis\n\t\t\t_m1.makeRotationZ(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(x, y, z) {\n\t\t\t// translate geometry\n\t\t\t_m1.makeTranslation(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(x, y, z) {\n\t\t\t// scale geometry\n\t\t\t_m1.makeScale(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\tlookAt(vector) {\n\t\t\t_obj.lookAt(vector);\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4(_obj.matrix);\n\t\t\treturn this;\n\t\t}\n\n\t\tcenter() {\n\t\t\tthis.computeBoundingBox();\n\t\t\tthis.boundingBox.getCenter(_offset).negate();\n\t\t\tthis.translate(_offset.x, _offset.y, _offset.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tconst position = [];\n\n\t\t\tfor (let i = 0, l = points.length; i < l; i++) {\n\t\t\t\tconst point = points[i];\n\t\t\t\tposition.push(point.x, point.y, point.z || 0);\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(position, 3));\n\t\t\treturn this;\n\t\t}\n\n\t\tcomputeBoundingBox() {\n\t\t\tif (this.boundingBox === null) {\n\t\t\t\tthis.boundingBox = new Box3();\n\t\t\t}\n\n\t\t\tconst position = this.attributes.position;\n\t\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tthis.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_box$1.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$8.addVectors(this.boundingBox.min, _box$1.min);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$8);\n\n\t\t\t\t\t\t\t_vector$8.addVectors(this.boundingBox.max, _box$1.max);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$8);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$1.min);\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$1.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.boundingBox.makeEmpty();\n\t\t\t}\n\n\t\t\tif (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t}\n\t\t}\n\n\t\tcomputeBoundingSphere() {\n\t\t\tif (this.boundingSphere === null) {\n\t\t\t\tthis.boundingSphere = new Sphere();\n\t\t\t}\n\n\t\t\tconst position = this.attributes.position;\n\t\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingSphere.set(new Vector3(), Infinity);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position) {\n\t\t\t\t// first, find the center of the bounding sphere\n\t\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t\t_box$1.setFromBufferAttribute(position); // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$8.addVectors(_box$1.min, _boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_vector$8);\n\n\t\t\t\t\t\t\t_vector$8.addVectors(_box$1.max, _boxMorphTargets.max);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_vector$8);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_box$1.expandByPoint(_boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_boxMorphTargets.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_box$1.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\n\t\t\t\tlet maxRadiusSq = 0;\n\n\t\t\t\tfor (let i = 0, il = position.count; i < il; i++) {\n\t\t\t\t\t_vector$8.fromBufferAttribute(position, i);\n\n\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n\t\t\t\t} // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\t\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor (let j = 0, jl = morphAttribute.count; j < jl; j++) {\n\t\t\t\t\t\t\t_vector$8.fromBufferAttribute(morphAttribute, j);\n\n\t\t\t\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute(position, j);\n\n\t\t\t\t\t\t\t\t_vector$8.add(_offset);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n\t\t\t\tif (isNaN(this.boundingSphere.radius)) {\n\t\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcomputeFaceNormals() {// backwards compatibility\n\t\t}\n\n\t\tcomputeTangents() {\n\t\t\tconst index = this.index;\n\t\t\tconst attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html\n\t\t\t// (per vertex tangents)\n\n\t\t\tif (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst indices = index.array;\n\t\t\tconst positions = attributes.position.array;\n\t\t\tconst normals = attributes.normal.array;\n\t\t\tconst uvs = attributes.uv.array;\n\t\t\tconst nVertices = positions.length / 3;\n\n\t\t\tif (attributes.tangent === undefined) {\n\t\t\t\tthis.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));\n\t\t\t}\n\n\t\t\tconst tangents = attributes.tangent.array;\n\t\t\tconst tan1 = [],\n\t\t\t\t\t\ttan2 = [];\n\n\t\t\tfor (let i = 0; i < nVertices; i++) {\n\t\t\t\ttan1[i] = new Vector3();\n\t\t\t\ttan2[i] = new Vector3();\n\t\t\t}\n\n\t\t\tconst vA = new Vector3(),\n\t\t\t\t\t\tvB = new Vector3(),\n\t\t\t\t\t\tvC = new Vector3(),\n\t\t\t\t\t\tuvA = new Vector2(),\n\t\t\t\t\t\tuvB = new Vector2(),\n\t\t\t\t\t\tuvC = new Vector2(),\n\t\t\t\t\t\tsdir = new Vector3(),\n\t\t\t\t\t\ttdir = new Vector3();\n\n\t\t\tfunction handleTriangle(a, b, c) {\n\t\t\t\tvA.fromArray(positions, a * 3);\n\t\t\t\tvB.fromArray(positions, b * 3);\n\t\t\t\tvC.fromArray(positions, c * 3);\n\t\t\t\tuvA.fromArray(uvs, a * 2);\n\t\t\t\tuvB.fromArray(uvs, b * 2);\n\t\t\t\tuvC.fromArray(uvs, c * 2);\n\t\t\t\tvB.sub(vA);\n\t\t\t\tvC.sub(vA);\n\t\t\t\tuvB.sub(uvA);\n\t\t\t\tuvC.sub(uvA);\n\t\t\t\tconst r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\t\tif (!isFinite(r)) return;\n\t\t\t\tsdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n\t\t\t\ttdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n\t\t\t\ttan1[a].add(sdir);\n\t\t\t\ttan1[b].add(sdir);\n\t\t\t\ttan1[c].add(sdir);\n\t\t\t\ttan2[a].add(tdir);\n\t\t\t\ttan2[b].add(tdir);\n\t\t\t\ttan2[c].add(tdir);\n\t\t\t}\n\n\t\t\tlet groups = this.groups;\n\n\t\t\tif (groups.length === 0) {\n\t\t\t\tgroups = [{\n\t\t\t\t\tstart: 0,\n\t\t\t\t\tcount: indices.length\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tfor (let i = 0, il = groups.length; i < il; ++i) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst start = group.start;\n\t\t\t\tconst count = group.count;\n\n\t\t\t\tfor (let j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst tmp = new Vector3(),\n\t\t\t\t\t\ttmp2 = new Vector3();\n\t\t\tconst n = new Vector3(),\n\t\t\t\t\t\tn2 = new Vector3();\n\n\t\t\tfunction handleVertex(v) {\n\t\t\t\tn.fromArray(normals, v * 3);\n\t\t\t\tn2.copy(n);\n\t\t\t\tconst t = tan1[v]; // Gram-Schmidt orthogonalize\n\n\t\t\t\ttmp.copy(t);\n\t\t\t\ttmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness\n\n\t\t\t\ttmp2.crossVectors(n2, t);\n\t\t\t\tconst test = tmp2.dot(tan2[v]);\n\t\t\t\tconst w = test < 0.0 ? -1.0 : 1.0;\n\t\t\t\ttangents[v * 4] = tmp.x;\n\t\t\t\ttangents[v * 4 + 1] = tmp.y;\n\t\t\t\ttangents[v * 4 + 2] = tmp.z;\n\t\t\t\ttangents[v * 4 + 3] = w;\n\t\t\t}\n\n\t\t\tfor (let i = 0, il = groups.length; i < il; ++i) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst start = group.start;\n\t\t\t\tconst count = group.count;\n\n\t\t\t\tfor (let j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleVertex(indices[j + 0]);\n\t\t\t\t\thandleVertex(indices[j + 1]);\n\t\t\t\t\thandleVertex(indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcomputeVertexNormals() {\n\t\t\tconst index = this.index;\n\t\t\tconst positionAttribute = this.getAttribute('position');\n\n\t\t\tif (positionAttribute !== undefined) {\n\t\t\t\tlet normalAttribute = this.getAttribute('normal');\n\n\t\t\t\tif (normalAttribute === undefined) {\n\t\t\t\t\tnormalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n\t\t\t\t\tthis.setAttribute('normal', normalAttribute);\n\t\t\t\t} else {\n\t\t\t\t\t// reset existing normals to zero\n\t\t\t\t\tfor (let i = 0, il = normalAttribute.count; i < il; i++) {\n\t\t\t\t\t\tnormalAttribute.setXYZ(i, 0, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst pA = new Vector3(),\n\t\t\t\t\t\t\tpB = new Vector3(),\n\t\t\t\t\t\t\tpC = new Vector3();\n\t\t\t\tconst nA = new Vector3(),\n\t\t\t\t\t\t\tnB = new Vector3(),\n\t\t\t\t\t\t\tnC = new Vector3();\n\t\t\t\tconst cb = new Vector3(),\n\t\t\t\t\t\t\tab = new Vector3(); // indexed elements\n\n\t\t\t\tif (index) {\n\t\t\t\t\tfor (let i = 0, il = index.count; i < il; i += 3) {\n\t\t\t\t\t\tconst vA = index.getX(i + 0);\n\t\t\t\t\t\tconst vB = index.getX(i + 1);\n\t\t\t\t\t\tconst vC = index.getX(i + 2);\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, vA);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, vB);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, vC);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnA.fromBufferAttribute(normalAttribute, vA);\n\t\t\t\t\t\tnB.fromBufferAttribute(normalAttribute, vB);\n\t\t\t\t\t\tnC.fromBufferAttribute(normalAttribute, vC);\n\t\t\t\t\t\tnA.add(cb);\n\t\t\t\t\t\tnB.add(cb);\n\t\t\t\t\t\tnC.add(cb);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\t\t\t\tfor (let i = 0, il = positionAttribute.count; i < il; i += 3) {\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, i + 0);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, i + 1);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, i + 2);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tmerge(geometry, offset) {\n\t\t\tif (!(geometry && geometry.isBufferGeometry)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (offset === undefined) {\n\t\t\t\toffset = 0;\n\t\t\t\tconsole.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');\n\t\t\t}\n\n\t\t\tconst attributes = this.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tif (geometry.attributes[key] === undefined) continue;\n\t\t\t\tconst attribute1 = attributes[key];\n\t\t\t\tconst attributeArray1 = attribute1.array;\n\t\t\t\tconst attribute2 = geometry.attributes[key];\n\t\t\t\tconst attributeArray2 = attribute2.array;\n\t\t\t\tconst attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tconst length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\n\n\t\t\t\tfor (let i = 0, j = attributeOffset; i < length; i++, j++) {\n\t\t\t\t\tattributeArray1[j] = attributeArray2[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tnormalizeNormals() {\n\t\t\tconst normals = this.attributes.normal;\n\n\t\t\tfor (let i = 0, il = normals.count; i < il; i++) {\n\t\t\t\t_vector$8.fromBufferAttribute(normals, i);\n\n\t\t\t\t_vector$8.normalize();\n\n\t\t\t\tnormals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);\n\t\t\t}\n\t\t}\n\n\t\ttoNonIndexed() {\n\t\t\tfunction convertBufferAttribute(attribute, indices) {\n\t\t\t\tconst array = attribute.array;\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst normalized = attribute.normalized;\n\t\t\t\tconst array2 = new array.constructor(indices.length * itemSize);\n\t\t\t\tlet index = 0,\n\t\t\t\t\t\tindex2 = 0;\n\n\t\t\t\tfor (let i = 0, l = indices.length; i < l; i++) {\n\t\t\t\t\tindex = indices[i] * itemSize;\n\n\t\t\t\t\tfor (let j = 0; j < itemSize; j++) {\n\t\t\t\t\t\tarray2[index2++] = array[index++];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(array2, itemSize, normalized);\n\t\t\t} //\n\n\n\t\t\tif (this.index === null) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst geometry2 = new BufferGeometry();\n\t\t\tconst indices = this.index.array;\n\t\t\tconst attributes = this.attributes; // attributes\n\n\t\t\tfor (const name in attributes) {\n\t\t\t\tconst attribute = attributes[name];\n\t\t\t\tconst newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\tgeometry2.setAttribute(name, newAttribute);\n\t\t\t} // morph attributes\n\n\n\t\t\tconst morphAttributes = this.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst morphArray = [];\n\t\t\t\tconst morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (let i = 0, il = morphAttribute.length; i < il; i++) {\n\t\t\t\t\tconst attribute = morphAttribute[i];\n\t\t\t\t\tconst newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\t\tmorphArray.push(newAttribute);\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[name] = morphArray;\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative; // groups\n\n\t\t\tconst groups = this.groups;\n\n\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tgeometry2.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t}\n\n\t\t\treturn geometry2;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n\t\t\tif (this.parameters !== undefined) {\n\t\t\t\tconst parameters = this.parameters;\n\n\t\t\t\tfor (const key in parameters) {\n\t\t\t\t\tif (parameters[key] !== undefined) data[key] = parameters[key];\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t} // for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\n\t\t\tdata.data = {\n\t\t\t\tattributes: {}\n\t\t\t};\n\t\t\tconst index = this.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call(index.array)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst attributes = this.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tdata.data.attributes[key] = attribute.toJSON(data.data);\n\t\t\t}\n\n\t\t\tconst morphAttributes = {};\n\t\t\tlet hasMorphAttributes = false;\n\n\t\t\tfor (const key in this.morphAttributes) {\n\t\t\t\tconst attributeArray = this.morphAttributes[key];\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\tconst attribute = attributeArray[i];\n\t\t\t\t\tarray.push(attribute.toJSON(data.data));\n\t\t\t\t}\n\n\t\t\t\tif (array.length > 0) {\n\t\t\t\t\tmorphAttributes[key] = array;\n\t\t\t\t\thasMorphAttributes = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasMorphAttributes) {\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\t\t\t}\n\n\t\t\tconst groups = this.groups;\n\n\t\t\tif (groups.length > 0) {\n\t\t\t\tdata.data.groups = JSON.parse(JSON.stringify(groups));\n\t\t\t}\n\n\t\t\tconst boundingSphere = this.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tclone() {\n\t\t\t/*\n\t\t\t // Handle primitives\n\t\t\t\t const parameters = this.parameters;\n\t\t\t\t if ( parameters !== undefined ) {\n\t\t\t\t const values = [];\n\t\t\t\t for ( const key in parameters ) {\n\t\t\t\t values.push( parameters[ key ] );\n\t\t\t\t }\n\t\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\t\t\t\t }\n\t\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\t\t\treturn new BufferGeometry().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\t// reset\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // used for storing cloned, shared data\n\n\t\t\tconst data = {}; // name\n\n\t\t\tthis.name = source.name; // index\n\n\t\t\tconst index = source.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tthis.setIndex(index.clone(data));\n\t\t\t} // attributes\n\n\n\t\t\tconst attributes = source.attributes;\n\n\t\t\tfor (const name in attributes) {\n\t\t\t\tconst attribute = attributes[name];\n\t\t\t\tthis.setAttribute(name, attribute.clone(data));\n\t\t\t} // morph attributes\n\n\n\t\t\tconst morphAttributes = source.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst array = [];\n\t\t\t\tconst morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (let i = 0, l = morphAttribute.length; i < l; i++) {\n\t\t\t\t\tarray.push(morphAttribute[i].clone(data));\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[name] = array;\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative; // groups\n\n\t\t\tconst groups = source.groups;\n\n\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tthis.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t} // bounding box\n\n\n\t\t\tconst boundingBox = source.boundingBox;\n\n\t\t\tif (boundingBox !== null) {\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\t\t\t} // bounding sphere\n\n\n\t\t\tconst boundingSphere = source.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\t\t\t} // draw range\n\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count; // user data\n\n\t\t\tthis.userData = source.userData;\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tBufferGeometry.prototype.isBufferGeometry = true;\n\n\tconst _inverseMatrix$2 = /*@__PURE__*/new Matrix4();\n\n\tconst _ray$2 = /*@__PURE__*/new Ray();\n\n\tconst _sphere$3 = /*@__PURE__*/new Sphere();\n\n\tconst _vA$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vB$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vC$1 = /*@__PURE__*/new Vector3();\n\n\tconst _tempA = /*@__PURE__*/new Vector3();\n\n\tconst _tempB = /*@__PURE__*/new Vector3();\n\n\tconst _tempC = /*@__PURE__*/new Vector3();\n\n\tconst _morphA = /*@__PURE__*/new Vector3();\n\n\tconst _morphB = /*@__PURE__*/new Vector3();\n\n\tconst _morphC = /*@__PURE__*/new Vector3();\n\n\tconst _uvA$1 = /*@__PURE__*/new Vector2();\n\n\tconst _uvB$1 = /*@__PURE__*/new Vector2();\n\n\tconst _uvC$1 = /*@__PURE__*/new Vector2();\n\n\tconst _intersectionPoint = /*@__PURE__*/new Vector3();\n\n\tconst _intersectionPointWorld = /*@__PURE__*/new Vector3();\n\n\tclass Mesh extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Mesh';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\n\t\t\tif (source.morphTargetInfluences !== undefined) {\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\t\t\t}\n\n\t\t\tif (source.morphTargetDictionary !== undefined) {\n\t\t\t\tthis.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst material = this.material;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tif (material === undefined) return; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$3.applyMatrix4(matrixWorld);\n\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //\n\n\t\t\t_inverseMatrix$2.copy(matrixWorld).invert();\n\n\t\t\t_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2); // Check boundingBox before continuing\n\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tif (_ray$2.intersectsBox(geometry.boundingBox) === false) return;\n\t\t\t}\n\n\t\t\tlet intersection;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tconst uv = geometry.attributes.uv;\n\t\t\t\tconst uv2 = geometry.attributes.uv2;\n\t\t\t\tconst groups = geometry.groups;\n\t\t\t\tconst drawRange = geometry.drawRange;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\t// indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tconst start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tconst end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (let j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tconst a = index.getX(j);\n\t\t\t\t\t\t\t\tconst b = index.getX(j + 1);\n\t\t\t\t\t\t\t\tconst c = index.getX(j + 2);\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (let i = start, il = end; i < il; i += 3) {\n\t\t\t\t\t\t\tconst a = index.getX(i);\n\t\t\t\t\t\t\tconst b = index.getX(i + 1);\n\t\t\t\t\t\t\tconst c = index.getX(i + 2);\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (position !== undefined) {\n\t\t\t\t\t// non-indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tconst start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tconst end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (let j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\t\t\tconst c = j + 2;\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\t\tconst end = Math.min(position.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (let i = start, il = end; i < il; i += 3) {\n\t\t\t\t\t\t\tconst a = i;\n\t\t\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\t\t\tconst c = i + 2;\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t}\n\n\tMesh.prototype.isMesh = true;\n\n\tfunction checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n\t\tlet intersect;\n\n\t\tif (material.side === BackSide) {\n\t\t\tintersect = ray.intersectTriangle(pC, pB, pA, true, point);\n\t\t} else {\n\t\t\tintersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n\t\t}\n\n\t\tif (intersect === null) return null;\n\n\t\t_intersectionPointWorld.copy(point);\n\n\t\t_intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n\t\tconst distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n\t\tif (distance < raycaster.near || distance > raycaster.far) return null;\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\t}\n\n\tfunction checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n\t\t_vA$1.fromBufferAttribute(position, a);\n\n\t\t_vB$1.fromBufferAttribute(position, b);\n\n\t\t_vC$1.fromBufferAttribute(position, c);\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif (material.morphTargets && morphPosition && morphInfluences) {\n\t\t\t_morphA.set(0, 0, 0);\n\n\t\t\t_morphB.set(0, 0, 0);\n\n\t\t\t_morphC.set(0, 0, 0);\n\n\t\t\tfor (let i = 0, il = morphPosition.length; i < il; i++) {\n\t\t\t\tconst influence = morphInfluences[i];\n\t\t\t\tconst morphAttribute = morphPosition[i];\n\t\t\t\tif (influence === 0) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute(morphAttribute, a);\n\n\t\t\t\t_tempB.fromBufferAttribute(morphAttribute, b);\n\n\t\t\t\t_tempC.fromBufferAttribute(morphAttribute, c);\n\n\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t_morphA.addScaledVector(_tempA, influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB, influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC, influence);\n\t\t\t\t} else {\n\t\t\t\t\t_morphA.addScaledVector(_tempA.sub(_vA$1), influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB.sub(_vB$1), influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC.sub(_vC$1), influence);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_vA$1.add(_morphA);\n\n\t\t\t_vB$1.add(_morphB);\n\n\t\t\t_vC$1.add(_morphC);\n\t\t}\n\n\t\tif (object.isSkinnedMesh) {\n\t\t\tobject.boneTransform(a, _vA$1);\n\t\t\tobject.boneTransform(b, _vB$1);\n\t\t\tobject.boneTransform(c, _vC$1);\n\t\t}\n\n\t\tconst intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);\n\n\t\tif (intersection) {\n\t\t\tif (uv) {\n\t\t\t\t_uvA$1.fromBufferAttribute(uv, a);\n\n\t\t\t\t_uvB$1.fromBufferAttribute(uv, b);\n\n\t\t\t\t_uvC$1.fromBufferAttribute(uv, c);\n\n\t\t\t\tintersection.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n\t\t\t}\n\n\t\t\tif (uv2) {\n\t\t\t\t_uvA$1.fromBufferAttribute(uv2, a);\n\n\t\t\t\t_uvB$1.fromBufferAttribute(uv2, b);\n\n\t\t\t\t_uvC$1.fromBufferAttribute(uv2, c);\n\n\t\t\t\tintersection.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n\t\t\t}\n\n\t\t\tconst face = {\n\t\t\t\ta: a,\n\t\t\t\tb: b,\n\t\t\t\tc: c,\n\t\t\t\tnormal: new Vector3(),\n\t\t\t\tmaterialIndex: 0\n\t\t\t};\n\t\t\tTriangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);\n\t\t\tintersection.face = face;\n\t\t}\n\n\t\treturn intersection;\n\t}\n\n\tclass BoxGeometry extends BufferGeometry {\n\t\tconstructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'BoxGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\t\t\tconst scope = this; // segments\n\n\t\t\twidthSegments = Math.floor(widthSegments);\n\t\t\theightSegments = Math.floor(heightSegments);\n\t\t\tdepthSegments = Math.floor(depthSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet numberOfVertices = 0;\n\t\t\tlet groupStart = 0; // build each side of the box geometry\n\n\t\t\tbuildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n\t\t\tbuildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n\t\t\tbuildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n\t\t\tbuildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n\t\t\t\tconst segmentWidth = width / gridX;\n\t\t\t\tconst segmentHeight = height / gridY;\n\t\t\t\tconst widthHalf = width / 2;\n\t\t\t\tconst heightHalf = height / 2;\n\t\t\t\tconst depthHalf = depth / 2;\n\t\t\t\tconst gridX1 = gridX + 1;\n\t\t\t\tconst gridY1 = gridY + 1;\n\t\t\t\tlet vertexCounter = 0;\n\t\t\t\tlet groupCount = 0;\n\t\t\t\tconst vector = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\t\tfor (let iy = 0; iy < gridY1; iy++) {\n\t\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor (let ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\t\tconst x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = x * udir;\n\t\t\t\t\t\tvector[v] = y * vdir;\n\t\t\t\t\t\tvector[w] = depthHalf; // now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push(vector.x, vector.y, vector.z); // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = 0;\n\t\t\t\t\t\tvector[v] = 0;\n\t\t\t\t\t\tvector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push(vector.x, vector.y, vector.z); // uvs\n\n\t\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\t\tuvs.push(1 - iy / gridY); // counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\t\t\t\t\t}\n\t\t\t\t} // indices\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\n\t\t\t\tfor (let iy = 0; iy < gridY; iy++) {\n\t\t\t\t\tfor (let ix = 0; ix < gridX; ix++) {\n\t\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * (iy + 1);\n\t\t\t\t\t\tconst c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n\t\t\t\t\t\tconst d = numberOfVertices + (ix + 1) + gridX1 * iy; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount; // update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Uniform Utilities\n\t */\n\tfunction cloneUniforms(src) {\n\t\tconst dst = {};\n\n\t\tfor (const u in src) {\n\t\t\tdst[u] = {};\n\n\t\t\tfor (const p in src[u]) {\n\t\t\t\tconst property = src[u][p];\n\n\t\t\t\tif (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {\n\t\t\t\t\tdst[u][p] = property.clone();\n\t\t\t\t} else if (Array.isArray(property)) {\n\t\t\t\t\tdst[u][p] = property.slice();\n\t\t\t\t} else {\n\t\t\t\t\tdst[u][p] = property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\tfunction mergeUniforms(uniforms) {\n\t\tconst merged = {};\n\n\t\tfor (let u = 0; u < uniforms.length; u++) {\n\t\t\tconst tmp = cloneUniforms(uniforms[u]);\n\n\t\t\tfor (const p in tmp) {\n\t\t\t\tmerged[p] = tmp[p];\n\t\t\t}\n\t\t}\n\n\t\treturn merged;\n\t} // Legacy\n\n\tconst UniformsUtils = {\n\t\tclone: cloneUniforms,\n\t\tmerge: mergeUniforms\n\t};\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * parameters = {\n\t *\tdefines: { \"label\" : \"value\" },\n\t *\tuniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *\tfragmentShader: <string>,\n\t *\tvertexShader: <string>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tlights: <bool>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tclass ShaderMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShaderMaterial';\n\t\t\tthis.defines = {};\n\t\t\tthis.uniforms = {};\n\t\t\tthis.vertexShader = default_vertex;\n\t\t\tthis.fragmentShader = default_fragment;\n\t\t\tthis.linewidth = 1;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false; // set to use scene fog\n\n\t\t\tthis.lights = false; // set to use scene lights\n\n\t\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\t\tthis.morphTargets = false; // set to use morph targets\n\n\t\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\t\tthis.extensions = {\n\t\t\t\tderivatives: false,\n\t\t\t\t// set to use derivatives\n\t\t\t\tfragDepth: false,\n\t\t\t\t// set to use fragment depth values\n\t\t\t\tdrawBuffers: false,\n\t\t\t\t// set to use draw buffers\n\t\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\n\t\t\t}; // When rendered geometry doesn't include these attributes but the material does,\n\t\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\n\t\t\tthis.defaultAttributeValues = {\n\t\t\t\t'color': [1, 1, 1],\n\t\t\t\t'uv': [0, 0],\n\t\t\t\t'uv2': [0, 0]\n\t\t\t};\n\t\t\tthis.index0AttributeName = undefined;\n\t\t\tthis.uniformsNeedUpdate = false;\n\t\t\tthis.glslVersion = null;\n\n\t\t\tif (parameters !== undefined) {\n\t\t\t\tif (parameters.attributes !== undefined) {\n\t\t\t\t\tconsole.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n\t\t\t\t}\n\n\t\t\t\tthis.setValues(parameters);\n\t\t\t}\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.fragmentShader = source.fragmentShader;\n\t\t\tthis.vertexShader = source.vertexShader;\n\t\t\tthis.uniforms = cloneUniforms(source.uniforms);\n\t\t\tthis.defines = Object.assign({}, source.defines);\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.lights = source.lights;\n\t\t\tthis.clipping = source.clipping;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.extensions = Object.assign({}, source.extensions);\n\t\t\tthis.glslVersion = source.glslVersion;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.glslVersion = this.glslVersion;\n\t\t\tdata.uniforms = {};\n\n\t\t\tfor (const name in this.uniforms) {\n\t\t\t\tconst uniform = this.uniforms[name];\n\t\t\t\tconst value = uniform.value;\n\n\t\t\t\tif (value && value.isTexture) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 't',\n\t\t\t\t\t\tvalue: value.toJSON(meta).uuid\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isColor) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'c',\n\t\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector2) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v2',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector3) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v3',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector4) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v4',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isMatrix3) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'm3',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isMatrix4) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'm4',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Object.keys(this.defines).length > 0) data.defines = this.defines;\n\t\t\tdata.vertexShader = this.vertexShader;\n\t\t\tdata.fragmentShader = this.fragmentShader;\n\t\t\tconst extensions = {};\n\n\t\t\tfor (const key in this.extensions) {\n\t\t\t\tif (this.extensions[key] === true) extensions[key] = true;\n\t\t\t}\n\n\t\t\tif (Object.keys(extensions).length > 0) data.extensions = extensions;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tclass Camera extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Camera';\n\t\t\tthis.matrixWorldInverse = new Matrix4();\n\t\t\tthis.projectionMatrix = new Matrix4();\n\t\t\tthis.projectionMatrixInverse = new Matrix4();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.matrixWorldInverse.copy(source.matrixWorldInverse);\n\t\t\tthis.projectionMatrix.copy(source.projectionMatrix);\n\t\t\tthis.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Camera: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tconst e = this.matrixWorld.elements;\n\t\t\treturn target.set(-e[8], -e[9], -e[10]).normalize();\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t}\n\n\t\tupdateWorldMatrix(updateParents, updateChildren) {\n\t\t\tsuper.updateWorldMatrix(updateParents, updateChildren);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tCamera.prototype.isCamera = true;\n\n\tclass PerspectiveCamera extends Camera {\n\t\tconstructor(fov = 50, aspect = 1, near = 0.1, far = 2000) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PerspectiveCamera';\n\t\t\tthis.fov = fov;\n\t\t\tthis.zoom = 1;\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.focus = 10;\n\t\t\tthis.aspect = aspect;\n\t\t\tthis.view = null;\n\t\t\tthis.filmGauge = 35; // width of the film (default in millimeters)\n\n\t\t\tthis.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\n\n\t\tsetFocalLength(focalLength) {\n\t\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\t\tthis.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\n\n\t\tgetFocalLength() {\n\t\t\tconst vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\t}\n\n\t\tgetEffectiveFOV() {\n\t\t\treturn RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);\n\t\t}\n\n\t\tgetFilmWidth() {\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min(this.aspect, 1);\n\t\t}\n\n\t\tgetFilmHeight() {\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max(this.aspect, 1);\n\t\t}\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *\t +---+---+---+\n\t\t *\t | A | B | C |\n\t\t *\t +---+---+---+\n\t\t *\t | D | E | F |\n\t\t *\t +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *\t const w = 1920;\n\t\t *\t const h = 1080;\n\t\t *\t const fullWidth = w * 3;\n\t\t *\t const fullHeight = h * 2;\n\t\t *\n\t\t *\t --A--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *\t --B--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *\t --C--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *\t --D--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *\t --E--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *\t --F--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *\t Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\n\n\t\tsetViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tclearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tupdateProjectionMatrix() {\n\t\t\tconst near = this.near;\n\t\t\tlet top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;\n\t\t\tlet height = 2 * top;\n\t\t\tlet width = this.aspect * height;\n\t\t\tlet left = -0.5 * width;\n\t\t\tconst view = this.view;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\t\t\t\tfullHeight = view.fullHeight;\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\t\t\t}\n\n\t\t\tconst skew = this.filmOffset;\n\t\t\tif (skew !== 0) left += near * skew / this.getFilmWidth();\n\t\t\tthis.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\t\t\tdata.object.aspect = this.aspect;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tPerspectiveCamera.prototype.isPerspectiveCamera = true;\n\n\tconst fov = 90,\n\t\t\t\taspect = 1;\n\n\tclass CubeCamera extends Object3D {\n\t\tconstructor(near, far, renderTarget) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubeCamera';\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget !== true) {\n\t\t\t\tconsole.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.renderTarget = renderTarget;\n\t\t\tconst cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPX.layers = this.layers;\n\t\t\tcameraPX.up.set(0, -1, 0);\n\t\t\tcameraPX.lookAt(new Vector3(1, 0, 0));\n\t\t\tthis.add(cameraPX);\n\t\t\tconst cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNX.layers = this.layers;\n\t\t\tcameraNX.up.set(0, -1, 0);\n\t\t\tcameraNX.lookAt(new Vector3(-1, 0, 0));\n\t\t\tthis.add(cameraNX);\n\t\t\tconst cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPY.layers = this.layers;\n\t\t\tcameraPY.up.set(0, 0, 1);\n\t\t\tcameraPY.lookAt(new Vector3(0, 1, 0));\n\t\t\tthis.add(cameraPY);\n\t\t\tconst cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNY.layers = this.layers;\n\t\t\tcameraNY.up.set(0, 0, -1);\n\t\t\tcameraNY.lookAt(new Vector3(0, -1, 0));\n\t\t\tthis.add(cameraNY);\n\t\t\tconst cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPZ.layers = this.layers;\n\t\t\tcameraPZ.up.set(0, -1, 0);\n\t\t\tcameraPZ.lookAt(new Vector3(0, 0, 1));\n\t\t\tthis.add(cameraPZ);\n\t\t\tconst cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNZ.layers = this.layers;\n\t\t\tcameraNZ.up.set(0, -1, 0);\n\t\t\tcameraNZ.lookAt(new Vector3(0, 0, -1));\n\t\t\tthis.add(cameraNZ);\n\t\t}\n\n\t\tupdate(renderer, scene) {\n\t\t\tif (this.parent === null) this.updateMatrixWorld();\n\t\t\tconst renderTarget = this.renderTarget;\n\t\t\tconst [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;\n\t\t\tconst currentXrEnabled = renderer.xr.enabled;\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\trenderer.xr.enabled = false;\n\t\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\t\t\trenderer.setRenderTarget(renderTarget, 0);\n\t\t\trenderer.render(scene, cameraPX);\n\t\t\trenderer.setRenderTarget(renderTarget, 1);\n\t\t\trenderer.render(scene, cameraNX);\n\t\t\trenderer.setRenderTarget(renderTarget, 2);\n\t\t\trenderer.render(scene, cameraPY);\n\t\t\trenderer.setRenderTarget(renderTarget, 3);\n\t\t\trenderer.render(scene, cameraNY);\n\t\t\trenderer.setRenderTarget(renderTarget, 4);\n\t\t\trenderer.render(scene, cameraPZ);\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\t\trenderer.setRenderTarget(renderTarget, 5);\n\t\t\trenderer.render(scene, cameraNZ);\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t}\n\n\t}\n\n\tclass CubeTexture extends Texture {\n\t\tconstructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\t\timages = images !== undefined ? images : [];\n\t\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\t\tformat = format !== undefined ? format : RGBFormat;\n\t\t\tsuper(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding); // Why CubeTexture._needsFlipEnvMap is necessary:\n\t\t\t//\n\t\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\t\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t\t// and the flag _needsFlipEnvMap controls this conversion. The flip is not required (and thus _needsFlipEnvMap is set to false)\n\t\t\t// when using WebGLCubeRenderTarget.texture as a cube texture.\n\n\t\t\tthis._needsFlipEnvMap = true;\n\t\t\tthis.flipY = false;\n\t\t}\n\n\t\tget images() {\n\t\t\treturn this.image;\n\t\t}\n\n\t\tset images(value) {\n\t\t\tthis.image = value;\n\t\t}\n\n\t}\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\t\tconstructor(size, options, dummy) {\n\t\t\tif (Number.isInteger(options)) {\n\t\t\t\tconsole.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');\n\t\t\t\toptions = dummy;\n\t\t\t}\n\n\t\t\tsuper(size, size, options);\n\t\t\toptions = options || {};\n\t\t\tthis.texture = new CubeTexture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\tthis.texture._needsFlipEnvMap = false;\n\t\t}\n\n\t\tfromEquirectangularTexture(renderer, texture) {\n\t\t\tthis.texture.type = texture.type;\n\t\t\tthis.texture.format = RGBAFormat; // see #18859\n\n\t\t\tthis.texture.encoding = texture.encoding;\n\t\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\t\tthis.texture.minFilter = texture.minFilter;\n\t\t\tthis.texture.magFilter = texture.magFilter;\n\t\t\tconst shader = {\n\t\t\t\tuniforms: {\n\t\t\t\t\ttEquirect: {\n\t\t\t\t\t\tvalue: null\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tvertexShader:\n\t\t\t\t/* glsl */\n\t\t\t\t`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\tfragmentShader:\n\t\t\t\t/* glsl */\n\t\t\t\t`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t\t};\n\t\t\tconst geometry = new BoxGeometry(5, 5, 5);\n\t\t\tconst material = new ShaderMaterial({\n\t\t\t\tname: 'CubemapFromEquirect',\n\t\t\t\tuniforms: cloneUniforms(shader.uniforms),\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\t\tside: BackSide,\n\t\t\t\tblending: NoBlending\n\t\t\t});\n\t\t\tmaterial.uniforms.tEquirect.value = texture;\n\t\t\tconst mesh = new Mesh(geometry, material);\n\t\t\tconst currentMinFilter = texture.minFilter; // Avoid blurred poles\n\n\t\t\tif (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n\t\t\tconst camera = new CubeCamera(1, 10, this);\n\t\t\tcamera.update(renderer, mesh);\n\t\t\ttexture.minFilter = currentMinFilter;\n\t\t\tmesh.geometry.dispose();\n\t\t\tmesh.material.dispose();\n\t\t\treturn this;\n\t\t}\n\n\t\tclear(renderer, color, depth, stencil) {\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\trenderer.setRenderTarget(this, i);\n\t\t\t\trenderer.clear(color, depth, stencil);\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t}\n\n\t}\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tconst _sphere$2 = /*@__PURE__*/new Sphere();\n\n\tconst _vector$7 = /*@__PURE__*/new Vector3();\n\n\tclass Frustum {\n\t\tconstructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {\n\t\t\tthis.planes = [p0, p1, p2, p3, p4, p5];\n\t\t}\n\n\t\tset(p0, p1, p2, p3, p4, p5) {\n\t\t\tconst planes = this.planes;\n\t\t\tplanes[0].copy(p0);\n\t\t\tplanes[1].copy(p1);\n\t\t\tplanes[2].copy(p2);\n\t\t\tplanes[3].copy(p3);\n\t\t\tplanes[4].copy(p4);\n\t\t\tplanes[5].copy(p5);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(frustum) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tplanes[i].copy(frustum.planes[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromProjectionMatrix(m) {\n\t\t\tconst planes = this.planes;\n\t\t\tconst me = m.elements;\n\t\t\tconst me0 = me[0],\n\t\t\t\t\t\tme1 = me[1],\n\t\t\t\t\t\tme2 = me[2],\n\t\t\t\t\t\tme3 = me[3];\n\t\t\tconst me4 = me[4],\n\t\t\t\t\t\tme5 = me[5],\n\t\t\t\t\t\tme6 = me[6],\n\t\t\t\t\t\tme7 = me[7];\n\t\t\tconst me8 = me[8],\n\t\t\t\t\t\tme9 = me[9],\n\t\t\t\t\t\tme10 = me[10],\n\t\t\t\t\t\tme11 = me[11];\n\t\t\tconst me12 = me[12],\n\t\t\t\t\t\tme13 = me[13],\n\t\t\t\t\t\tme14 = me[14],\n\t\t\t\t\t\tme15 = me[15];\n\t\t\tplanes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n\t\t\tplanes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n\t\t\tplanes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n\t\t\tplanes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n\t\t\tplanes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n\t\t\tplanes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n\t\t\treturn this;\n\t\t}\n\n\t\tintersectsObject(object) {\n\t\t\tconst geometry = object.geometry;\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$2);\n\t\t}\n\n\t\tintersectsSprite(sprite) {\n\t\t\t_sphere$2.center.set(0, 0, 0);\n\n\t\t\t_sphere$2.radius = 0.7071067811865476;\n\n\t\t\t_sphere$2.applyMatrix4(sprite.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$2);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\tconst planes = this.planes;\n\t\t\tconst center = sphere.center;\n\t\t\tconst negRadius = -sphere.radius;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst distance = planes[i].distanceToPoint(center);\n\n\t\t\t\tif (distance < negRadius) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst plane = planes[i]; // corner at max distance\n\n\t\t\t\t_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif (plane.distanceToPoint(_vector$7) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tif (planes[i].distanceToPoint(point) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tfunction WebGLAnimation() {\n\t\tlet context = null;\n\t\tlet isAnimating = false;\n\t\tlet animationLoop = null;\n\t\tlet requestId = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tanimationLoop(time, frame);\n\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t}\n\n\t\treturn {\n\t\t\tstart: function () {\n\t\t\t\tif (isAnimating === true) return;\n\t\t\t\tif (animationLoop === null) return;\n\t\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t\t\tisAnimating = true;\n\t\t\t},\n\t\t\tstop: function () {\n\t\t\t\tcontext.cancelAnimationFrame(requestId);\n\t\t\t\tisAnimating = false;\n\t\t\t},\n\t\t\tsetAnimationLoop: function (callback) {\n\t\t\t\tanimationLoop = callback;\n\t\t\t},\n\t\t\tsetContext: function (value) {\n\t\t\t\tcontext = value;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLAttributes(gl, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst buffers = new WeakMap();\n\n\t\tfunction createBuffer(attribute, bufferType) {\n\t\t\tconst array = attribute.array;\n\t\t\tconst usage = attribute.usage;\n\t\t\tconst buffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\t\t\tgl.bufferData(bufferType, array, usage);\n\t\t\tattribute.onUploadCallback();\n\t\t\tlet type = gl.FLOAT;\n\n\t\t\tif (array instanceof Float32Array) {\n\t\t\t\ttype = gl.FLOAT;\n\t\t\t} else if (array instanceof Float64Array) {\n\t\t\t\tconsole.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\n\t\t\t} else if (array instanceof Uint16Array) {\n\t\t\t\tif (attribute.isFloat16BufferAttribute) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\ttype = gl.HALF_FLOAT;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\t\t\t\t}\n\t\t\t} else if (array instanceof Int16Array) {\n\t\t\t\ttype = gl.SHORT;\n\t\t\t} else if (array instanceof Uint32Array) {\n\t\t\t\ttype = gl.UNSIGNED_INT;\n\t\t\t} else if (array instanceof Int32Array) {\n\t\t\t\ttype = gl.INT;\n\t\t\t} else if (array instanceof Int8Array) {\n\t\t\t\ttype = gl.BYTE;\n\t\t\t} else if (array instanceof Uint8Array) {\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\t\t\t} else if (array instanceof Uint8ClampedArray) {\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\t\t}\n\n\t\tfunction updateBuffer(buffer, attribute, bufferType) {\n\t\t\tconst array = attribute.array;\n\t\t\tconst updateRange = attribute.updateRange;\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\n\t\t\tif (updateRange.count === -1) {\n\t\t\t\t// Not using update ranges\n\t\t\t\tgl.bufferSubData(bufferType, 0, array);\n\t\t\t} else {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = -1; // reset range\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction get(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\treturn buffers.get(attribute);\n\t\t}\n\n\t\tfunction remove(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tconst data = buffers.get(attribute);\n\n\t\t\tif (data) {\n\t\t\t\tgl.deleteBuffer(data.buffer);\n\t\t\t\tbuffers.delete(attribute);\n\t\t\t}\n\t\t}\n\n\t\tfunction update(attribute, bufferType) {\n\t\t\tif (attribute.isGLBufferAttribute) {\n\t\t\t\tconst cached = buffers.get(attribute);\n\n\t\t\t\tif (!cached || cached.version < attribute.version) {\n\t\t\t\t\tbuffers.set(attribute, {\n\t\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\t\tversion: attribute.version\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tconst data = buffers.get(attribute);\n\n\t\t\tif (data === undefined) {\n\t\t\t\tbuffers.set(attribute, createBuffer(attribute, bufferType));\n\t\t\t} else if (data.version < attribute.version) {\n\t\t\t\tupdateBuffer(data.buffer, attribute, bufferType);\n\t\t\t\tdata.version = attribute.version;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tclass PlaneGeometry extends BufferGeometry {\n\t\tconstructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PlaneGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\t\t\tconst width_half = width / 2;\n\t\t\tconst height_half = height / 2;\n\t\t\tconst gridX = Math.floor(widthSegments);\n\t\t\tconst gridY = Math.floor(heightSegments);\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\t\t\tconst segment_width = width / gridX;\n\t\t\tconst segment_height = height / gridY; //\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\n\t\t\tfor (let iy = 0; iy < gridY1; iy++) {\n\t\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\t\tfor (let ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\tconst x = ix * segment_width - width_half;\n\t\t\t\t\tvertices.push(x, -y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\tuvs.push(1 - iy / gridY);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let iy = 0; iy < gridY; iy++) {\n\t\t\t\tfor (let ix = 0; ix < gridX; ix++) {\n\t\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\t\tconst b = ix + gridX1 * (iy + 1);\n\t\t\t\t\tconst c = ix + 1 + gridX1 * (iy + 1);\n\t\t\t\t\tconst d = ix + 1 + gridX1 * iy;\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = - mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), rawDiffuseColor, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), rawDiffuseColor, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularRoughness;\\n\\tvec3 specularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(\t\t0, 1,\t\t0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(\t1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,\t1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,\t1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSNMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition.xyz / vWorldPosition.w;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n\\tfloat ior = ( 1.0 + 0.4 * reflectivity ) / ( 1.0 - 0.4 * reflectivity );\\n\\tvec3 f0 = vec3( pow( ior - 1.0, 2.0 ) / pow( ior + 1.0, 2.0 ) );\\n\\tvec3 f90 = vec3( 1.0 );\\n\\tvec3 f_transmission = totalTransmission * getIBLVolumeRefraction(\\n\\t\\tnormal, v, viewDir, roughnessFactor, diffuseColor.rgb, f0, f90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationColor, attenuationDistance);\\n\\tdiffuseColor.rgb = mix( diffuseColor.rgb, f_transmission, totalTransmission );\\n#endif\";\n\n\tvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec4 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay(vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix) {\\n\\t\\tvec3 refractionVector = refract(-v, normalize(n), 1.0 / ior);\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length(vec3(modelMatrix[0].xyz));\\n\\t\\tmodelScale.y = length(vec3(modelMatrix[1].xyz));\\n\\t\\tmodelScale.z = length(vec3(modelMatrix[2].xyz));\\n\\t\\treturn normalize(refractionVector) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness(float roughness, float ior) {\\n\\t\\treturn roughness * clamp(ior * 2.0 - 2.0, 0.0, 1.0);\\n\\t}\\n\\tvec3 getTransmissionSample(vec2 fragCoord, float roughness, float ior) {\\n\\t\\tfloat framebufferLod = log2(transmissionSamplerSize.x) * applyIorToRoughness(roughness, ior);\\n\\t\\treturn texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod).rgb;\\n\\t}\\n\\tvec3 applyVolumeAttenuation(vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance) {\\n\\t\\tif (attenuationDistance == 0.0) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log(attenuationColor) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp(-attenuationCoefficient * transmissionDistance);\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec3 getIBLVolumeRefraction(vec3 n, vec3 v, vec3 viewDir, float perceptualRoughness, vec3 baseColor, vec3 f0, vec3 f90,\\n\\t\\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness, vec3 attenuationColor, float attenuationDistance) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay(n, v, thickness, ior, modelMatrix);\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4(refractedRayExit, 1.0);\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec3 transmittedLight = getTransmissionSample(refractionCoords, perceptualRoughness, ior);\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation(transmittedLight, length(transmissionRay), attenuationColor, attenuationDistance);\\n\\t\\tfloat NdotV = saturate(dot(n, viewDir));\\n\\t\\tvec2 brdf = integrateSpecularBRDF(NdotV, perceptualRoughness);\\n\\t\\tvec3 specularColor = f0 * brdf.x + f90 * brdf.y;\\n\\t\\treturn (1.0 - specularColor) * attenuatedColor * baseColor;\\n\\t}\\n#endif\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform vec3 attenuationColor;\\n\\tuniform float attenuationDistance;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <transmission_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#ifdef USE_TRANSMISSION\\n\\t\\tfloat totalTransmission = transmission;\\n\\t\\tfloat thicknessFactor = thickness;\\n\\t#endif\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\tvec3 rawDiffuseColor = diffuseColor.rgb;\\n\\t#include <transmission_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec4 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition;\\n#endif\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tconst ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\ttransmission_fragment: transmission_fragment,\n\t\ttransmission_pars_fragment: transmission_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tconst UniformsLib = {\n\t\tcommon: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\tuv2Transform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tspecularmap: {\n\t\t\tspecularMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tenvmap: {\n\t\t\tenvMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tflipEnvMap: {\n\t\t\t\tvalue: -1\n\t\t\t},\n\t\t\treflectivity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\trefractionRatio: {\n\t\t\t\tvalue: 0.98\n\t\t\t},\n\t\t\tmaxMipLevel: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\taomap: {\n\t\t\taoMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\taoMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tlightmap: {\n\t\t\tlightMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tlightMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\temissivemap: {\n\t\t\temissiveMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tbumpmap: {\n\t\t\tbumpMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tbumpScale: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tnormalmap: {\n\t\t\tnormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tnormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t}\n\t\t},\n\t\tdisplacementmap: {\n\t\t\tdisplacementMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tdisplacementScale: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tdisplacementBias: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\troughnessmap: {\n\t\t\troughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tmetalnessmap: {\n\t\t\tmetalnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tgradientmap: {\n\t\t\tgradientMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tfog: {\n\t\t\tfogDensity: {\n\t\t\t\tvalue: 0.00025\n\t\t\t},\n\t\t\tfogNear: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tfogFar: {\n\t\t\t\tvalue: 2000\n\t\t\t},\n\t\t\tfogColor: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t}\n\t\t},\n\t\tlights: {\n\t\t\tambientLightColor: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tlightProbe: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tcolor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tdistance: {},\n\t\t\t\t\tconeCos: {},\n\t\t\t\t\tpenumbraCos: {},\n\t\t\t\t\tdecay: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdecay: {},\n\t\t\t\t\tdistance: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {},\n\t\t\t\t\tshadowCameraNear: {},\n\t\t\t\t\tshadowCameraFar: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\themisphereLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tskyColor: {},\n\t\t\t\t\tgroundColor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\twidth: {},\n\t\t\t\t\theight: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tltc_1: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tltc_2: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tpoints: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t},\n\t\tsprite: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tcenter: {\n\t\t\t\tvalue: new Vector2(0.5, 0.5)\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tvalue: 0.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t}\n\t};\n\n\tconst ShaderLib = {\n\t\tbasic: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\t},\n\t\tlambert: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\t},\n\t\tphong: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\tspecular: {\n\t\t\t\t\tvalue: new Color(0x111111)\n\t\t\t\t},\n\t\t\t\tshininess: {\n\t\t\t\t\tvalue: 30\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\t},\n\t\tstandard: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\troughness: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t},\n\t\t\t\tmetalness: {\n\t\t\t\t\tvalue: 0.0\n\t\t\t\t},\n\t\t\t\tenvMapIntensity: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t} // temporary\n\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\t},\n\t\ttoon: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\t\t},\n\t\tmatcap: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {\n\t\t\t\tmatcap: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\t\t},\n\t\tpoints: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\t\t},\n\t\tdashed: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {\n\t\t\t\tscale: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tdashSize: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\ttotalSize: {\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\t},\n\t\tdepth: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\t\t},\n\t\tnormal: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\t\t},\n\t\tsprite: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\t\t},\n\t\tbackground: {\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t},\n\t\t\t\tt2D: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\t\tcube: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.envmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\t\t},\n\t\tequirect: {\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\t\t},\n\t\tdistanceRGBA: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {\n\t\t\t\treferencePosition: {\n\t\t\t\t\tvalue: new Vector3()\n\t\t\t\t},\n\t\t\t\tnearDistance: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tfarDistance: {\n\t\t\t\t\tvalue: 1000\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\t},\n\t\tshadow: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {\n\t\t\t\tcolor: {\n\t\t\t\t\tvalue: new Color(0x00000)\n\t\t\t\t},\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\t\t}\n\t};\n\tShaderLib.physical = {\n\t\tuniforms: mergeUniforms([ShaderLib.standard.uniforms, {\n\t\t\tclearcoat: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatRoughness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatRoughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatNormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t},\n\t\t\tclearcoatNormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tsheen: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t},\n\t\t\ttransmission: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\ttransmissionMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\ttransmissionSamplerSize: {\n\t\t\t\tvalue: new Vector2()\n\t\t\t},\n\t\t\ttransmissionSamplerMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tthickness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tthicknessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tattenuationDistance: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tattenuationColor: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t}\n\t\t}]),\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t};\n\n\tfunction WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\n\t\tconst clearColor = new Color(0x000000);\n\t\tlet clearAlpha = 0;\n\t\tlet planeMesh;\n\t\tlet boxMesh;\n\t\tlet currentBackground = null;\n\t\tlet currentBackgroundVersion = 0;\n\t\tlet currentTonemapping = null;\n\n\t\tfunction render(renderList, scene) {\n\t\t\tlet forceClear = false;\n\t\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\t\tif (background && background.isTexture) {\n\t\t\t\tbackground = cubemaps.get(background);\n\t\t\t} // Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\n\t\t\tconst xr = renderer.xr;\n\t\t\tconst session = xr.getSession && xr.getSession();\n\n\t\t\tif (session && session.environmentBlendMode === 'additive') {\n\t\t\t\tbackground = null;\n\t\t\t}\n\n\t\t\tif (background === null) {\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t} else if (background && background.isColor) {\n\t\t\t\tsetClear(background, 1);\n\t\t\t\tforceClear = true;\n\t\t\t}\n\n\t\t\tif (renderer.autoClear || forceClear) {\n\t\t\t\trenderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\t}\n\n\t\t\tif (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {\n\t\t\t\tif (boxMesh === undefined) {\n\t\t\t\t\tboxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.cube.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('normal');\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('uv');\n\n\t\t\t\t\tboxMesh.onBeforeRender = function (renderer, scene, camera) {\n\t\t\t\t\t\tthis.matrixWorld.copyPosition(camera.matrixWorld);\n\t\t\t\t\t}; // enable code injection for non-built-in material\n\n\n\t\t\t\t\tObject.defineProperty(boxMesh.material, 'envMap', {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(boxMesh);\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n\t\t\t} else if (background && background.isTexture) {\n\t\t\t\tif (planeMesh === undefined) {\n\t\t\t\t\tplaneMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.background.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n\t\t\t\t\tObject.defineProperty(planeMesh.material, 'map', {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(planeMesh);\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif (background.matrixAutoUpdate === true) {\n\t\t\t\t\tbackground.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction setClear(color, alpha) {\n\t\t\tstate.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n\t\t}\n\n\t\treturn {\n\t\t\tgetClearColor: function () {\n\t\t\t\treturn clearColor;\n\t\t\t},\n\t\t\tsetClearColor: function (color, alpha = 1) {\n\t\t\t\tclearColor.set(color);\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\t\t\t\treturn clearAlpha;\n\t\t\t},\n\t\t\tsetClearAlpha: function (alpha) {\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\trender: render\n\t\t};\n\t}\n\n\tfunction WebGLBindingStates(gl, extensions, attributes, capabilities) {\n\t\tconst maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\t\tconst extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');\n\t\tconst vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\t\tconst bindingStates = {};\n\t\tconst defaultState = createBindingState(null);\n\t\tlet currentState = defaultState;\n\n\t\tfunction setup(object, material, program, geometry, index) {\n\t\t\tlet updateBuffers = false;\n\n\t\t\tif (vaoAvailable) {\n\t\t\t\tconst state = getBindingState(geometry, program, material);\n\n\t\t\t\tif (currentState !== state) {\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject(currentState.object);\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate(geometry, index);\n\t\t\t\tif (updateBuffers) saveCache(geometry, index);\n\t\t\t} else {\n\t\t\t\tconst wireframe = material.wireframe === true;\n\n\t\t\t\tif (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\t\t\t\t\tupdateBuffers = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh === true) {\n\t\t\t\tupdateBuffers = true;\n\t\t\t}\n\n\t\t\tif (index !== null) {\n\t\t\t\tattributes.update(index, gl.ELEMENT_ARRAY_BUFFER);\n\t\t\t}\n\n\t\t\tif (updateBuffers) {\n\t\t\t\tsetupVertexAttributes(object, material, program, geometry);\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\t\t\tif (capabilities.isWebGL2) return gl.createVertexArray();\n\t\t\treturn extension.createVertexArrayOES();\n\t\t}\n\n\t\tfunction bindVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.bindVertexArray(vao);\n\t\t\treturn extension.bindVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction deleteVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.deleteVertexArray(vao);\n\t\t\treturn extension.deleteVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction getBindingState(geometry, program, material) {\n\t\t\tconst wireframe = material.wireframe === true;\n\t\t\tlet programMap = bindingStates[geometry.id];\n\n\t\t\tif (programMap === undefined) {\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[geometry.id] = programMap;\n\t\t\t}\n\n\t\t\tlet stateMap = programMap[program.id];\n\n\t\t\tif (stateMap === undefined) {\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[program.id] = stateMap;\n\t\t\t}\n\n\t\t\tlet state = stateMap[wireframe];\n\n\t\t\tif (state === undefined) {\n\t\t\t\tstate = createBindingState(createVertexArrayObject());\n\t\t\t\tstateMap[wireframe] = state;\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\tfunction createBindingState(vao) {\n\t\t\tconst newAttributes = [];\n\t\t\tconst enabledAttributes = [];\n\t\t\tconst attributeDivisors = [];\n\n\t\t\tfor (let i = 0; i < maxVertexAttributes; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\tattributeDivisors[i] = 0;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {},\n\t\t\t\tindex: null\n\t\t\t};\n\t\t}\n\n\t\tfunction needsUpdate(geometry, index) {\n\t\t\tconst cachedAttributes = currentState.attributes;\n\t\t\tconst geometryAttributes = geometry.attributes;\n\t\t\tlet attributesNum = 0;\n\n\t\t\tfor (const key in geometryAttributes) {\n\t\t\t\tconst cachedAttribute = cachedAttributes[key];\n\t\t\t\tconst geometryAttribute = geometryAttributes[key];\n\t\t\t\tif (cachedAttribute === undefined) return true;\n\t\t\t\tif (cachedAttribute.attribute !== geometryAttribute) return true;\n\t\t\t\tif (cachedAttribute.data !== geometryAttribute.data) return true;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tif (currentState.attributesNum !== attributesNum) return true;\n\t\t\tif (currentState.index !== index) return true;\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction saveCache(geometry, index) {\n\t\t\tconst cache = {};\n\t\t\tconst attributes = geometry.attributes;\n\t\t\tlet attributesNum = 0;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tconst data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif (attribute.data) {\n\t\t\t\t\tdata.data = attribute.data;\n\t\t\t\t}\n\n\t\t\t\tcache[key] = data;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\t\t\tcurrentState.attributesNum = attributesNum;\n\t\t\tcurrentState.index = index;\n\t\t}\n\n\t\tfunction initAttributes() {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\n\t\t\tfor (let i = 0, il = newAttributes.length; i < il; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\tfunction enableAttribute(attribute) {\n\t\t\tenableAttributeAndDivisor(attribute, 0);\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor(attribute, meshPerAttribute) {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\t\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\t\tconst attributeDivisors = currentState.attributeDivisors;\n\t\t\tnewAttributes[attribute] = 1;\n\n\t\t\tif (enabledAttributes[attribute] === 0) {\n\t\t\t\tgl.enableVertexAttribArray(attribute);\n\t\t\t\tenabledAttributes[attribute] = 1;\n\t\t\t}\n\n\t\t\tif (attributeDivisors[attribute] !== meshPerAttribute) {\n\t\t\t\tconst extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\n\t\t\t\textension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);\n\t\t\t\tattributeDivisors[attribute] = meshPerAttribute;\n\t\t\t}\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\t\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor (let i = 0, il = enabledAttributes.length; i < il; i++) {\n\t\t\t\tif (enabledAttributes[i] !== newAttributes[i]) {\n\t\t\t\t\tgl.disableVertexAttribArray(i);\n\t\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction vertexAttribPointer(index, size, type, normalized, stride, offset) {\n\t\t\tif (capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT)) {\n\t\t\t\tgl.vertexAttribIPointer(index, size, type, stride, offset);\n\t\t\t} else {\n\t\t\t\tgl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\t}\n\t\t}\n\n\t\tfunction setupVertexAttributes(object, material, program, geometry) {\n\t\t\tif (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {\n\t\t\t\tif (extensions.get('ANGLE_instanced_arrays') === null) return;\n\t\t\t}\n\n\t\t\tinitAttributes();\n\t\t\tconst geometryAttributes = geometry.attributes;\n\t\t\tconst programAttributes = program.getAttributes();\n\t\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor (const name in programAttributes) {\n\t\t\t\tconst programAttribute = programAttributes[name];\n\n\t\t\t\tif (programAttribute >= 0) {\n\t\t\t\t\tconst geometryAttribute = geometryAttributes[name];\n\n\t\t\t\t\tif (geometryAttribute !== undefined) {\n\t\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\t\t\t\t\t\tconst attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif (geometryAttribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif (data && data.isInstancedInterleavedBuffer) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, data.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (geometryAttribute.isInstancedBufferAttribute) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, 0, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (name === 'instanceMatrix') {\n\t\t\t\t\t\tconst attribute = attributes.get(object.instanceMatrix); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 0, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 1, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 2, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 3, 1);\n\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 0, 4, type, false, 64, 0);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 1, 4, type, false, 64, 16);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 2, 4, type, false, 64, 32);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 3, 4, type, false, 64, 48);\n\t\t\t\t\t} else if (name === 'instanceColor') {\n\t\t\t\t\t\tconst attribute = attributes.get(object.instanceColor); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, 1);\n\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute, 3, type, false, 12, 0);\n\t\t\t\t\t} else if (materialDefaultAttributeValues !== undefined) {\n\t\t\t\t\t\tconst value = materialDefaultAttributeValues[name];\n\n\t\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\t\tswitch (value.length) {\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv(programAttribute, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\treset();\n\n\t\t\tfor (const geometryId in bindingStates) {\n\t\t\t\tconst programMap = bindingStates[geometryId];\n\n\t\t\t\tfor (const programId in programMap) {\n\t\t\t\t\tconst stateMap = programMap[programId];\n\n\t\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[programId];\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[geometryId];\n\t\t\t}\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry(geometry) {\n\t\t\tif (bindingStates[geometry.id] === undefined) return;\n\t\t\tconst programMap = bindingStates[geometry.id];\n\n\t\t\tfor (const programId in programMap) {\n\t\t\t\tconst stateMap = programMap[programId];\n\n\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[programId];\n\t\t\t}\n\n\t\t\tdelete bindingStates[geometry.id];\n\t\t}\n\n\t\tfunction releaseStatesOfProgram(program) {\n\t\t\tfor (const geometryId in bindingStates) {\n\t\t\t\tconst programMap = bindingStates[geometryId];\n\t\t\t\tif (programMap[program.id] === undefined) continue;\n\t\t\t\tconst stateMap = programMap[program.id];\n\n\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[program.id];\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\tresetDefaultState();\n\t\t\tif (currentState === defaultState) return;\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject(currentState.object);\n\t\t} // for backward-compatilibity\n\n\n\t\tfunction resetDefaultState() {\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\t\t};\n\t}\n\n\tfunction WebGLBufferRenderer(gl, extensions, info, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tlet mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawArrays(mode, start, count);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tlet extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, start, count, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLCapabilities(gl, extensions, parameters) {\n\t\tlet maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\t\t\tif (maxAnisotropy !== undefined) return maxAnisotropy;\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tconst extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tmaxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n\t\t\t} else {\n\t\t\t\tmaxAnisotropy = 0;\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\t\t}\n\n\t\tfunction getMaxPrecision(precision) {\n\t\t\tif (precision === 'highp') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n\t\t\t\t\treturn 'highp';\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\t\t\t}\n\n\t\t\tif (precision === 'mediump') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n\t\t\t\t\treturn 'mediump';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\t\t}\n\t\t/* eslint-disable no-undef */\n\n\n\t\tconst isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;\n\t\t/* eslint-enable no-undef */\n\n\t\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tconst maxPrecision = getMaxPrecision(precision);\n\n\t\tif (maxPrecision !== precision) {\n\t\t\tconsole.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n\t\t\tprecision = maxPrecision;\n\t\t}\n\n\t\tconst drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');\n\t\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\t\tconst maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\t\tconst maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n\t\tconst maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\t\tconst maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n\t\tconst maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\t\tconst maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n\t\tconst maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n\t\tconst maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n\t\tconst vertexTextures = maxVertexTextures > 0;\n\t\tconst floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');\n\t\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\tconst maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;\n\t\treturn {\n\t\t\tisWebGL2: isWebGL2,\n\t\t\tdrawBuffers: drawBuffers,\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\t\t\tmaxSamples: maxSamples\n\t\t};\n\t}\n\n\tfunction WebGLClipping(properties) {\n\t\tconst scope = this;\n\t\tlet globalState = null,\n\t\t\t\tnumGlobalPlanes = 0,\n\t\t\t\tlocalClippingEnabled = false,\n\t\t\t\trenderingShadows = false;\n\t\tconst plane = new Plane(),\n\t\t\t\t\tviewNormalMatrix = new Matrix3(),\n\t\t\t\t\tuniform = {\n\t\t\tvalue: null,\n\t\t\tneedsUpdate: false\n\t\t};\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function (planes, enableLocalClipping, camera) {\n\t\t\tconst enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 || localClippingEnabled;\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\t\t\tglobalState = projectPlanes(planes, camera, 0);\n\t\t\tnumGlobalPlanes = planes.length;\n\t\t\treturn enabled;\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes(null);\n\t\t};\n\n\t\tthis.endShadows = function () {\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\t\t};\n\n\t\tthis.setState = function (material, camera, useCache) {\n\t\t\tconst planes = material.clippingPlanes,\n\t\t\t\t\t\tclipIntersection = material.clipIntersection,\n\t\t\t\t\t\tclipShadows = material.clipShadows;\n\t\t\tconst materialProperties = properties.get(material);\n\n\t\t\tif (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n\t\t\t\t// there's no local clipping\n\t\t\t\tif (renderingShadows) {\n\t\t\t\t\t// there's no global clipping\n\t\t\t\t\tprojectPlanes(null);\n\t\t\t\t} else {\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\t\t\tlGlobal = nGlobal * 4;\n\t\t\t\tlet dstArray = materialProperties.clippingState || null;\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes(planes, camera, lGlobal, useCache);\n\n\t\t\t\tfor (let i = 0; i !== lGlobal; ++i) {\n\t\t\t\t\tdstArray[i] = globalState[i];\n\t\t\t\t}\n\n\t\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\t\t\t}\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\t\t\tif (uniform.value !== globalState) {\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t}\n\n\t\tfunction projectPlanes(planes, camera, dstOffset, skipTransform) {\n\t\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\t\tlet dstArray = null;\n\n\t\t\tif (nPlanes !== 0) {\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif (skipTransform !== true || dstArray === null) {\n\t\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix(viewMatrix);\n\n\t\t\t\t\tif (dstArray === null || dstArray.length < flatSize) {\n\t\t\t\t\t\tdstArray = new Float32Array(flatSize);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n\t\t\t\t\t\tplane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n\t\t\t\t\t\tplane.normal.toArray(dstArray, i4);\n\t\t\t\t\t\tdstArray[i4 + 3] = plane.constant;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t\treturn dstArray;\n\t\t}\n\t}\n\n\tfunction WebGLCubeMaps(renderer) {\n\t\tlet cubemaps = new WeakMap();\n\n\t\tfunction mapTextureMapping(texture, mapping) {\n\t\t\tif (mapping === EquirectangularReflectionMapping) {\n\t\t\t\ttexture.mapping = CubeReflectionMapping;\n\t\t\t} else if (mapping === EquirectangularRefractionMapping) {\n\t\t\t\ttexture.mapping = CubeRefractionMapping;\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction get(texture) {\n\t\t\tif (texture && texture.isTexture) {\n\t\t\t\tconst mapping = texture.mapping;\n\n\t\t\t\tif (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n\t\t\t\t\tif (cubemaps.has(texture)) {\n\t\t\t\t\t\tconst cubemap = cubemaps.get(texture).texture;\n\t\t\t\t\t\treturn mapTextureMapping(cubemap, texture.mapping);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif (image && image.height > 0) {\n\t\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget(image.height / 2);\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture(renderer, texture);\n\t\t\t\t\t\t\tcubemaps.set(texture, renderTarget);\n\t\t\t\t\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\t\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\t\t\t\treturn mapTextureMapping(renderTarget.texture, texture.mapping);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tconst cubemap = cubemaps.get(texture);\n\n\t\t\tif (cubemap !== undefined) {\n\t\t\t\tcubemaps.delete(texture);\n\t\t\t\tcubemap.dispose();\n\t\t\t}\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tcubemaps = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction WebGLExtensions(gl) {\n\t\tconst extensions = {};\n\n\t\tfunction getExtension(name) {\n\t\t\tif (extensions[name] !== undefined) {\n\t\t\t\treturn extensions[name];\n\t\t\t}\n\n\t\t\tlet extension;\n\n\t\t\tswitch (name) {\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension(name);\n\t\t\t}\n\n\t\t\textensions[name] = extension;\n\t\t\treturn extension;\n\t\t}\n\n\t\treturn {\n\t\t\thas: function (name) {\n\t\t\t\treturn getExtension(name) !== null;\n\t\t\t},\n\t\t\tinit: function (capabilities) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\tgetExtension('EXT_color_buffer_float');\n\t\t\t\t} else {\n\t\t\t\t\tgetExtension('WEBGL_depth_texture');\n\t\t\t\t\tgetExtension('OES_texture_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float_linear');\n\t\t\t\t\tgetExtension('OES_standard_derivatives');\n\t\t\t\t\tgetExtension('OES_element_index_uint');\n\t\t\t\t\tgetExtension('OES_vertex_array_object');\n\t\t\t\t\tgetExtension('ANGLE_instanced_arrays');\n\t\t\t\t}\n\n\t\t\t\tgetExtension('OES_texture_float_linear');\n\t\t\t\tgetExtension('EXT_color_buffer_half_float');\n\t\t\t},\n\t\t\tget: function (name) {\n\t\t\t\tconst extension = getExtension(name);\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n\t\t\t\t}\n\n\t\t\t\treturn extension;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLGeometries(gl, attributes, info, bindingStates) {\n\t\tconst geometries = {};\n\t\tconst wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose(event) {\n\t\t\tconst geometry = event.target;\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\tattributes.remove(geometry.index);\n\t\t\t}\n\n\t\t\tfor (const name in geometry.attributes) {\n\t\t\t\tattributes.remove(geometry.attributes[name]);\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener('dispose', onGeometryDispose);\n\t\t\tdelete geometries[geometry.id];\n\t\t\tconst attribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (attribute) {\n\t\t\t\tattributes.remove(attribute);\n\t\t\t\twireframeAttributes.delete(geometry);\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry(geometry);\n\n\t\t\tif (geometry.isInstancedBufferGeometry === true) {\n\t\t\t\tdelete geometry._maxInstanceCount;\n\t\t\t} //\n\n\n\t\t\tinfo.memory.geometries--;\n\t\t}\n\n\t\tfunction get(object, geometry) {\n\t\t\tif (geometries[geometry.id] === true) return geometry;\n\t\t\tgeometry.addEventListener('dispose', onGeometryDispose);\n\t\t\tgeometries[geometry.id] = true;\n\t\t\tinfo.memory.geometries++;\n\t\t\treturn geometry;\n\t\t}\n\n\t\tfunction update(geometry) {\n\t\t\tconst geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor (const name in geometryAttributes) {\n\t\t\t\tattributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);\n\t\t\t} // morph targets\n\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst array = morphAttributes[name];\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tattributes.update(array[i], gl.ARRAY_BUFFER);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateWireframeAttribute(geometry) {\n\t\t\tconst indices = [];\n\t\t\tconst geometryIndex = geometry.index;\n\t\t\tconst geometryPosition = geometry.attributes.position;\n\t\t\tlet version = 0;\n\n\t\t\tif (geometryIndex !== null) {\n\t\t\t\tconst array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\t\tconst a = array[i + 0];\n\t\t\t\t\tconst b = array[i + 1];\n\t\t\t\t\tconst c = array[i + 2];\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {\n\t\t\t\t\tconst a = i + 0;\n\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\tconst c = i + 2;\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n\t\t\tattribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\n\t\t\t//\n\n\t\t\tconst previousAttribute = wireframeAttributes.get(geometry);\n\t\t\tif (previousAttribute) attributes.remove(previousAttribute); //\n\n\t\t\twireframeAttributes.set(geometry, attribute);\n\t\t}\n\n\t\tfunction getWireframeAttribute(geometry) {\n\t\t\tconst currentAttribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (currentAttribute) {\n\t\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\t\tif (geometryIndex !== null) {\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\t\t\t\t\tif (currentAttribute.version < geometryIndex.version) {\n\t\t\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get(geometry);\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tupdate: update,\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\t\t};\n\t}\n\n\tfunction WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tlet mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tlet type, bytesPerElement;\n\n\t\tfunction setIndex(value) {\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawElements(mode, count, type, start * bytesPerElement);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tlet extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, count, type, start * bytesPerElement, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLInfo(gl) {\n\t\tconst memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\t\tconst render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update(count, mode, instanceCount) {\n\t\t\trender.calls++;\n\n\t\t\tswitch (mode) {\n\t\t\t\tcase gl.TRIANGLES:\n\t\t\t\t\trender.triangles += instanceCount * (count / 3);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINES:\n\t\t\t\t\trender.lines += instanceCount * (count / 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_STRIP:\n\t\t\t\t\trender.lines += instanceCount * (count - 1);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_LOOP:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.POINTS:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error('THREE.WebGLInfo: Unknown draw mode:', mode);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\trender.frame++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction numericalSort(a, b) {\n\t\treturn a[0] - b[0];\n\t}\n\n\tfunction absNumericalSort(a, b) {\n\t\treturn Math.abs(b[1]) - Math.abs(a[1]);\n\t}\n\n\tfunction WebGLMorphtargets(gl) {\n\t\tconst influencesList = {};\n\t\tconst morphInfluences = new Float32Array(8);\n\t\tconst workInfluences = [];\n\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tworkInfluences[i] = [i, 0];\n\t\t}\n\n\t\tfunction update(object, geometry, material, program) {\n\t\t\tconst objectInfluences = object.morphTargetInfluences; // When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tconst length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\t\t\tlet influences = influencesList[geometry.id];\n\n\t\t\tif (influences === undefined) {\n\t\t\t\t// initialise list\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tinfluences[i] = [i, 0];\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[geometry.id] = influences;\n\t\t\t} // Collect influences\n\n\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tconst influence = influences[i];\n\t\t\t\tinfluence[0] = i;\n\t\t\t\tinfluence[1] = objectInfluences[i];\n\t\t\t}\n\n\t\t\tinfluences.sort(absNumericalSort);\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tif (i < length && influences[i][1]) {\n\t\t\t\t\tworkInfluences[i][0] = influences[i][0];\n\t\t\t\t\tworkInfluences[i][1] = influences[i][1];\n\t\t\t\t} else {\n\t\t\t\t\tworkInfluences[i][0] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[i][1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tworkInfluences.sort(numericalSort);\n\t\t\tconst morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tconst morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tconst influence = workInfluences[i];\n\t\t\t\tconst index = influence[0];\n\t\t\t\tconst value = influence[1];\n\n\t\t\t\tif (index !== Number.MAX_SAFE_INTEGER && value) {\n\t\t\t\t\tif (morphTargets && geometry.getAttribute('morphTarget' + i) !== morphTargets[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphTarget' + i, morphTargets[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.getAttribute('morphNormal' + i) !== morphNormals[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphNormal' + i, morphNormals[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[i] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t} else {\n\t\t\t\t\tif (morphTargets && geometry.hasAttribute('morphTarget' + i) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphTarget' + i);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.hasAttribute('morphNormal' + i) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphNormal' + i);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[i] = 0;\n\t\t\t\t}\n\t\t\t} // GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\n\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction WebGLObjects(gl, geometries, attributes, info) {\n\t\tlet updateMap = new WeakMap();\n\n\t\tfunction update(object) {\n\t\t\tconst frame = info.render.frame;\n\t\t\tconst geometry = object.geometry;\n\t\t\tconst buffergeometry = geometries.get(object, geometry); // Update once per frame\n\n\t\t\tif (updateMap.get(buffergeometry) !== frame) {\n\t\t\t\tgeometries.update(buffergeometry);\n\t\t\t\tupdateMap.set(buffergeometry, frame);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\tif (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {\n\t\t\t\t\tobject.addEventListener('dispose', onInstancedMeshDispose);\n\t\t\t\t}\n\n\t\t\t\tattributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);\n\n\t\t\t\tif (object.instanceColor !== null) {\n\t\t\t\t\tattributes.update(object.instanceColor, gl.ARRAY_BUFFER);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tupdateMap = new WeakMap();\n\t\t}\n\n\t\tfunction onInstancedMeshDispose(event) {\n\t\t\tconst instancedMesh = event.target;\n\t\t\tinstancedMesh.removeEventListener('dispose', onInstancedMeshDispose);\n\t\t\tattributes.remove(instancedMesh.instanceMatrix);\n\t\t\tif (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tclass DataTexture2DArray extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, depth = 1) {\n\t\t\tsuper(null);\n\t\t\tthis.image = {\n\t\t\t\tdata,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdepth\n\t\t\t};\n\t\t\tthis.magFilter = NearestFilter;\n\t\t\tthis.minFilter = NearestFilter;\n\t\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\tclass DataTexture3D extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, depth = 1) {\n\t\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t\t// Users can still set in DataTexture3D directly.\n\t\t\t//\n\t\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t\t// \ttexture.anisotropy = 16;\n\t\t\t//\n\t\t\t// See #14839\n\t\t\tsuper(null);\n\t\t\tthis.image = {\n\t\t\t\tdata,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdepth\n\t\t\t};\n\t\t\tthis.magFilter = NearestFilter;\n\t\t\tthis.minFilter = NearestFilter;\n\t\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *\t\tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with\tname 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\tconst emptyTexture = new Texture();\n\tconst emptyTexture2dArray = new DataTexture2DArray();\n\tconst emptyTexture3d = new DataTexture3D();\n\tconst emptyCubeTexture = new CubeTexture(); // --- Utilities ---\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tconst arrayCacheF32 = [];\n\tconst arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms\n\n\tconst mat4array = new Float32Array(16);\n\tconst mat3array = new Float32Array(9);\n\tconst mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices\n\n\tfunction flatten(array, nBlocks, blockSize) {\n\t\tconst firstElem = array[0];\n\t\tif (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tconst n = nBlocks * blockSize;\n\t\tlet r = arrayCacheF32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Float32Array(n);\n\t\t\tarrayCacheF32[n] = r;\n\t\t}\n\n\t\tif (nBlocks !== 0) {\n\t\t\tfirstElem.toArray(r, 0);\n\n\t\t\tfor (let i = 1, offset = 0; i !== nBlocks; ++i) {\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[i].toArray(r, offset);\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tfunction arraysEqual(a, b) {\n\t\tif (a.length !== b.length) return false;\n\n\t\tfor (let i = 0, l = a.length; i < l; i++) {\n\t\t\tif (a[i] !== b[i]) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction copyArray(a, b) {\n\t\tfor (let i = 0, l = b.length; i < l; i++) {\n\t\t\ta[i] = b[i];\n\t\t}\n\t} // Texture unit allocation\n\n\n\tfunction allocTexUnits(textures, n) {\n\t\tlet r = arrayCacheI32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Int32Array(n);\n\t\t\tarrayCacheI32[n] = r;\n\t\t}\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\tr[i] = textures.allocateTextureUnit();\n\t\t}\n\n\t\treturn r;\n\t} // --- Setters ---\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\t// Single scalar\n\n\n\tfunction setValueV1f(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1f(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single float vector (from flat array or THREE.VectorN)\n\n\n\tfunction setValueV2f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y) {\n\t\t\t\tgl.uniform2f(this.addr, v.x, v.y);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform2fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV3f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n\t\t\t\tgl.uniform3f(this.addr, v.x, v.y, v.z);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t}\n\t\t} else if (v.r !== undefined) {\n\t\t\tif (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n\t\t\t\tgl.uniform3f(this.addr, v.r, v.g, v.b);\n\t\t\t\tcache[0] = v.r;\n\t\t\t\tcache[1] = v.g;\n\t\t\t\tcache[2] = v.b;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform3fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV4f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n\t\t\t\tgl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t\tcache[3] = v.w;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform4fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t} // Single matrix (from flat array or THREE.MatrixN)\n\n\n\tfunction setValueM2(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix2fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat2array.set(elements);\n\t\t\tgl.uniformMatrix2fv(this.addr, false, mat2array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM3(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix3fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat3array.set(elements);\n\t\t\tgl.uniformMatrix3fv(this.addr, false, mat3array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM4(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix4fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat4array.set(elements);\n\t\t\tgl.uniformMatrix4fv(this.addr, false, mat4array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t} // Single integer / boolean\n\n\n\tfunction setValueV1i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1i(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single integer / boolean vector (from flat array)\n\n\n\tfunction setValueV2i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // Single unsigned integer\n\n\n\tfunction setValueV1ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1ui(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single unsigned integer vector (from flat array)\n\n\n\tfunction setValueV2ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // Single texture (2D / Cube)\n\n\n\tfunction setValueT1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTexture2D(v || emptyTexture, unit);\n\t}\n\n\tfunction setValueT3D1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture3D(v || emptyTexture3d, unit);\n\t}\n\n\tfunction setValueT6(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTextureCube(v || emptyCubeTexture, unit);\n\t}\n\n\tfunction setValueT2DArray1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture2DArray(v || emptyTexture2dArray, unit);\n\t} // Helper to pick the right setter for the singular case\n\n\n\tfunction getSingularSetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1f;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2f;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3f;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4f;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1i;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2i;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3i;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4i;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1ui;\n\t\t\t// UINT\n\n\t\t\tcase 0x8dc6:\n\t\t\t\treturn setValueV2ui;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8dc7:\n\t\t\t\treturn setValueV3ui;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8dc8:\n\t\t\t\treturn setValueV4ui;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\n\t\t\tcase 0x8dd3:\n\t\t\t\t// UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dc4:\n\t\t\t\t// SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\t\t}\n\t} // Array of scalars\n\n\n\tfunction setValueV1fArray(gl, v) {\n\t\tgl.uniform1fv(this.addr, v);\n\t} // Array of vectors (from flat array or array of THREE.VectorN)\n\n\n\tfunction setValueV2fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 2);\n\t\tgl.uniform2fv(this.addr, data);\n\t}\n\n\tfunction setValueV3fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 3);\n\t\tgl.uniform3fv(this.addr, data);\n\t}\n\n\tfunction setValueV4fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 4);\n\t\tgl.uniform4fv(this.addr, data);\n\t} // Array of matrices (from flat array or array of THREE.MatrixN)\n\n\n\tfunction setValueM2Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 4);\n\t\tgl.uniformMatrix2fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM3Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 9);\n\t\tgl.uniformMatrix3fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM4Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 16);\n\t\tgl.uniformMatrix4fv(this.addr, false, data);\n\t} // Array of integer / boolean\n\n\n\tfunction setValueV1iArray(gl, v) {\n\t\tgl.uniform1iv(this.addr, v);\n\t} // Array of integer / boolean vectors (from flat array)\n\n\n\tfunction setValueV2iArray(gl, v) {\n\t\tgl.uniform2iv(this.addr, v);\n\t}\n\n\tfunction setValueV3iArray(gl, v) {\n\t\tgl.uniform3iv(this.addr, v);\n\t}\n\n\tfunction setValueV4iArray(gl, v) {\n\t\tgl.uniform4iv(this.addr, v);\n\t} // Array of unsigned integer\n\n\n\tfunction setValueV1uiArray(gl, v) {\n\t\tgl.uniform1uiv(this.addr, v);\n\t} // Array of unsigned integer vectors (from flat array)\n\n\n\tfunction setValueV2uiArray(gl, v) {\n\t\tgl.uniform2uiv(this.addr, v);\n\t}\n\n\tfunction setValueV3uiArray(gl, v) {\n\t\tgl.uniform3uiv(this.addr, v);\n\t}\n\n\tfunction setValueV4uiArray(gl, v) {\n\t\tgl.uniform4uiv(this.addr, v);\n\t} // Array of textures (2D / Cube)\n\n\n\tfunction setValueT1Array(gl, v, textures) {\n\t\tconst n = v.length;\n\t\tconst units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTexture2D(v[i] || emptyTexture, units[i]);\n\t\t}\n\t}\n\n\tfunction setValueT6Array(gl, v, textures) {\n\t\tconst n = v.length;\n\t\tconst units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);\n\t\t}\n\t} // Helper to pick the right setter for a pure (bottom-level) array\n\n\n\tfunction getPureArraySetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1fArray;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2fArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3fArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4fArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2Array;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3Array;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4Array;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1iArray;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2iArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3iArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4iArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1uiArray;\n\t\t\t// UINT\n\n\t\t\tcase 0x8dc6:\n\t\t\t\treturn setValueV2uiArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8dc7:\n\t\t\t\treturn setValueV3uiArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8dc8:\n\t\t\t\treturn setValueV4uiArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\t\t}\n\t} // --- Uniform Classes ---\n\n\n\tfunction SingleUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tfunction PureArrayUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function (data) {\n\t\tconst cache = this.cache;\n\n\t\tif (data instanceof Float32Array && cache.length !== data.length) {\n\t\t\tthis.cache = new Float32Array(data.length);\n\t\t}\n\n\t\tcopyArray(cache, data);\n\t};\n\n\tfunction StructuredUniform(id) {\n\t\tthis.id = id;\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t}\n\n\tStructuredUniform.prototype.setValue = function (gl, value, textures) {\n\t\tconst seq = this.seq;\n\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i];\n\t\t\tu.setValue(gl, value[u.id], textures);\n\t\t}\n\t}; // --- Top-level ---\n\t// Parser - builds up the property tree from the path strings\n\n\n\tconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g; // extracts\n\t// \t- the identifier (member name or array index)\n\t//\t- followed by an optional right bracket (found when array index)\n\t//\t- followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform(container, uniformObject) {\n\t\tcontainer.seq.push(uniformObject);\n\t\tcontainer.map[uniformObject.id] = uniformObject;\n\t}\n\n\tfunction parseUniform(activeInfo, addr, container) {\n\t\tconst path = activeInfo.name,\n\t\t\t\t\tpathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile (true) {\n\t\t\tconst match = RePathPart.exec(path),\n\t\t\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\t\t\tlet id = match[1];\n\t\t\tconst idIsIndex = match[2] === ']',\n\t\t\t\t\t\tsubscript = match[3];\n\t\t\tif (idIsIndex) id = id | 0; // convert to integer\n\n\t\t\tif (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\t\t\taddUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\t\t\t\tconst map = container.map;\n\t\t\t\tlet next = map[id];\n\n\t\t\t\tif (next === undefined) {\n\t\t\t\t\tnext = new StructuredUniform(id);\n\t\t\t\t\taddUniform(container, next);\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\t\t\t}\n\t\t}\n\t} // Root Container\n\n\n\tfunction WebGLUniforms(gl, program) {\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t\tconst n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n\t\tfor (let i = 0; i < n; ++i) {\n\t\t\tconst info = gl.getActiveUniform(program, i),\n\t\t\t\t\t\taddr = gl.getUniformLocation(program, info.name);\n\t\t\tparseUniform(info, addr, this);\n\t\t}\n\t}\n\n\tWebGLUniforms.prototype.setValue = function (gl, name, value, textures) {\n\t\tconst u = this.map[name];\n\t\tif (u !== undefined) u.setValue(gl, value, textures);\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function (gl, object, name) {\n\t\tconst v = object[name];\n\t\tif (v !== undefined) this.setValue(gl, name, v);\n\t}; // Static interface\n\n\n\tWebGLUniforms.upload = function (gl, seq, values, textures) {\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i],\n\t\t\t\t\t\tv = values[u.id];\n\n\t\t\tif (v.needsUpdate !== false) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue(gl, v.value, textures);\n\t\t\t}\n\t\t}\n\t};\n\n\tWebGLUniforms.seqWithValue = function (seq, values) {\n\t\tconst r = [];\n\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i];\n\t\t\tif (u.id in values) r.push(u);\n\t\t}\n\n\t\treturn r;\n\t};\n\n\tfunction WebGLShader(gl, type, string) {\n\t\tconst shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, string);\n\t\tgl.compileShader(shader);\n\t\treturn shader;\n\t}\n\n\tlet programIdCount = 0;\n\n\tfunction addLineNumbers(string) {\n\t\tconst lines = string.split('\\n');\n\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tlines[i] = i + 1 + ': ' + lines[i];\n\t\t}\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tfunction getEncodingComponents(encoding) {\n\t\tswitch (encoding) {\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn ['Linear', '( value )'];\n\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn ['sRGB', '( value )'];\n\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn ['RGBE', '( value )'];\n\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn ['RGBM', '( value, 7.0 )'];\n\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn ['RGBM', '( value, 16.0 )'];\n\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn ['RGBD', '( value, 256.0 )'];\n\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn ['LogLuv', '( value )'];\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);\n\t\t\t\treturn ['Linear', '( value )'];\n\t\t}\n\t}\n\n\tfunction getShaderErrors(gl, shader, type) {\n\t\tconst status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\t\tconst log = gl.getShaderInfoLog(shader).trim();\n\t\tif (status && log === '') return ''; // --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tconst source = gl.getShaderSource(shader);\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers(source);\n\t}\n\n\tfunction getTexelDecodingFunction(functionName, encoding) {\n\t\tconst components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';\n\t}\n\n\tfunction getTexelEncodingFunction(functionName, encoding) {\n\t\tconst components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';\n\t}\n\n\tfunction getToneMappingFunction(functionName, toneMapping) {\n\t\tlet toneMappingName;\n\n\t\tswitch (toneMapping) {\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\t}\n\n\tfunction generateExtensions(parameters) {\n\t\tconst chunks = [parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission > 0.0) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n\t\treturn chunks.filter(filterEmptyLine).join('\\n');\n\t}\n\n\tfunction generateDefines(defines) {\n\t\tconst chunks = [];\n\n\t\tfor (const name in defines) {\n\t\t\tconst value = defines[name];\n\t\t\tif (value === false) continue;\n\t\t\tchunks.push('#define ' + name + ' ' + value);\n\t\t}\n\n\t\treturn chunks.join('\\n');\n\t}\n\n\tfunction fetchAttributeLocations(gl, program) {\n\t\tconst attributes = {};\n\t\tconst n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst info = gl.getActiveAttrib(program, i);\n\t\t\tconst name = info.name; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[name] = gl.getAttribLocation(program, name);\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tfunction filterEmptyLine(string) {\n\t\treturn string !== '';\n\t}\n\n\tfunction replaceLightNums(string, parameters) {\n\t\treturn string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\n\t}\n\n\tfunction replaceClippingPlaneNums(string, parameters) {\n\t\treturn string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);\n\t} // Resolve Includes\n\n\n\tconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes(string) {\n\t\treturn string.replace(includePattern, includeReplacer);\n\t}\n\n\tfunction includeReplacer(match, include) {\n\t\tconst string = ShaderChunk[include];\n\n\t\tif (string === undefined) {\n\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t\t}\n\n\t\treturn resolveIncludes(string);\n\t} // Unroll Loops\n\n\n\tconst deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops(string) {\n\t\treturn string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);\n\t}\n\n\tfunction deprecatedLoopReplacer(match, start, end, snippet) {\n\t\tconsole.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');\n\t\treturn loopReplacer(match, start, end, snippet);\n\t}\n\n\tfunction loopReplacer(match, start, end, snippet) {\n\t\tlet string = '';\n\n\t\tfor (let i = parseInt(start); i < parseInt(end); i++) {\n\t\t\tstring += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\n\t\t}\n\n\t\treturn string;\n\t} //\n\n\n\tfunction generatePrecision(parameters) {\n\t\tlet precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\t\tif (parameters.precision === 'highp') {\n\t\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\t\t} else if (parameters.precision === 'mediump') {\n\t\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\t\t} else if (parameters.precision === 'lowp') {\n\t\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\t\t}\n\n\t\treturn precisionstring;\n\t}\n\n\tfunction generateShadowMapTypeDefine(parameters) {\n\t\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif (parameters.shadowMapType === PCFShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\t} else if (parameters.shadowMapType === PCFSoftShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\t} else if (parameters.shadowMapType === VSMShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapTypeDefine(parameters) {\n\t\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapModeDefine(parameters) {\n\t\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapModeDefine;\n\t}\n\n\tfunction generateEnvMapBlendingDefine(parameters) {\n\t\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.combine) {\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\t}\n\n\tfunction WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\n\t\tconst gl = renderer.getContext();\n\t\tconst defines = parameters.defines;\n\t\tlet vertexShader = parameters.vertexShader;\n\t\tlet fragmentShader = parameters.fragmentShader;\n\t\tconst shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\n\t\tconst envMapTypeDefine = generateEnvMapTypeDefine(parameters);\n\t\tconst envMapModeDefine = generateEnvMapModeDefine(parameters);\n\t\tconst envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\n\t\tconst gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n\t\tconst customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);\n\t\tconst customDefines = generateDefines(defines);\n\t\tconst program = gl.createProgram();\n\t\tlet prefixVertex, prefixFragment;\n\t\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\t\tif (parameters.isRawShaderMaterial) {\n\t\t\tprefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixVertex.length > 0) {\n\t\t\t\tprefixVertex += '\\n';\n\t\t\t}\n\n\t\t\tprefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixFragment.length > 0) {\n\t\t\t\tprefixFragment += '\\n';\n\t\t\t}\n\t\t} else {\n\t\t\tprefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '\tattribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '\tattribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '\tattribute vec4 tangent;', '#endif', '#if defined( USE_COLOR_ALPHA )', '\tattribute vec4 color;', '#elif defined( USE_COLOR )', '\tattribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t\tprefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + (parameters.alphaTest % 1 ? '' : '.0') : '', // add '.0' if integer\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\tparameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '', getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t}\n\n\t\tvertexShader = resolveIncludes(vertexShader);\n\t\tvertexShader = replaceLightNums(vertexShader, parameters);\n\t\tvertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n\t\tfragmentShader = resolveIncludes(fragmentShader);\n\t\tfragmentShader = replaceLightNums(fragmentShader, parameters);\n\t\tfragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n\t\tvertexShader = unrollLoops(vertexShader);\n\t\tfragmentShader = unrollLoops(fragmentShader);\n\n\t\tif (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {\n\t\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\t\t\tversionString = '#version 300 es\\n';\n\t\t\tprefixVertex = ['#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') + '\\n' + prefixVertex;\n\t\t\tprefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\\n') + '\\n' + prefixFragment;\n\t\t}\n\n\t\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\t\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tconst glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);\n\t\tconst glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);\n\t\tgl.attachShader(program, glVertexShader);\n\t\tgl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n\t\tif (parameters.index0AttributeName !== undefined) {\n\t\t\tgl.bindAttribLocation(program, 0, parameters.index0AttributeName);\n\t\t} else if (parameters.morphTargets === true) {\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation(program, 0, 'position');\n\t\t}\n\n\t\tgl.linkProgram(program); // check for link errors\n\n\t\tif (renderer.debug.checkShaderErrors) {\n\t\t\tconst programLog = gl.getProgramInfoLog(program).trim();\n\t\t\tconst vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n\t\t\tconst fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n\t\t\tlet runnable = true;\n\t\t\tlet haveDiagnostics = true;\n\n\t\t\tif (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n\t\t\t\trunnable = false;\n\t\t\t\tconst vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\n\t\t\t\tconst fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\n\t\t\t\tconsole.error('THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors);\n\t\t\t} else if (programLog !== '') {\n\t\t\t\tconsole.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);\n\t\t\t} else if (vertexLog === '' || fragmentLog === '') {\n\t\t\t\thaveDiagnostics = false;\n\t\t\t}\n\n\t\t\tif (haveDiagnostics) {\n\t\t\t\tthis.diagnostics = {\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tprogramLog: programLog,\n\t\t\t\t\tvertexShader: {\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\t\t\t\t\t},\n\t\t\t\t\tfragmentShader: {\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} // Clean up\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\n\t\tgl.deleteShader(glVertexShader);\n\t\tgl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n\t\tlet cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\t\t\tif (cachedUniforms === undefined) {\n\t\t\t\tcachedUniforms = new WebGLUniforms(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\t\t}; // set up caching for attribute locations\n\n\n\t\tlet cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\t\t\tif (cachedAttributes === undefined) {\n\t\t\t\tcachedAttributes = fetchAttributeLocations(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\t\t}; // free resource\n\n\n\t\tthis.destroy = function () {\n\t\t\tbindingStates.releaseStatesOfProgram(this);\n\t\t\tgl.deleteProgram(program);\n\t\t\tthis.program = undefined;\n\t\t}; //\n\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\treturn this;\n\t}\n\n\tfunction WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {\n\t\tconst programs = [];\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tconst floatVertexTextures = capabilities.floatVertexTextures;\n\t\tconst maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tconst vertexTextures = capabilities.vertexTextures;\n\t\tlet precision = capabilities.precision;\n\t\tconst shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\t\tconst parameterNames = ['precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor', 'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV', 'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap', 'objectSpaceNormalMap', 'tangentSpaceNormalMap', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap', 'displacementMap', 'specularMap', 'roughnessMap', 'metalnessMap', 'gradientMap', 'alphaMap', 'combine', 'vertexColors', 'vertexAlphas', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2', 'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning', 'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'premultipliedAlpha', 'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights', 'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows', 'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights', 'alphaTest', 'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'sheen', 'transmission', 'transmissionMap', 'thicknessMap'];\n\n\t\tfunction getMaxBones(object) {\n\t\t\tconst skeleton = object.skeleton;\n\t\t\tconst bones = skeleton.bones;\n\n\t\t\tif (floatVertexTextures) {\n\t\t\t\treturn 1024;\n\t\t\t} else {\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//\t- leave some extra space for other uniforms\n\t\t\t\t//\t- limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//\t\t(up to 54 should be safe)\n\t\t\t\tconst nVertexUniforms = maxVertexUniforms;\n\t\t\t\tconst nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n\t\t\t\tconst maxBones = Math.min(nVertexMatrices, bones.length);\n\n\t\t\t\tif (maxBones < bones.length) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\t\t\t}\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap(map) {\n\t\t\tlet encoding;\n\n\t\t\tif (map && map.isTexture) {\n\t\t\t\tencoding = map.encoding;\n\t\t\t} else if (map && map.isWebGLRenderTarget) {\n\t\t\t\tconsole.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\tencoding = map.texture.encoding;\n\t\t\t} else {\n\t\t\t\tencoding = LinearEncoding;\n\t\t\t}\n\n\t\t\treturn encoding;\n\t\t}\n\n\t\tfunction getParameters(material, lights, shadows, scene, object) {\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst envMap = cubemaps.get(material.envMap || environment);\n\t\t\tconst shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tconst maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n\t\t\tif (material.precision !== null) {\n\t\t\t\tprecision = capabilities.getMaxPrecision(material.precision);\n\n\t\t\t\tif (precision !== material.precision) {\n\t\t\t\t\tconsole.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet vertexShader, fragmentShader;\n\n\t\t\tif (shaderID) {\n\t\t\t\tconst shader = ShaderLib[shaderID];\n\t\t\t\tvertexShader = shader.vertexShader;\n\t\t\t\tfragmentShader = shader.fragmentShader;\n\t\t\t} else {\n\t\t\t\tvertexShader = material.vertexShader;\n\t\t\t\tfragmentShader = material.fragmentShader;\n\t\t\t}\n\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\tconst parameters = {\n\t\t\t\tisWebGL2: isWebGL2,\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: material.type,\n\t\t\t\tvertexShader: vertexShader,\n\t\t\t\tfragmentShader: fragmentShader,\n\t\t\t\tdefines: material.defines,\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\t\tglslVersion: material.glslVersion,\n\t\t\t\tprecision: precision,\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n\t\t\t\tmap: !!material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap(material.map),\n\t\t\t\tmatcap: !!material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap(material.matcap),\n\t\t\t\tenvMap: !!envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap(envMap),\n\t\t\t\tenvMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n\t\t\t\tlightMap: !!material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n\t\t\t\taoMap: !!material.aoMap,\n\t\t\t\temissiveMap: !!material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n\t\t\t\tbumpMap: !!material.bumpMap,\n\t\t\t\tnormalMap: !!material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !!material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !!material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !!material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !!material.displacementMap,\n\t\t\t\troughnessMap: !!material.roughnessMap,\n\t\t\t\tmetalnessMap: !!material.metalnessMap,\n\t\t\t\tspecularMap: !!material.specularMap,\n\t\t\t\talphaMap: !!material.alphaMap,\n\t\t\t\tgradientMap: !!material.gradientMap,\n\t\t\t\tsheen: !!material.sheen,\n\t\t\t\ttransmission: !!material.transmission,\n\t\t\t\ttransmissionMap: !!material.transmissionMap,\n\t\t\t\tthicknessMap: !!material.thicknessMap,\n\t\t\t\tcombine: material.combine,\n\t\t\t\tvertexTangents: material.normalMap && material.vertexTangents,\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexAlphas: material.vertexColors === true && object.geometry && object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,\n\t\t\t\tvertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmission || !!material.transmissionMap || !!material.thicknessMap,\n\t\t\t\tuvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmission || !!material.transmissionMap || !!material.thicknessMap) && !!material.displacementMap,\n\t\t\t\tfog: !!fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: fog && fog.isFogExp2,\n\t\t\t\tflatShading: !!material.flatShading,\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\t\tskinning: object.isSkinnedMesh === true && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\t\tnumClipIntersection: clipping.numIntersection,\n\t\t\t\tdithering: material.dithering,\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\t\t\t\tdepthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\t\t\t};\n\t\t\treturn parameters;\n\t\t}\n\n\t\tfunction getProgramCacheKey(parameters) {\n\t\t\tconst array = [];\n\n\t\t\tif (parameters.shaderID) {\n\t\t\t\tarray.push(parameters.shaderID);\n\t\t\t} else {\n\t\t\t\tarray.push(parameters.fragmentShader);\n\t\t\t\tarray.push(parameters.vertexShader);\n\t\t\t}\n\n\t\t\tif (parameters.defines !== undefined) {\n\t\t\t\tfor (const name in parameters.defines) {\n\t\t\t\t\tarray.push(name);\n\t\t\t\t\tarray.push(parameters.defines[name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parameters.isRawShaderMaterial === false) {\n\t\t\t\tfor (let i = 0; i < parameterNames.length; i++) {\n\t\t\t\t\tarray.push(parameters[parameterNames[i]]);\n\t\t\t\t}\n\n\t\t\t\tarray.push(renderer.outputEncoding);\n\t\t\t\tarray.push(renderer.gammaFactor);\n\t\t\t}\n\n\t\t\tarray.push(parameters.customProgramCacheKey);\n\t\t\treturn array.join();\n\t\t}\n\n\t\tfunction getUniforms(material) {\n\t\t\tconst shaderID = shaderIDs[material.type];\n\t\t\tlet uniforms;\n\n\t\t\tif (shaderID) {\n\t\t\t\tconst shader = ShaderLib[shaderID];\n\t\t\t\tuniforms = UniformsUtils.clone(shader.uniforms);\n\t\t\t} else {\n\t\t\t\tuniforms = material.uniforms;\n\t\t\t}\n\n\t\t\treturn uniforms;\n\t\t}\n\n\t\tfunction acquireProgram(parameters, cacheKey) {\n\t\t\tlet program; // Check if code has been already compiled\n\n\t\t\tfor (let p = 0, pl = programs.length; p < pl; p++) {\n\t\t\t\tconst preexistingProgram = programs[p];\n\n\t\t\t\tif (preexistingProgram.cacheKey === cacheKey) {\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++program.usedTimes;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (program === undefined) {\n\t\t\t\tprogram = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n\t\t\t\tprograms.push(program);\n\t\t\t}\n\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction releaseProgram(program) {\n\t\t\tif (--program.usedTimes === 0) {\n\t\t\t\t// Remove from unordered set\n\t\t\t\tconst i = programs.indexOf(program);\n\t\t\t\tprograms[i] = programs[programs.length - 1];\n\t\t\t\tprograms.pop(); // Free WebGL resources\n\n\t\t\t\tprogram.destroy();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tgetUniforms: getUniforms,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\t}\n\n\tfunction WebGLProperties() {\n\t\tlet properties = new WeakMap();\n\n\t\tfunction get(object) {\n\t\t\tlet map = properties.get(object);\n\n\t\t\tif (map === undefined) {\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set(object, map);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}\n\n\t\tfunction remove(object) {\n\t\t\tproperties.delete(object);\n\t\t}\n\n\t\tfunction update(object, key, value) {\n\t\t\tproperties.get(object)[key] = value;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tproperties = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction painterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.program !== b.program) {\n\t\t\treturn a.program.id - b.program.id;\n\t\t} else if (a.material.id !== b.material.id) {\n\t\t\treturn a.material.id - b.material.id;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn a.z - b.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction reversePainterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn b.z - a.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction WebGLRenderList(properties) {\n\t\tconst renderItems = [];\n\t\tlet renderItemsIndex = 0;\n\t\tconst opaque = [];\n\t\tconst transmissive = [];\n\t\tconst transparent = [];\n\t\tconst defaultProgram = {\n\t\t\tid: -1\n\t\t};\n\n\t\tfunction init() {\n\t\t\trenderItemsIndex = 0;\n\t\t\topaque.length = 0;\n\t\t\ttransmissive.length = 0;\n\t\t\ttransparent.length = 0;\n\t\t}\n\n\t\tfunction getNextRenderItem(object, geometry, material, groupOrder, z, group) {\n\t\t\tlet renderItem = renderItems[renderItemsIndex];\n\t\t\tconst materialProperties = properties.get(material);\n\n\t\t\tif (renderItem === undefined) {\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\t\t\t\trenderItems[renderItemsIndex] = renderItem;\n\t\t\t} else {\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\t\t\t}\n\n\t\t\trenderItemsIndex++;\n\t\t\treturn renderItem;\n\t\t}\n\n\t\tfunction push(object, geometry, material, groupOrder, z, group) {\n\t\t\tconst renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\ttransmissive.push(renderItem);\n\t\t\t} else if (material.transparent === true) {\n\t\t\t\ttransparent.push(renderItem);\n\t\t\t} else {\n\t\t\t\topaque.push(renderItem);\n\t\t\t}\n\t\t}\n\n\t\tfunction unshift(object, geometry, material, groupOrder, z, group) {\n\t\t\tconst renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\ttransmissive.unshift(renderItem);\n\t\t\t} else if (material.transparent === true) {\n\t\t\t\ttransparent.unshift(renderItem);\n\t\t\t} else {\n\t\t\t\topaque.unshift(renderItem);\n\t\t\t}\n\t\t}\n\n\t\tfunction sort(customOpaqueSort, customTransparentSort) {\n\t\t\tif (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\n\t\t\tif (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);\n\t\t\tif (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);\n\t\t}\n\n\t\tfunction finish() {\n\t\t\t// Clear references from inactive renderItems in the list\n\t\t\tfor (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {\n\t\t\t\tconst renderItem = renderItems[i];\n\t\t\t\tif (renderItem.id === null) break;\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransmissive: transmissive,\n\t\t\ttransparent: transparent,\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\t\t\tsort: sort\n\t\t};\n\t}\n\n\tfunction WebGLRenderLists(properties) {\n\t\tlet lists = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth) {\n\t\t\tlet list;\n\n\t\t\tif (lists.has(scene) === false) {\n\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\tlists.set(scene, [list]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= lists.get(scene).length) {\n\t\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\t\tlists.get(scene).push(list);\n\t\t\t\t} else {\n\t\t\t\t\tlist = lists.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tlists = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction UniformsCache() {\n\t\tconst lights = {};\n\t\treturn {\n\t\t\tget: function (light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tlet uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction ShadowUniformsCache() {\n\t\tconst lights = {};\n\t\treturn {\n\t\t\tget: function (light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tlet uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tlet nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst(lightA, lightB) {\n\t\treturn (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n\t}\n\n\tfunction WebGLLights(extensions, capabilities) {\n\t\tconst cache = new UniformsCache();\n\t\tconst shadowCache = ShadowUniformsCache();\n\t\tconst state = {\n\t\t\tversion: 0,\n\t\t\thash: {\n\t\t\t\tdirectionalLength: -1,\n\t\t\t\tpointLength: -1,\n\t\t\t\tspotLength: -1,\n\t\t\t\trectAreaLength: -1,\n\t\t\t\themiLength: -1,\n\t\t\t\tnumDirectionalShadows: -1,\n\t\t\t\tnumPointShadows: -1,\n\t\t\t\tnumSpotShadows: -1\n\t\t\t},\n\t\t\tambient: [0, 0, 0],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\trectAreaLTC1: null,\n\t\t\trectAreaLTC2: null,\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\t\t};\n\n\t\tfor (let i = 0; i < 9; i++) state.probe.push(new Vector3());\n\n\t\tconst vector3 = new Vector3();\n\t\tconst matrix4 = new Matrix4();\n\t\tconst matrix42 = new Matrix4();\n\n\t\tfunction setup(lights) {\n\t\t\tlet r = 0,\n\t\t\t\t\tg = 0,\n\t\t\t\t\tb = 0;\n\n\t\t\tfor (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);\n\n\t\t\tlet directionalLength = 0;\n\t\t\tlet pointLength = 0;\n\t\t\tlet spotLength = 0;\n\t\t\tlet rectAreaLength = 0;\n\t\t\tlet hemiLength = 0;\n\t\t\tlet numDirectionalShadows = 0;\n\t\t\tlet numPointShadows = 0;\n\t\t\tlet numSpotShadows = 0;\n\t\t\tlights.sort(shadowCastingLightsFirst);\n\n\t\t\tfor (let i = 0, l = lights.length; i < l; i++) {\n\t\t\t\tconst light = lights[i];\n\t\t\t\tconst color = light.color;\n\t\t\t\tconst intensity = light.intensity;\n\t\t\t\tconst distance = light.distance;\n\t\t\t\tconst shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n\t\t\t\tif (light.isAmbientLight) {\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\t\t\t\t} else if (light.isLightProbe) {\n\t\t\t\t\tfor (let j = 0; j < 9; j++) {\n\t\t\t\t\t\tstate.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n\t\t\t\t\t}\n\t\t\t\t} else if (light.isDirectionalLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.directionalShadow[directionalLength] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[directionalLength] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumDirectionalShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[directionalLength] = uniforms;\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.color.copy(color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.distance = distance;\n\t\t\t\t\tuniforms.coneCos = Math.cos(light.angle);\n\t\t\t\t\tuniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.spotShadow[spotLength] = shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[spotLength] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[spotLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumSpotShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[spotLength] = uniforms;\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tconst uniforms = cache.get(light); // (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\n\t\t\t\t\tuniforms.color.copy(color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\t\t\t\t\tuniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\t\t\t\t\tstate.rectArea[rectAreaLength] = uniforms;\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\t\t\t\t\t\tstate.pointShadow[pointLength] = shadowUniforms;\n\t\t\t\t\t\tstate.pointShadowMap[pointLength] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[pointLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumPointShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[pointLength] = uniforms;\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.skyColor.copy(light.color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n\t\t\t\t\tstate.hemi[hemiLength] = uniforms;\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rectAreaLength > 0) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t// WebGL 2\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t} else {\n\t\t\t\t\t// WebGL 1\n\t\t\t\t\tif (extensions.has('OES_texture_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t\t} else if (extensions.has('OES_texture_half_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.ambient[0] = r;\n\t\t\tstate.ambient[1] = g;\n\t\t\tstate.ambient[2] = b;\n\t\t\tconst hash = state.hash;\n\n\t\t\tif (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\t\tstate.version = nextVersion++;\n\t\t\t}\n\t\t}\n\n\t\tfunction setupView(lights, camera) {\n\t\t\tlet directionalLength = 0;\n\t\t\tlet pointLength = 0;\n\t\t\tlet spotLength = 0;\n\t\t\tlet rectAreaLength = 0;\n\t\t\tlet hemiLength = 0;\n\t\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tfor (let i = 0, l = lights.length; i < l; i++) {\n\t\t\t\tconst light = lights[i];\n\n\t\t\t\tif (light.isDirectionalLight) {\n\t\t\t\t\tconst uniforms = state.directional[directionalLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tconst uniforms = state.spot[spotLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix);\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tconst uniforms = state.rectArea[rectAreaLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy(light.matrixWorld);\n\t\t\t\t\tmatrix4.premultiply(viewMatrix);\n\t\t\t\t\tmatrix42.extractRotation(matrix4);\n\t\t\t\t\tuniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\t\t\t\t\tuniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4(matrix42);\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4(matrix42);\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tconst uniforms = state.point[pointLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix);\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tconst uniforms = state.hemi[hemiLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tuniforms.direction.normalize();\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tsetupView: setupView,\n\t\t\tstate: state\n\t\t};\n\t}\n\n\tfunction WebGLRenderState(extensions, capabilities) {\n\t\tconst lights = new WebGLLights(extensions, capabilities);\n\t\tconst lightsArray = [];\n\t\tconst shadowsArray = [];\n\n\t\tfunction init() {\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\t\t}\n\n\t\tfunction pushLight(light) {\n\t\t\tlightsArray.push(light);\n\t\t}\n\n\t\tfunction pushShadow(shadowLight) {\n\t\t\tshadowsArray.push(shadowLight);\n\t\t}\n\n\t\tfunction setupLights() {\n\t\t\tlights.setup(lightsArray);\n\t\t}\n\n\t\tfunction setupLightsView(camera) {\n\t\t\tlights.setupView(lightsArray, camera);\n\t\t}\n\n\t\tconst state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\t\t\tlights: lights\n\t\t};\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\t\t\tsetupLightsView: setupLightsView,\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\t}\n\n\tfunction WebGLRenderStates(extensions, capabilities) {\n\t\tlet renderStates = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth = 0) {\n\t\t\tlet renderState;\n\n\t\t\tif (renderStates.has(scene) === false) {\n\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\trenderStates.set(scene, [renderState]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= renderStates.get(scene).length) {\n\t\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\t\trenderStates.get(scene).push(renderState);\n\t\t\t\t} else {\n\t\t\t\t\trenderState = renderStates.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn renderState;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\trenderStates = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\t/**\n\t * parameters = {\n\t *\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t * }\n\t */\n\n\tclass MeshDepthMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshDepthMaterial';\n\t\t\tthis.depthPacking = BasicDepthPacking;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.depthPacking = source.depthPacking;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\n\t *\treferencePosition: <float>,\n\t *\tnearDistance: <float>,\n\t *\tfarDistance: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tclass MeshDistanceMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshDistanceMaterial';\n\t\t\tthis.referencePosition = new Vector3();\n\t\t\tthis.nearDistance = 1;\n\t\t\tthis.farDistance = 1000;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.fog = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.referencePosition.copy(source.referencePosition);\n\t\t\tthis.nearDistance = source.nearDistance;\n\t\t\tthis.farDistance = source.farDistance;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\\n\\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean * HALF_SAMPLE_RATE;\\n\\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\tfunction WebGLShadowMap(_renderer, _objects, _capabilities) {\n\t\tlet _frustum = new Frustum();\n\n\t\tconst _shadowMapSize = new Vector2(),\n\t\t\t\t\t_viewportSize = new Vector2(),\n\t\t\t\t\t_viewport = new Vector4(),\n\t\t\t\t\t_depthMaterials = [],\n\t\t\t\t\t_distanceMaterials = [],\n\t\t\t\t\t_materialCache = {},\n\t\t\t\t\t_maxTextureSize = _capabilities.maxTextureSize;\n\n\t\tconst shadowSide = {\n\t\t\t0: BackSide,\n\t\t\t1: FrontSide,\n\t\t\t2: DoubleSide\n\t\t};\n\t\tconst shadowMaterialVertical = new ShaderMaterial({\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\tresolution: {\n\t\t\t\t\tvalue: new Vector2()\n\t\t\t\t},\n\t\t\t\tradius: {\n\t\t\t\t\tvalue: 4.0\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: vsm_vert,\n\t\t\tfragmentShader: vsm_frag\n\t\t});\n\t\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\t\tconst fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));\n\t\tconst fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\n\t\tconst scope = this;\n\t\tthis.enabled = false;\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function (lights, scene, camera) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (scope.autoUpdate === false && scope.needsUpdate === false) return;\n\t\t\tif (lights.length === 0) return;\n\n\t\t\tconst currentRenderTarget = _renderer.getRenderTarget();\n\n\t\t\tconst activeCubeFace = _renderer.getActiveCubeFace();\n\n\t\t\tconst activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tconst _state = _renderer.state; // Set GL state for depth map.\n\n\t\t\t_state.setBlending(NoBlending);\n\n\t\t\t_state.buffers.color.setClear(1, 1, 1, 1);\n\n\t\t\t_state.buffers.depth.setTest(true);\n\n\t\t\t_state.setScissorTest(false); // render depth map\n\n\n\t\t\tfor (let i = 0, il = lights.length; i < il; i++) {\n\t\t\t\tconst light = lights[i];\n\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\tif (shadow === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\n\n\t\t\t\t_shadowMapSize.copy(shadow.mapSize);\n\n\t\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply(shadowFrameExtents);\n\n\t\t\t\t_viewportSize.copy(shadow.mapSize);\n\n\t\t\t\tif (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {\n\t\t\t\t\tif (_shadowMapSize.x > _maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_shadowMapSize.y > _maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tconst pars = {\n\t\t\t\t\t\tminFilter: LinearFilter,\n\t\t\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null) {\n\t\t\t\t\tconst pars = {\n\t\t\t\t\t\tminFilter: NearestFilter,\n\t\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor (let vp = 0; vp < viewportCount; vp++) {\n\t\t\t\t\tconst viewport = shadow.getViewport(vp);\n\n\t\t\t\t\t_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);\n\n\t\t\t\t\t_state.viewport(_viewport);\n\n\t\t\t\t\tshadow.updateMatrices(light, vp);\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\t\t\t\t\trenderObject(scene, camera, shadow.camera, light, this.type);\n\t\t\t\t} // do blur pass for VSM\n\n\n\t\t\t\tif (!shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tVSMPass(shadow, camera);\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\n\t\t};\n\n\t\tfunction VSMPass(shadow, camera) {\n\t\t\tconst geometry = _objects.update(fullScreenMesh); // vertical pass\n\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.mapPass);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass\n\n\n\t\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);\n\t\t}\n\n\t\tfunction getDepthMaterialVariant(useMorphing) {\n\t\t\tconst index = useMorphing << 0;\n\t\t\tlet material = _depthMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDepthMaterial({\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\t\t\t\t\tmorphTargets: useMorphing\n\t\t\t\t});\n\t\t\t\t_depthMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant(useMorphing) {\n\t\t\tconst index = useMorphing << 0;\n\t\t\tlet material = _distanceMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDistanceMaterial({\n\t\t\t\t\tmorphTargets: useMorphing\n\t\t\t\t});\n\t\t\t\t_distanceMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {\n\t\t\tlet result = null;\n\t\t\tlet getMaterialVariant = getDepthMaterialVariant;\n\t\t\tlet customMaterial = object.customDepthMaterial;\n\n\t\t\tif (light.isPointLight === true) {\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\t\t}\n\n\t\t\tif (customMaterial === undefined) {\n\t\t\t\tlet useMorphing = false;\n\n\t\t\t\tif (material.morphTargets === true) {\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\t\t\t}\n\n\t\t\t\tresult = getMaterialVariant(useMorphing);\n\t\t\t} else {\n\t\t\t\tresult = customMaterial;\n\t\t\t}\n\n\t\t\tif (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\t\t\t\tconst keyA = result.uuid,\n\t\t\t\t\t\t\tkeyB = material.uuid;\n\t\t\t\tlet materialsForVariant = _materialCache[keyA];\n\n\t\t\t\tif (materialsForVariant === undefined) {\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[keyA] = materialsForVariant;\n\t\t\t\t}\n\n\t\t\t\tlet cachedMaterial = materialsForVariant[keyB];\n\n\t\t\t\tif (cachedMaterial === undefined) {\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[keyB] = cachedMaterial;\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif (type === VSMShadowMap) {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : material.side;\n\t\t\t} else {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\n\t\t\t\tresult.referencePosition.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction renderObject(object, camera, shadowCamera, light, type) {\n\t\t\tif (object.visible === false) return;\n\t\t\tconst visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible && (object.isMesh || object.isLine || object.isPoints)) {\n\t\t\t\tif ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n\t\t\t\t\tconst geometry = _objects.update(object);\n\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor (let k = 0, kl = groups.length; k < kl; k++) {\n\t\t\t\t\t\t\tconst group = groups[k];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\tconst depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\trenderObject(children[i], camera, shadowCamera, light, type);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction WebGLState(gl, extensions, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\t\t\tlet locked = false;\n\t\t\tconst color = new Vector4();\n\t\t\tlet currentColorMask = null;\n\t\t\tconst currentColorClear = new Vector4(0, 0, 0, 0);\n\t\t\treturn {\n\t\t\t\tsetMask: function (colorMask) {\n\t\t\t\t\tif (currentColorMask !== colorMask && !locked) {\n\t\t\t\t\t\tgl.colorMask(colorMask, colorMask, colorMask, colorMask);\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (r, g, b, a, premultipliedAlpha) {\n\t\t\t\t\tif (premultipliedAlpha === true) {\n\t\t\t\t\t\tr *= a;\n\t\t\t\t\t\tg *= a;\n\t\t\t\t\t\tb *= a;\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set(r, g, b, a);\n\n\t\t\t\t\tif (currentColorClear.equals(color) === false) {\n\t\t\t\t\t\tgl.clearColor(r, g, b, a);\n\t\t\t\t\t\tcurrentColorClear.copy(color);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set(-1, 0, 0, 0); // set to invalid state\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\t\t\tlet locked = false;\n\t\t\tlet currentDepthMask = null;\n\t\t\tlet currentDepthFunc = null;\n\t\t\tlet currentDepthClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function (depthTest) {\n\t\t\t\t\tif (depthTest) {\n\t\t\t\t\t\tenable(gl.DEPTH_TEST);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdisable(gl.DEPTH_TEST);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function (depthMask) {\n\t\t\t\t\tif (currentDepthMask !== depthMask && !locked) {\n\t\t\t\t\t\tgl.depthMask(depthMask);\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function (depthFunc) {\n\t\t\t\t\tif (currentDepthFunc !== depthFunc) {\n\t\t\t\t\t\tif (depthFunc) {\n\t\t\t\t\t\t\tswitch (depthFunc) {\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.NEVER);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.ALWAYS);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LESS);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.EQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.GEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.GREATER);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.NOTEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (depth) {\n\t\t\t\t\tif (currentDepthClear !== depth) {\n\t\t\t\t\t\tgl.clearDepth(depth);\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\t\t\tlet locked = false;\n\t\t\tlet currentStencilMask = null;\n\t\t\tlet currentStencilFunc = null;\n\t\t\tlet currentStencilRef = null;\n\t\t\tlet currentStencilFuncMask = null;\n\t\t\tlet currentStencilFail = null;\n\t\t\tlet currentStencilZFail = null;\n\t\t\tlet currentStencilZPass = null;\n\t\t\tlet currentStencilClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function (stencilTest) {\n\t\t\t\t\tif (!locked) {\n\t\t\t\t\t\tif (stencilTest) {\n\t\t\t\t\t\t\tenable(gl.STENCIL_TEST);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisable(gl.STENCIL_TEST);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function (stencilMask) {\n\t\t\t\t\tif (currentStencilMask !== stencilMask && !locked) {\n\t\t\t\t\t\tgl.stencilMask(stencilMask);\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function (stencilFunc, stencilRef, stencilMask) {\n\t\t\t\t\tif (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n\t\t\t\t\t\tgl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetOp: function (stencilFail, stencilZFail, stencilZPass) {\n\t\t\t\t\tif (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n\t\t\t\t\t\tgl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (stencil) {\n\t\t\t\t\tif (currentStencilClear !== stencil) {\n\t\t\t\t\t\tgl.clearStencil(stencil);\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t} //\n\n\n\t\tconst colorBuffer = new ColorBuffer();\n\t\tconst depthBuffer = new DepthBuffer();\n\t\tconst stencilBuffer = new StencilBuffer();\n\t\tlet enabledCapabilities = {};\n\t\tlet xrFramebuffer = null;\n\t\tlet currentBoundFramebuffers = {};\n\t\tlet currentProgram = null;\n\t\tlet currentBlendingEnabled = false;\n\t\tlet currentBlending = null;\n\t\tlet currentBlendEquation = null;\n\t\tlet currentBlendSrc = null;\n\t\tlet currentBlendDst = null;\n\t\tlet currentBlendEquationAlpha = null;\n\t\tlet currentBlendSrcAlpha = null;\n\t\tlet currentBlendDstAlpha = null;\n\t\tlet currentPremultipledAlpha = false;\n\t\tlet currentFlipSided = null;\n\t\tlet currentCullFace = null;\n\t\tlet currentLineWidth = null;\n\t\tlet currentPolygonOffsetFactor = null;\n\t\tlet currentPolygonOffsetUnits = null;\n\t\tconst maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n\t\tlet lineWidthAvailable = false;\n\t\tlet version = 0;\n\t\tconst glVersion = gl.getParameter(gl.VERSION);\n\n\t\tif (glVersion.indexOf('WebGL') !== -1) {\n\t\t\tversion = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 1.0;\n\t\t} else if (glVersion.indexOf('OpenGL ES') !== -1) {\n\t\t\tversion = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 2.0;\n\t\t}\n\n\t\tlet currentTextureSlot = null;\n\t\tlet currentBoundTextures = {};\n\t\tconst scissorParam = gl.getParameter(gl.SCISSOR_BOX);\n\t\tconst viewportParam = gl.getParameter(gl.VIEWPORT);\n\t\tconst currentScissor = new Vector4().fromArray(scissorParam);\n\t\tconst currentViewport = new Vector4().fromArray(viewportParam);\n\n\t\tfunction createTexture(type, target, count) {\n\t\t\tconst data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n\t\t\tconst texture = gl.createTexture();\n\t\t\tgl.bindTexture(type, texture);\n\t\t\tgl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\tgl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tgl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tconst emptyTextures = {};\n\t\temptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);\n\t\temptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); // init\n\n\t\tcolorBuffer.setClear(0, 0, 0, 1);\n\t\tdepthBuffer.setClear(1);\n\t\tstencilBuffer.setClear(0);\n\t\tenable(gl.DEPTH_TEST);\n\t\tdepthBuffer.setFunc(LessEqualDepth);\n\t\tsetFlipSided(false);\n\t\tsetCullFace(CullFaceBack);\n\t\tenable(gl.CULL_FACE);\n\t\tsetBlending(NoBlending); //\n\n\t\tfunction enable(id) {\n\t\t\tif (enabledCapabilities[id] !== true) {\n\t\t\t\tgl.enable(id);\n\t\t\t\tenabledCapabilities[id] = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction disable(id) {\n\t\t\tif (enabledCapabilities[id] !== false) {\n\t\t\t\tgl.disable(id);\n\t\t\t\tenabledCapabilities[id] = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindXRFramebuffer(framebuffer) {\n\t\t\tif (framebuffer !== xrFramebuffer) {\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\t\t\t\txrFramebuffer = framebuffer;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindFramebuffer(target, framebuffer) {\n\t\t\tif (framebuffer === null && xrFramebuffer !== null) framebuffer = xrFramebuffer; // use active XR framebuffer if available\n\n\t\t\tif (currentBoundFramebuffers[target] !== framebuffer) {\n\t\t\t\tgl.bindFramebuffer(target, framebuffer);\n\t\t\t\tcurrentBoundFramebuffers[target] = framebuffer;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\n\t\t\t\t\tif (target === gl.DRAW_FRAMEBUFFER) {\n\t\t\t\t\t\tcurrentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (target === gl.FRAMEBUFFER) {\n\t\t\t\t\t\tcurrentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction useProgram(program) {\n\t\t\tif (currentProgram !== program) {\n\t\t\t\tgl.useProgram(program);\n\t\t\t\tcurrentProgram = program;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tconst equationToGL = {\n\t\t\t[AddEquation]: gl.FUNC_ADD,\n\t\t\t[SubtractEquation]: gl.FUNC_SUBTRACT,\n\t\t\t[ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT\n\t\t};\n\n\t\tif (isWebGL2) {\n\t\t\tequationToGL[MinEquation] = gl.MIN;\n\t\t\tequationToGL[MaxEquation] = gl.MAX;\n\t\t} else {\n\t\t\tconst extension = extensions.get('EXT_blend_minmax');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tequationToGL[MinEquation] = extension.MIN_EXT;\n\t\t\t\tequationToGL[MaxEquation] = extension.MAX_EXT;\n\t\t\t}\n\t\t}\n\n\t\tconst factorToGL = {\n\t\t\t[ZeroFactor]: gl.ZERO,\n\t\t\t[OneFactor]: gl.ONE,\n\t\t\t[SrcColorFactor]: gl.SRC_COLOR,\n\t\t\t[SrcAlphaFactor]: gl.SRC_ALPHA,\n\t\t\t[SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,\n\t\t\t[DstColorFactor]: gl.DST_COLOR,\n\t\t\t[DstAlphaFactor]: gl.DST_ALPHA,\n\t\t\t[OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,\n\t\t\t[OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,\n\t\t\t[OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,\n\t\t\t[OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA\n\t\t};\n\n\t\tfunction setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n\t\t\tif (blending === NoBlending) {\n\t\t\t\tif (currentBlendingEnabled === true) {\n\t\t\t\t\tdisable(gl.BLEND);\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentBlendingEnabled === false) {\n\t\t\t\tenable(gl.BLEND);\n\t\t\t\tcurrentBlendingEnabled = true;\n\t\t\t}\n\n\t\t\tif (blending !== CustomBlending) {\n\t\t\t\tif (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n\t\t\t\t\tif (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n\t\t\t\t\t\tgl.blendEquation(gl.FUNC_ADD);\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (premultipliedAlpha) {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ONE, gl.ONE);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t} // custom blending\n\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n\t\t\t\tgl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\t\t}\n\n\t\t\tif (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n\t\t\t\tgl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\t\t}\n\n\t\tfunction setMaterial(material, frontFaceCW) {\n\t\t\tmaterial.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);\n\t\t\tlet flipSided = material.side === BackSide;\n\t\t\tif (frontFaceCW) flipSided = !flipSided;\n\t\t\tsetFlipSided(flipSided);\n\t\t\tmaterial.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n\t\t\tdepthBuffer.setFunc(material.depthFunc);\n\t\t\tdepthBuffer.setTest(material.depthTest);\n\t\t\tdepthBuffer.setMask(material.depthWrite);\n\t\t\tcolorBuffer.setMask(material.colorWrite);\n\t\t\tconst stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest(stencilWrite);\n\n\t\t\tif (stencilWrite) {\n\t\t\t\tstencilBuffer.setMask(material.stencilWriteMask);\n\t\t\t\tstencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n\t\t\t\tstencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n\t\t\t}\n\n\t\t\tsetPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n\t\t\tmaterial.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\t\t} //\n\n\n\t\tfunction setFlipSided(flipSided) {\n\t\t\tif (currentFlipSided !== flipSided) {\n\t\t\t\tif (flipSided) {\n\t\t\t\t\tgl.frontFace(gl.CW);\n\t\t\t\t} else {\n\t\t\t\t\tgl.frontFace(gl.CCW);\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\t\t\t}\n\t\t}\n\n\t\tfunction setCullFace(cullFace) {\n\t\t\tif (cullFace !== CullFaceNone) {\n\t\t\t\tenable(gl.CULL_FACE);\n\n\t\t\t\tif (cullFace !== currentCullFace) {\n\t\t\t\t\tif (cullFace === CullFaceBack) {\n\t\t\t\t\t\tgl.cullFace(gl.BACK);\n\t\t\t\t\t} else if (cullFace === CullFaceFront) {\n\t\t\t\t\t\tgl.cullFace(gl.FRONT);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgl.cullFace(gl.FRONT_AND_BACK);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(gl.CULL_FACE);\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\t\t}\n\n\t\tfunction setLineWidth(width) {\n\t\t\tif (width !== currentLineWidth) {\n\t\t\t\tif (lineWidthAvailable) gl.lineWidth(width);\n\t\t\t\tcurrentLineWidth = width;\n\t\t\t}\n\t\t}\n\n\t\tfunction setPolygonOffset(polygonOffset, factor, units) {\n\t\t\tif (polygonOffset) {\n\t\t\t\tenable(gl.POLYGON_OFFSET_FILL);\n\n\t\t\t\tif (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n\t\t\t\t\tgl.polygonOffset(factor, units);\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(gl.POLYGON_OFFSET_FILL);\n\t\t\t}\n\t\t}\n\n\t\tfunction setScissorTest(scissorTest) {\n\t\t\tif (scissorTest) {\n\t\t\t\tenable(gl.SCISSOR_TEST);\n\t\t\t} else {\n\t\t\t\tdisable(gl.SCISSOR_TEST);\n\t\t\t}\n\t\t} // texture\n\n\n\t\tfunction activeTexture(webglSlot) {\n\t\t\tif (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\tif (currentTextureSlot !== webglSlot) {\n\t\t\t\tgl.activeTexture(webglSlot);\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindTexture(webglType, webglTexture) {\n\t\t\tif (currentTextureSlot === null) {\n\t\t\t\tactiveTexture();\n\t\t\t}\n\n\t\t\tlet boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture === undefined) {\n\t\t\t\tboundTexture = {\n\t\t\t\t\ttype: undefined,\n\t\t\t\t\ttexture: undefined\n\t\t\t\t};\n\t\t\t\tcurrentBoundTextures[currentTextureSlot] = boundTexture;\n\t\t\t}\n\n\t\t\tif (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n\t\t\t\tgl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\t\t\t}\n\t\t}\n\n\t\tfunction unbindTexture() {\n\t\t\tconst boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture !== undefined && boundTexture.type !== undefined) {\n\t\t\t\tgl.bindTexture(boundTexture.type, null);\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\t\t\t}\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.compressedTexImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage3D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage3D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction scissor(scissor) {\n\t\t\tif (currentScissor.equals(scissor) === false) {\n\t\t\t\tgl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n\t\t\t\tcurrentScissor.copy(scissor);\n\t\t\t}\n\t\t}\n\n\t\tfunction viewport(viewport) {\n\t\t\tif (currentViewport.equals(viewport) === false) {\n\t\t\t\tgl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n\t\t\t\tcurrentViewport.copy(viewport);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction reset() {\n\t\t\t// reset state\n\t\t\tgl.disable(gl.BLEND);\n\t\t\tgl.disable(gl.CULL_FACE);\n\t\t\tgl.disable(gl.DEPTH_TEST);\n\t\t\tgl.disable(gl.POLYGON_OFFSET_FILL);\n\t\t\tgl.disable(gl.SCISSOR_TEST);\n\t\t\tgl.disable(gl.STENCIL_TEST);\n\t\t\tgl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\t\t\tgl.blendEquation(gl.FUNC_ADD);\n\t\t\tgl.blendFunc(gl.ONE, gl.ZERO);\n\t\t\tgl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);\n\t\t\tgl.colorMask(true, true, true, true);\n\t\t\tgl.clearColor(0, 0, 0, 0);\n\t\t\tgl.depthMask(true);\n\t\t\tgl.depthFunc(gl.LESS);\n\t\t\tgl.clearDepth(1);\n\t\t\tgl.stencilMask(0xffffffff);\n\t\t\tgl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);\n\t\t\tgl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n\t\t\tgl.clearStencil(0);\n\t\t\tgl.cullFace(gl.BACK);\n\t\t\tgl.frontFace(gl.CCW);\n\t\t\tgl.polygonOffset(0, 0);\n\t\t\tgl.activeTexture(gl.TEXTURE0);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\t\t\tif (isWebGL2 === true) {\n\t\t\t\tgl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n\t\t\t\tgl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n\t\t\t}\n\n\t\t\tgl.useProgram(null);\n\t\t\tgl.lineWidth(1);\n\t\t\tgl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals\n\n\t\t\tenabledCapabilities = {};\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\t\t\txrFramebuffer = null;\n\t\t\tcurrentBoundFramebuffers = {};\n\t\t\tcurrentProgram = null;\n\t\t\tcurrentBlendingEnabled = false;\n\t\t\tcurrentBlending = null;\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\t\t\tcurrentPremultipledAlpha = false;\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\t\t\tcurrentLineWidth = null;\n\t\t\tcurrentPolygonOffsetFactor = null;\n\t\t\tcurrentPolygonOffsetUnits = null;\n\t\t\tcurrentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tcurrentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\t\t}\n\n\t\treturn {\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tbindFramebuffer: bindFramebuffer,\n\t\t\tbindXRFramebuffer: bindXRFramebuffer,\n\t\t\tuseProgram: useProgram,\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\t\t\tsetScissorTest: setScissorTest,\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\t\t\treset: reset\n\t\t};\n\t}\n\n\tfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst maxTextures = capabilities.maxTextures;\n\t\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\t\tconst maxTextureSize = capabilities.maxTextureSize;\n\t\tconst maxSamples = capabilities.maxSamples;\n\n\t\tconst _videoTextures = new WeakMap();\n\n\t\tlet _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n\t\tlet useOffscreenCanvas = false;\n\n\t\ttry {\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n\t\t} catch (err) {// Ignore any errors\n\t\t}\n\n\t\tfunction createCanvas(width, height) {\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\t\t\treturn useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t}\n\n\t\tfunction resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n\t\t\tlet scale = 1; // handle case if texture exceeds max size\n\n\t\t\tif (image.width > maxSize || image.height > maxSize) {\n\t\t\t\tscale = maxSize / Math.max(image.width, image.height);\n\t\t\t} // only perform resize if necessary\n\n\n\t\t\tif (scale < 1 || needsPowerOfTwo === true) {\n\t\t\t\t// only perform resize for certain image types\n\t\t\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t\t\tconst floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n\t\t\t\t\tconst width = floor(scale * image.width);\n\t\t\t\t\tconst height = floor(scale * image.height);\n\t\t\t\t\tif (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n\t\t\t\t\tconst canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t\tconst context = canvas.getContext('2d');\n\t\t\t\t\tcontext.drawImage(image, 0, 0, width, height);\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n\t\t\t\t\treturn canvas;\n\t\t\t\t} else {\n\t\t\t\t\tif ('data' in image) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn image;\n\t\t}\n\n\t\tfunction isPowerOfTwo$1(image) {\n\t\t\treturn isPowerOfTwo(image.width) && isPowerOfTwo(image.height);\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo(texture) {\n\t\t\tif (isWebGL2) return false;\n\t\t\treturn texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps(texture, supportsMips) {\n\t\t\treturn texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction generateMipmap(target, texture, width, height) {\n\t\t\t_gl.generateMipmap(target);\n\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\ttextureProperties.__maxMipLevel = Math.log2(Math.max(width, height));\n\t\t}\n\n\t\tfunction getInternalFormat(internalFormatName, glFormat, glType) {\n\t\t\tif (isWebGL2 === false) return glFormat;\n\n\t\t\tif (internalFormatName !== null) {\n\t\t\t\tif (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n\t\t\t}\n\n\t\t\tlet internalFormat = glFormat;\n\n\t\t\tif (glFormat === _gl.RED) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.R32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\n\t\t\t}\n\n\t\t\tif (glFormat === _gl.RGB) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.RGB32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGB16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8;\n\t\t\t}\n\n\t\t\tif (glFormat === _gl.RGBA) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGBA8;\n\t\t\t}\n\n\t\t\tif (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {\n\t\t\t\textensions.get('EXT_color_buffer_float');\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\t\t} // Fallback filters for non-power-of-2 textures\n\n\n\t\tfunction filterFallback(f) {\n\t\t\tif (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n\t\t\t\treturn _gl.NEAREST;\n\t\t\t}\n\n\t\t\treturn _gl.LINEAR;\n\t\t} //\n\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tdeallocateTexture(texture);\n\n\t\t\tif (texture.isVideoTexture) {\n\t\t\t\t_videoTextures.delete(texture);\n\t\t\t}\n\n\t\t\tinfo.memory.textures--;\n\t\t}\n\n\t\tfunction onRenderTargetDispose(event) {\n\t\t\tconst renderTarget = event.target;\n\t\t\trenderTarget.removeEventListener('dispose', onRenderTargetDispose);\n\t\t\tdeallocateRenderTarget(renderTarget);\n\t\t} //\n\n\n\t\tfunction deallocateTexture(texture) {\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (textureProperties.__webglInit === undefined) return;\n\n\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\tproperties.remove(texture);\n\t\t}\n\n\t\tfunction deallocateRenderTarget(renderTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (!renderTarget) return;\n\n\t\t\tif (textureProperties.__webglTexture !== undefined) {\n\t\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\t\tinfo.memory.textures--;\n\t\t\t}\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\trenderTarget.depthTexture.dispose();\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n\t\t\t\tif (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\tif (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n\t\t\t\tif (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLMultipleRenderTargets) {\n\t\t\t\tfor (let i = 0, il = texture.length; i < il; i++) {\n\t\t\t\t\tconst attachmentProperties = properties.get(texture[i]);\n\n\t\t\t\t\tif (attachmentProperties.__webglTexture) {\n\t\t\t\t\t\t_gl.deleteTexture(attachmentProperties.__webglTexture);\n\n\t\t\t\t\t\tinfo.memory.textures--;\n\t\t\t\t\t}\n\n\t\t\t\t\tproperties.remove(texture[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tproperties.remove(texture);\n\t\t\tproperties.remove(renderTarget);\n\t\t} //\n\n\n\t\tlet textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\t\t\ttextureUnits = 0;\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\t\t\tconst textureUnit = textureUnits;\n\n\t\t\tif (textureUnit >= maxTextures) {\n\t\t\t\tconsole.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\t\t\treturn textureUnit;\n\t\t} //\n\n\n\t\tfunction setTexture2D(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (texture.isVideoTexture) updateVideoTexture(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tconst image = texture.image;\n\n\t\t\t\tif (image === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n\t\t\t\t} else if (image.complete === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n\t\t\t\t} else {\n\t\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture2DArray(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture3D(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTextureCube(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadCubeTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\t\t}\n\n\t\tconst wrappingToGL = {\n\t\t\t[RepeatWrapping]: _gl.REPEAT,\n\t\t\t[ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,\n\t\t\t[MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT\n\t\t};\n\t\tconst filterToGL = {\n\t\t\t[NearestFilter]: _gl.NEAREST,\n\t\t\t[NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,\n\t\t\t[NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,\n\t\t\t[LinearFilter]: _gl.LINEAR,\n\t\t\t[LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,\n\t\t\t[LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR\n\t\t};\n\n\t\tfunction setTextureParameters(textureType, texture, supportsMips) {\n\t\t\tif (supportsMips) {\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n\n\t\t\t\tif (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n\t\t\t} else {\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n\t\t\t\tif (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);\n\t\t\t\t}\n\n\t\t\t\tif (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n\n\t\t\t\tif (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tconst extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tif (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n\n\t\t\t\tif (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only\n\n\t\t\t\tif (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n\t\t\t\t\t_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n\t\t\t\t\tproperties.get(texture).__currentAnisotropy = texture.anisotropy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction initTexture(textureProperties, texture) {\n\t\t\tif (textureProperties.__webglInit === undefined) {\n\t\t\t\ttextureProperties.__webglInit = true;\n\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\t\t}\n\n\t\tfunction uploadTexture(textureProperties, texture, slot) {\n\t\t\tlet textureType = _gl.TEXTURE_2D;\n\t\t\tif (texture.isDataTexture2DArray) textureType = _gl.TEXTURE_2D_ARRAY;\n\t\t\tif (texture.isDataTexture3D) textureType = _gl.TEXTURE_3D;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(textureType, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n\t\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;\n\t\t\tconst image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n\t\t\tconst supportsMips = isPowerOfTwo$1(image) || isWebGL2,\n\t\t\t\t\t\tglFormat = utils.convert(texture.format);\n\t\t\tlet glType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(textureType, texture, supportsMips);\n\t\t\tlet mipmap;\n\t\t\tconst mipmaps = texture.mipmaps;\n\n\t\t\tif (texture.isDepthTexture) {\n\t\t\t\t// populate depth texture with dummy data\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\t\t\t\t} else if (texture.type === UnsignedIntType) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\t\t\t\t\t} else if (texture.type === UnsignedInt248Type) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tconsole.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} // validation checks for WebGL 1\n\n\n\t\t\t\tif (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n\t\t\t\t\tif (texture.type !== UnsignedInt248Type) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n\t\t\t} else if (texture.isDataTexture) {\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t} else if (texture.isCompressedTexture) {\n\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\tmipmap = mipmaps[i];\n\n\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\tstate.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else if (texture.isDataTexture2DArray) {\n\t\t\t\tstate.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else if (texture.isDataTexture3D) {\n\t\t\t\tstate.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else {\n\t\t\t\t// regular Texture (image, video, canvas)\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tgenerateMipmap(textureType, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t}\n\n\t\tfunction uploadCubeTexture(textureProperties, texture, slot) {\n\t\t\tif (texture.image.length !== 6) return;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n\t\t\tconst isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n\t\t\tconst isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n\t\t\tconst cubeImage = [];\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tif (!isCompressed && !isDataTexture) {\n\t\t\t\t\tcubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n\t\t\t\t} else {\n\t\t\t\t\tcubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst image = cubeImage[0],\n\t\t\t\t\t\tsupportsMips = isPowerOfTwo$1(image) || isWebGL2,\n\t\t\t\t\t\tglFormat = utils.convert(texture.format),\n\t\t\t\t\t\tglType = utils.convert(texture.type),\n\t\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\t\t\tlet mipmaps;\n\n\t\t\tif (isCompressed) {\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tmipmaps = cubeImage[i].mipmaps;\n\n\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\n\t\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else {\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tif (isDataTexture) {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n\n\t\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[i].image;\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);\n\n\t\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap(_gl.TEXTURE_CUBE_MAP, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t} // Render targets\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\n\n\t\tfunction setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {\n\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\tconst glType = utils.convert(texture.type);\n\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\tif (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\tstate.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);\n\t\t\t} else {\n\t\t\t\tstate.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n\t\tfunction setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n\t\t\tif (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n\t\t\t\tlet glInternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif (depthTexture && depthTexture.isDepthTexture) {\n\t\t\t\t\t\tif (depthTexture.type === FloatType) {\n\t\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\t\t\t\t\t} else if (depthTexture.type === UnsignedIntType) {\n\t\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n\t\t\t} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n\t\t\t} else {\n\t\t\t\t// Use the first texture for MRT so far\n\t\t\t\tconst texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[0] : renderTarget.texture;\n\t\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\t\tconst glType = utils.convert(texture.type);\n\t\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\t\t} // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n\t\tfunction setupDepthTexture(framebuffer, renderTarget) {\n\t\t\tconst isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n\t\t\tif (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\tif (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\t\t} // upload an empty depth texture with framebuffer size\n\n\n\t\t\tif (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D(renderTarget.depthTexture, 0);\n\n\t\t\tconst webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n\t\t\tif (renderTarget.depthTexture.format === DepthFormat) {\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n\t\t\t} else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown depthTexture format');\n\t\t\t}\n\t\t} // Setup GL resources for a non-texture depth buffer\n\n\n\t\tfunction setupDepthRenderbuffer(renderTarget) {\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\tif (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\t\t\tsetupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n\t\t\t} else {\n\t\t\t\tif (isCube) {\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t} // Set up GL resources for the render target\n\n\n\t\tfunction setupRenderTarget(renderTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\trenderTarget.addEventListener('dispose', onRenderTargetDispose);\n\n\t\t\tif (renderTarget.isWebGLMultipleRenderTargets !== true) {\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\ttextureProperties.__version = texture.version;\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\t\t\tconst isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;\n\t\t\tconst isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n\t\t\tconst isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\n\t\t\tconst supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif (isWebGL2 && texture.format === RGBFormat && (texture.type === FloatType || texture.type === HalfFloatType)) {\n\t\t\t\ttexture.format = RGBAFormat;\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');\n\t\t\t} // Setup framebuffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif (isMultipleRenderTargets) {\n\t\t\t\t\tif (capabilities.drawBuffers) {\n\t\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\t\t\tconst attachmentProperties = properties.get(textures[i]);\n\n\t\t\t\t\t\t\tif (attachmentProperties.__webglTexture === undefined) {\n\t\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\t\t\t\t\t\t\t\tinfo.memory.textures++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');\n\t\t\t\t\t}\n\t\t\t\t} else if (isMultisample) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\t\t\t\tconst glType = utils.convert(texture.type);\n\t\t\t\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\n\t\t\t\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Setup color buffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n\t\t\t\t}\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_CUBE_MAP, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\n\t\t\t} else if (isMultipleRenderTargets) {\n\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\tconst attachment = textures[i];\n\t\t\t\t\tconst attachmentProperties = properties.get(attachment);\n\t\t\t\t\tstate.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);\n\t\t\t\t\tsetTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);\n\n\t\t\t\t\tif (textureNeedsGenerateMipmaps(attachment, supportsMips)) {\n\t\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_2D, attachment, renderTarget.width, renderTarget.height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_2D, null);\n\t\t\t} else {\n\t\t\t\tlet glTextureType = _gl.TEXTURE_2D;\n\n\t\t\t\tif (isRenderTarget3D) {\n\t\t\t\t\t// Render targets containing layers, i.e: Texture 3D and 2d arrays\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\tconst isTexture3D = texture.isDataTexture3D;\n\t\t\t\t\t\tglTextureType = isTexture3D ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(glTextureType, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(glTextureType, texture, supportsMips);\n\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_2D, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_2D, null);\n\t\t\t} // Setup depth and stencil buffers\n\n\n\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\tsetupDepthRenderbuffer(renderTarget);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap(renderTarget) {\n\t\t\tconst supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];\n\n\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\tconst texture = textures[i];\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\n\t\t\t\t\tconst webglTexture = properties.get(texture).__webglTexture;\n\n\t\t\t\t\tstate.bindTexture(target, webglTexture);\n\t\t\t\t\tgenerateMipmap(target, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t\tstate.bindTexture(target, null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget(renderTarget) {\n\t\t\tif (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tconst width = renderTarget.width;\n\t\t\t\t\tconst height = renderTarget.height;\n\t\t\t\t\tlet mask = _gl.COLOR_BUFFER_BIT;\n\t\t\t\t\tif (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\n\t\t\t\t\tif (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\n\t\t\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\t\t\tstate.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\t\tstate.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\t_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\n\n\t\t\t\t\tstate.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);\n\t\t\t\t\tstate.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction getRenderTargetSamples(renderTarget) {\n\t\t\treturn isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n\t\t}\n\n\t\tfunction updateVideoTexture(texture) {\n\t\t\tconst frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n\t\t\tif (_videoTextures.get(texture) !== frame) {\n\t\t\t\t_videoTextures.set(texture, frame);\n\n\t\t\t\ttexture.update();\n\t\t\t}\n\t\t} // backwards compatibility\n\n\n\t\tlet warnedTexture2D = false;\n\t\tlet warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D(texture, slot) {\n\t\t\tif (texture && texture.isWebGLRenderTarget) {\n\t\t\t\tif (warnedTexture2D === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTexture2D = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTexture2D(texture, slot);\n\t\t}\n\n\t\tfunction safeSetTextureCube(texture, slot) {\n\t\t\tif (texture && texture.isWebGLCubeRenderTarget) {\n\t\t\t\tif (warnedTextureCube === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTextureCube = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTextureCube(texture, slot);\n\t\t} //\n\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\t}\n\n\tfunction WebGLUtils(gl, extensions, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert(p) {\n\t\t\tlet extension;\n\t\t\tif (p === UnsignedByteType) return gl.UNSIGNED_BYTE;\n\t\t\tif (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\tif (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\tif (p === UnsignedShort565Type) return gl.UNSIGNED_SHORT_5_6_5;\n\t\t\tif (p === ByteType) return gl.BYTE;\n\t\t\tif (p === ShortType) return gl.SHORT;\n\t\t\tif (p === UnsignedShortType) return gl.UNSIGNED_SHORT;\n\t\t\tif (p === IntType) return gl.INT;\n\t\t\tif (p === UnsignedIntType) return gl.UNSIGNED_INT;\n\t\t\tif (p === FloatType) return gl.FLOAT;\n\n\t\t\tif (p === HalfFloatType) {\n\t\t\t\tif (isWebGL2) return gl.HALF_FLOAT;\n\t\t\t\textension = extensions.get('OES_texture_half_float');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === AlphaFormat) return gl.ALPHA;\n\t\t\tif (p === RGBFormat) return gl.RGB;\n\t\t\tif (p === RGBAFormat) return gl.RGBA;\n\t\t\tif (p === LuminanceFormat) return gl.LUMINANCE;\n\t\t\tif (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;\n\t\t\tif (p === DepthFormat) return gl.DEPTH_COMPONENT;\n\t\t\tif (p === DepthStencilFormat) return gl.DEPTH_STENCIL;\n\t\t\tif (p === RedFormat) return gl.RED; // WebGL2 formats.\n\n\t\t\tif (p === RedIntegerFormat) return gl.RED_INTEGER;\n\t\t\tif (p === RGFormat) return gl.RG;\n\t\t\tif (p === RGIntegerFormat) return gl.RG_INTEGER;\n\t\t\tif (p === RGBIntegerFormat) return gl.RGB_INTEGER;\n\t\t\tif (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;\n\n\t\t\tif (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc1');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\t\tif (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_astc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_BPTC_Format) {\n\t\t\t\textension = extensions.get('EXT_texture_compression_bptc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === UnsignedInt248Type) {\n\t\t\t\tif (isWebGL2) return gl.UNSIGNED_INT_24_8;\n\t\t\t\textension = extensions.get('WEBGL_depth_texture');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tconvert: convert\n\t\t};\n\t}\n\n\tclass ArrayCamera extends PerspectiveCamera {\n\t\tconstructor(array = []) {\n\t\t\tsuper();\n\t\t\tthis.cameras = array;\n\t\t}\n\n\t}\n\n\tArrayCamera.prototype.isArrayCamera = true;\n\n\tclass Group extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Group';\n\t\t}\n\n\t}\n\n\tGroup.prototype.isGroup = true;\n\n\tconst _moveEvent = {\n\t\ttype: 'move'\n\t};\n\n\tclass WebXRController {\n\t\tconstructor() {\n\t\t\tthis._targetRay = null;\n\t\t\tthis._grip = null;\n\t\t\tthis._hand = null;\n\t\t}\n\n\t\tgetHandSpace() {\n\t\t\tif (this._hand === null) {\n\t\t\t\tthis._hand = new Group();\n\t\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\t\tthis._hand.visible = false;\n\t\t\t\tthis._hand.joints = {};\n\t\t\t\tthis._hand.inputState = {\n\t\t\t\t\tpinching: false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn this._hand;\n\t\t}\n\n\t\tgetTargetRaySpace() {\n\t\t\tif (this._targetRay === null) {\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\t\t}\n\n\t\tgetGripSpace() {\n\t\t\tif (this._grip === null) {\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\t\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\t\tthis._grip.angularVelocity = new Vector3();\n\t\t\t}\n\n\t\t\treturn this._grip;\n\t\t}\n\n\t\tdispatchEvent(event) {\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.dispatchEvent(event);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tdisconnect(inputSource) {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'disconnected',\n\t\t\t\tdata: inputSource\n\t\t\t});\n\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.visible = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tupdate(inputSource, frame, referenceSpace) {\n\t\t\tlet inputPose = null;\n\t\t\tlet gripPose = null;\n\t\t\tlet handPose = null;\n\t\t\tconst targetRay = this._targetRay;\n\t\t\tconst grip = this._grip;\n\t\t\tconst hand = this._hand;\n\n\t\t\tif (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n\t\t\t\tif (targetRay !== null) {\n\t\t\t\t\tinputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n\t\t\t\t\tif (inputPose !== null) {\n\t\t\t\t\t\ttargetRay.matrix.fromArray(inputPose.transform.matrix);\n\t\t\t\t\t\ttargetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n\n\t\t\t\t\t\tif (inputPose.linearVelocity) {\n\t\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\t\ttargetRay.linearVelocity.copy(inputPose.linearVelocity);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inputPose.angularVelocity) {\n\t\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\t\ttargetRay.angularVelocity.copy(inputPose.angularVelocity);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.dispatchEvent(_moveEvent);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hand && inputSource.hand) {\n\t\t\t\t\thandPose = true;\n\n\t\t\t\t\tfor (const inputjoint of inputSource.hand.values()) {\n\t\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\t\tconst jointPose = frame.getJointPose(inputjoint, referenceSpace);\n\n\t\t\t\t\t\tif (hand.joints[inputjoint.jointName] === undefined) {\n\t\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\t\tconst joint = new Group();\n\t\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\t\t\tjoint.visible = false;\n\t\t\t\t\t\t\thand.joints[inputjoint.jointName] = joint; // ??\n\n\t\t\t\t\t\t\thand.add(joint);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst joint = hand.joints[inputjoint.jointName];\n\n\t\t\t\t\t\tif (jointPose !== null) {\n\t\t\t\t\t\t\tjoint.matrix.fromArray(jointPose.transform.matrix);\n\t\t\t\t\t\t\tjoint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n\t\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjoint.visible = jointPose !== null;\n\t\t\t\t\t} // Custom events\n\t\t\t\t\t// Check pinchz\n\n\n\t\t\t\t\tconst indexTip = hand.joints['index-finger-tip'];\n\t\t\t\t\tconst thumbTip = hand.joints['thumb-tip'];\n\t\t\t\t\tconst distance = indexTip.position.distanceTo(thumbTip.position);\n\t\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\t\tif (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n\t\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n\t\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (grip !== null && inputSource.gripSpace) {\n\t\t\t\t\t\tgripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n\t\t\t\t\t\tif (gripPose !== null) {\n\t\t\t\t\t\t\tgrip.matrix.fromArray(gripPose.transform.matrix);\n\t\t\t\t\t\t\tgrip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n\n\t\t\t\t\t\t\tif (gripPose.linearVelocity) {\n\t\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\t\tgrip.linearVelocity.copy(gripPose.linearVelocity);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (gripPose.angularVelocity) {\n\t\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\t\tgrip.angularVelocity.copy(gripPose.angularVelocity);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetRay !== null) {\n\t\t\t\ttargetRay.visible = inputPose !== null;\n\t\t\t}\n\n\t\t\tif (grip !== null) {\n\t\t\t\tgrip.visible = gripPose !== null;\n\t\t\t}\n\n\t\t\tif (hand !== null) {\n\t\t\t\thand.visible = handPose !== null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass WebXRManager extends EventDispatcher {\n\t\tconstructor(renderer, gl) {\n\t\t\tsuper();\n\t\t\tconst scope = this;\n\t\t\tconst state = renderer.state;\n\t\t\tlet session = null;\n\t\t\tlet framebufferScaleFactor = 1.0;\n\t\t\tlet referenceSpace = null;\n\t\t\tlet referenceSpaceType = 'local-floor';\n\t\t\tlet pose = null;\n\t\t\tconst controllers = [];\n\t\t\tconst inputSourcesMap = new Map(); //\n\n\t\t\tconst cameraL = new PerspectiveCamera();\n\t\t\tcameraL.layers.enable(1);\n\t\t\tcameraL.viewport = new Vector4();\n\t\t\tconst cameraR = new PerspectiveCamera();\n\t\t\tcameraR.layers.enable(2);\n\t\t\tcameraR.viewport = new Vector4();\n\t\t\tconst cameras = [cameraL, cameraR];\n\t\t\tconst cameraVR = new ArrayCamera();\n\t\t\tcameraVR.layers.enable(1);\n\t\t\tcameraVR.layers.enable(2);\n\t\t\tlet _currentDepthNear = null;\n\t\t\tlet _currentDepthFar = null; //\n\n\t\t\tthis.cameraAutoUpdate = true;\n\t\t\tthis.enabled = false;\n\t\t\tthis.isPresenting = false;\n\n\t\t\tthis.getController = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getTargetRaySpace();\n\t\t\t};\n\n\t\t\tthis.getControllerGrip = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getGripSpace();\n\t\t\t};\n\n\t\t\tthis.getHand = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getHandSpace();\n\t\t\t}; //\n\n\n\t\t\tfunction onSessionEvent(event) {\n\t\t\t\tconst controller = inputSourcesMap.get(event.inputSource);\n\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\ttype: event.type,\n\t\t\t\t\t\tdata: event.inputSource\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction onSessionEnd() {\n\t\t\t\tinputSourcesMap.forEach(function (controller, inputSource) {\n\t\t\t\t\tcontroller.disconnect(inputSource);\n\t\t\t\t});\n\t\t\t\tinputSourcesMap.clear();\n\t\t\t\t_currentDepthNear = null;\n\t\t\t\t_currentDepthFar = null; // restore framebuffer/rendering state\n\n\t\t\t\tstate.bindXRFramebuffer(null);\n\t\t\t\trenderer.setRenderTarget(renderer.getRenderTarget()); //\n\n\t\t\t\tanimation.stop();\n\t\t\t\tscope.isPresenting = false;\n\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\ttype: 'sessionend'\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.setFramebufferScaleFactor = function (value) {\n\t\t\t\tframebufferScaleFactor = value;\n\n\t\t\t\tif (scope.isPresenting === true) {\n\t\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.setReferenceSpaceType = function (value) {\n\t\t\t\treferenceSpaceType = value;\n\n\t\t\t\tif (scope.isPresenting === true) {\n\t\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.getReferenceSpace = function () {\n\t\t\t\treturn referenceSpace;\n\t\t\t};\n\n\t\t\tthis.getSession = function () {\n\t\t\t\treturn session;\n\t\t\t};\n\n\t\t\tthis.setSession = async function (value) {\n\t\t\t\tsession = value;\n\n\t\t\t\tif (session !== null) {\n\t\t\t\t\tsession.addEventListener('select', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('selectstart', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('selectend', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeeze', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeezestart', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeezeend', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('end', onSessionEnd);\n\t\t\t\t\tsession.addEventListener('inputsourceschange', onInputSourcesChange);\n\t\t\t\t\tconst attributes = gl.getContextAttributes();\n\n\t\t\t\t\tif (attributes.xrCompatible !== true) {\n\t\t\t\t\t\tawait gl.makeXRCompatible();\n\t\t\t\t\t}\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t}; // eslint-disable-next-line no-undef\n\n\t\t\t\t\tconst baseLayer = new XRWebGLLayer(session, gl, layerInit);\n\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\tbaseLayer: baseLayer\n\t\t\t\t\t});\n\t\t\t\t\treferenceSpace = await session.requestReferenceSpace(referenceSpaceType);\n\t\t\t\t\tanimation.setContext(session);\n\t\t\t\t\tanimation.start();\n\t\t\t\t\tscope.isPresenting = true;\n\t\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\t\ttype: 'sessionstart'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfunction onInputSourcesChange(event) {\n\t\t\t\tconst inputSources = session.inputSources; // Assign inputSources to available controllers\n\n\t\t\t\tfor (let i = 0; i < controllers.length; i++) {\n\t\t\t\t\tinputSourcesMap.set(inputSources[i], controllers[i]);\n\t\t\t\t} // Notify disconnected\n\n\n\t\t\t\tfor (let i = 0; i < event.removed.length; i++) {\n\t\t\t\t\tconst inputSource = event.removed[i];\n\t\t\t\t\tconst controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\t\tif (controller) {\n\t\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'disconnected',\n\t\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t\t});\n\t\t\t\t\t\tinputSourcesMap.delete(inputSource);\n\t\t\t\t\t}\n\t\t\t\t} // Notify connected\n\n\n\t\t\t\tfor (let i = 0; i < event.added.length; i++) {\n\t\t\t\t\tconst inputSource = event.added[i];\n\t\t\t\t\tconst controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\t\tif (controller) {\n\t\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'connected',\n\t\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tconst cameraLPos = new Vector3();\n\t\t\tconst cameraRPos = new Vector3();\n\t\t\t/**\n\t\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t\t * the cameras' projection and world matrices have already been set.\n\t\t\t * And that near and far planes are identical for both cameras.\n\t\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t\t */\n\n\t\t\tfunction setProjectionFromUnion(camera, cameraL, cameraR) {\n\t\t\t\tcameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n\t\t\t\tcameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n\t\t\t\tconst ipd = cameraLPos.distanceTo(cameraRPos);\n\t\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\t\tconst projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n\t\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t\t// Use the left camera for these values.\n\n\t\t\t\tconst near = projL[14] / (projL[10] - 1);\n\t\t\t\tconst far = projL[14] / (projL[10] + 1);\n\t\t\t\tconst topFov = (projL[9] + 1) / projL[5];\n\t\t\t\tconst bottomFov = (projL[9] - 1) / projL[5];\n\t\t\t\tconst leftFov = (projL[8] - 1) / projL[0];\n\t\t\t\tconst rightFov = (projR[8] + 1) / projR[0];\n\t\t\t\tconst left = near * leftFov;\n\t\t\t\tconst right = near * rightFov; // Calculate the new camera's position offset from the\n\t\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\n\t\t\t\tconst zOffset = ipd / (-leftFov + rightFov);\n\t\t\t\tconst xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n\t\t\t\tcameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tcamera.translateX(xOffset);\n\t\t\t\tcamera.translateZ(zOffset);\n\t\t\t\tcamera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale\n\t\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t\t// although must now be relative to the new union camera.\n\n\t\t\t\tconst near2 = near + zOffset;\n\t\t\t\tconst far2 = far + zOffset;\n\t\t\t\tconst left2 = left - xOffset;\n\t\t\t\tconst right2 = right + (ipd - xOffset);\n\t\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\t\t\t\tcamera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n\t\t\t}\n\n\t\t\tfunction updateCamera(camera, parent) {\n\t\t\t\tif (parent === null) {\n\t\t\t\t\tcamera.matrixWorld.copy(camera.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tcamera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n\t\t\t\t}\n\n\t\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert();\n\t\t\t}\n\n\t\t\tthis.updateCamera = function (camera) {\n\t\t\t\tif (session === null) return;\n\t\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\t\tif (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n\t\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t\t});\n\t\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t\t_currentDepthFar = cameraVR.far;\n\t\t\t\t}\n\n\t\t\t\tconst parent = camera.parent;\n\t\t\t\tconst cameras = cameraVR.cameras;\n\t\t\t\tupdateCamera(cameraVR, parent);\n\n\t\t\t\tfor (let i = 0; i < cameras.length; i++) {\n\t\t\t\t\tupdateCamera(cameras[i], parent);\n\t\t\t\t} // update camera and its children\n\n\n\t\t\t\tcamera.matrixWorld.copy(cameraVR.matrixWorld);\n\t\t\t\tcamera.matrix.copy(cameraVR.matrix);\n\t\t\t\tcamera.matrix.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tconst children = camera.children;\n\n\t\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateMatrixWorld(true);\n\t\t\t\t} // update projection matrix for proper view frustum culling\n\n\n\t\t\t\tif (cameras.length === 2) {\n\t\t\t\t\tsetProjectionFromUnion(cameraVR, cameraL, cameraR);\n\t\t\t\t} else {\n\t\t\t\t\t// assume single camera setup (AR)\n\t\t\t\t\tcameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.getCamera = function () {\n\t\t\t\treturn cameraVR;\n\t\t\t}; // Animation Loop\n\n\n\t\t\tlet onAnimationFrameCallback = null;\n\n\t\t\tfunction onAnimationFrame(time, frame) {\n\t\t\t\tpose = frame.getViewerPose(referenceSpace);\n\n\t\t\t\tif (pose !== null) {\n\t\t\t\t\tconst views = pose.views;\n\t\t\t\t\tconst baseLayer = session.renderState.baseLayer;\n\t\t\t\t\tstate.bindXRFramebuffer(baseLayer.framebuffer);\n\t\t\t\t\tlet cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\t\tif (views.length !== cameraVR.cameras.length) {\n\t\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\t\tcameraVRNeedsUpdate = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0; i < views.length; i++) {\n\t\t\t\t\t\tconst view = views[i];\n\t\t\t\t\t\tconst viewport = baseLayer.getViewport(view);\n\t\t\t\t\t\tconst camera = cameras[i];\n\t\t\t\t\t\tcamera.matrix.fromArray(view.transform.matrix);\n\t\t\t\t\t\tcamera.projectionMatrix.fromArray(view.projectionMatrix);\n\t\t\t\t\t\tcamera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\tcameraVR.matrix.copy(camera.matrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (cameraVRNeedsUpdate === true) {\n\t\t\t\t\t\t\tcameraVR.cameras.push(camera);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tconst inputSources = session.inputSources;\n\n\t\t\t\tfor (let i = 0; i < controllers.length; i++) {\n\t\t\t\t\tconst controller = controllers[i];\n\t\t\t\t\tconst inputSource = inputSources[i];\n\t\t\t\t\tcontroller.update(inputSource, frame, referenceSpace);\n\t\t\t\t}\n\n\t\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n\t\t\t}\n\n\t\t\tconst animation = new WebGLAnimation();\n\t\t\tanimation.setAnimationLoop(onAnimationFrame);\n\n\t\t\tthis.setAnimationLoop = function (callback) {\n\t\t\t\tonAnimationFrameCallback = callback;\n\t\t\t};\n\n\t\t\tthis.dispose = function () {};\n\t\t}\n\n\t}\n\n\tfunction WebGLMaterials(properties) {\n\t\tfunction refreshFogUniforms(uniforms, fog) {\n\t\t\tuniforms.fogColor.value.copy(fog.color);\n\n\t\t\tif (fog.isFog) {\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\t\t\t} else if (fog.isFogExp2) {\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {\n\t\t\tif (material.isMeshBasicMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t} else if (material.isMeshLambertMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsLambert(uniforms, material);\n\t\t\t} else if (material.isMeshToonMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsToon(uniforms, material);\n\t\t\t} else if (material.isMeshPhongMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsPhong(uniforms, material);\n\t\t\t} else if (material.isMeshStandardMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\n\t\t\t\tif (material.isMeshPhysicalMaterial) {\n\t\t\t\t\trefreshUniformsPhysical(uniforms, material, transmissionRenderTarget);\n\t\t\t\t} else {\n\t\t\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isMeshMatcapMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsMatcap(uniforms, material);\n\t\t\t} else if (material.isMeshDepthMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDepth(uniforms, material);\n\t\t\t} else if (material.isMeshDistanceMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDistance(uniforms, material);\n\t\t\t} else if (material.isMeshNormalMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsNormal(uniforms, material);\n\t\t\t} else if (material.isLineBasicMaterial) {\n\t\t\t\trefreshUniformsLine(uniforms, material);\n\n\t\t\t\tif (material.isLineDashedMaterial) {\n\t\t\t\t\trefreshUniformsDash(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isPointsMaterial) {\n\t\t\t\trefreshUniformsPoints(uniforms, material, pixelRatio, height);\n\t\t\t} else if (material.isSpriteMaterial) {\n\t\t\t\trefreshUniformsSprites(uniforms, material);\n\t\t\t} else if (material.isShadowMaterial) {\n\t\t\t\tuniforms.color.value.copy(material.color);\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\t} else if (material.isShaderMaterial) {\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsCommon(uniforms, material) {\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif (material.color) {\n\t\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\t}\n\n\t\t\tif (material.emissive) {\n\t\t\t\tuniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n\t\t\t}\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.specularMap) {\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t}\n\n\t\t\tconst envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\tuniforms.envMap.value = envMap;\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tconst maxMipLevel = properties.get(envMap).__maxMipLevel;\n\n\t\t\t\tif (maxMipLevel !== undefined) {\n\t\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.lightMap) {\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. displacementMap map\n\t\t\t// 4. normal map\n\t\t\t// 5. bump map\n\t\t\t// 6. roughnessMap map\n\t\t\t// 7. metalnessMap map\n\t\t\t// 8. alphaMap map\n\t\t\t// 9. emissiveMap map\n\t\t\t// 10. clearcoat map\n\t\t\t// 11. clearcoat normal map\n\t\t\t// 12. clearcoat roughnessMap map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.specularMap) {\n\t\t\t\tuvScaleMap = material.specularMap;\n\t\t\t} else if (material.displacementMap) {\n\t\t\t\tuvScaleMap = material.displacementMap;\n\t\t\t} else if (material.normalMap) {\n\t\t\t\tuvScaleMap = material.normalMap;\n\t\t\t} else if (material.bumpMap) {\n\t\t\t\tuvScaleMap = material.bumpMap;\n\t\t\t} else if (material.roughnessMap) {\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\t\t\t} else if (material.metalnessMap) {\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t} else if (material.emissiveMap) {\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\t\t\t} else if (material.clearcoatMap) {\n\t\t\t\tuvScaleMap = material.clearcoatMap;\n\t\t\t} else if (material.clearcoatNormalMap) {\n\t\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\t\t\t} else if (material.clearcoatRoughnessMap) {\n\t\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uvScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t} // uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\n\t\t\tlet uv2ScaleMap;\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\t\t\t} else if (material.lightMap) {\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\t\t\t}\n\n\t\t\tif (uv2ScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uv2ScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uv2ScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLine(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t}\n\n\t\tfunction refreshUniformsDash(uniforms, material) {\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\t\t}\n\n\t\tfunction refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsSprites(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLambert(uniforms, material) {\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhong(uniforms, material) {\n\t\t\tuniforms.specular.value.copy(material.specular);\n\t\t\tuniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsToon(uniforms, material) {\n\t\t\tif (material.gradientMap) {\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsStandard(uniforms, material) {\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif (material.roughnessMap) {\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\t\t}\n\n\t\t\tif (material.metalnessMap) {\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tconst envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {\n\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif (material.sheen) uniforms.sheen.value.copy(material.sheen);\n\n\t\t\tif (material.clearcoatMap) {\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatRoughnessMap) {\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatNormalMap) {\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif (material.side === BackSide) {\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\n\t\t\tif (material.transmissionMap) {\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\t\t\t}\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\t\tuniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);\n\t\t\t}\n\n\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\tif (material.thicknessMap) {\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\t\t\t}\n\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\tuniforms.attenuationColor.value.copy(material.attenuationColor);\n\t\t}\n\n\t\tfunction refreshUniformsMatcap(uniforms, material) {\n\t\t\tif (material.matcap) {\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDepth(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDistance(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy(material.referencePosition);\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\t\t}\n\n\t\tfunction refreshUniformsNormal(uniforms, material) {\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\t}\n\n\tfunction createCanvasElement() {\n\t\tconst canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\tcanvas.style.display = 'block';\n\t\treturn canvas;\n\t}\n\n\tfunction WebGLRenderer(parameters) {\n\t\tparameters = parameters || {};\n\n\t\tconst _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\t\t\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tlet currentRenderList = null;\n\t\tlet currentRenderState = null; // render() can be called from within a callback triggered by another render.\n\t\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\t\tconst renderListStack = [];\n\t\tconst renderStateStack = []; // public properties\n\n\t\tthis.domElement = _canvas; // Debug configuration container\n\n\t\tthis.debug = {\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t}; // clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true; // scene graph\n\n\t\tthis.sortObjects = true; // user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false; // physically based shading\n\n\t\tthis.gammaFactor = 2.0; // for backwards compatibility\n\n\t\tthis.outputEncoding = LinearEncoding; // physical lights\n\n\t\tthis.physicallyCorrectLights = false; // tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0; // internal properties\n\n\t\tconst _this = this;\n\n\t\tlet _isContextLost = false; // internal state cache\n\n\t\tlet _currentActiveCubeFace = 0;\n\t\tlet _currentActiveMipmapLevel = 0;\n\t\tlet _currentRenderTarget = null;\n\n\t\tlet _currentMaterialId = -1;\n\n\t\tlet _currentCamera = null;\n\n\t\tconst _currentViewport = new Vector4();\n\n\t\tconst _currentScissor = new Vector4();\n\n\t\tlet _currentScissorTest = null; //\n\n\t\tlet _width = _canvas.width;\n\t\tlet _height = _canvas.height;\n\t\tlet _pixelRatio = 1;\n\t\tlet _opaqueSort = null;\n\t\tlet _transparentSort = null;\n\n\t\tconst _viewport = new Vector4(0, 0, _width, _height);\n\n\t\tconst _scissor = new Vector4(0, 0, _width, _height);\n\n\t\tlet _scissorTest = false; //\n\n\t\tconst _currentDrawBuffers = []; // frustum\n\n\t\tconst _frustum = new Frustum(); // clipping\n\n\n\t\tlet _clippingEnabled = false;\n\t\tlet _localClippingEnabled = false; // transmission\n\n\t\tlet _transmissionRenderTarget = null; // camera matrices cache\n\n\t\tconst _projScreenMatrix = new Matrix4();\n\n\t\tconst _vector3 = new Vector3();\n\n\t\tconst _emptyScene = {\n\t\t\tbackground: null,\n\t\t\tfog: null,\n\t\t\tenvironment: null,\n\t\t\toverrideMaterial: null,\n\t\t\tisScene: true\n\t\t};\n\n\t\tfunction getTargetPixelRatio() {\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\t} // initialize\n\n\n\t\tlet _gl = _context;\n\n\t\tfunction getContext(contextNames, contextAttributes) {\n\t\t\tfor (let i = 0; i < contextNames.length; i++) {\n\t\t\t\tconst contextName = contextNames[i];\n\n\t\t\t\tconst context = _canvas.getContext(contextName, contextAttributes);\n\n\t\t\t\tif (context !== null) return context;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tconst contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t}; // event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\tif (_gl === null) {\n\t\t\t\tconst contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\n\n\t\t\t\tif (_this.isWebGL1Renderer === true) {\n\t\t\t\t\tcontextNames.shift();\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext(contextNames, contextAttributes);\n\n\t\t\t\tif (_gl === null) {\n\t\t\t\t\tif (getContext(contextNames)) {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context with your selected attributes.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n\t\t\tif (_gl.getShaderPrecisionFormat === undefined) {\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'rangeMin': 1,\n\t\t\t\t\t\t'rangeMax': 1,\n\t\t\t\t\t\t'precision': 1\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('THREE.WebGLRenderer: ' + error.message);\n\t\t\tthrow error;\n\t\t}\n\n\t\tlet extensions, capabilities, state, info;\n\t\tlet properties, textures, cubemaps, attributes, geometries, objects;\n\t\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\t\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\t\tlet utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\t\t\textensions = new WebGLExtensions(_gl);\n\t\t\tcapabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\t\t\textensions.init(capabilities);\n\t\t\tutils = new WebGLUtils(_gl, extensions, capabilities);\n\t\t\tstate = new WebGLState(_gl, extensions, capabilities);\n\t\t\t_currentDrawBuffers[0] = _gl.BACK;\n\t\t\tinfo = new WebGLInfo(_gl);\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n\t\t\tcubemaps = new WebGLCubeMaps(_this);\n\t\t\tattributes = new WebGLAttributes(_gl, capabilities);\n\t\t\tbindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\n\t\t\tgeometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n\t\t\tobjects = new WebGLObjects(_gl, geometries, attributes, info);\n\t\t\tmorphtargets = new WebGLMorphtargets(_gl);\n\t\t\tclipping = new WebGLClipping(properties);\n\t\t\tprogramCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);\n\t\t\tmaterials = new WebGLMaterials(properties);\n\t\t\trenderLists = new WebGLRenderLists(properties);\n\t\t\trenderStates = new WebGLRenderStates(extensions, capabilities);\n\t\t\tbackground = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\n\t\t\tshadowMap = new WebGLShadowMap(_this, objects, capabilities);\n\t\t\tbufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tinfo.programs = programCache.programs;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.shadowMap = shadowMap;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\t\t}\n\n\t\tinitGLContext(); // xr\n\n\t\tconst xr = new WebXRManager(_this, _gl);\n\t\tthis.xr = xr; // API\n\n\t\tthis.getContext = function () {\n\t\t\treturn _gl;\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\t\t\treturn _gl.getContextAttributes();\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\t\t\tconst extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.loseContext();\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\t\t\tconst extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.restoreContext();\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\t\t\treturn _pixelRatio;\n\t\t};\n\n\t\tthis.setPixelRatio = function (value) {\n\t\t\tif (value === undefined) return;\n\t\t\t_pixelRatio = value;\n\t\t\tthis.setSize(_width, _height, false);\n\t\t};\n\n\t\tthis.getSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width, _height);\n\t\t};\n\n\t\tthis.setSize = function (width, height, updateStyle) {\n\t\t\tif (xr.isPresenting) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_canvas.width = Math.floor(width * _pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * _pixelRatio);\n\n\t\t\tif (updateStyle !== false) {\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\t\t}\n\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function (width, height, pixelRatio) {\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_pixelRatio = pixelRatio;\n\t\t\t_canvas.width = Math.floor(width * pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * pixelRatio);\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getCurrentViewport = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');\n\t\t\t\ttarget = new Vector4();\n\t\t\t}\n\n\t\t\treturn target.copy(_currentViewport);\n\t\t};\n\n\t\tthis.getViewport = function (target) {\n\t\t\treturn target.copy(_viewport);\n\t\t};\n\n\t\tthis.setViewport = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_viewport.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_viewport.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissor = function (target) {\n\t\t\treturn target.copy(_scissor);\n\t\t};\n\n\t\tthis.setScissor = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_scissor.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_scissor.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\t\t\treturn _scissorTest;\n\t\t};\n\n\t\tthis.setScissorTest = function (boolean) {\n\t\t\tstate.setScissorTest(_scissorTest = boolean);\n\t\t};\n\n\t\tthis.setOpaqueSort = function (method) {\n\t\t\t_opaqueSort = method;\n\t\t};\n\n\t\tthis.setTransparentSort = function (method) {\n\t\t\t_transparentSort = method;\n\t\t}; // Clearing\n\n\n\t\tthis.getClearColor = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getClearColor() now requires a Color as an argument');\n\t\t\t\ttarget = new Color();\n\t\t\t}\n\n\t\t\treturn target.copy(background.getClearColor());\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\t\t\tbackground.setClearColor.apply(background, arguments);\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\t\t\treturn background.getClearAlpha();\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\t\t\tbackground.setClearAlpha.apply(background, arguments);\n\t\t};\n\n\t\tthis.clear = function (color, depth, stencil) {\n\t\t\tlet bits = 0;\n\t\t\tif (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\tif (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t_gl.clear(bits);\n\t\t};\n\n\t\tthis.clearColor = function () {\n\t\t\tthis.clear(true, false, false);\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\t\t\tthis.clear(false, true, false);\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\t\t\tthis.clear(false, false, true);\n\t\t}; //\n\n\n\t\tthis.dispose = function () {\n\t\t\t_canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\txr.dispose();\n\t\t\txr.removeEventListener('sessionstart', onXRSessionStart);\n\t\t\txr.removeEventListener('sessionend', onXRSessionEnd);\n\n\t\t\tif (_transmissionRenderTarget) {\n\t\t\t\t_transmissionRenderTarget.dispose();\n\n\t\t\t\t_transmissionRenderTarget = null;\n\t\t\t}\n\n\t\t\tanimation.stop();\n\t\t}; // Events\n\n\n\t\tfunction onContextLost(event) {\n\t\t\tevent.preventDefault();\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Lost.');\n\t\t\t_isContextLost = true;\n\t\t}\n\n\t\tfunction onContextRestore()\n\t\t/* event */\n\t\t{\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Restored.');\n\t\t\t_isContextLost = false;\n\t\t\tconst infoAutoReset = info.autoReset;\n\t\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\t\tconst shadowMapType = shadowMap.type;\n\t\t\tinitGLContext();\n\t\t\tinfo.autoReset = infoAutoReset;\n\t\t\tshadowMap.enabled = shadowMapEnabled;\n\t\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\t\tshadowMap.type = shadowMapType;\n\t\t}\n\n\t\tfunction onMaterialDispose(event) {\n\t\t\tconst material = event.target;\n\t\t\tmaterial.removeEventListener('dispose', onMaterialDispose);\n\t\t\tdeallocateMaterial(material);\n\t\t} // Buffer deallocation\n\n\n\t\tfunction deallocateMaterial(material) {\n\t\t\treleaseMaterialProgramReferences(material);\n\t\t\tproperties.remove(material);\n\t\t}\n\n\t\tfunction releaseMaterialProgramReferences(material) {\n\t\t\tconst programs = properties.get(material).programs;\n\n\t\t\tif (programs !== undefined) {\n\t\t\t\tprograms.forEach(function (program) {\n\t\t\t\t\tprogramCache.releaseProgram(program);\n\t\t\t\t});\n\t\t\t}\n\t\t} // Buffer rendering\n\n\n\t\tfunction renderObjectImmediate(object, program) {\n\t\t\tobject.render(function (object) {\n\t\t\t\t_this.renderBufferImmediate(object, program);\n\t\t\t});\n\t\t}\n\n\t\tthis.renderBufferImmediate = function (object, program) {\n\t\t\tbindingStates.initAttributes();\n\t\t\tconst buffers = properties.get(object);\n\t\t\tif (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n\t\t\tif (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n\t\t\tif (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n\t\t\tif (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n\t\t\tconst programAttributes = program.getAttributes();\n\n\t\t\tif (object.hasPositions) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.position);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.position, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasNormals) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.normal);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.normal, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasUvs) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.uv);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.uv, 2, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasColors) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.color);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.color, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tbindingStates.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays(_gl.TRIANGLES, 0, object.count);\n\n\t\t\tobject.count = 0;\n\t\t};\n\n\t\tthis.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n\t\t\tif (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tconst frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n\t\t\tconst program = setProgram(camera, scene, material, object);\n\t\t\tstate.setMaterial(material, frontFaceCW); //\n\n\t\t\tlet index = geometry.index;\n\t\t\tconst position = geometry.attributes.position; //\n\n\t\t\tif (index === null) {\n\t\t\t\tif (position === undefined || position.count === 0) return;\n\t\t\t} else if (index.count === 0) {\n\t\t\t\treturn;\n\t\t\t} //\n\n\n\t\t\tlet rangeFactor = 1;\n\n\t\t\tif (material.wireframe === true) {\n\t\t\t\tindex = geometries.getWireframeAttribute(geometry);\n\t\t\t\trangeFactor = 2;\n\t\t\t}\n\n\t\t\tif (material.morphTargets || material.morphNormals) {\n\t\t\t\tmorphtargets.update(object, geometry, material, program);\n\t\t\t}\n\n\t\t\tbindingStates.setup(object, material, program, geometry, index);\n\t\t\tlet attribute;\n\t\t\tlet renderer = bufferRenderer;\n\n\t\t\tif (index !== null) {\n\t\t\t\tattribute = attributes.get(index);\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex(attribute);\n\t\t\t} //\n\n\n\t\t\tconst dataCount = index !== null ? index.count : position.count;\n\t\t\tconst rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tconst rangeCount = geometry.drawRange.count * rangeFactor;\n\t\t\tconst groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tconst groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\t\tconst drawStart = Math.max(rangeStart, groupStart);\n\t\t\tconst drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n\t\t\tconst drawCount = Math.max(0, drawEnd - drawStart + 1);\n\t\t\tif (drawCount === 0) return; //\n\n\t\t\tif (object.isMesh) {\n\t\t\t\tif (material.wireframe === true) {\n\t\t\t\t\tstate.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n\t\t\t\t\trenderer.setMode(_gl.LINES);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(_gl.TRIANGLES);\n\t\t\t\t}\n\t\t\t} else if (object.isLine) {\n\t\t\t\tlet lineWidth = material.linewidth;\n\t\t\t\tif (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth(lineWidth * getTargetPixelRatio());\n\n\t\t\t\tif (object.isLineSegments) {\n\t\t\t\t\trenderer.setMode(_gl.LINES);\n\t\t\t\t} else if (object.isLineLoop) {\n\t\t\t\t\trenderer.setMode(_gl.LINE_LOOP);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(_gl.LINE_STRIP);\n\t\t\t\t}\n\t\t\t} else if (object.isPoints) {\n\t\t\t\trenderer.setMode(_gl.POINTS);\n\t\t\t} else if (object.isSprite) {\n\t\t\t\trenderer.setMode(_gl.TRIANGLES);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, object.count);\n\t\t\t} else if (geometry.isInstancedBufferGeometry) {\n\t\t\t\tconst instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, instanceCount);\n\t\t\t} else {\n\t\t\t\trenderer.render(drawStart, drawCount);\n\t\t\t}\n\t\t}; // Compile\n\n\n\t\tthis.compile = function (scene, camera) {\n\t\t\tcurrentRenderState = renderStates.get(scene);\n\t\t\tcurrentRenderState.init();\n\t\t\tscene.traverseVisible(function (object) {\n\t\t\t\tif (object.isLight && object.layers.test(camera.layers)) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tscene.traverse(function (object) {\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif (material) {\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0; i < material.length; i++) {\n\t\t\t\t\t\t\tconst material2 = material[i];\n\t\t\t\t\t\t\tgetProgram(material2, scene, object);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetProgram(material, scene, object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}; // Animation Loop\n\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time) {\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time);\n\t\t}\n\n\t\tfunction onXRSessionStart() {\n\t\t\tanimation.stop();\n\t\t}\n\n\t\tfunction onXRSessionEnd() {\n\t\t\tanimation.start();\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\t\tif (typeof window !== 'undefined') animation.setContext(window);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop(callback);\n\t\t\tcallback === null ? animation.stop() : animation.start();\n\t\t};\n\n\t\txr.addEventListener('sessionstart', onXRSessionStart);\n\t\txr.addEventListener('sessionend', onXRSessionEnd); // Rendering\n\n\t\tthis.render = function (scene, camera) {\n\t\t\tif (camera !== undefined && camera.isCamera !== true) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_isContextLost === true) return; // update scene graph\n\n\t\t\tif (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n\t\t\tif (camera.parent === null) camera.updateMatrixWorld();\n\n\t\t\tif (xr.enabled === true && xr.isPresenting === true) {\n\t\t\t\tif (xr.cameraAutoUpdate === true) xr.updateCamera(camera);\n\t\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);\n\t\t\tcurrentRenderState = renderStates.get(scene, renderStateStack.length);\n\t\t\tcurrentRenderState.init();\n\t\t\trenderStateStack.push(currentRenderState);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\t_frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n\t\t\tcurrentRenderList = renderLists.get(scene, renderListStack.length);\n\t\t\tcurrentRenderList.init();\n\t\t\trenderListStack.push(currentRenderList);\n\t\t\tprojectObject(scene, camera, 0, _this.sortObjects);\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif (_this.sortObjects === true) {\n\t\t\t\tcurrentRenderList.sort(_opaqueSort, _transparentSort);\n\t\t\t} //\n\n\n\t\t\tif (_clippingEnabled === true) clipping.beginShadows();\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tshadowMap.render(shadowsArray, scene, camera);\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tcurrentRenderState.setupLightsView(camera);\n\t\t\tif (_clippingEnabled === true) clipping.endShadows(); //\n\n\t\t\tif (this.info.autoReset === true) this.info.reset(); //\n\n\t\t\tbackground.render(currentRenderList, scene); // render scene\n\n\t\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\t\t\tconst transparentObjects = currentRenderList.transparent;\n\t\t\tif (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n\t\t\tif (transmissiveObjects.length > 0) renderTransmissiveObjects(opaqueObjects, transmissiveObjects, scene, camera);\n\t\t\tif (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); //\n\n\t\t\tif (_currentRenderTarget !== null) {\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\t\t\ttextures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget(_currentRenderTarget);\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onAfterRender(_this, scene, camera); // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest(true);\n\t\t\tstate.buffers.depth.setMask(true);\n\t\t\tstate.buffers.color.setMask(true);\n\t\t\tstate.setPolygonOffset(false); // _gl.finish();\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = -1;\n\t\t\t_currentCamera = null;\n\t\t\trenderStateStack.pop();\n\n\t\t\tif (renderStateStack.length > 0) {\n\t\t\t\tcurrentRenderState = renderStateStack[renderStateStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderState = null;\n\t\t\t}\n\n\t\t\trenderListStack.pop();\n\n\t\t\tif (renderListStack.length > 0) {\n\t\t\t\tcurrentRenderList = renderListStack[renderListStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderList = null;\n\t\t\t}\n\t\t};\n\n\t\tfunction projectObject(object, camera, groupOrder, sortObjects) {\n\t\t\tif (object.visible === false) return;\n\t\t\tconst visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible) {\n\t\t\t\tif (object.isGroup) {\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\t\t\t\t} else if (object.isLOD) {\n\t\t\t\t\tif (object.autoUpdate === true) object.update(camera);\n\t\t\t\t} else if (object.isLight) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isSprite) {\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update(object);\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isImmediateRenderObject) {\n\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);\n\t\t\t\t} else if (object.isMesh || object.isLine || object.isPoints) {\n\t\t\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\t\t\t// update skeleton only once in a frame\n\t\t\t\t\t\tif (object.skeleton.frame !== info.render.frame) {\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsObject(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update(object);\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tprojectObject(children[i], camera, groupOrder, sortObjects);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderTransmissiveObjects(opaqueObjects, transmissiveObjects, scene, camera) {\n\t\t\tif (_transmissionRenderTarget === null) {\n\t\t\t\t_transmissionRenderTarget = new WebGLRenderTarget(1024, 1024, {\n\t\t\t\t\tgenerateMipmaps: true,\n\t\t\t\t\tminFilter: LinearMipmapLinearFilter,\n\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\twrapS: ClampToEdgeWrapping,\n\t\t\t\t\twrapT: ClampToEdgeWrapping\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst currentRenderTarget = _this.getRenderTarget();\n\n\t\t\t_this.setRenderTarget(_transmissionRenderTarget);\n\n\t\t\t_this.clear();\n\n\t\t\trenderObjects(opaqueObjects, scene, camera);\n\t\t\ttextures.updateRenderTargetMipmap(_transmissionRenderTarget);\n\n\t\t\t_this.setRenderTarget(currentRenderTarget);\n\n\t\t\trenderObjects(transmissiveObjects, scene, camera);\n\t\t}\n\n\t\tfunction renderObjects(renderList, scene, camera) {\n\t\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor (let i = 0, l = renderList.length; i < l; i++) {\n\t\t\t\tconst renderItem = renderList[i];\n\t\t\t\tconst object = renderItem.object;\n\t\t\t\tconst geometry = renderItem.geometry;\n\t\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tconst group = renderItem.group;\n\n\t\t\t\tif (camera.isArrayCamera) {\n\t\t\t\t\tconst cameras = camera.cameras;\n\n\t\t\t\t\tfor (let j = 0, jl = cameras.length; j < jl; j++) {\n\t\t\t\t\t\tconst camera2 = cameras[j];\n\n\t\t\t\t\t\tif (object.layers.test(camera2.layers)) {\n\t\t\t\t\t\t\tstate.viewport(_currentViewport.copy(camera2.viewport));\n\t\t\t\t\t\t\tcurrentRenderState.setupLightsView(camera2);\n\t\t\t\t\t\t\trenderObject(object, scene, camera2, geometry, material, group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trenderObject(object, scene, camera, geometry, material, group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObject(object, scene, camera, geometry, material, group) {\n\t\t\tobject.onBeforeRender(_this, scene, camera, geometry, material, group);\n\t\t\tobject.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\t\t\tobject.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n\t\t\tif (object.isImmediateRenderObject) {\n\t\t\t\tconst program = setProgram(camera, scene, material, object);\n\t\t\t\tstate.setMaterial(material);\n\t\t\t\tbindingStates.reset();\n\t\t\t\trenderObjectImmediate(object, program);\n\t\t\t} else {\n\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\t\t\t}\n\n\t\t\tobject.onAfterRender(_this, scene, camera, geometry, material, group);\n\t\t}\n\n\t\tfunction getProgram(material, scene, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tconst lights = currentRenderState.state.lights;\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tconst lightsStateVersion = lights.state.version;\n\t\t\tconst parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n\t\t\tconst programCacheKey = programCache.getProgramCacheKey(parameters);\n\t\t\tlet programs = materialProperties.programs; // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment);\n\n\t\t\tif (programs === undefined) {\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener('dispose', onMaterialDispose);\n\t\t\t\tprograms = new Map();\n\t\t\t\tmaterialProperties.programs = programs;\n\t\t\t}\n\n\t\t\tlet program = programs.get(programCacheKey);\n\n\t\t\tif (program !== undefined) {\n\t\t\t\t// early out if program and light state is identical\n\t\t\t\tif (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {\n\t\t\t\t\tupdateCommonMaterialProperties(material, parameters);\n\t\t\t\t\treturn program;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparameters.uniforms = programCache.getUniforms(material);\n\t\t\t\tmaterial.onBuild(parameters, _this);\n\t\t\t\tmaterial.onBeforeCompile(parameters, _this);\n\t\t\t\tprogram = programCache.acquireProgram(parameters, programCacheKey);\n\t\t\t\tprograms.set(programCacheKey, program);\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t}\n\n\t\t\tconst uniforms = materialProperties.uniforms;\n\n\t\t\tif (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\t\t\t}\n\n\t\t\tupdateCommonMaterialProperties(material, parameters); // store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights(material);\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t// wire up the material to this renderer's lighting state\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n\t\t\t}\n\n\t\t\tconst progUniforms = program.getUniforms();\n\t\t\tconst uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n\t\t\tmaterialProperties.currentProgram = program;\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction updateCommonMaterialProperties(material, parameters) {\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\t\tmaterialProperties.instancing = parameters.instancing;\n\t\t\tmaterialProperties.skinning = parameters.skinning;\n\t\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\t}\n\n\t\tfunction setProgram(camera, scene, material, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\t\tconst envMap = cubemaps.get(material.envMap || environment);\n\t\t\tconst vertexAlphas = material.vertexColors === true && object.geometry && object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4;\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tconst lights = currentRenderState.state.lights;\n\n\t\t\tif (_clippingEnabled === true) {\n\t\t\t\tif (_localClippingEnabled === true || camera !== _currentCamera) {\n\t\t\t\t\tconst useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\n\t\t\t\t\tclipping.setState(material, camera, useCache);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tlet needsProgramChange = false;\n\n\t\t\tif (material.version === materialProperties.__version) {\n\t\t\t\tif (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.outputEncoding !== encoding) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (object.isInstancedMesh && materialProperties.instancing === false) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (!object.isInstancedMesh && materialProperties.instancing === true) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (object.isSkinnedMesh && materialProperties.skinning === false) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (!object.isSkinnedMesh && materialProperties.skinning === true) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.envMap !== envMap) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (material.fog && materialProperties.fog !== fog) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.vertexAlphas !== vertexAlphas) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tneedsProgramChange = true;\n\t\t\t\tmaterialProperties.__version = material.version;\n\t\t\t} //\n\n\n\t\t\tlet program = materialProperties.currentProgram;\n\n\t\t\tif (needsProgramChange === true) {\n\t\t\t\tprogram = getProgram(material, scene, object);\n\t\t\t}\n\n\t\t\tlet refreshProgram = false;\n\t\t\tlet refreshMaterial = false;\n\t\t\tlet refreshLights = false;\n\t\t\tconst p_uniforms = program.getUniforms(),\n\t\t\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif (state.useProgram(program.program)) {\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\t\t\t}\n\n\t\t\tif (material.id !== _currentMaterialId) {\n\t\t\t\t_currentMaterialId = material.id;\n\t\t\t\trefreshMaterial = true;\n\t\t\t}\n\n\t\t\tif (refreshProgram || _currentCamera !== camera) {\n\t\t\t\tp_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n\t\t\t\tif (capabilities.logarithmicDepthBuffer) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n\t\t\t\t}\n\n\t\t\t\tif (_currentCamera !== camera) {\n\t\t\t\t\t_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true; // set to true on material change\n\n\t\t\t\t\trefreshLights = true; // remains set until update done\n\t\t\t\t} // load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\n\t\t\t\tif (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n\t\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif (uCamPos !== undefined) {\n\t\t\t\t\t\tuCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n\t\t\t\t}\n\t\t\t} // skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\n\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrix');\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n\t\t\t\tconst skeleton = object.skeleton;\n\n\t\t\t\tif (skeleton) {\n\t\t\t\t\tif (capabilities.floatVertexTextures) {\n\t\t\t\t\t\tif (skeleton.boneTexture === null) skeleton.computeBoneTexture();\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n\t\t\t}\n\n\t\t\tif (refreshMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n\n\t\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t\t// the current material requires lighting info\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n\t\t\t\t} // refresh uniforms common to several materials\n\n\n\t\t\t\tif (fog && material.fog) {\n\t\t\t\t\tmaterials.refreshFogUniforms(m_uniforms, fog);\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t}\n\n\t\t\tif (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (material.isSpriteMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'center', object.center);\n\t\t\t} // common matrices\n\n\n\t\t\tp_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n\t\t\treturn program;\n\t\t} // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n\t\tfunction markUniformsLightsNeedsUpdate(uniforms, value) {\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\t}\n\n\t\tfunction materialNeedsLights(material) {\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n\t\t}\n\n\t\tthis.getActiveCubeFace = function () {\n\t\t\treturn _currentActiveCubeFace;\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\t\t\treturn _currentActiveMipmapLevel;\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\t\t\treturn _currentRenderTarget;\n\t\t};\n\n\t\tthis.setRenderTarget = function (renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n\t\t\t\ttextures.setupRenderTarget(renderTarget);\n\t\t\t}\n\n\t\t\tlet framebuffer = null;\n\t\t\tlet isCube = false;\n\t\t\tlet isRenderTarget3D = false;\n\n\t\t\tif (renderTarget) {\n\t\t\t\tconst texture = renderTarget.texture;\n\n\t\t\t\tif (texture.isDataTexture3D || texture.isDataTexture2DArray) {\n\t\t\t\t\tisRenderTarget3D = true;\n\t\t\t\t}\n\n\t\t\t\tconst __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\t\tframebuffer = __webglFramebuffer[activeCubeFace];\n\t\t\t\t\tisCube = true;\n\t\t\t\t} else if (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\t\tframebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n\t\t\t\t} else {\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy(renderTarget.viewport);\n\n\t\t\t\t_currentScissor.copy(renderTarget.scissor);\n\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\t\t} else {\n\t\t\t\t_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissorTest = _scissorTest;\n\t\t\t}\n\n\t\t\tconst framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\tif (framebufferBound && capabilities.drawBuffers) {\n\t\t\t\tlet needsUpdate = false;\n\n\t\t\t\tif (renderTarget) {\n\t\t\t\t\tif (renderTarget.isWebGLMultipleRenderTargets) {\n\t\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\t\tif (_currentDrawBuffers.length !== textures.length || _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0) {\n\t\t\t\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\t\t\t\t_currentDrawBuffers[i] = _gl.COLOR_ATTACHMENT0 + i;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_currentDrawBuffers.length = textures.length;\n\t\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0) {\n\t\t\t\t\t\t\t_currentDrawBuffers[0] = _gl.COLOR_ATTACHMENT0;\n\t\t\t\t\t\t\t_currentDrawBuffers.length = 1;\n\t\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== _gl.BACK) {\n\t\t\t\t\t\t_currentDrawBuffers[0] = _gl.BACK;\n\t\t\t\t\t\t_currentDrawBuffers.length = 1;\n\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (needsUpdate) {\n\t\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t\t_gl.drawBuffers(_currentDrawBuffers);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(_currentDrawBuffers);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport);\n\t\t\tstate.scissor(_currentScissor);\n\t\t\tstate.setScissorTest(_currentScissorTest);\n\n\t\t\tif (isCube) {\n\t\t\t\tconst textureProperties = properties.get(renderTarget.texture);\n\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n\t\t\t} else if (isRenderTarget3D) {\n\t\t\t\tconst textureProperties = properties.get(renderTarget.texture);\n\t\t\t\tconst layer = activeCubeFace || 0;\n\n\t\t\t\t_gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);\n\t\t\t}\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n\t\t\tif (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n\t\t\t\tframebuffer = framebuffer[activeCubeFaceIndex];\n\t\t\t}\n\n\t\t\tif (framebuffer) {\n\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\t\tif (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));\n\n\t\t\t\t\tif (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t!halfFloatSupportedByExt) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\t\t\t\t\tif (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n\t\t\t\t\t\t\t_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\t// restore framebuffer of current render target if necessary\n\t\t\t\t\tconst framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;\n\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function (position, texture, level = 0) {\n\t\t\tconst levelScale = Math.pow(2, -level);\n\t\t\tconst width = Math.floor(texture.image.width * levelScale);\n\t\t\tconst height = Math.floor(texture.image.height * levelScale);\n\t\t\tlet glFormat = utils.convert(texture.format);\n\n\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1120100\n\t\t\t\tif (glFormat === _gl.RGB) glFormat = _gl.RGB8;\n\t\t\t\tif (glFormat === _gl.RGBA) glFormat = _gl.RGBA8;\n\t\t\t}\n\n\t\t\ttextures.setTexture2D(texture, 0);\n\n\t\t\t_gl.copyTexImage2D(_gl.TEXTURE_2D, level, glFormat, position.x, position.y, width, height, 0);\n\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture = function (position, srcTexture, dstTexture, level = 0) {\n\t\t\tconst width = srcTexture.image.width;\n\t\t\tconst height = srcTexture.image.height;\n\t\t\tconst glFormat = utils.convert(dstTexture.format);\n\t\t\tconst glType = utils.convert(dstTexture.type);\n\t\t\ttextures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n\t\t\tif (srcTexture.isDataTexture) {\n\t\t\t\t_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n\t\t\t} else {\n\t\t\t\tif (srcTexture.isCompressedTexture) {\n\t\t\t\t\t_gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);\n\t\t\t\t}\n\t\t\t} // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture, level = 0) {\n\t\t\tif (_this.isWebGL1Renderer) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdata\n\t\t\t} = srcTexture.image;\n\t\t\tconst glFormat = utils.convert(dstTexture.format);\n\t\t\tconst glType = utils.convert(dstTexture.type);\n\t\t\tlet glTarget;\n\n\t\t\tif (dstTexture.isDataTexture3D) {\n\t\t\t\ttextures.setTexture3D(dstTexture, 0);\n\t\t\t\tglTarget = _gl.TEXTURE_3D;\n\t\t\t} else if (dstTexture.isDataTexture2DArray) {\n\t\t\t\ttextures.setTexture2DArray(dstTexture, 0);\n\t\t\t\tglTarget = _gl.TEXTURE_2D_ARRAY;\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n\t\t\tconst unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);\n\n\t\t\tconst unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);\n\n\t\t\tconst unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);\n\n\t\t\tconst unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);\n\n\t\t\tconst unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, width);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, height);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);\n\n\t\t\t_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, sourceBox.max.x - sourceBox.min.x + 1, sourceBox.max.y - sourceBox.min.y + 1, sourceBox.max.z - sourceBox.min.z + 1, glFormat, glType, data);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages); // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.initTexture = function (texture) {\n\t\t\ttextures.setTexture2D(texture, 0);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.resetState = function () {\n\t\t\t_currentActiveCubeFace = 0;\n\t\t\t_currentActiveMipmapLevel = 0;\n\t\t\t_currentRenderTarget = null;\n\t\t\tstate.reset();\n\t\t\tbindingStates.reset();\n\t\t};\n\n\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\tdetail: this\n\t\t\t})); // eslint-disable-line no-undef\n\n\t\t}\n\t}\n\n\tclass WebGL1Renderer extends WebGLRenderer {}\n\n\tWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\n\tclass FogExp2 {\n\t\tconstructor(color, density = 0.00025) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.density = density;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new FogExp2(this.color, this.density);\n\t\t}\n\n\t\ttoJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\t\t}\n\n\t}\n\n\tFogExp2.prototype.isFogExp2 = true;\n\n\tclass Fog {\n\t\tconstructor(color, near = 1, far = 1000) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Fog(this.color, this.near, this.far);\n\t\t}\n\n\t\ttoJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\t\t}\n\n\t}\n\n\tFog.prototype.isFog = true;\n\n\tclass Scene extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Scene';\n\t\t\tthis.background = null;\n\t\t\tthis.environment = null;\n\t\t\tthis.fog = null;\n\t\t\tthis.overrideMaterial = null;\n\t\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\t\tdetail: this\n\t\t\t\t})); // eslint-disable-line no-undef\n\n\t\t\t}\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tif (source.background !== null) this.background = source.background.clone();\n\t\t\tif (source.environment !== null) this.environment = source.environment.clone();\n\t\t\tif (source.fog !== null) this.fog = source.fog.clone();\n\t\t\tif (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tif (this.background !== null) data.object.background = this.background.toJSON(meta);\n\t\t\tif (this.environment !== null) data.object.environment = this.environment.toJSON(meta);\n\t\t\tif (this.fog !== null) data.object.fog = this.fog.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tScene.prototype.isScene = true;\n\n\tclass InterleavedBuffer {\n\t\tconstructor(array, stride) {\n\t\t\tthis.array = array;\n\t\t\tthis.stride = stride;\n\t\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\t\t\tthis.usage = StaticDrawUsage;\n\t\t\tthis.updateRange = {\n\t\t\t\toffset: 0,\n\t\t\t\tcount: -1\n\t\t\t};\n\t\t\tthis.version = 0;\n\t\t\tthis.uuid = generateUUID();\n\t\t}\n\n\t\tonUploadCallback() {}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor (let i = 0, l = this.stride; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(value, offset = 0) {\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t}\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n\t\t\t}\n\n\t\t\tconst array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n\t\t\tconst ib = new this.constructor(array, this.stride);\n\t\t\tib.setUsage(this.usage);\n\t\t\treturn ib;\n\t\t}\n\n\t\tonUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t} // generate UUID for array buffer if necessary\n\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));\n\t\t\t} //\n\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\t\t}\n\n\t}\n\n\tInterleavedBuffer.prototype.isInterleavedBuffer = true;\n\n\tconst _vector$6 = /*@__PURE__*/new Vector3();\n\n\tclass InterleavedBufferAttribute {\n\t\tconstructor(interleavedBuffer, itemSize, offset, normalized) {\n\t\t\tthis.name = '';\n\t\t\tthis.data = interleavedBuffer;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.offset = offset;\n\t\t\tthis.normalized = normalized === true;\n\t\t}\n\n\t\tget count() {\n\t\t\treturn this.data.count;\n\t\t}\n\n\t\tget array() {\n\t\t\treturn this.data.array;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tthis.data.needsUpdate = value;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tfor (let i = 0, l = this.data.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(index, x) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset] = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(index, y) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(index, z) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetW(index, w) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetX(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset];\n\t\t}\n\n\t\tgetY(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 1];\n\t\t}\n\n\t\tgetZ(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 2];\n\t\t}\n\n\t\tgetW(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 3];\n\t\t}\n\n\t\tsetXY(index, x, y) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZ(index, x, y, z) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZW(index, x, y, z, w) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\tthis.data.array[index + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0; i < this.count; i++) {\n\t\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (let j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n\t\t\t} else {\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0; i < this.count; i++) {\n\t\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (let j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t} // deinterleave data and save it as an ordinary buffer attribute for now\n\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// save as true interlaved attribtue\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t}\n\n\tInterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\trotation: <float>,\n\t *\tsizeAttenuation: <bool>\n\t * }\n\t */\n\n\tclass SpriteMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SpriteMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.rotation = 0;\n\t\t\tthis.sizeAttenuation = true;\n\t\t\tthis.transparent = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tlet _geometry;\n\n\tconst _intersectPoint = /*@__PURE__*/new Vector3();\n\n\tconst _worldScale = /*@__PURE__*/new Vector3();\n\n\tconst _mvPosition = /*@__PURE__*/new Vector3();\n\n\tconst _alignedPosition = /*@__PURE__*/new Vector2();\n\n\tconst _rotatedPosition = /*@__PURE__*/new Vector2();\n\n\tconst _viewWorldMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _vA = /*@__PURE__*/new Vector3();\n\n\tconst _vB = /*@__PURE__*/new Vector3();\n\n\tconst _vC = /*@__PURE__*/new Vector3();\n\n\tconst _uvA = /*@__PURE__*/new Vector2();\n\n\tconst _uvB = /*@__PURE__*/new Vector2();\n\n\tconst _uvC = /*@__PURE__*/new Vector2();\n\n\tclass Sprite extends Object3D {\n\t\tconstructor(material) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Sprite';\n\n\t\t\tif (_geometry === undefined) {\n\t\t\t\t_geometry = new BufferGeometry();\n\t\t\t\tconst float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n\t\t\t\tconst interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n\t\t\t\t_geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n\t\t\t\t_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n\t\t\t\t_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n\t\t\t}\n\n\t\t\tthis.geometry = _geometry;\n\t\t\tthis.material = material !== undefined ? material : new SpriteMaterial();\n\t\t\tthis.center = new Vector2(0.5, 0.5);\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tif (raycaster.camera === null) {\n\t\t\t\tconsole.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale(this.matrixWorld);\n\n\t\t\t_viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n\t\t\tthis.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n\t\t\t_mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n\t\t\tif (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n\t\t\t\t_worldScale.multiplyScalar(-_mvPosition.z);\n\t\t\t}\n\n\t\t\tconst rotation = this.material.rotation;\n\t\t\tlet sin, cos;\n\n\t\t\tif (rotation !== 0) {\n\t\t\t\tcos = Math.cos(rotation);\n\t\t\t\tsin = Math.sin(rotation);\n\t\t\t}\n\n\t\t\tconst center = this.center;\n\t\t\ttransformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t_uvA.set(0, 0);\n\n\t\t\t_uvB.set(1, 0);\n\n\t\t\t_uvC.set(1, 1); // check first triangle\n\n\n\t\t\tlet intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);\n\n\t\t\tif (intersect === null) {\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t\t_uvB.set(0, 1);\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);\n\n\t\t\t\tif (intersect === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\t\t\t});\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tif (source.center !== undefined) this.center.copy(source.center);\n\t\t\tthis.material = source.material;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSprite.prototype.isSprite = true;\n\n\tfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n\t\tif (sin !== undefined) {\n\t\t\t_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n\t\t\t_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n\t\t} else {\n\t\t\t_rotatedPosition.copy(_alignedPosition);\n\t\t}\n\n\t\tvertexPosition.copy(mvPosition);\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y; // transform to world space\n\n\t\tvertexPosition.applyMatrix4(_viewWorldMatrix);\n\t}\n\n\tconst _v1$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$1 = /*@__PURE__*/new Vector3();\n\n\tclass LOD extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis._currentLevel = 0;\n\t\t\tthis.type = 'LOD';\n\t\t\tObject.defineProperties(this, {\n\t\t\t\tlevels: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: []\n\t\t\t\t},\n\t\t\t\tisLOD: {\n\t\t\t\t\tvalue: true\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.autoUpdate = true;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source, false);\n\t\t\tconst levels = source.levels;\n\n\t\t\tfor (let i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tconst level = levels[i];\n\t\t\t\tthis.addLevel(level.object.clone(), level.distance);\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\treturn this;\n\t\t}\n\n\t\taddLevel(object, distance = 0) {\n\t\t\tdistance = Math.abs(distance);\n\t\t\tconst levels = this.levels;\n\t\t\tlet l;\n\n\t\t\tfor (l = 0; l < levels.length; l++) {\n\t\t\t\tif (distance < levels[l].distance) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlevels.splice(l, 0, {\n\t\t\t\tdistance: distance,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetCurrentLevel() {\n\t\t\treturn this._currentLevel;\n\t\t}\n\n\t\tgetObjectForDistance(distance) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\tlet i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance < levels[i].distance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn levels[i - 1].object;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\t_v1$2.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(_v1$2);\n\t\t\t\tthis.getObjectForDistance(distance).raycast(raycaster, intersects);\n\t\t\t}\n\t\t}\n\n\t\tupdate(camera) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 1) {\n\t\t\t\t_v1$2.setFromMatrixPosition(camera.matrixWorld);\n\n\t\t\t\t_v2$1.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tconst distance = _v1$2.distanceTo(_v2$1) / camera.zoom;\n\t\t\t\tlevels[0].object.visible = true;\n\t\t\t\tlet i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance >= levels[i].distance) {\n\t\t\t\t\t\tlevels[i - 1].object.visible = false;\n\t\t\t\t\t\tlevels[i].object.visible = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tlevels[i].object.visible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tif (this.autoUpdate === false) data.object.autoUpdate = false;\n\t\t\tdata.object.levels = [];\n\t\t\tconst levels = this.levels;\n\n\t\t\tfor (let i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tconst level = levels[i];\n\t\t\t\tdata.object.levels.push({\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tconst _basePosition = /*@__PURE__*/new Vector3();\n\n\tconst _skinIndex = /*@__PURE__*/new Vector4();\n\n\tconst _skinWeight = /*@__PURE__*/new Vector4();\n\n\tconst _vector$5 = /*@__PURE__*/new Vector3();\n\n\tconst _matrix = /*@__PURE__*/new Matrix4();\n\n\tclass SkinnedMesh extends Mesh {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'SkinnedMesh';\n\t\t\tthis.bindMode = 'attached';\n\t\t\tthis.bindMatrix = new Matrix4();\n\t\t\tthis.bindMatrixInverse = new Matrix4();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy(source.bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(source.bindMatrixInverse);\n\t\t\tthis.skeleton = source.skeleton;\n\t\t\treturn this;\n\t\t}\n\n\t\tbind(skeleton, bindMatrix) {\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif (bindMatrix === undefined) {\n\t\t\t\tthis.updateMatrixWorld(true);\n\t\t\t\tthis.skeleton.calculateInverses();\n\t\t\t\tbindMatrix = this.matrixWorld;\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy(bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(bindMatrix).invert();\n\t\t}\n\n\t\tpose() {\n\t\t\tthis.skeleton.pose();\n\t\t}\n\n\t\tnormalizeSkinWeights() {\n\t\t\tconst vector = new Vector4();\n\t\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor (let i = 0, l = skinWeight.count; i < l; i++) {\n\t\t\t\tvector.x = skinWeight.getX(i);\n\t\t\t\tvector.y = skinWeight.getY(i);\n\t\t\t\tvector.z = skinWeight.getZ(i);\n\t\t\t\tvector.w = skinWeight.getW(i);\n\t\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif (scale !== Infinity) {\n\t\t\t\t\tvector.multiplyScalar(scale);\n\t\t\t\t} else {\n\t\t\t\t\tvector.set(1, 0, 0, 0); // do something reasonable\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n\t\t\t}\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\n\t\t\tif (this.bindMode === 'attached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.matrixWorld).invert();\n\t\t\t} else if (this.bindMode === 'detached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.bindMatrix).invert();\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n\t\t\t}\n\t\t}\n\n\t\tboneTransform(index, target) {\n\t\t\tconst skeleton = this.skeleton;\n\t\t\tconst geometry = this.geometry;\n\n\t\t\t_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n\n\t\t\t_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n\n\t\t\t_basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);\n\n\t\t\ttarget.set(0, 0, 0);\n\n\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\tconst weight = _skinWeight.getComponent(i);\n\n\t\t\t\tif (weight !== 0) {\n\t\t\t\t\tconst boneIndex = _skinIndex.getComponent(i);\n\n\t\t\t\t\t_matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n\n\t\t\t\t\ttarget.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn target.applyMatrix4(this.bindMatrixInverse);\n\t\t}\n\n\t}\n\n\tSkinnedMesh.prototype.isSkinnedMesh = true;\n\n\tclass Bone extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Bone';\n\t\t}\n\n\t}\n\n\tBone.prototype.isBone = true;\n\n\tclass DataTexture extends Texture {\n\t\tconstructor(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.image = {\n\t\t\t\tdata: data || null,\n\t\t\t\twidth: width || 1,\n\t\t\t\theight: height || 1\n\t\t\t};\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\tconst _offsetMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _identityMatrix = /*@__PURE__*/new Matrix4();\n\n\tclass Skeleton {\n\t\tconstructor(bones = [], boneInverses = []) {\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.bones = bones.slice(0);\n\t\t\tthis.boneInverses = boneInverses;\n\t\t\tthis.boneMatrices = null;\n\t\t\tthis.boneTexture = null;\n\t\t\tthis.boneTextureSize = 0;\n\t\t\tthis.frame = -1;\n\t\t\tthis.init();\n\t\t}\n\n\t\tinit() {\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\t\t\tthis.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary\n\n\t\t\tif (boneInverses.length === 0) {\n\t\t\t\tthis.calculateInverses();\n\t\t\t} else {\n\t\t\t\t// handle special case\n\t\t\t\tif (bones.length !== boneInverses.length) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n\t\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\t\t\tthis.boneInverses.push(new Matrix4());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcalculateInverses() {\n\t\t\tthis.boneInverses.length = 0;\n\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst inverse = new Matrix4();\n\n\t\t\t\tif (this.bones[i]) {\n\t\t\t\t\tinverse.copy(this.bones[i].matrixWorld).invert();\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push(inverse);\n\t\t\t}\n\t\t}\n\n\t\tpose() {\n\t\t\t// recover the bind-time world matrices\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tbone.matrixWorld.copy(this.boneInverses[i]).invert();\n\t\t\t\t}\n\t\t\t} // compute the local matrices, positions, rotations and scales\n\n\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t\tbone.matrix.copy(bone.parent.matrixWorld).invert();\n\t\t\t\t\t\tbone.matrix.multiply(bone.matrixWorld);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbone.matrix.copy(bone.matrixWorld);\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\t\t\tconst boneMatrices = this.boneMatrices;\n\t\t\tconst boneTexture = this.boneTexture; // flatten bone matrices to array\n\n\t\t\tfor (let i = 0, il = bones.length; i < il; i++) {\n\t\t\t\t// compute the offset between the current and the original transform\n\t\t\t\tconst matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n\n\t\t\t\t_offsetMatrix.toArray(boneMatrices, i * 16);\n\t\t\t}\n\n\t\t\tif (boneTexture !== null) {\n\t\t\t\tboneTexture.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Skeleton(this.bones, this.boneInverses);\n\t\t}\n\n\t\tcomputeBoneTexture() {\n\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t//\t\t\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t//\twith\t8x8\tpixel texture max\t 16 bones * 4 pixels =\t(8 * 8)\n\t\t\t//\t\t\t 16x16 pixel texture max\t 64 bones * 4 pixels = (16 * 16)\n\t\t\t//\t\t\t 32x32 pixel texture max\t256 bones * 4 pixels = (32 * 32)\n\t\t\t//\t\t\t 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\t\tlet size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix\n\n\t\t\tsize = ceilPowerOfTwo(size);\n\t\t\tsize = Math.max(size, 4);\n\t\t\tconst boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n\t\t\tboneMatrices.set(this.boneMatrices); // copy current values\n\n\t\t\tconst boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n\t\t\tthis.boneMatrices = boneMatrices;\n\t\t\tthis.boneTexture = boneTexture;\n\t\t\tthis.boneTextureSize = size;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetBoneByName(name) {\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone.name === name) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tdispose() {\n\t\t\tif (this.boneTexture !== null) {\n\t\t\t\tthis.boneTexture.dispose();\n\t\t\t\tthis.boneTexture = null;\n\t\t\t}\n\t\t}\n\n\t\tfromJSON(json, bones) {\n\t\t\tthis.uuid = json.uuid;\n\n\t\t\tfor (let i = 0, l = json.bones.length; i < l; i++) {\n\t\t\t\tconst uuid = json.bones[i];\n\t\t\t\tlet bone = bones[uuid];\n\n\t\t\t\tif (bone === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push(bone);\n\t\t\t\tthis.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n\t\t\t}\n\n\t\t\tthis.init();\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Skeleton',\n\t\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t\t},\n\t\t\t\tbones: [],\n\t\t\t\tboneInverses: []\n\t\t\t};\n\t\t\tdata.uuid = this.uuid;\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\n\t\t\tfor (let i = 0, l = bones.length; i < l; i++) {\n\t\t\t\tconst bone = bones[i];\n\t\t\t\tdata.bones.push(bone.uuid);\n\t\t\t\tconst boneInverse = boneInverses[i];\n\t\t\t\tdata.boneInverses.push(boneInverse.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tconst _instanceLocalMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _instanceWorldMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _instanceIntersects = [];\n\n\tconst _mesh = /*@__PURE__*/new Mesh();\n\n\tclass InstancedMesh extends Mesh {\n\t\tconstructor(geometry, material, count) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);\n\t\t\tthis.instanceColor = null;\n\t\t\tthis.count = count;\n\t\t\tthis.frustumCulled = false;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.instanceMatrix.copy(source.instanceMatrix);\n\t\t\tif (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\n\t\t\tthis.count = source.count;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetColorAt(index, color) {\n\t\t\tcolor.fromArray(this.instanceColor.array, index * 3);\n\t\t}\n\n\t\tgetMatrixAt(index, matrix) {\n\t\t\tmatrix.fromArray(this.instanceMatrix.array, index * 16);\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst raycastTimes = this.count;\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\t\t\tif (_mesh.material === undefined) return;\n\n\t\t\tfor (let instanceId = 0; instanceId < raycastTimes; instanceId++) {\n\t\t\t\t// calculate the world matrix for each instance\n\t\t\t\tthis.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n\t\t\t\tfor (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n\t\t\t\t\tconst intersect = _instanceIntersects[i];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push(intersect);\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\t\t\t}\n\t\t}\n\n\t\tsetColorAt(index, color) {\n\t\t\tif (this.instanceColor === null) {\n\t\t\t\tthis.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);\n\t\t\t}\n\n\t\t\tcolor.toArray(this.instanceColor.array, index * 3);\n\t\t}\n\n\t\tsetMatrixAt(index, matrix) {\n\t\t\tmatrix.toArray(this.instanceMatrix.array, index * 16);\n\t\t}\n\n\t\tupdateMorphTargets() {}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tInstancedMesh.prototype.isInstancedMesh = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\tlinecap: \"round\",\n\t *\tlinejoin: \"round\"\n\t * }\n\t */\n\n\tclass LineBasicMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineBasicMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.linewidth = 1;\n\t\t\tthis.linecap = 'round';\n\t\t\tthis.linejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.linewidth = source.linewidth;\n\t\t\tthis.linecap = source.linecap;\n\t\t\tthis.linejoin = source.linejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tconst _start$1 = /*@__PURE__*/new Vector3();\n\n\tconst _end$1 = /*@__PURE__*/new Vector3();\n\n\tconst _inverseMatrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _ray$1 = /*@__PURE__*/new Ray();\n\n\tconst _sphere$1 = /*@__PURE__*/new Sphere();\n\n\tclass Line extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Line';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\tcomputeLineDistances() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\t\tconst lineDistances = [0];\n\n\t\t\t\t\tfor (let i = 1, l = positionAttribute.count; i < l; i++) {\n\t\t\t\t\t\t_start$1.fromBufferAttribute(positionAttribute, i - 1);\n\n\t\t\t\t\t\t_end$1.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\tlineDistances[i] = lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i] += _start$1.distanceTo(_end$1);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst threshold = raycaster.params.Line.threshold;\n\t\t\tconst drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$1.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$1.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$1.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$1) === false) return; //\n\n\t\t\t_inverseMatrix$1.copy(matrixWorld).invert();\n\n\t\t\t_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n\n\t\t\tconst localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tconst localThresholdSq = localThreshold * localThreshold;\n\t\t\tconst vStart = new Vector3();\n\t\t\tconst vEnd = new Vector3();\n\t\t\tconst interSegment = new Vector3();\n\t\t\tconst interRay = new Vector3();\n\t\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end - 1; i < l; i += step) {\n\t\t\t\t\t\tconst a = index.getX(i);\n\t\t\t\t\t\tconst b = index.getX(i + 1);\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, a);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, b);\n\n\t\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end - 1; i < l; i += step) {\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, i);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tLine.prototype.isLine = true;\n\n\tconst _start = /*@__PURE__*/new Vector3();\n\n\tconst _end = /*@__PURE__*/new Vector3();\n\n\tclass LineSegments extends Line {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'LineSegments';\n\t\t}\n\n\t\tcomputeLineDistances() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\t\tconst lineDistances = [];\n\n\t\t\t\t\tfor (let i = 0, l = positionAttribute.count; i < l; i += 2) {\n\t\t\t\t\t\t_start.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\t_end.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tlineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineSegments.prototype.isLineSegments = true;\n\n\tclass LineLoop extends Line {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'LineLoop';\n\t\t}\n\n\t}\n\n\tLineLoop.prototype.isLineLoop = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tsize: <float>,\n\t *\tsizeAttenuation: <bool>\n\t *\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tclass PointsMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PointsMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.size = 1;\n\t\t\tthis.sizeAttenuation = true;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.size = source.size;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tconst _inverseMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _ray = /*@__PURE__*/new Ray();\n\n\tconst _sphere = /*@__PURE__*/new Sphere();\n\n\tconst _position$2 = /*@__PURE__*/new Vector3();\n\n\tclass Points extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new PointsMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Points';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst threshold = raycaster.params.Points.threshold;\n\t\t\tconst drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy(geometry.boundingSphere);\n\n\t\t\t_sphere.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n\t\t\t_inverseMatrix.copy(matrixWorld).invert();\n\n\t\t\t_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);\n\n\t\t\tconst localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, il = end; i < il; i++) {\n\t\t\t\t\t\tconst a = index.getX(i);\n\n\t\t\t\t\t\t_position$2.fromBufferAttribute(positionAttribute, a);\n\n\t\t\t\t\t\ttestPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end; i < l; i++) {\n\t\t\t\t\t\t_position$2.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\ttestPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tPoints.prototype.isPoints = true;\n\n\tfunction testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n\t\tconst rayPointDistanceSq = _ray.distanceSqToPoint(point);\n\n\t\tif (rayPointDistanceSq < localThresholdSq) {\n\t\t\tconst intersectPoint = new Vector3();\n\n\t\t\t_ray.closestPointToPoint(point, intersectPoint);\n\n\t\t\tintersectPoint.applyMatrix4(matrixWorld);\n\t\t\tconst distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt(rayPointDistanceSq),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t}\n\t}\n\n\tclass VideoTexture extends Texture {\n\t\tconstructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tsuper(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.format = format !== undefined ? format : RGBFormat;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tconst scope = this;\n\n\t\t\tfunction updateVideo() {\n\t\t\t\tscope.needsUpdate = true;\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\n\t\t\tif ('requestVideoFrameCallback' in video) {\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.image).copy(this);\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst video = this.image;\n\t\t\tconst hasVideoFrameCallback = ('requestVideoFrameCallback' in video);\n\n\t\t\tif (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tVideoTexture.prototype.isVideoTexture = true;\n\n\tclass CompressedTexture extends Texture {\n\t\tconstructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.mipmaps = mipmaps; // no flipping for cube textures\n\t\t\t// (also flipping doesn't work for compressed textures )\n\n\t\t\tthis.flipY = false; // can't generate mipmaps for compressed textures\n\t\t\t// mips must be embedded in DDS files\n\n\t\t\tthis.generateMipmaps = false;\n\t\t}\n\n\t}\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\tclass CanvasTexture extends Texture {\n\t\tconstructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tsuper(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\tclass DepthTexture extends Texture {\n\t\tconstructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {\n\t\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\t\tif (format !== DepthFormat && format !== DepthStencilFormat) {\n\t\t\t\tthrow new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n\t\t\t}\n\n\t\t\tif (type === undefined && format === DepthFormat) type = UnsignedShortType;\n\t\t\tif (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\tthis.flipY = false;\n\t\t\tthis.generateMipmaps = false;\n\t\t}\n\n\t}\n\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\tclass CircleGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CircleGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tsegments = Math.max(3, segments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // center point\n\n\t\t\tvertices.push(0, 0, 0);\n\t\t\tnormals.push(0, 0, 1);\n\t\t\tuvs.push(0.5, 0.5);\n\n\t\t\tfor (let s = 0, i = 3; s <= segments; s++, i += 3) {\n\t\t\t\tconst segment = thetaStart + s / segments * thetaLength; // vertex\n\n\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\tnormals.push(0, 0, 1); // uvs\n\n\t\t\t\tuv.x = (vertices[i] / radius + 1) / 2;\n\t\t\t\tuv.y = (vertices[i + 1] / radius + 1) / 2;\n\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t} // indices\n\n\n\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\tindices.push(i, i + 1, 0);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass CylinderGeometry extends BufferGeometry {\n\t\tconstructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CylinderGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tconst scope = this;\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\theightSegments = Math.floor(heightSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet index = 0;\n\t\t\tconst indexArray = [];\n\t\t\tconst halfHeight = height / 2;\n\t\t\tlet groupStart = 0; // generate geometry\n\n\t\t\tgenerateTorso();\n\n\t\t\tif (openEnded === false) {\n\t\t\t\tif (radiusTop > 0) generateCap(true);\n\t\t\t\tif (radiusBottom > 0) generateCap(false);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction generateTorso() {\n\t\t\t\tconst normal = new Vector3();\n\t\t\t\tconst vertex = new Vector3();\n\t\t\t\tlet groupCount = 0; // this will be used to calculate the normal\n\n\t\t\t\tconst slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n\t\t\t\tfor (let y = 0; y <= heightSegments; y++) {\n\t\t\t\t\tconst indexRow = [];\n\t\t\t\t\tconst v = y / heightSegments; // calculate the radius of the current row\n\n\t\t\t\t\tconst radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n\t\t\t\t\tfor (let x = 0; x <= radialSegments; x++) {\n\t\t\t\t\t\tconst u = x / radialSegments;\n\t\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\t\t\t\t\t\tconst sinTheta = Math.sin(theta);\n\t\t\t\t\t\tconst cosTheta = Math.cos(theta); // vertex\n\n\t\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\t\tvertex.y = -v * height + halfHeight;\n\t\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\t\tnormal.set(sinTheta, slope, cosTheta).normalize();\n\t\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\t\tuvs.push(u, 1 - v); // save index of vertex in respective row\n\n\t\t\t\t\t\tindexRow.push(index++);\n\t\t\t\t\t} // now save vertices of the row in our index array\n\n\n\t\t\t\t\tindexArray.push(indexRow);\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (let x = 0; x < radialSegments; x++) {\n\t\t\t\t\tfor (let y = 0; y < heightSegments; y++) {\n\t\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\t\tconst a = indexArray[y][x];\n\t\t\t\t\t\tconst b = indexArray[y + 1][x];\n\t\t\t\t\t\tconst c = indexArray[y + 1][x + 1];\n\t\t\t\t\t\tconst d = indexArray[y][x + 1]; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // update group counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\tfunction generateCap(top) {\n\t\t\t\t// save the index of the first center vertex\n\t\t\t\tconst centerIndexStart = index;\n\t\t\t\tconst uv = new Vector2();\n\t\t\t\tconst vertex = new Vector3();\n\t\t\t\tlet groupCount = 0;\n\t\t\t\tconst radius = top === true ? radiusTop : radiusBottom;\n\t\t\t\tconst sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.\n\t\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\t\tfor (let x = 1; x <= radialSegments; x++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertices.push(0, halfHeight * sign, 0); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuvs.push(0.5, 0.5); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // save the index of the last center vertex\n\n\n\t\t\t\tconst centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n\t\t\t\tfor (let x = 0; x <= radialSegments; x++) {\n\t\t\t\t\tconst u = x / radialSegments;\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\t\t\t\t\tconst cosTheta = Math.cos(theta);\n\t\t\t\t\tconst sinTheta = Math.sin(theta); // vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuv.x = cosTheta * 0.5 + 0.5;\n\t\t\t\t\tuv.y = sinTheta * 0.5 * sign + 0.5;\n\t\t\t\t\tuvs.push(uv.x, uv.y); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (let x = 0; x < radialSegments; x++) {\n\t\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\t\tif (top === true) {\n\t\t\t\t\t\t// face top\n\t\t\t\t\t\tindices.push(i, i + 1, c);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// face bottom\n\t\t\t\t\t\tindices.push(i + 1, i, c);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass ConeGeometry extends CylinderGeometry {\n\t\tconstructor(radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n\t\t\tthis.type = 'ConeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t}\n\n\t}\n\n\tclass PolyhedronGeometry extends BufferGeometry {\n\t\tconstructor(vertices, indices, radius = 1, detail = 0) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PolyhedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t}; // default buffer data\n\n\t\t\tconst vertexBuffer = [];\n\t\t\tconst uvBuffer = []; // the subdivision creates the vertex buffer data\n\n\t\t\tsubdivide(detail); // all vertices should lie on a conceptual sphere with a given radius\n\n\t\t\tapplyRadius(radius); // finally, create the uv data\n\n\t\t\tgenerateUVs(); // build non-indexed geometry\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n\n\t\t\tif (detail === 0) {\n\t\t\t\tthis.computeVertexNormals(); // flat normals\n\t\t\t} else {\n\t\t\t\tthis.normalizeNormals(); // smooth normals\n\t\t\t} // helper functions\n\n\n\t\t\tfunction subdivide(detail) {\n\t\t\t\tconst a = new Vector3();\n\t\t\t\tconst b = new Vector3();\n\t\t\t\tconst c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\t\tfor (let i = 0; i < indices.length; i += 3) {\n\t\t\t\t\t// get the vertices of the face\n\t\t\t\t\tgetVertexByIndex(indices[i + 0], a);\n\t\t\t\t\tgetVertexByIndex(indices[i + 1], b);\n\t\t\t\t\tgetVertexByIndex(indices[i + 2], c); // perform subdivision\n\n\t\t\t\t\tsubdivideFace(a, b, c, detail);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction subdivideFace(a, b, c, detail) {\n\t\t\t\tconst cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\t\tconst v = []; // construct all of the vertices for this subdivision\n\n\t\t\t\tfor (let i = 0; i <= cols; i++) {\n\t\t\t\t\tv[i] = [];\n\t\t\t\t\tconst aj = a.clone().lerp(c, i / cols);\n\t\t\t\t\tconst bj = b.clone().lerp(c, i / cols);\n\t\t\t\t\tconst rows = cols - i;\n\n\t\t\t\t\tfor (let j = 0; j <= rows; j++) {\n\t\t\t\t\t\tif (j === 0 && i === cols) {\n\t\t\t\t\t\t\tv[i][j] = aj;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv[i][j] = aj.clone().lerp(bj, j / rows);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // construct all of the faces\n\n\n\t\t\t\tfor (let i = 0; i < cols; i++) {\n\t\t\t\t\tfor (let j = 0; j < 2 * (cols - i) - 1; j++) {\n\t\t\t\t\t\tconst k = Math.floor(j / 2);\n\n\t\t\t\t\t\tif (j % 2 === 0) {\n\t\t\t\t\t\t\tpushVertex(v[i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k]);\n\t\t\t\t\t\t\tpushVertex(v[i][k]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpushVertex(v[i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction applyRadius(radius) {\n\t\t\t\tconst vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\t\tfor (let i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvertex.normalize().multiplyScalar(radius);\n\t\t\t\t\tvertexBuffer[i + 0] = vertex.x;\n\t\t\t\t\tvertexBuffer[i + 1] = vertex.y;\n\t\t\t\t\tvertexBuffer[i + 2] = vertex.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tconst vertex = new Vector3();\n\n\t\t\t\tfor (let i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tconst u = azimuth(vertex) / 2 / Math.PI + 0.5;\n\t\t\t\t\tconst v = inclination(vertex) / Math.PI + 0.5;\n\t\t\t\t\tuvBuffer.push(u, 1 - v);\n\t\t\t\t}\n\n\t\t\t\tcorrectUVs();\n\t\t\t\tcorrectSeam();\n\t\t\t}\n\n\t\t\tfunction correctSeam() {\n\t\t\t\t// handle case when face straddles the seam, see #3269\n\t\t\t\tfor (let i = 0; i < uvBuffer.length; i += 6) {\n\t\t\t\t\t// uv data of a single face\n\t\t\t\t\tconst x0 = uvBuffer[i + 0];\n\t\t\t\t\tconst x1 = uvBuffer[i + 2];\n\t\t\t\t\tconst x2 = uvBuffer[i + 4];\n\t\t\t\t\tconst max = Math.max(x0, x1, x2);\n\t\t\t\t\tconst min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary\n\n\t\t\t\t\tif (max > 0.9 && min < 0.1) {\n\t\t\t\t\t\tif (x0 < 0.2) uvBuffer[i + 0] += 1;\n\t\t\t\t\t\tif (x1 < 0.2) uvBuffer[i + 2] += 1;\n\t\t\t\t\t\tif (x2 < 0.2) uvBuffer[i + 4] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction pushVertex(vertex) {\n\t\t\t\tvertexBuffer.push(vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\n\t\t\tfunction getVertexByIndex(index, vertex) {\n\t\t\t\tconst stride = index * 3;\n\t\t\t\tvertex.x = vertices[stride + 0];\n\t\t\t\tvertex.y = vertices[stride + 1];\n\t\t\t\tvertex.z = vertices[stride + 2];\n\t\t\t}\n\n\t\t\tfunction correctUVs() {\n\t\t\t\tconst a = new Vector3();\n\t\t\t\tconst b = new Vector3();\n\t\t\t\tconst c = new Vector3();\n\t\t\t\tconst centroid = new Vector3();\n\t\t\t\tconst uvA = new Vector2();\n\t\t\t\tconst uvB = new Vector2();\n\t\t\t\tconst uvC = new Vector2();\n\n\t\t\t\tfor (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n\t\t\t\t\ta.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n\t\t\t\t\tb.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n\t\t\t\t\tc.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n\t\t\t\t\tuvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n\t\t\t\t\tuvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n\t\t\t\t\tuvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n\t\t\t\t\tcentroid.copy(a).add(b).add(c).divideScalar(3);\n\t\t\t\t\tconst azi = azimuth(centroid);\n\t\t\t\t\tcorrectUV(uvA, j + 0, a, azi);\n\t\t\t\t\tcorrectUV(uvB, j + 2, b, azi);\n\t\t\t\t\tcorrectUV(uvC, j + 4, c, azi);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction correctUV(uv, stride, vector, azimuth) {\n\t\t\t\tif (azimuth < 0 && uv.x === 1) {\n\t\t\t\t\tuvBuffer[stride] = uv.x - 1;\n\t\t\t\t}\n\n\t\t\t\tif (vector.x === 0 && vector.z === 0) {\n\t\t\t\t\tuvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n\t\t\t\t}\n\t\t\t} // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n\t\t\tfunction azimuth(vector) {\n\t\t\t\treturn Math.atan2(vector.z, -vector.x);\n\t\t\t} // Angle above the XZ plane.\n\n\n\t\t\tfunction inclination(vector) {\n\t\t\t\treturn Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass DodecahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst t = (1 + Math.sqrt(5)) / 2;\n\t\t\tconst r = 1 / t;\n\t\t\tconst vertices = [// (±1, ±1, ±1)\n\t\t\t-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n\t\t\t0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n\t\t\t-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n\t\t\t-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n\t\t\tconst indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'DodecahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\tconst _v0 = new Vector3();\n\n\tconst _v1$1 = new Vector3();\n\n\tconst _normal = new Vector3();\n\n\tconst _triangle = new Triangle();\n\n\tclass EdgesGeometry extends BufferGeometry {\n\t\tconstructor(geometry, thresholdAngle) {\n\t\t\tsuper();\n\t\t\tthis.type = 'EdgesGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tthresholdAngle: thresholdAngle\n\t\t\t};\n\t\t\tthresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow(10, precisionPoints);\n\t\t\tconst thresholdDot = Math.cos(DEG2RAD * thresholdAngle);\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute('position');\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\t\t\tconst indexArr = [0, 0, 0];\n\t\t\tconst vertKeys = ['a', 'b', 'c'];\n\t\t\tconst hashes = new Array(3);\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\n\t\t\tfor (let i = 0; i < indexCount; i += 3) {\n\t\t\t\tif (indexAttr) {\n\t\t\t\t\tindexArr[0] = indexAttr.getX(i);\n\t\t\t\t\tindexArr[1] = indexAttr.getX(i + 1);\n\t\t\t\t\tindexArr[2] = indexAttr.getX(i + 2);\n\t\t\t\t} else {\n\t\t\t\t\tindexArr[0] = i;\n\t\t\t\t\tindexArr[1] = i + 1;\n\t\t\t\t\tindexArr[2] = i + 2;\n\t\t\t\t}\n\n\t\t\t\tconst {\n\t\t\t\t\ta,\n\t\t\t\t\tb,\n\t\t\t\t\tc\n\t\t\t\t} = _triangle;\n\t\t\t\ta.fromBufferAttribute(positionAttr, indexArr[0]);\n\t\t\t\tb.fromBufferAttribute(positionAttr, indexArr[1]);\n\t\t\t\tc.fromBufferAttribute(positionAttr, indexArr[2]);\n\n\t\t\t\t_triangle.getNormal(_normal); // create hashes for the edge from the vertices\n\n\n\t\t\t\thashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;\n\t\t\t\thashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;\n\t\t\t\thashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`; // skip degenerate triangles\n\n\t\t\t\tif (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} // iterate over every edge\n\n\n\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = (j + 1) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[j];\n\t\t\t\t\tconst vecHash1 = hashes[jNext];\n\t\t\t\t\tconst v0 = _triangle[vertKeys[j]];\n\t\t\t\t\tconst v1 = _triangle[vertKeys[jNext]];\n\t\t\t\t\tconst hash = `${vecHash0}_${vecHash1}`;\n\t\t\t\t\tconst reverseHash = `${vecHash1}_${vecHash0}`;\n\n\t\t\t\t\tif (reverseHash in edgeData && edgeData[reverseHash]) {\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n\t\t\t\t\t\t\tvertices.push(v0.x, v0.y, v0.z);\n\t\t\t\t\t\t\tvertices.push(v1.x, v1.y, v1.z);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[reverseHash] = null;\n\t\t\t\t\t} else if (!(hash in edgeData)) {\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[hash] = {\n\t\t\t\t\t\t\tindex0: indexArr[j],\n\t\t\t\t\t\t\tindex1: indexArr[jNext],\n\t\t\t\t\t\t\tnormal: _normal.clone()\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // iterate over all remaining, unmatched edges and add them to the vertex array\n\n\n\t\t\tfor (const key in edgeData) {\n\t\t\t\tif (edgeData[key]) {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tindex0,\n\t\t\t\t\t\tindex1\n\t\t\t\t\t} = edgeData[key];\n\n\t\t\t\t\t_v0.fromBufferAttribute(positionAttr, index0);\n\n\t\t\t\t\t_v1$1.fromBufferAttribute(positionAttr, index1);\n\n\t\t\t\t\tvertices.push(_v0.x, _v0.y, _v0.z);\n\t\t\t\t\tvertices.push(_v1$1.x, _v1$1.y, _v1$1.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t}\n\n\t}\n\n\t/**\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\tconst Earcut = {\n\t\ttriangulate: function (data, holeIndices, dim) {\n\t\t\tdim = dim || 2;\n\t\t\tconst hasHoles = holeIndices && holeIndices.length;\n\t\t\tconst outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\t\t\tlet outerNode = linkedList(data, 0, outerLen, dim, true);\n\t\t\tconst triangles = [];\n\t\t\tif (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\t\t\tlet minX, minY, maxX, maxY, x, y, invSize;\n\t\t\tif (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\t\tif (data.length > 80 * dim) {\n\t\t\t\tminX = maxX = data[0];\n\t\t\t\tminY = maxY = data[1];\n\n\t\t\t\tfor (let i = dim; i < outerLen; i += dim) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t\ty = data[i + 1];\n\t\t\t\t\tif (x < minX) minX = x;\n\t\t\t\t\tif (y < minY) minY = y;\n\t\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\t} // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n\t\t\t\tinvSize = Math.max(maxX - minX, maxY - minY);\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\t\t\t}\n\n\t\t\tearcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\t\t\treturn triangles;\n\t\t}\n\t}; // create a circular doubly linked list from polygon points in the specified winding order\n\n\tfunction linkedList(data, start, end, dim, clockwise) {\n\t\tlet i, last;\n\n\t\tif (clockwise === signedArea(data, start, end, dim) > 0) {\n\t\t\tfor (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n\t\t} else {\n\t\t\tfor (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n\t\t}\n\n\t\tif (last && equals(last, last.next)) {\n\t\t\tremoveNode(last);\n\t\t\tlast = last.next;\n\t\t}\n\n\t\treturn last;\n\t} // eliminate colinear or duplicate points\n\n\n\tfunction filterPoints(start, end) {\n\t\tif (!start) return start;\n\t\tif (!end) end = start;\n\t\tlet p = start,\n\t\t\t\tagain;\n\n\t\tdo {\n\t\t\tagain = false;\n\n\t\t\tif (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n\t\t\t\tremoveNode(p);\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif (p === p.next) break;\n\t\t\t\tagain = true;\n\t\t\t} else {\n\t\t\t\tp = p.next;\n\t\t\t}\n\t\t} while (again || p !== end);\n\n\t\treturn end;\n\t} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\n\tfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n\t\tif (!ear) return; // interlink polygon nodes in z-order\n\n\t\tif (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\t\tlet stop = ear,\n\t\t\t\tprev,\n\t\t\t\tnext; // iterate through ears, slicing them one by one\n\n\t\twhile (ear.prev !== ear.next) {\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push(prev.i / dim);\n\t\t\t\ttriangles.push(ear.i / dim);\n\t\t\t\ttriangles.push(next.i / dim);\n\t\t\t\tremoveNode(ear); // skipping the next vertex leads to less sliver triangles\n\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n\t\t\tif (ear === stop) {\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif (!pass) {\n\t\t\t\t\tearcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n\t\t\t\t} else if (pass === 1) {\n\t\t\t\t\tear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n\t\t\t\t\tearcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n\t\t\t\t} else if (pass === 2) {\n\t\t\t\t\tsplitEarcut(ear, triangles, dim, minX, minY, invSize);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\n\tfunction isEar(ear) {\n\t\tconst a = ear.prev,\n\t\t\t\t\tb = ear,\n\t\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// now make sure we don't have other points inside the potential ear\n\n\t\tlet p = ear.next.next;\n\n\t\twhile (p !== ear.prev) {\n\t\t\tif (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.next;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction isEarHashed(ear, minX, minY, invSize) {\n\t\tconst a = ear.prev,\n\t\t\t\t\tb = ear,\n\t\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// triangle bbox; min & max are calculated like this for speed\n\n\t\tconst minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n\t\t\t\t\tminTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n\t\t\t\t\tmaxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n\t\t\t\t\tmaxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n\t\tconst minZ = zOrder(minTX, minTY, minX, minY, invSize),\n\t\t\t\t\tmaxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\t\tlet p = ear.prevZ,\n\t\t\t\tn = ear.nextZ; // look for points inside the triangle in both directions\n\n\t\twhile (p && p.z >= minZ && n && n.z <= maxZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t} // look for remaining points in decreasing z-order\n\n\n\t\twhile (p && p.z >= minZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t} // look for remaining points in increasing z-order\n\n\n\t\twhile (n && n.z <= maxZ) {\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t}\n\n\t\treturn true;\n\t} // go through all polygon nodes and cure small local self-intersections\n\n\n\tfunction cureLocalIntersections(start, triangles, dim) {\n\t\tlet p = start;\n\n\t\tdo {\n\t\t\tconst a = p.prev,\n\t\t\t\t\t\tb = p.next.next;\n\n\t\t\tif (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\t\t\t\ttriangles.push(a.i / dim);\n\t\t\t\ttriangles.push(p.i / dim);\n\t\t\t\ttriangles.push(b.i / dim); // remove two nodes involved\n\n\t\t\t\tremoveNode(p);\n\t\t\t\tremoveNode(p.next);\n\t\t\t\tp = start = b;\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn filterPoints(p);\n\t} // try splitting polygon into two and triangulate them independently\n\n\n\tfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tlet a = start;\n\n\t\tdo {\n\t\t\tlet b = a.next.next;\n\n\t\t\twhile (b !== a.prev) {\n\t\t\t\tif (a.i !== b.i && isValidDiagonal(a, b)) {\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tlet c = splitPolygon(a, b); // filter colinear points around the cuts\n\n\t\t\t\t\ta = filterPoints(a, a.next);\n\t\t\t\t\tc = filterPoints(c, c.next); // run earcut on each half\n\n\t\t\t\t\tearcutLinked(a, triangles, dim, minX, minY, invSize);\n\t\t\t\t\tearcutLinked(c, triangles, dim, minX, minY, invSize);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\t\t\t}\n\n\t\t\ta = a.next;\n\t\t} while (a !== start);\n\t} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\n\tfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n\t\tconst queue = [];\n\t\tlet i, len, start, end, list;\n\n\t\tfor (i = 0, len = holeIndices.length; i < len; i++) {\n\t\t\tstart = holeIndices[i] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n\t\t\tlist = linkedList(data, start, end, dim, false);\n\t\t\tif (list === list.next) list.steiner = true;\n\t\t\tqueue.push(getLeftmost(list));\n\t\t}\n\n\t\tqueue.sort(compareX); // process holes from left to right\n\n\t\tfor (i = 0; i < queue.length; i++) {\n\t\t\teliminateHole(queue[i], outerNode);\n\t\t\touterNode = filterPoints(outerNode, outerNode.next);\n\t\t}\n\n\t\treturn outerNode;\n\t}\n\n\tfunction compareX(a, b) {\n\t\treturn a.x - b.x;\n\t} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\n\tfunction eliminateHole(hole, outerNode) {\n\t\touterNode = findHoleBridge(hole, outerNode);\n\n\t\tif (outerNode) {\n\t\t\tconst b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n\t\t\tfilterPoints(outerNode, outerNode.next);\n\t\t\tfilterPoints(b, b.next);\n\t\t}\n\t} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\n\tfunction findHoleBridge(hole, outerNode) {\n\t\tlet p = outerNode;\n\t\tconst hx = hole.x;\n\t\tconst hy = hole.y;\n\t\tlet qx = -Infinity,\n\t\t\t\tm; // find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\n\t\tdo {\n\t\t\tif (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n\t\t\t\tconst x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n\t\t\t\tif (x <= hx && x > qx) {\n\t\t\t\t\tqx = x;\n\n\t\t\t\t\tif (x === hx) {\n\t\t\t\t\t\tif (hy === p.y) return p;\n\t\t\t\t\t\tif (hy === p.next.y) return p.next;\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== outerNode);\n\n\t\tif (!m) return null;\n\t\tif (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tconst stop = m,\n\t\t\t\t\tmx = m.x,\n\t\t\t\t\tmy = m.y;\n\t\tlet tanMin = Infinity,\n\t\t\t\ttan;\n\t\tp = m;\n\n\t\tdo {\n\t\t\tif (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\t\t\t\ttan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n\t\t\t\tif (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== stop);\n\n\t\treturn m;\n\t} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\n\tfunction sectorContainsSector(m, p) {\n\t\treturn area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n\t} // interlink polygon nodes in z-order\n\n\n\tfunction indexCurve(start, minX, minY, invSize) {\n\t\tlet p = start;\n\n\t\tdo {\n\t\t\tif (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\t\tsortLinked(p);\n\t} // Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\n\tfunction sortLinked(list) {\n\t\tlet i,\n\t\t\t\tp,\n\t\t\t\tq,\n\t\t\t\te,\n\t\t\t\ttail,\n\t\t\t\tnumMerges,\n\t\t\t\tpSize,\n\t\t\t\tqSize,\n\t\t\t\tinSize = 1;\n\n\t\tdo {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile (p) {\n\t\t\t\tnumMerges++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\n\t\t\t\tfor (i = 0; i < inSize; i++) {\n\t\t\t\t\tpSize++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif (!q) break;\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile (pSize > 0 || qSize > 0 && q) {\n\t\t\t\t\tif (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tail) tail.nextZ = e;else list = e;\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\t\t} while (numMerges > 1);\n\n\t\treturn list;\n\t} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\n\tfunction zOrder(x, y, minX, minY, invSize) {\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * (x - minX) * invSize;\n\t\ty = 32767 * (y - minY) * invSize;\n\t\tx = (x | x << 8) & 0x00FF00FF;\n\t\tx = (x | x << 4) & 0x0F0F0F0F;\n\t\tx = (x | x << 2) & 0x33333333;\n\t\tx = (x | x << 1) & 0x55555555;\n\t\ty = (y | y << 8) & 0x00FF00FF;\n\t\ty = (y | y << 4) & 0x0F0F0F0F;\n\t\ty = (y | y << 2) & 0x33333333;\n\t\ty = (y | y << 1) & 0x55555555;\n\t\treturn x | y << 1;\n\t} // find the leftmost node of a polygon ring\n\n\n\tfunction getLeftmost(start) {\n\t\tlet p = start,\n\t\t\t\tleftmost = start;\n\n\t\tdo {\n\t\t\tif (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn leftmost;\n\t} // check if a point lies within a convex triangle\n\n\n\tfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n\t\treturn (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n\t} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\n\tfunction isValidDiagonal(a, b) {\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n\t\tlocallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n\t\tarea(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n\t\tequals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n\t} // signed area of a triangle\n\n\n\tfunction area(p, q, r) {\n\t\treturn (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n\t} // check if two points are equal\n\n\n\tfunction equals(p1, p2) {\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\t} // check if two segments intersect\n\n\n\tfunction intersects(p1, q1, p2, q2) {\n\t\tconst o1 = sign(area(p1, q1, p2));\n\t\tconst o2 = sign(area(p1, q1, q2));\n\t\tconst o3 = sign(area(p2, q2, p1));\n\t\tconst o4 = sign(area(p2, q2, q1));\n\t\tif (o1 !== o2 && o3 !== o4) return true; // general case\n\n\t\tif (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n\t\tif (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n\t\tif (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n\t\tif (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\t} // for collinear points p, q, r, check if point q lies on segment pr\n\n\n\tfunction onSegment(p, q, r) {\n\t\treturn q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n\t}\n\n\tfunction sign(num) {\n\t\treturn num > 0 ? 1 : num < 0 ? -1 : 0;\n\t} // check if a polygon diagonal intersects any polygon segments\n\n\n\tfunction intersectsPolygon(a, b) {\n\t\tlet p = a;\n\n\t\tdo {\n\t\t\tif (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn false;\n\t} // check if a polygon diagonal is locally inside the polygon\n\n\n\tfunction locallyInside(a, b) {\n\t\treturn area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n\t} // check if the middle point of a polygon diagonal is inside the polygon\n\n\n\tfunction middleInside(a, b) {\n\t\tlet p = a,\n\t\t\t\tinside = false;\n\t\tconst px = (a.x + b.x) / 2,\n\t\t\t\t\tpy = (a.y + b.y) / 2;\n\n\t\tdo {\n\t\t\tif (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn inside;\n\t} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\n\tfunction splitPolygon(a, b) {\n\t\tconst a2 = new Node(a.i, a.x, a.y),\n\t\t\t\t\tb2 = new Node(b.i, b.x, b.y),\n\t\t\t\t\tan = a.next,\n\t\t\t\t\tbp = b.prev;\n\t\ta.next = b;\n\t\tb.prev = a;\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\t\treturn b2;\n\t} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\n\tfunction insertNode(i, x, y, last) {\n\t\tconst p = new Node(i, x, y);\n\n\t\tif (!last) {\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\t\t} else {\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\t\t}\n\n\t\treturn p;\n\t}\n\n\tfunction removeNode(p) {\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\t\tif (p.prevZ) p.prevZ.nextZ = p.nextZ;\n\t\tif (p.nextZ) p.nextZ.prevZ = p.prevZ;\n\t}\n\n\tfunction Node(i, x, y) {\n\t\t// vertex index in coordinates array\n\t\tthis.i = i; // vertex coordinates\n\n\t\tthis.x = x;\n\t\tthis.y = y; // previous and next vertex nodes in a polygon ring\n\n\t\tthis.prev = null;\n\t\tthis.next = null; // z-order curve value\n\n\t\tthis.z = null; // previous and next nodes in z-order\n\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null; // indicates whether this is a steiner point\n\n\t\tthis.steiner = false;\n\t}\n\n\tfunction signedArea(data, start, end, dim) {\n\t\tlet sum = 0;\n\n\t\tfor (let i = start, j = end - dim; i < end; i += dim) {\n\t\t\tsum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n\t\t\tj = i;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\tclass ShapeUtils {\n\t\t// calculate area of the contour polygon\n\t\tstatic area(contour) {\n\t\t\tconst n = contour.length;\n\t\t\tlet a = 0.0;\n\n\t\t\tfor (let p = n - 1, q = 0; q < n; p = q++) {\n\t\t\t\ta += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\t\t}\n\n\t\tstatic isClockWise(pts) {\n\t\t\treturn ShapeUtils.area(pts) < 0;\n\t\t}\n\n\t\tstatic triangulateShape(contour, holes) {\n\t\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\n\t\t\tconst holeIndices = []; // array of hole indices\n\n\t\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts(contour);\n\t\t\taddContour(vertices, contour); //\n\n\t\t\tlet holeIndex = contour.length;\n\t\t\tholes.forEach(removeDupEndPts);\n\n\t\t\tfor (let i = 0; i < holes.length; i++) {\n\t\t\t\tholeIndices.push(holeIndex);\n\t\t\t\tholeIndex += holes[i].length;\n\t\t\t\taddContour(vertices, holes[i]);\n\t\t\t} //\n\n\n\t\t\tconst triangles = Earcut.triangulate(vertices, holeIndices); //\n\n\t\t\tfor (let i = 0; i < triangles.length; i += 3) {\n\t\t\t\tfaces.push(triangles.slice(i, i + 3));\n\t\t\t}\n\n\t\t\treturn faces;\n\t\t}\n\n\t}\n\n\tfunction removeDupEndPts(points) {\n\t\tconst l = points.length;\n\n\t\tif (l > 2 && points[l - 1].equals(points[0])) {\n\t\t\tpoints.pop();\n\t\t}\n\t}\n\n\tfunction addContour(vertices, contour) {\n\t\tfor (let i = 0; i < contour.length; i++) {\n\t\t\tvertices.push(contour[i].x);\n\t\t\tvertices.push(contour[i].y);\n\t\t}\n\t}\n\n\t/**\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *\tcurveSegments: <int>, // number of points on the curves\n\t *\tsteps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *\tdepth: <float>, // Depth to extrude the shape\n\t *\n\t *\tbevelEnabled: <bool>, // turn on bevel\n\t *\tbevelThickness: <float>, // how deep into the original shape bevel goes\n\t *\tbevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *\tbevelOffset: <float>, // how far from shape outline does bevel start\n\t *\tbevelSegments: <int>, // number of bevel layers\n\t *\n\t *\textrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *\tUVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\tclass ExtrudeGeometry extends BufferGeometry {\n\t\tconstructor(shapes, options) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ExtrudeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t\tshapes = Array.isArray(shapes) ? shapes : [shapes];\n\t\t\tconst scope = this;\n\t\t\tconst verticesArray = [];\n\t\t\tconst uvArray = [];\n\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\taddShape(shape);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n\t\t\tthis.computeVertexNormals(); // functions\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tconst placeholder = []; // options\n\n\t\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\t\tlet depth = options.depth !== undefined ? options.depth : 100;\n\t\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\t\t\tconst extrudePath = options.extrudePath;\n\t\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options\n\n\t\t\t\tif (options.amount !== undefined) {\n\t\t\t\t\tconsole.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');\n\t\t\t\t\tdepth = options.amount;\n\t\t\t\t} //\n\n\n\t\t\t\tlet extrudePts,\n\t\t\t\t\t\textrudeByPath = false;\n\t\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\t\tif (extrudePath) {\n\t\t\t\t\textrudePts = extrudePath.getSpacedPoints(steps);\n\t\t\t\t\textrudeByPath = true;\n\t\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\t\t\t\t// SETUP TNB variables\n\t\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\t\tsplineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\t\tbinormal = new Vector3();\n\t\t\t\t\tnormal = new Vector3();\n\t\t\t\t\tposition2 = new Vector3();\n\t\t\t\t} // Safeguards if bevels are not enabled\n\n\n\t\t\t\tif (!bevelEnabled) {\n\t\t\t\t\tbevelSegments = 0;\n\t\t\t\t\tbevelThickness = 0;\n\t\t\t\t\tbevelSize = 0;\n\t\t\t\t\tbevelOffset = 0;\n\t\t\t\t} // Variables initialization\n\n\n\t\t\t\tconst shapePoints = shape.extractPoints(curveSegments);\n\t\t\t\tlet vertices = shapePoints.shape;\n\t\t\t\tconst holes = shapePoints.holes;\n\t\t\t\tconst reverse = !ShapeUtils.isClockWise(vertices);\n\n\t\t\t\tif (reverse) {\n\t\t\t\t\tvertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\n\t\t\t\t\t\tif (ShapeUtils.isClockWise(ahole)) {\n\t\t\t\t\t\t\tholes[h] = ahole.reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst faces = ShapeUtils.triangulateShape(vertices, holes);\n\t\t\t\t/* Vertices */\n\n\t\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\tvertices = vertices.concat(ahole);\n\t\t\t\t}\n\n\t\t\t\tfunction scalePt2(pt, vec, size) {\n\t\t\t\t\tif (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n\t\t\t\t\treturn vec.clone().multiplyScalar(size).add(pt);\n\t\t\t\t}\n\n\t\t\t\tconst vlen = vertices.length,\n\t\t\t\t\t\t\tflen = faces.length; // Find directions for point movement\n\n\t\t\t\tfunction getBevelVec(inPt, inPrev, inNext) {\n\t\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t\t//\t shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t\t//\n\t\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t\t//\tadjacent edges of inPt at a distance of 1 unit on the left side.\n\t\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\t\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\t\t\t\t\tconst v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n\t\t\t\t\tconst collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n\t\t\t\t\tif (Math.abs(collinear0) > Number.EPSILON) {\n\t\t\t\t\t\t// not collinear\n\t\t\t\t\t\t// length of vectors for normalizing\n\t\t\t\t\t\tconst v_prev_len = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\tconst v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n\t\t\t\t\t\tconst ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n\t\t\t\t\t\tconst ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n\t\t\t\t\t\tconst ptNextShift_x = inNext.x - v_next_y / v_next_len;\n\t\t\t\t\t\tconst ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n\t\t\t\t\t\tconst sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n\t\t\t\t\t\tv_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n\t\t\t\t\t\tv_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t\t//\tbut prevent crazy spikes\n\n\t\t\t\t\t\tconst v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n\t\t\t\t\t\tif (v_trans_lensq <= 2) {\n\t\t\t\t\t\t\treturn new Vector2(v_trans_x, v_trans_y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_trans_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// handle special case of collinear edges\n\t\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\t\tif (v_prev_x > Number.EPSILON) {\n\t\t\t\t\t\t\tif (v_next_x > Number.EPSILON) {\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (v_prev_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\tif (v_next_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (direction_eq) {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\t\tv_trans_x = -v_prev_y;\n\t\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n\t\t\t\t}\n\n\t\t\t\tconst contourMovements = [];\n\n\t\t\t\tfor (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\t\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\t\tcontourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);\n\t\t\t\t}\n\n\t\t\t\tconst holesMovements = [];\n\t\t\t\tlet oneHoleMovements,\n\t\t\t\t\t\tverticesMovements = contourMovements.concat();\n\n\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\toneHoleMovements = [];\n\n\t\t\t\t\tfor (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n\t\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\n\t\t\t\t\t\toneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);\n\t\t\t\t\t}\n\n\t\t\t\t\tholesMovements.push(oneHoleMovements);\n\t\t\t\t\tverticesMovements = verticesMovements.concat(oneHoleMovements);\n\t\t\t\t} // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n\t\t\t\tfor (let b = 0; b < bevelSegments; b++) {\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos(t * Math.PI / 2);\n\t\t\t\t\tconst bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\t\t\t\t\tfor (let i = 0, il = contour.length; i < il; i++) {\n\t\t\t\t\t\tconst vert = scalePt2(contour[i], contourMovements[i], bs);\n\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\toneHoleMovements = holesMovements[h];\n\n\t\t\t\t\t\tfor (let i = 0, il = ahole.length; i < il; i++) {\n\t\t\t\t\t\t\tconst vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\t\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst bs = bevelSize + bevelOffset; // Back facing vertices\n\n\t\t\t\tfor (let i = 0; i < vlen; i++) {\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\tv(vert.x, vert.y, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\t\t\t\t\tnormal.copy(splineTube.normals[0]).multiplyScalar(vert.x);\n\t\t\t\t\t\tbinormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);\n\t\t\t\t\t\tposition2.copy(extrudePts[0]).add(normal).add(binormal);\n\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t}\n\t\t\t\t} // Add stepped vertices...\n\t\t\t\t// Including front facing vertices\n\n\n\t\t\t\tfor (let s = 1; s <= steps; s++) {\n\t\t\t\t\tfor (let i = 0; i < vlen; i++) {\n\t\t\t\t\t\tconst vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\tv(vert.x, vert.y, depth / steps * s);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\t\t\t\t\t\tnormal.copy(splineTube.normals[s]).multiplyScalar(vert.x);\n\t\t\t\t\t\t\tbinormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);\n\t\t\t\t\t\t\tposition2.copy(extrudePts[s]).add(normal).add(binormal);\n\t\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // Add bevel segments planes\n\t\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n\t\t\t\tfor (let b = bevelSegments - 1; b >= 0; b--) {\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos(t * Math.PI / 2);\n\t\t\t\t\tconst bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\t\t\t\t\tfor (let i = 0, il = contour.length; i < il; i++) {\n\t\t\t\t\t\tconst vert = scalePt2(contour[i], contourMovements[i], bs);\n\t\t\t\t\t\tv(vert.x, vert.y, depth + z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\toneHoleMovements = holesMovements[h];\n\n\t\t\t\t\t\tfor (let i = 0, il = ahole.length; i < il; i++) {\n\t\t\t\t\t\t\tconst vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\n\t\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\t\tv(vert.x, vert.y, depth + z);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tv(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* Faces */\n\t\t\t\t// Top and bottom faces\n\n\n\t\t\t\tbuildLidFaces(); // Sides faces\n\n\t\t\t\tbuildSideFaces(); /////\tInternal functions\n\n\t\t\t\tfunction buildLidFaces() {\n\t\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\t\tif (bevelEnabled) {\n\t\t\t\t\t\tlet layer = 0; // steps + 1\n\n\t\t\t\t\t\tlet offset = vlen * layer; // Bottom faces\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[2] + offset, face[1] + offset, face[0] + offset);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\t\toffset = vlen * layer; // Top faces\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[0] + offset, face[1] + offset, face[2] + offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Bottom faces\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[2], face[1], face[0]);\n\t\t\t\t\t\t} // Top faces\n\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 0);\n\t\t\t\t} // Create faces for the z-sides of the shape\n\n\n\t\t\t\tfunction buildSideFaces() {\n\t\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\t\tlet layeroffset = 0;\n\t\t\t\t\tsidewalls(contour, layeroffset);\n\t\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\tsidewalls(ahole, layeroffset); //, true\n\n\t\t\t\t\t\tlayeroffset += ahole.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 1);\n\t\t\t\t}\n\n\t\t\t\tfunction sidewalls(contour, layeroffset) {\n\t\t\t\t\tlet i = contour.length;\n\n\t\t\t\t\twhile (--i >= 0) {\n\t\t\t\t\t\tconst j = i;\n\t\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\t\tif (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\t\tfor (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {\n\t\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\t\tconst slen2 = vlen * (s + 1);\n\t\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\t\t\t\t\t\t\tf4(a, b, c, d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction v(x, y, z) {\n\t\t\t\t\tplaceholder.push(x);\n\t\t\t\t\tplaceholder.push(y);\n\t\t\t\t\tplaceholder.push(z);\n\t\t\t\t}\n\n\t\t\t\tfunction f3(a, b, c) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\t\tconst uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t}\n\n\t\t\t\tfunction f4(a, b, c, d) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\t\tconst uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t}\n\n\t\t\t\tfunction addVertex(index) {\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 0]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 1]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 2]);\n\t\t\t\t}\n\n\t\t\t\tfunction addUV(vector2) {\n\t\t\t\t\tuvArray.push(vector2.x);\n\t\t\t\t\tuvArray.push(vector2.y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tconst shapes = this.parameters.shapes;\n\t\t\tconst options = this.parameters.options;\n\t\t\treturn toJSON$1(shapes, options, data);\n\t\t}\n\n\t}\n\n\tconst WorldUVGenerator = {\n\t\tgenerateTopUV: function (geometry, vertices, indexA, indexB, indexC) {\n\t\t\tconst a_x = vertices[indexA * 3];\n\t\t\tconst a_y = vertices[indexA * 3 + 1];\n\t\t\tconst b_x = vertices[indexB * 3];\n\t\t\tconst b_y = vertices[indexB * 3 + 1];\n\t\t\tconst c_x = vertices[indexC * 3];\n\t\t\tconst c_y = vertices[indexC * 3 + 1];\n\t\t\treturn [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n\t\t},\n\t\tgenerateSideWallUV: function (geometry, vertices, indexA, indexB, indexC, indexD) {\n\t\t\tconst a_x = vertices[indexA * 3];\n\t\t\tconst a_y = vertices[indexA * 3 + 1];\n\t\t\tconst a_z = vertices[indexA * 3 + 2];\n\t\t\tconst b_x = vertices[indexB * 3];\n\t\t\tconst b_y = vertices[indexB * 3 + 1];\n\t\t\tconst b_z = vertices[indexB * 3 + 2];\n\t\t\tconst c_x = vertices[indexC * 3];\n\t\t\tconst c_y = vertices[indexC * 3 + 1];\n\t\t\tconst c_z = vertices[indexC * 3 + 2];\n\t\t\tconst d_x = vertices[indexD * 3];\n\t\t\tconst d_y = vertices[indexD * 3 + 1];\n\t\t\tconst d_z = vertices[indexD * 3 + 2];\n\n\t\t\tif (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {\n\t\t\t\treturn [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n\t\t\t} else {\n\t\t\t\treturn [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction toJSON$1(shapes, options, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\tif (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n\t\treturn data;\n\t}\n\n\tclass IcosahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst t = (1 + Math.sqrt(5)) / 2;\n\t\t\tconst vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n\t\t\tconst indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'IcosahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\tclass LatheGeometry extends BufferGeometry {\n\t\tconstructor(points, segments = 12, phiStart = 0, phiLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LatheGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\t\t\tsegments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\t\tphiLength = clamp(phiLength, 0, Math.PI * 2); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst inverseSegments = 1.0 / segments;\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // generate vertices and uvs\n\n\t\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\t\t\t\tconst sin = Math.sin(phi);\n\t\t\t\tconst cos = Math.cos(phi);\n\n\t\t\t\tfor (let j = 0; j <= points.length - 1; j++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = points[j].x * sin;\n\t\t\t\t\tvertex.y = points[j].y;\n\t\t\t\t\tvertex.z = points[j].x * cos;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // uv\n\n\t\t\t\t\tuv.x = i / segments;\n\t\t\t\t\tuv.y = j / (points.length - 1);\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t}\n\t\t\t} // indices\n\n\n\t\t\tfor (let i = 0; i < segments; i++) {\n\t\t\t\tfor (let j = 0; j < points.length - 1; j++) {\n\t\t\t\t\tconst base = j + i * points.length;\n\t\t\t\t\tconst a = base;\n\t\t\t\t\tconst b = base + points.length;\n\t\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\t\tconst d = base + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals\n\n\t\t\tthis.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n\t\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\t\tif (phiLength === Math.PI * 2) {\n\t\t\t\tconst normals = this.attributes.normal.array;\n\t\t\t\tconst n1 = new Vector3();\n\t\t\t\tconst n2 = new Vector3();\n\t\t\t\tconst n = new Vector3(); // this is the buffer offset for the last line of vertices\n\n\t\t\t\tconst base = segments * points.length * 3;\n\n\t\t\t\tfor (let i = 0, j = 0; i < points.length; i++, j += 3) {\n\t\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\t\tn1.x = normals[j + 0];\n\t\t\t\t\tn1.y = normals[j + 1];\n\t\t\t\t\tn1.z = normals[j + 2]; // select the normal of the vertex in the last line\n\n\t\t\t\t\tn2.x = normals[base + j + 0];\n\t\t\t\t\tn2.y = normals[base + j + 1];\n\t\t\t\t\tn2.z = normals[base + j + 2]; // average normals\n\n\t\t\t\t\tn.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n\t\t\t\t\tnormals[j + 0] = normals[base + j + 0] = n.x;\n\t\t\t\t\tnormals[j + 1] = normals[base + j + 1] = n.y;\n\t\t\t\t\tnormals[j + 2] = normals[base + j + 2] = n.z;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass OctahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n\t\t\tconst indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'OctahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\t/**\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\tclass ParametricGeometry extends BufferGeometry {\n\t\tconstructor(func, slices, stacks) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ParametricGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tfunc: func,\n\t\t\t\tslices: slices,\n\t\t\t\tstacks: stacks\n\t\t\t}; // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\t\t\tconst EPS = 0.00001;\n\t\t\tconst normal = new Vector3();\n\t\t\tconst p0 = new Vector3(),\n\t\t\t\t\t\tp1 = new Vector3();\n\t\t\tconst pu = new Vector3(),\n\t\t\t\t\t\tpv = new Vector3();\n\n\t\t\tif (func.length < 3) {\n\t\t\t\tconsole.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');\n\t\t\t} // generate vertices, normals and uvs\n\n\n\t\t\tconst sliceCount = slices + 1;\n\n\t\t\tfor (let i = 0; i <= stacks; i++) {\n\t\t\t\tconst v = i / stacks;\n\n\t\t\t\tfor (let j = 0; j <= slices; j++) {\n\t\t\t\t\tconst u = j / slices; // vertex\n\n\t\t\t\t\tfunc(u, v, p0);\n\t\t\t\t\tvertices.push(p0.x, p0.y, p0.z); // normal\n\t\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\t\tif (u - EPS >= 0) {\n\t\t\t\t\t\tfunc(u - EPS, v, p1);\n\t\t\t\t\t\tpu.subVectors(p0, p1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfunc(u + EPS, v, p1);\n\t\t\t\t\t\tpu.subVectors(p1, p0);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (v - EPS >= 0) {\n\t\t\t\t\t\tfunc(u, v - EPS, p1);\n\t\t\t\t\t\tpv.subVectors(p0, p1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfunc(u, v + EPS, p1);\n\t\t\t\t\t\tpv.subVectors(p1, p0);\n\t\t\t\t\t} // cross product of tangent vectors returns surface normal\n\n\n\t\t\t\t\tnormal.crossVectors(pu, pv).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u, v);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let i = 0; i < stacks; i++) {\n\t\t\t\tfor (let j = 0; j < slices; j++) {\n\t\t\t\t\tconst a = i * sliceCount + j;\n\t\t\t\t\tconst b = i * sliceCount + j + 1;\n\t\t\t\t\tconst c = (i + 1) * sliceCount + j + 1;\n\t\t\t\t\tconst d = (i + 1) * sliceCount + j; // faces one and two\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass RingGeometry extends BufferGeometry {\n\t\tconstructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'RingGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tthetaSegments = Math.max(3, thetaSegments);\n\t\t\tphiSegments = Math.max(1, phiSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // some helper variables\n\n\t\t\tlet radius = innerRadius;\n\t\t\tconst radiusStep = (outerRadius - innerRadius) / phiSegments;\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // generate vertices, normals and uvs\n\n\t\t\tfor (let j = 0; j <= phiSegments; j++) {\n\t\t\t\tfor (let i = 0; i <= thetaSegments; i++) {\n\t\t\t\t\t// values are generate from the inside of the ring to the outside\n\t\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n\t\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, 0, 1); // uv\n\n\t\t\t\t\tuv.x = (vertex.x / outerRadius + 1) / 2;\n\t\t\t\t\tuv.y = (vertex.y / outerRadius + 1) / 2;\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t} // increase the radius for next row of vertices\n\n\n\t\t\t\tradius += radiusStep;\n\t\t\t} // indices\n\n\n\t\t\tfor (let j = 0; j < phiSegments; j++) {\n\t\t\t\tconst thetaSegmentLevel = j * (thetaSegments + 1);\n\n\t\t\t\tfor (let i = 0; i < thetaSegments; i++) {\n\t\t\t\t\tconst segment = i + thetaSegmentLevel;\n\t\t\t\t\tconst a = segment;\n\t\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\t\tconst d = segment + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass ShapeGeometry extends BufferGeometry {\n\t\tconstructor(shapes, curveSegments = 12) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShapeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t}; // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet groupStart = 0;\n\t\t\tlet groupCount = 0; // allow single and array values for \"shapes\" parameter\n\n\t\t\tif (Array.isArray(shapes) === false) {\n\t\t\t\taddShape(shapes);\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\t\taddShape(shapes[i]);\n\t\t\t\t\tthis.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n\t\t\t\t\tgroupStart += groupCount;\n\t\t\t\t\tgroupCount = 0;\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\t\tconst points = shape.extractPoints(curveSegments);\n\t\t\t\tlet shapeVertices = points.shape;\n\t\t\t\tconst shapeHoles = points.holes; // check direction of vertices\n\n\t\t\t\tif (ShapeUtils.isClockWise(shapeVertices) === false) {\n\t\t\t\t\tshapeVertices = shapeVertices.reverse();\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0, l = shapeHoles.length; i < l; i++) {\n\t\t\t\t\tconst shapeHole = shapeHoles[i];\n\n\t\t\t\t\tif (ShapeUtils.isClockWise(shapeHole) === true) {\n\t\t\t\t\t\tshapeHoles[i] = shapeHole.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array\n\n\t\t\t\tfor (let i = 0, l = shapeHoles.length; i < l; i++) {\n\t\t\t\t\tconst shapeHole = shapeHoles[i];\n\t\t\t\t\tshapeVertices = shapeVertices.concat(shapeHole);\n\t\t\t\t} // vertices, normals, uvs\n\n\n\t\t\t\tfor (let i = 0, l = shapeVertices.length; i < l; i++) {\n\t\t\t\t\tconst vertex = shapeVertices[i];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(vertex.x, vertex.y); // world uvs\n\t\t\t\t} // incides\n\n\n\t\t\t\tfor (let i = 0, l = faces.length; i < l; i++) {\n\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\tconst a = face[0] + indexOffset;\n\t\t\t\t\tconst b = face[1] + indexOffset;\n\t\t\t\t\tconst c = face[2] + indexOffset;\n\t\t\t\t\tindices.push(a, b, c);\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tconst shapes = this.parameters.shapes;\n\t\t\treturn toJSON(shapes, data);\n\t\t}\n\n\t}\n\n\tfunction toJSON(shapes, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tclass SphereGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, widthSegments = 8, heightSegments = 6, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SphereGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\twidthSegments = Math.max(3, Math.floor(widthSegments));\n\t\t\theightSegments = Math.max(2, Math.floor(heightSegments));\n\t\t\tconst thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n\t\t\tlet index = 0;\n\t\t\tconst grid = [];\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3(); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // generate vertices, normals and uvs\n\n\t\t\tfor (let iy = 0; iy <= heightSegments; iy++) {\n\t\t\t\tconst verticesRow = [];\n\t\t\t\tconst v = iy / heightSegments; // special case for the poles\n\n\t\t\t\tlet uOffset = 0;\n\n\t\t\t\tif (iy == 0 && thetaStart == 0) {\n\t\t\t\t\tuOffset = 0.5 / widthSegments;\n\t\t\t\t} else if (iy == heightSegments && thetaEnd == Math.PI) {\n\t\t\t\t\tuOffset = -0.5 / widthSegments;\n\t\t\t\t}\n\n\t\t\t\tfor (let ix = 0; ix <= widthSegments; ix++) {\n\t\t\t\t\tconst u = ix / widthSegments; // vertex\n\n\t\t\t\t\tvertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormal.copy(vertex).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u + uOffset, 1 - v);\n\t\t\t\t\tverticesRow.push(index++);\n\t\t\t\t}\n\n\t\t\t\tgrid.push(verticesRow);\n\t\t\t} // indices\n\n\n\t\t\tfor (let iy = 0; iy < heightSegments; iy++) {\n\t\t\t\tfor (let ix = 0; ix < widthSegments; ix++) {\n\t\t\t\t\tconst a = grid[iy][ix + 1];\n\t\t\t\t\tconst b = grid[iy][ix];\n\t\t\t\t\tconst c = grid[iy + 1][ix];\n\t\t\t\t\tconst d = grid[iy + 1][ix + 1];\n\t\t\t\t\tif (iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n\t\t\t\t\tif (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass TetrahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n\t\t\tconst indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'TetrahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\t/**\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *\tfont: <THREE.Font>, // font\n\t *\n\t *\tsize: <float>, // size of the text\n\t *\theight: <float>, // thickness to extrude text\n\t *\tcurveSegments: <int>, // number of points on the curves\n\t *\n\t *\tbevelEnabled: <bool>, // turn on bevel\n\t *\tbevelThickness: <float>, // how deep into text bevel goes\n\t *\tbevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *\tbevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\tclass TextGeometry extends ExtrudeGeometry {\n\t\tconstructor(text, parameters = {}) {\n\t\t\tconst font = parameters.font;\n\n\t\t\tif (!(font && font.isFont)) {\n\t\t\t\tconsole.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n\t\t\t\treturn new BufferGeometry();\n\t\t\t}\n\n\t\t\tconst shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n\t\t\tif (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n\t\t\tif (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n\t\t\tif (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n\t\t\tsuper(shapes, parameters);\n\t\t\tthis.type = 'TextGeometry';\n\t\t}\n\n\t}\n\n\tclass TorusGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TorusGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\ttubularSegments = Math.floor(tubularSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst center = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\tfor (let i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2; // vertex\n\n\t\t\t\t\tvertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n\t\t\t\t\tvertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n\t\t\t\t\tvertex.z = tube * Math.sin(v);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tcenter.x = radius * Math.cos(u);\n\t\t\t\t\tcenter.y = radius * Math.sin(u);\n\t\t\t\t\tnormal.subVectors(vertex, center).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let j = 1; j <= radialSegments; j++) {\n\t\t\t\tfor (let i = 1; i <= tubularSegments; i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tconst a = (tubularSegments + 1) * j + i - 1;\n\t\t\t\t\tconst b = (tubularSegments + 1) * (j - 1) + i - 1;\n\t\t\t\t\tconst c = (tubularSegments + 1) * (j - 1) + i;\n\t\t\t\t\tconst d = (tubularSegments + 1) * j + i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass TorusKnotGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TorusKnotGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\t\ttubularSegments = Math.floor(tubularSegments);\n\t\t\tradialSegments = Math.floor(radialSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\t\t\tconst P1 = new Vector3();\n\t\t\tconst P2 = new Vector3();\n\t\t\tconst B = new Vector3();\n\t\t\tconst T = new Vector3();\n\t\t\tconst N = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (let i = 0; i <= tubularSegments; ++i) {\n\t\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\t\t\tconst u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\t\tcalculatePositionOnCurve(u, p, q, radius, P1);\n\t\t\t\tcalculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n\t\t\t\tT.subVectors(P2, P1);\n\t\t\t\tN.addVectors(P2, P1);\n\t\t\t\tB.crossVectors(T, N);\n\t\t\t\tN.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n\t\t\t\tB.normalize();\n\t\t\t\tN.normalize();\n\n\t\t\t\tfor (let j = 0; j <= radialSegments; ++j) {\n\t\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tconst cx = -tube * Math.cos(v);\n\t\t\t\t\tconst cy = tube * Math.sin(v); // now calculate the final vertex position.\n\t\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\t\tvertex.x = P1.x + (cx * N.x + cy * B.x);\n\t\t\t\t\tvertex.y = P1.y + (cx * N.y + cy * B.y);\n\t\t\t\t\tvertex.z = P1.z + (cx * N.z + cy * B.z);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\t\tnormal.subVectors(vertex, P1).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let j = 1; j <= tubularSegments; j++) {\n\t\t\t\tfor (let i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tconst a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\tconst b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\tconst c = (radialSegments + 1) * j + i;\n\t\t\t\t\tconst d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve\n\n\t\t\tfunction calculatePositionOnCurve(u, p, q, radius, position) {\n\t\t\t\tconst cu = Math.cos(u);\n\t\t\t\tconst su = Math.sin(u);\n\t\t\t\tconst quOverP = q / p * u;\n\t\t\t\tconst cs = Math.cos(quOverP);\n\t\t\t\tposition.x = radius * (2 + cs) * 0.5 * cu;\n\t\t\t\tposition.y = radius * (2 + cs) * su * 0.5;\n\t\t\t\tposition.z = radius * Math.sin(quOverP) * 0.5;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass TubeGeometry extends BufferGeometry {\n\t\tconstructor(path, tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TubeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\t\tconst frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\n\n\t\t\tthis.tangents = frames.tangents;\n\t\t\tthis.normals = frames.normals;\n\t\t\tthis.binormals = frames.binormals; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\t\t\tconst uv = new Vector2();\n\t\t\tlet P = new Vector3(); // buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\t\t\tconst indices = []; // create buffer data\n\n\t\t\tgenerateBufferData(); // build geometry\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\n\n\t\t\tfunction generateBufferData() {\n\t\t\t\tfor (let i = 0; i < tubularSegments; i++) {\n\t\t\t\t\tgenerateSegment(i);\n\t\t\t\t} // if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t\t// at the regular position on the given path\n\t\t\t\t//\n\t\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\n\t\t\t\tgenerateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\n\t\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\t\tgenerateUVs(); // finally create faces\n\n\t\t\t\tgenerateIndices();\n\t\t\t}\n\n\t\t\tfunction generateSegment(i) {\n\t\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\t\t\t\tP = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\n\n\t\t\t\tconst N = frames.normals[i];\n\t\t\t\tconst B = frames.binormals[i]; // generate normals and vertices for the current segment\n\n\t\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tconst sin = Math.sin(v);\n\t\t\t\t\tconst cos = -Math.cos(v); // normal\n\n\t\t\t\t\tnormal.x = cos * N.x + sin * B.x;\n\t\t\t\t\tnormal.y = cos * N.y + sin * B.y;\n\t\t\t\t\tnormal.z = cos * N.z + sin * B.z;\n\t\t\t\t\tnormal.normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // vertex\n\n\t\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\t\tvertex.z = P.z + radius * normal.z;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateIndices() {\n\t\t\t\tfor (let j = 1; j <= tubularSegments; j++) {\n\t\t\t\t\tfor (let i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t\tconst a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\t\tconst b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\t\tconst c = (radialSegments + 1) * j + i;\n\t\t\t\t\t\tconst d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tfor (let i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.path = this.parameters.path.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tclass WireframeGeometry extends BufferGeometry {\n\t\tconstructor(geometry) {\n\t\t\tsuper();\n\t\t\tthis.type = 'WireframeGeometry';\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn;\n\t\t\t} // buffer\n\n\n\t\t\tconst vertices = []; // helper variables\n\n\t\t\tconst edge = [0, 0],\n\t\t\t\t\t\tedges = {};\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\t// indexed BufferGeometry\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif (groups.length === 0) {\n\t\t\t\t\tgroups = [{\n\t\t\t\t\t\tstart: 0,\n\t\t\t\t\t\tcount: indices.count,\n\t\t\t\t\t\tmaterialIndex: 0\n\t\t\t\t\t}];\n\t\t\t\t} // create a data structure that contains all eges without duplicates\n\n\n\t\t\t\tfor (let o = 0, ol = groups.length; o < ol; ++o) {\n\t\t\t\t\tconst group = groups[o];\n\t\t\t\t\tconst start = group.start;\n\t\t\t\t\tconst count = group.count;\n\n\t\t\t\t\tfor (let i = start, l = start + count; i < l; i += 3) {\n\t\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\t\tconst edge1 = indices.getX(i + j);\n\t\t\t\t\t\t\tconst edge2 = indices.getX(i + (j + 1) % 3);\n\t\t\t\t\t\t\tedge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\n\n\t\t\t\t\t\t\tedge[1] = Math.max(edge1, edge2);\n\t\t\t\t\t\t\tconst key = edge[0] + ',' + edge[1];\n\n\t\t\t\t\t\t\tif (edges[key] === undefined) {\n\t\t\t\t\t\t\t\tedges[key] = {\n\t\t\t\t\t\t\t\t\tindex1: edge[0],\n\t\t\t\t\t\t\t\t\tindex2: edge[1]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // generate vertices\n\n\n\t\t\t\tfor (const key in edges) {\n\t\t\t\t\tconst e = edges[key];\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index1);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index2);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// non-indexed BufferGeometry\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor (let i = 0, l = position.count / 3; i < l; i++) {\n\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute(position, index1);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t\tconst index2 = 3 * i + (j + 1) % 3;\n\t\t\t\t\t\tvertex.fromBufferAttribute(position, index2);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t}\n\n\t}\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeGeometry,\n\t\tWireframeGeometry: WireframeGeometry\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <THREE.Color>\n\t * }\n\t */\n\n\tclass ShadowMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShadowMaterial';\n\t\t\tthis.color = new Color(0x000000);\n\t\t\tthis.transparent = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tclass RawShaderMaterial extends ShaderMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper(parameters);\n\t\t\tthis.type = 'RawShaderMaterial';\n\t\t}\n\n\t}\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\troughness: <float>,\n\t *\tmetalness: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\troughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmetalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tenvMapIntensity: <float>\n\t *\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshStandardMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshStandardMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.roughness = 1.0;\n\t\t\tthis.metalness = 0.0;\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.roughnessMap = null;\n\t\t\tthis.metalnessMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.envMapIntensity = 1.0;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.vertexTangents = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': ''\n\t\t\t};\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.roughness = source.roughness;\n\t\t\tthis.metalness = source.metalness;\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.roughnessMap = source.roughnessMap;\n\t\t\tthis.metalnessMap = source.metalnessMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.envMapIntensity = source.envMapIntensity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexTangents = source.vertexTangents;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tclearcoat: <float>,\n\t *\tclearcoatMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatRoughness: <float>,\n\t *\tclearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatNormalScale: <Vector2>,\n\t *\tclearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *\treflectivity: <float>,\n\t *\tior: <float>,\n\t *\n\t *\tsheen: <Color>,\n\t *\n\t *\ttransmission: <float>,\n\t *\ttransmissionMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tthickness: <float>,\n\t *\tthicknessMap: new THREE.Texture( <Image> ),\n\t *\tattenuationDistance: <float>,\n\t *\tattenuationColor: <Color>\n\t * }\n\t */\n\n\tclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': '',\n\t\t\t\t'PHYSICAL': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshPhysicalMaterial';\n\t\t\tthis.clearcoat = 0.0;\n\t\t\tthis.clearcoatMap = null;\n\t\t\tthis.clearcoatRoughness = 0.0;\n\t\t\tthis.clearcoatRoughnessMap = null;\n\t\t\tthis.clearcoatNormalScale = new Vector2(1, 1);\n\t\t\tthis.clearcoatNormalMap = null;\n\t\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\t\tObject.defineProperty(this, 'ior', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);\n\t\t\t\t},\n\t\t\t\tset: function (ior) {\n\t\t\t\t\tthis.reflectivity = clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\t\tthis.transmission = 0.0;\n\t\t\tthis.transmissionMap = null;\n\t\t\tthis.thickness = 0.01;\n\t\t\tthis.thicknessMap = null;\n\t\t\tthis.attenuationDistance = 0.0;\n\t\t\tthis.attenuationColor = new Color(1, 1, 1);\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': '',\n\t\t\t\t'PHYSICAL': ''\n\t\t\t};\n\t\t\tthis.clearcoat = source.clearcoat;\n\t\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\t\tthis.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n\t\t\tthis.reflectivity = source.reflectivity;\n\n\t\t\tif (source.sheen) {\n\t\t\t\tthis.sheen = (this.sheen || new Color()).copy(source.sheen);\n\t\t\t} else {\n\t\t\t\tthis.sheen = null;\n\t\t\t}\n\n\t\t\tthis.transmission = source.transmission;\n\t\t\tthis.transmissionMap = source.transmissionMap;\n\t\t\tthis.thickness = source.thickness;\n\t\t\tthis.thicknessMap = source.thicknessMap;\n\t\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\t\tthis.attenuationColor.copy(source.attenuationColor);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tspecular: <hex>,\n\t *\tshininess: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.MultiplyOperation,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshPhongMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshPhongMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.specular = new Color(0x111111);\n\t\t\tthis.shininess = 30;\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.specular.copy(source.specular);\n\t\t\tthis.shininess = source.shininess;\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\tgradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tclass MeshToonMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'TOON': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshToonMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.gradientMap = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.gradientMap = source.gradientMap;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\topacity: <float>,\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshNormalMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshNormalMaterial';\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tclass MeshLambertMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshLambertMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmatcap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshMatcapMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshMatcapMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.matcap = null;\n\t\t\tthis.map = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.matcap = source.matcap;\n\t\t\tthis.map = source.map;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\n\t *\tscale: <float>,\n\t *\tdashSize: <float>,\n\t *\tgapSize: <float>\n\t * }\n\t */\n\n\tclass LineDashedMaterial extends LineBasicMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineDashedMaterial';\n\t\t\tthis.scale = 1;\n\t\t\tthis.dashSize = 3;\n\t\t\tthis.gapSize = 1;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.scale = source.scale;\n\t\t\tthis.dashSize = source.dashSize;\n\t\t\tthis.gapSize = source.gapSize;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\tconst AnimationUtils = {\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function (array, from, to) {\n\t\t\tif (AnimationUtils.isTypedArray(array)) {\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\n\t\t\t}\n\n\t\t\treturn array.slice(from, to);\n\t\t},\n\t\t// converts an array to a specific type\n\t\tconvertArray: function (array, type, forceClone) {\n\t\t\tif (!array || // let 'undefined' and 'null' pass\n\t\t\t!forceClone && array.constructor === type) return array;\n\n\t\t\tif (typeof type.BYTES_PER_ELEMENT === 'number') {\n\t\t\t\treturn new type(array); // create typed array\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call(array); // create Array\n\t\t},\n\t\tisTypedArray: function (object) {\n\t\t\treturn ArrayBuffer.isView(object) && !(object instanceof DataView);\n\t\t},\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function (times) {\n\t\t\tfunction compareTime(i, j) {\n\t\t\t\treturn times[i] - times[j];\n\t\t\t}\n\n\t\t\tconst n = times.length;\n\t\t\tconst result = new Array(n);\n\n\t\t\tfor (let i = 0; i !== n; ++i) result[i] = i;\n\n\t\t\tresult.sort(compareTime);\n\t\t\treturn result;\n\t\t},\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function (values, stride, order) {\n\t\t\tconst nValues = values.length;\n\t\t\tconst result = new values.constructor(nValues);\n\n\t\t\tfor (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n\t\t\t\tconst srcOffset = order[i] * stride;\n\n\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\tresult[dstOffset++] = values[srcOffset + j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function (jsonKeys, times, values, valuePropertyName) {\n\t\t\tlet i = 1,\n\t\t\t\t\tkey = jsonKeys[0];\n\n\t\t\twhile (key !== undefined && key[valuePropertyName] === undefined) {\n\t\t\t\tkey = jsonKeys[i++];\n\t\t\t}\n\n\t\t\tif (key === undefined) return; // no data\n\n\t\t\tlet value = key[valuePropertyName];\n\t\t\tif (value === undefined) return; // no data\n\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push.apply(values, value); // push all elements\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else if (value.toArray !== undefined) {\n\t\t\t\t// ...assume THREE.Math-ish\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalue.toArray(values, values.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t}\n\t\t},\n\t\tsubclip: function (sourceClip, name, startFrame, endFrame, fps = 30) {\n\t\t\tconst clip = sourceClip.clone();\n\t\t\tclip.name = name;\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tconst track = clip.tracks[i];\n\t\t\t\tconst valueSize = track.getValueSize();\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (let j = 0; j < track.times.length; ++j) {\n\t\t\t\t\tconst frame = track.times[j] * fps;\n\t\t\t\t\tif (frame < startFrame || frame >= endFrame) continue;\n\t\t\t\t\ttimes.push(track.times[j]);\n\n\t\t\t\t\tfor (let k = 0; k < valueSize; ++k) {\n\t\t\t\t\t\tvalues.push(track.values[j * valueSize + k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (times.length === 0) continue;\n\t\t\t\ttrack.times = AnimationUtils.convertArray(times, track.times.constructor);\n\t\t\t\ttrack.values = AnimationUtils.convertArray(values, track.values.constructor);\n\t\t\t\ttracks.push(track);\n\t\t\t}\n\n\t\t\tclip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tlet minStartTime = Infinity;\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tif (minStartTime > clip.tracks[i].times[0]) {\n\t\t\t\t\tminStartTime = clip.tracks[i].times[0];\n\t\t\t\t}\n\t\t\t} // shift all tracks such that clip begins at t=0\n\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tclip.tracks[i].shift(-1 * minStartTime);\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\t\t\treturn clip;\n\t\t},\n\t\tmakeClipAdditive: function (targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {\n\t\t\tif (fps <= 0) fps = 30;\n\t\t\tconst numTracks = referenceClip.tracks.length;\n\t\t\tconst referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame\n\n\t\t\tfor (let i = 0; i < numTracks; ++i) {\n\t\t\t\tconst referenceTrack = referenceClip.tracks[i];\n\t\t\t\tconst referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric\n\n\t\t\t\tif (referenceTrackType === 'bool' || referenceTrackType === 'string') continue; // Find the track in the target clip whose name and type matches the reference track\n\n\t\t\t\tconst targetTrack = targetClip.tracks.find(function (track) {\n\t\t\t\t\treturn track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n\t\t\t\t});\n\t\t\t\tif (targetTrack === undefined) continue;\n\t\t\t\tlet referenceOffset = 0;\n\t\t\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\t\tif (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\treferenceOffset = referenceValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tlet targetOffset = 0;\n\t\t\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\t\t\tif (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\ttargetOffset = targetValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tlet referenceValue; // Find the value to subtract out of the track\n\n\t\t\t\tif (referenceTime <= referenceTrack.times[0]) {\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else if (referenceTime >= referenceTrack.times[lastIndex]) {\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else {\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\tinterpolant.evaluate(referenceTime);\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);\n\t\t\t\t} // Conjugate the quaternion\n\n\n\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\tconst referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray(referenceValue);\n\t\t\t\t} // Subtract the reference value from all of the track values\n\n\n\t\t\t\tconst numTimes = targetTrack.times.length;\n\n\t\t\t\tfor (let j = 0; j < numTimes; ++j) {\n\t\t\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types\n\n\t\t\t\t\t\tfor (let k = 0; k < valueEnd; ++k) {\n\t\t\t\t\t\t\ttargetTrack.values[valueStart + k] -= referenceValue[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\t\t\treturn targetClip;\n\t\t}\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t */\n\tclass Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tthis.parameterPositions = parameterPositions;\n\t\t\tthis._cachedIndex = 0;\n\t\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n\t\t\tthis.sampleValues = sampleValues;\n\t\t\tthis.valueSize = sampleSize;\n\t\t\tthis.settings = null;\n\t\t\tthis.DefaultSettings_ = {};\n\t\t}\n\n\t\tevaluate(t) {\n\t\t\tconst pp = this.parameterPositions;\n\t\t\tlet i1 = this._cachedIndex,\n\t\t\t\t\tt1 = pp[i1],\n\t\t\t\t\tt0 = pp[i1 - 1];\n\n\t\t\tvalidate_interval: {\n\t\t\t\tseek: {\n\t\t\t\t\tlet right;\n\n\t\t\t\t\tlinear_scan: {\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if (!(t < t1)) {\n\t\t\t\t\t\t\tfor (let giveUpAt = i1 + 2;;) {\n\t\t\t\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\t\t\t\tif (t < t0) break forward_scan; // after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t, t0);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[++i1];\n\n\t\t\t\t\t\t\t\tif (t < t1) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the right side of the index\n\n\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} //- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n\t\t\t\t\t\tif (!(t >= t0)) {\n\t\t\t\t\t\t\t// looping?\n\t\t\t\t\t\t\tconst t1global = pp[1];\n\n\t\t\t\t\t\t\tif (t < t1global) {\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\n\t\t\t\t\t\t\t\tt0 = t1global;\n\t\t\t\t\t\t\t} // linear reverse scan\n\n\n\t\t\t\t\t\t\tfor (let giveUpAt = i1 - 2;;) {\n\t\t\t\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\t\t\t\t// before start\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[--i1 - 1];\n\n\t\t\t\t\t\t\t\tif (t >= t0) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the left side of the index\n\n\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} // the interval is valid\n\n\n\t\t\t\t\t\tbreak validate_interval;\n\t\t\t\t\t} // linear scan\n\t\t\t\t\t// binary search\n\n\n\t\t\t\t\twhile (i1 < right) {\n\t\t\t\t\t\tconst mid = i1 + right >>> 1;\n\n\t\t\t\t\t\tif (t < pp[mid]) {\n\t\t\t\t\t\t\tright = mid;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti1 = mid + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[i1];\n\t\t\t\t\tt0 = pp[i1 - 1]; // check boundary cases, again\n\n\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t0, t);\n\t\t\t\t\t}\n\t\t\t\t} // seek\n\n\n\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\tthis.intervalChanged_(i1, t0, t1);\n\t\t\t} // validate_interval\n\n\n\t\t\treturn this.interpolate_(i1, t0, t, t1);\n\t\t}\n\n\t\tgetSettings_() {\n\t\t\treturn this.settings || this.DefaultSettings_;\n\t\t}\n\n\t\tcopySampleValue_(index) {\n\t\t\t// copies a sample value to the result buffer\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = index * stride;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} // Template methods for derived classes:\n\n\n\t\tinterpolate_()\n\t\t/* i1, t0, t, t1 */\n\t\t{\n\t\t\tthrow new Error('call to abstract method'); // implementations shall return this.resultBuffer\n\t\t}\n\n\t\tintervalChanged_()\n\t\t/* i1, t0, t1 */\n\t\t{// empty\n\t\t}\n\n\t} // ALIAS DEFINITIONS\n\n\n\tInterpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;\n\tInterpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t */\n\n\tclass CubicInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t\tthis._weightPrev = -0;\n\t\t\tthis._offsetPrev = -0;\n\t\t\tthis._weightNext = -0;\n\t\t\tthis._offsetNext = -0;\n\t\t\tthis.DefaultSettings_ = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\t\t}\n\n\t\tintervalChanged_(i1, t0, t1) {\n\t\t\tconst pp = this.parameterPositions;\n\t\t\tlet iPrev = i1 - 2,\n\t\t\t\t\tiNext = i1 + 1,\n\t\t\t\t\ttPrev = pp[iPrev],\n\t\t\t\t\ttNext = pp[iNext];\n\n\t\t\tif (tPrev === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingStart) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tNext === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingEnd) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[1] - pp[0];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst halfDt = (t1 - t0) * 0.5,\n\t\t\t\t\t\tstride = this.valueSize;\n\t\t\tthis._weightPrev = halfDt / (t0 - tPrev);\n\t\t\tthis._weightNext = halfDt / (tNext - t1);\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\to1 = i1 * stride,\n\t\t\t\t\t\to0 = o1 - stride,\n\t\t\t\t\t\toP = this._offsetPrev,\n\t\t\t\t\t\toN = this._offsetNext,\n\t\t\t\t\t\twP = this._weightPrev,\n\t\t\t\t\t\twN = this._weightNext,\n\t\t\t\t\t\tp = (t - t0) / (t1 - t0),\n\t\t\t\t\t\tpp = p * p,\n\t\t\t\t\t\tppp = pp * p; // evaluate polynomials\n\n\t\t\tconst sP = -wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tconst s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n\t\t\tconst s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n\t\t\tconst sN = wN * ppp - wN * pp; // combine data linearly\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\tclass LinearInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset1 = i1 * stride,\n\t\t\t\t\t\toffset0 = offset1 - stride,\n\t\t\t\t\t\tweight1 = (t - t0) / (t1 - t0),\n\t\t\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t */\n\n\tclass DiscreteInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1\n\t\t/*, t0, t, t1 */\n\t\t) {\n\t\t\treturn this.copySampleValue_(i1 - 1);\n\t\t}\n\n\t}\n\n\tclass KeyframeTrack {\n\t\tconstructor(name, times, values, interpolation) {\n\t\t\tif (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n\t\t\tif (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n\t\t\tthis.name = name;\n\t\t\tthis.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n\t\t\tthis.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n\t\t\tthis.setInterpolation(interpolation || this.DefaultInterpolation);\n\t\t} // Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\n\t\tstatic toJSON(track) {\n\t\t\tconst trackType = track.constructor;\n\t\t\tlet json; // derived classes can define a static toJSON method\n\n\t\t\tif (trackType.toJSON !== this.toJSON) {\n\t\t\t\tjson = trackType.toJSON(track);\n\t\t\t} else {\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray(track.times, Array),\n\t\t\t\t\t'values': AnimationUtils.convertArray(track.values, Array)\n\t\t\t\t};\n\t\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\t\tif (interpolation !== track.DefaultInterpolation) {\n\t\t\t\t\tjson.interpolation = interpolation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\t\t}\n\n\t\tInterpolantFactoryMethodDiscrete(result) {\n\t\t\treturn new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tInterpolantFactoryMethodLinear(result) {\n\t\t\treturn new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tInterpolantFactoryMethodSmooth(result) {\n\t\t\treturn new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tsetInterpolation(interpolation) {\n\t\t\tlet factoryMethod;\n\n\t\t\tswitch (interpolation) {\n\t\t\t\tcase InterpolateDiscrete:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (factoryMethod === undefined) {\n\t\t\t\tconst message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\t\tif (this.createInterpolant === undefined) {\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif (interpolation !== this.DefaultInterpolation) {\n\t\t\t\t\t\tthis.setInterpolation(this.DefaultInterpolation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(message); // fatal, in this case\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconsole.warn('THREE.KeyframeTrack:', message);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetInterpolation() {\n\t\t\tswitch (this.createInterpolant) {\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\t\t\t\treturn InterpolateSmooth;\n\t\t\t}\n\t\t}\n\n\t\tgetValueSize() {\n\t\t\treturn this.values.length / this.times.length;\n\t\t} // move all keyframes either forwards or backwards in time\n\n\n\t\tshift(timeOffset) {\n\t\t\tif (timeOffset !== 0.0) {\n\t\t\t\tconst times = this.times;\n\n\t\t\t\tfor (let i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] += timeOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\n\n\t\tscale(timeScale) {\n\t\t\tif (timeScale !== 1.0) {\n\t\t\t\tconst times = this.times;\n\n\t\t\t\tfor (let i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] *= timeScale;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\n\n\t\ttrim(startTime, endTime) {\n\t\t\tconst times = this.times,\n\t\t\t\t\t\tnKeys = times.length;\n\t\t\tlet from = 0,\n\t\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile (from !== nKeys && times[from] < startTime) {\n\t\t\t\t++from;\n\t\t\t}\n\n\t\t\twhile (to !== -1 && times[to] > endTime) {\n\t\t\t\t--to;\n\t\t\t}\n\n\t\t\t++to; // inclusive -> exclusive bound\n\n\t\t\tif (from !== 0 || to !== nKeys) {\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif (from >= to) {\n\t\t\t\t\tto = Math.max(to, 1);\n\t\t\t\t\tfrom = to - 1;\n\t\t\t\t}\n\n\t\t\t\tconst stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, from, to);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\n\n\t\tvalidate() {\n\t\t\tlet valid = true;\n\t\t\tconst valueSize = this.getValueSize();\n\n\t\t\tif (valueSize - Math.floor(valueSize) !== 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tconst times = this.times,\n\t\t\t\t\t\tvalues = this.values,\n\t\t\t\t\t\tnKeys = times.length;\n\n\t\t\tif (nKeys === 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Track is empty.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tlet prevTime = null;\n\n\t\t\tfor (let i = 0; i !== nKeys; i++) {\n\t\t\t\tconst currTime = times[i];\n\n\t\t\t\tif (typeof currTime === 'number' && isNaN(currTime)) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (prevTime !== null && prevTime > currTime) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\t\t\t}\n\n\t\t\tif (values !== undefined) {\n\t\t\t\tif (AnimationUtils.isTypedArray(values)) {\n\t\t\t\t\tfor (let i = 0, n = values.length; i !== n; ++i) {\n\t\t\t\t\t\tconst value = values[i];\n\n\t\t\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t} // removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\n\n\t\toptimize() {\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tconst times = AnimationUtils.arraySlice(this.times),\n\t\t\t\t\t\tvalues = AnimationUtils.arraySlice(this.values),\n\t\t\t\t\t\tstride = this.getValueSize(),\n\t\t\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\t\t\t\t\tlastIndex = times.length - 1;\n\t\t\tlet writeIndex = 1;\n\n\t\t\tfor (let i = 1; i < lastIndex; ++i) {\n\t\t\t\tlet keep = false;\n\t\t\t\tconst time = times[i];\n\t\t\t\tconst timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif (time !== timeNext && (i !== 1 || time !== times[0])) {\n\t\t\t\t\tif (!smoothInterpolation) {\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tconst value = values[offset + j];\n\n\t\t\t\t\t\t\tif (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t}\n\t\t\t\t} // in-place compaction\n\n\n\t\t\t\tif (keep) {\n\t\t\t\t\tif (i !== writeIndex) {\n\t\t\t\t\t\ttimes[writeIndex] = times[i];\n\t\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tvalues[writeOffset + j] = values[readOffset + j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t++writeIndex;\n\t\t\t\t}\n\t\t\t} // flush last keyframe (compaction looks ahead)\n\n\n\t\t\tif (lastIndex > 0) {\n\t\t\t\ttimes[writeIndex] = times[lastIndex];\n\n\t\t\t\tfor (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {\n\t\t\t\t\tvalues[writeOffset + j] = values[readOffset + j];\n\t\t\t\t}\n\n\t\t\t\t++writeIndex;\n\t\t\t}\n\n\t\t\tif (writeIndex !== times.length) {\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n\t\t\t} else {\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\tconst times = AnimationUtils.arraySlice(this.times, 0);\n\t\t\tconst values = AnimationUtils.arraySlice(this.values, 0);\n\t\t\tconst TypedKeyframeTrack = this.constructor;\n\t\t\tconst track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.\n\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\t\t\treturn track;\n\t\t}\n\n\t}\n\n\tKeyframeTrack.prototype.TimeBufferType = Float32Array;\n\tKeyframeTrack.prototype.ValueBufferType = Float32Array;\n\tKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n\t/**\n\t * A Track of Boolean keyframe values.\n\t */\n\n\tclass BooleanKeyframeTrack extends KeyframeTrack {}\n\n\tBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n\tBooleanKeyframeTrack.prototype.ValueBufferType = Array;\n\tBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined; // Note: Actually this track could have a optimized / compressed\n\n\t/**\n\t * A Track of keyframe values that represent color.\n\t */\n\n\tclass ColorKeyframeTrack extends KeyframeTrack {}\n\n\tColorKeyframeTrack.prototype.ValueTypeName = 'color'; // ValueBufferType is inherited\n\n\t/**\n\t * A Track of numeric keyframe values.\n\t */\n\n\tclass NumberKeyframeTrack extends KeyframeTrack {}\n\n\tNumberKeyframeTrack.prototype.ValueTypeName = 'number'; // ValueBufferType is inherited\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t */\n\n\tclass QuaternionLinearInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\talpha = (t - t0) / (t1 - t0);\n\t\t\tlet offset = i1 * stride;\n\n\t\t\tfor (let end = offset + stride; offset !== end; offset += 4) {\n\t\t\t\tQuaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\t/**\n\t * A Track of quaternion keyframe values.\n\t */\n\n\tclass QuaternionKeyframeTrack extends KeyframeTrack {\n\t\tInterpolantFactoryMethodLinear(result) {\n\t\t\treturn new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited\n\n\tQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\tQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track that interpolates Strings\n\t */\n\n\tclass StringKeyframeTrack extends KeyframeTrack {}\n\n\tStringKeyframeTrack.prototype.ValueTypeName = 'string';\n\tStringKeyframeTrack.prototype.ValueBufferType = Array;\n\tStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track of vectored keyframe values.\n\t */\n\n\tclass VectorKeyframeTrack extends KeyframeTrack {}\n\n\tVectorKeyframeTrack.prototype.ValueTypeName = 'vector'; // ValueBufferType is inherited\n\n\tclass AnimationClip {\n\t\tconstructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {\n\t\t\tthis.name = name;\n\t\t\tthis.tracks = tracks;\n\t\t\tthis.duration = duration;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tthis.uuid = generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n\t\t\tif (this.duration < 0) {\n\t\t\t\tthis.resetDuration();\n\t\t\t}\n\t\t}\n\n\t\tstatic parse(json) {\n\t\t\tconst tracks = [],\n\t\t\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\t\t\tframeTime = 1.0 / (json.fps || 1.0);\n\n\t\t\tfor (let i = 0, n = jsonTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n\t\t\t}\n\n\t\t\tconst clip = new this(json.name, json.duration, tracks, json.blendMode);\n\t\t\tclip.uuid = json.uuid;\n\t\t\treturn clip;\n\t\t}\n\n\t\tstatic toJSON(clip) {\n\t\t\tconst tracks = [],\n\t\t\t\t\t\tclipTracks = clip.tracks;\n\t\t\tconst json = {\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\t\t\t};\n\n\t\t\tfor (let i = 0, n = clipTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n\t\t\t}\n\n\t\t\treturn json;\n\t\t}\n\n\t\tstatic CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n\t\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < numMorphTargets; i++) {\n\t\t\t\tlet times = [];\n\t\t\t\tlet values = [];\n\t\t\t\ttimes.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n\t\t\t\tvalues.push(0, 1, 0);\n\t\t\t\tconst order = AnimationUtils.getKeyframeOrder(times);\n\t\t\t\ttimes = AnimationUtils.sortedArray(times, 1, order);\n\t\t\t\tvalues = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\n\t\t\t\tif (!noLoop && times[0] === 0) {\n\t\t\t\t\ttimes.push(numMorphTargets);\n\t\t\t\t\tvalues.push(values[0]);\n\t\t\t\t}\n\n\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n\t\t\t}\n\n\t\t\treturn new this(name, -1, tracks);\n\t\t}\n\n\t\tstatic findByName(objectOrClipArray, name) {\n\t\t\tlet clipArray = objectOrClipArray;\n\n\t\t\tif (!Array.isArray(objectOrClipArray)) {\n\t\t\t\tconst o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < clipArray.length; i++) {\n\t\t\t\tif (clipArray[i].name === name) {\n\t\t\t\t\treturn clipArray[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tstatic CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n\t\t\tconst animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n\t\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\n\t\t\tfor (let i = 0, il = morphTargets.length; i < il; i++) {\n\t\t\t\tconst morphTarget = morphTargets[i];\n\t\t\t\tconst parts = morphTarget.name.match(pattern);\n\n\t\t\t\tif (parts && parts.length > 1) {\n\t\t\t\t\tconst name = parts[1];\n\t\t\t\t\tlet animationMorphTargets = animationToMorphTargets[name];\n\n\t\t\t\t\tif (!animationMorphTargets) {\n\t\t\t\t\t\tanimationToMorphTargets[name] = animationMorphTargets = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push(morphTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst clips = [];\n\n\t\t\tfor (const name in animationToMorphTargets) {\n\t\t\t\tclips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));\n\t\t\t}\n\n\t\t\treturn clips;\n\t\t} // parse the animation.hierarchy format\n\n\n\t\tstatic parseAnimation(animation, bones) {\n\t\t\tif (!animation) {\n\t\t\t\tconsole.error('THREE.AnimationClip: No animation in JSONLoader data.');\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif (animationKeys.length !== 0) {\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\t\t\t\t\tAnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n\t\t\t\t\tif (times.length !== 0) {\n\t\t\t\t\t\tdestTracks.push(new trackType(trackName, times, values));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst tracks = [];\n\t\t\tconst clipName = animation.name || 'default';\n\t\t\tconst fps = animation.fps || 30;\n\t\t\tconst blendMode = animation.blendMode; // automatic length determination in AnimationClip.\n\n\t\t\tlet duration = animation.length || -1;\n\t\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor (let h = 0; h < hierarchyTracks.length; h++) {\n\t\t\t\tconst animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n\t\t\t\tif (!animationKeys || animationKeys.length === 0) continue; // process morph targets\n\n\t\t\t\tif (animationKeys[0].morphTargets) {\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tconst morphTargetNames = {};\n\t\t\t\t\tlet k;\n\n\t\t\t\t\tfor (k = 0; k < animationKeys.length; k++) {\n\t\t\t\t\t\tif (animationKeys[k].morphTargets) {\n\t\t\t\t\t\t\tfor (let m = 0; m < animationKeys[k].morphTargets.length; m++) {\n\t\t\t\t\t\t\t\tmorphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} // create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\n\n\t\t\t\t\tfor (const morphTargetName in morphTargetNames) {\n\t\t\t\t\t\tconst times = [];\n\t\t\t\t\t\tconst values = [];\n\n\t\t\t\t\t\tfor (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {\n\t\t\t\t\t\t\tconst animationKey = animationKeys[k];\n\t\t\t\t\t\t\ttimes.push(animationKey.time);\n\t\t\t\t\t\t\tvalues.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * (fps || 1.0);\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\t\t\t\t\tconst boneName = '.bones[' + bones[h].name + ']';\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n\t\t\t\t\taddNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tracks.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst clip = new this(clipName, duration, tracks, blendMode);\n\t\t\treturn clip;\n\t\t}\n\n\t\tresetDuration() {\n\t\t\tconst tracks = this.tracks;\n\t\t\tlet duration = 0;\n\n\t\t\tfor (let i = 0, n = tracks.length; i !== n; ++i) {\n\t\t\t\tconst track = this.tracks[i];\n\t\t\t\tduration = Math.max(duration, track.times[track.times.length - 1]);\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\t\t\treturn this;\n\t\t}\n\n\t\ttrim() {\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].trim(0, this.duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidate() {\n\t\t\tlet valid = true;\n\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tvalid = valid && this.tracks[i].validate();\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t}\n\n\t\toptimize() {\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].optimize();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\ttracks.push(this.tracks[i].clone());\n\t\t\t}\n\n\t\t\treturn new this.constructor(this.name, this.duration, tracks, this.blendMode);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn this.constructor.toJSON(this);\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName(typeName) {\n\t\tswitch (typeName.toLowerCase()) {\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\t\t\t\treturn StringKeyframeTrack;\n\t\t}\n\n\t\tthrow new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n\t}\n\n\tfunction parseKeyframeTrack(json) {\n\t\tif (json.type === undefined) {\n\t\t\tthrow new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n\t\t}\n\n\t\tconst trackType = getTrackTypeForValueTypeName(json.type);\n\n\t\tif (json.times === undefined) {\n\t\t\tconst times = [],\n\t\t\t\t\t\tvalues = [];\n\t\t\tAnimationUtils.flattenJSON(json.keys, times, values, 'value');\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\t\t} // derived classes can define a static parse method\n\n\n\t\tif (trackType.parse !== undefined) {\n\t\t\treturn trackType.parse(json);\n\t\t} else {\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType(json.name, json.times, json.values, json.interpolation);\n\t\t}\n\t}\n\n\tconst Cache = {\n\t\tenabled: false,\n\t\tfiles: {},\n\t\tadd: function (key, file) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[key] = file;\n\t\t},\n\t\tget: function (key) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[key];\n\t\t},\n\t\tremove: function (key) {\n\t\t\tdelete this.files[key];\n\t\t},\n\t\tclear: function () {\n\t\t\tthis.files = {};\n\t\t}\n\t};\n\n\tclass LoadingManager {\n\t\tconstructor(onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tlet isLoading = false;\n\t\t\tlet itemsLoaded = 0;\n\t\t\tlet itemsTotal = 0;\n\t\t\tlet urlModifier = undefined;\n\t\t\tconst handlers = []; // Refer to #5689 for the reason why we don't set .onStart\n\t\t\t// in the constructor\n\n\t\t\tthis.onStart = undefined;\n\t\t\tthis.onLoad = onLoad;\n\t\t\tthis.onProgress = onProgress;\n\t\t\tthis.onError = onError;\n\n\t\t\tthis.itemStart = function (url) {\n\t\t\t\titemsTotal++;\n\n\t\t\t\tif (isLoading === false) {\n\t\t\t\t\tif (scope.onStart !== undefined) {\n\t\t\t\t\t\tscope.onStart(url, itemsLoaded, itemsTotal);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tisLoading = true;\n\t\t\t};\n\n\t\t\tthis.itemEnd = function (url) {\n\t\t\t\titemsLoaded++;\n\n\t\t\t\tif (scope.onProgress !== undefined) {\n\t\t\t\t\tscope.onProgress(url, itemsLoaded, itemsTotal);\n\t\t\t\t}\n\n\t\t\t\tif (itemsLoaded === itemsTotal) {\n\t\t\t\t\tisLoading = false;\n\n\t\t\t\t\tif (scope.onLoad !== undefined) {\n\t\t\t\t\t\tscope.onLoad();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.itemError = function (url) {\n\t\t\t\tif (scope.onError !== undefined) {\n\t\t\t\t\tscope.onError(url);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.resolveURL = function (url) {\n\t\t\t\tif (urlModifier) {\n\t\t\t\t\treturn urlModifier(url);\n\t\t\t\t}\n\n\t\t\t\treturn url;\n\t\t\t};\n\n\t\t\tthis.setURLModifier = function (transform) {\n\t\t\t\turlModifier = transform;\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.addHandler = function (regex, loader) {\n\t\t\t\thandlers.push(regex, loader);\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.removeHandler = function (regex) {\n\t\t\t\tconst index = handlers.indexOf(regex);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\thandlers.splice(index, 2);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.getHandler = function (file) {\n\t\t\t\tfor (let i = 0, l = handlers.length; i < l; i += 2) {\n\t\t\t\t\tconst regex = handlers[i];\n\t\t\t\t\tconst loader = handlers[i + 1];\n\t\t\t\t\tif (regex.global) regex.lastIndex = 0; // see #17920\n\n\t\t\t\t\tif (regex.test(file)) {\n\t\t\t\t\t\treturn loader;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t};\n\t\t}\n\n\t}\n\n\tconst DefaultLoadingManager = new LoadingManager();\n\n\tclass Loader {\n\t\tconstructor(manager) {\n\t\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\t\t\tthis.crossOrigin = 'anonymous';\n\t\t\tthis.withCredentials = false;\n\t\t\tthis.path = '';\n\t\t\tthis.resourcePath = '';\n\t\t\tthis.requestHeader = {};\n\t\t}\n\n\t\tload()\n\t\t/* url, onLoad, onProgress, onError */\n\t\t{}\n\n\t\tloadAsync(url, onProgress) {\n\t\t\tconst scope = this;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tscope.load(url, resolve, onProgress, reject);\n\t\t\t});\n\t\t}\n\n\t\tparse()\n\t\t/* data */\n\t\t{}\n\n\t\tsetCrossOrigin(crossOrigin) {\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetWithCredentials(value) {\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetPath(path) {\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetResourcePath(resourcePath) {\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRequestHeader(requestHeader) {\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tconst loading = {};\n\n\tclass FileLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t} // Check if request is duplicate\n\n\n\t\t\tif (loading[url] !== undefined) {\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} // Check for data: URI\n\n\n\t\t\tconst dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tconst dataUriRegexResult = url.match(dataUriRegex);\n\t\t\tlet request; // Safari can not handle Data URIs through XMLHttpRequest so process manually\n\n\t\t\tif (dataUriRegexResult) {\n\t\t\t\tconst mimeType = dataUriRegexResult[1];\n\t\t\t\tconst isBase64 = !!dataUriRegexResult[2];\n\t\t\t\tlet data = dataUriRegexResult[3];\n\t\t\t\tdata = decodeURIComponent(data);\n\t\t\t\tif (isBase64) data = atob(data);\n\n\t\t\t\ttry {\n\t\t\t\t\tlet response;\n\t\t\t\t\tconst responseType = (this.responseType || '').toLowerCase();\n\n\t\t\t\t\tswitch (responseType) {\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\t\t\t\t\t\t\tconst view = new Uint8Array(data.length);\n\n\t\t\t\t\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\t\t\t\t\tview[i] = data.charCodeAt(i);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (responseType === 'blob') {\n\t\t\t\t\t\t\t\tresponse = new Blob([view.buffer], {\n\t\t\t\t\t\t\t\t\ttype: mimeType\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString(data, mimeType);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = JSON.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 'text' or other\n\t\t\t\t\t\t\tresponse = data;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onLoad) onLoad(response);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onError) onError(error);\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Initialise array for duplicate requests\n\t\t\t\tloading[url] = [];\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\trequest = new XMLHttpRequest();\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.addEventListener('load', function (event) {\n\t\t\t\t\tconst response = this.response;\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tif (this.status === 200 || this.status === 0) {\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\t\t\t\t\tif (this.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.'); // Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\n\t\t\t\t\t\tCache.add(url, response);\n\n\t\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\t\tif (callback.onLoad) callback.onLoad(response);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('progress', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onProgress) callback.onProgress(event);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('error', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('abort', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\tif (this.responseType !== undefined) request.responseType = this.responseType;\n\t\t\t\tif (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;\n\t\t\t\tif (request.overrideMimeType) request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');\n\n\t\t\t\tfor (const header in this.requestHeader) {\n\t\t\t\t\trequest.setRequestHeader(header, this.requestHeader[header]);\n\t\t\t\t}\n\n\t\t\t\trequest.send(null);\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\treturn request;\n\t\t}\n\n\t\tsetResponseType(value) {\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMimeType(value) {\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AnimationLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst animations = [];\n\n\t\t\tfor (let i = 0; i < json.length; i++) {\n\t\t\t\tconst clip = AnimationClip.parse(json[i]);\n\t\t\t\tanimations.push(clip);\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\n\t}\n\n\t/**\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tclass CompressedTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst images = [];\n\t\t\tconst texture = new CompressedTexture();\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tlet loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(url[i], function (buffer) {\n\t\t\t\t\tconst texDatas = scope.parse(buffer, true);\n\t\t\t\t\timages[i] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\tif (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\tif (Array.isArray(url)) {\n\t\t\t\tfor (let i = 0, il = url.length; i < il; ++i) {\n\t\t\t\t\tloadTexture(i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\t\t\t\tloader.load(url, function (buffer) {\n\t\t\t\t\tconst texDatas = scope.parse(buffer, true);\n\n\t\t\t\t\tif (texDatas.isCubemap) {\n\t\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor (let f = 0; f < faces; f++) {\n\t\t\t\t\t\t\timages[f] = {\n\t\t\t\t\t\t\t\tmipmaps: []\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tfor (let i = 0; i < texDatas.mipmapCount; i++) {\n\t\t\t\t\t\t\t\timages[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);\n\t\t\t\t\t\t\t\timages[f].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[f].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[f].height = texDatas.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (texDatas.mipmapCount === 1) {\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\tclass ImageLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tconst image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\n\n\t\t\tfunction onImageLoad() {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tCache.add(url, this);\n\t\t\t\tif (onLoad) onLoad(this);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\tfunction onImageError(event) {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tif (onError) onError(event);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\timage.addEventListener('load', onImageLoad, false);\n\t\t\timage.addEventListener('error', onImageError, false);\n\n\t\t\tif (url.substr(0, 5) !== 'data:') {\n\t\t\t\tif (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\timage.src = url;\n\t\t\treturn image;\n\t\t}\n\n\t}\n\n\tclass CubeTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(urls, onLoad, onProgress, onError) {\n\t\t\tconst texture = new CubeTexture();\n\t\t\tconst loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tlet loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(urls[i], function (image) {\n\t\t\t\t\ttexture.images[i] = image;\n\t\t\t\t\tloaded++;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, undefined, onError);\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < urls.length; ++i) {\n\t\t\t\tloadTexture(i);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\t/**\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tclass DataTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst texture = new DataTexture();\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\tconst texData = scope.parse(buffer);\n\t\t\t\tif (!texData) return;\n\n\t\t\t\tif (texData.image !== undefined) {\n\t\t\t\t\ttexture.image = texData.image;\n\t\t\t\t} else if (texData.data !== undefined) {\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif (texData.encoding !== undefined) {\n\t\t\t\t\ttexture.encoding = texData.encoding;\n\t\t\t\t}\n\n\t\t\t\tif (texData.flipY !== undefined) {\n\t\t\t\t\ttexture.flipY = texData.flipY;\n\t\t\t\t}\n\n\t\t\t\tif (texData.format !== undefined) {\n\t\t\t\t\ttexture.format = texData.format;\n\t\t\t\t}\n\n\t\t\t\tif (texData.type !== undefined) {\n\t\t\t\t\ttexture.type = texData.type;\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmaps !== undefined) {\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmapCount === 1) {\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t}\n\n\t\t\t\tif (texData.generateMipmaps !== undefined) {\n\t\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\tif (onLoad) onLoad(texture, texData);\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\tclass TextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst texture = new Texture();\n\t\t\tconst loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.load(url, function (image) {\n\t\t\t\ttexture.image = image; // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\n\t\t\t\tconst isJPEG = url.search(/\\.jpe?g($|\\?)/i) > 0 || url.search(/^data\\:image\\/jpeg/) === 0;\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif (onLoad !== undefined) {\n\t\t\t\t\tonLoad(texture);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\t/**\n\t * Extensible curve object.\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\tclass Curve {\n\t\tconstructor() {\n\t\t\tthis.type = 'Curve';\n\t\t\tthis.arcLengthDivisions = 200;\n\t\t} // Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\n\t\tgetPoint()\n\t\t/* t, optionalTarget */\n\t\t{\n\t\t\tconsole.warn('THREE.Curve: .getPoint() not implemented.');\n\t\t\treturn null;\n\t\t} // Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\tconst t = this.getUtoTmapping(u);\n\t\t\treturn this.getPoint(t, optionalTarget);\n\t\t} // Get sequence of points using getPoint( t )\n\n\n\t\tgetPoints(divisions = 5) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPoint(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t} // Get sequence of points using getPointAt( u )\n\n\n\t\tgetSpacedPoints(divisions = 5) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPointAt(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t} // Get total curve arc length\n\n\n\t\tgetLength() {\n\t\t\tconst lengths = this.getLengths();\n\t\t\treturn lengths[lengths.length - 1];\n\t\t} // Get list of cumulative segment lengths\n\n\n\t\tgetLengths(divisions = this.arcLengthDivisions) {\n\t\t\tif (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n\t\t\t\treturn this.cacheArcLengths;\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\t\t\tconst cache = [];\n\t\t\tlet current,\n\t\t\t\t\tlast = this.getPoint(0);\n\t\t\tlet sum = 0;\n\t\t\tcache.push(0);\n\n\t\t\tfor (let p = 1; p <= divisions; p++) {\n\t\t\t\tcurrent = this.getPoint(p / divisions);\n\t\t\t\tsum += current.distanceTo(last);\n\t\t\t\tcache.push(sum);\n\t\t\t\tlast = current;\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\t\t}\n\n\t\tupdateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\t\t} // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\n\t\tgetUtoTmapping(u, distance) {\n\t\t\tconst arcLengths = this.getLengths();\n\t\t\tlet i = 0;\n\t\t\tconst il = arcLengths.length;\n\t\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\t\tif (distance) {\n\t\t\t\ttargetArcLength = distance;\n\t\t\t} else {\n\t\t\t\ttargetArcLength = u * arcLengths[il - 1];\n\t\t\t} // binary search for the index with largest value smaller than target u distance\n\n\n\t\t\tlet low = 0,\n\t\t\t\t\thigh = il - 1,\n\t\t\t\t\tcomparison;\n\n\t\t\twhile (low <= high) {\n\t\t\t\ti = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[i] - targetArcLength;\n\n\t\t\t\tif (comparison < 0) {\n\t\t\t\t\tlow = i + 1;\n\t\t\t\t} else if (comparison > 0) {\n\t\t\t\t\thigh = i - 1;\n\t\t\t\t} else {\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif (arcLengths[i] === targetArcLength) {\n\t\t\t\treturn i / (il - 1);\n\t\t\t} // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n\t\t\tconst lengthBefore = arcLengths[i];\n\t\t\tconst lengthAfter = arcLengths[i + 1];\n\t\t\tconst segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n\t\t\tconst segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n\t\t\tconst t = (i + segmentFraction) / (il - 1);\n\t\t\treturn t;\n\t\t} // Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\n\t\tgetTangent(t, optionalTarget) {\n\t\t\tconst delta = 0.0001;\n\t\t\tlet t1 = t - delta;\n\t\t\tlet t2 = t + delta; // Capping in case of danger\n\n\t\t\tif (t1 < 0) t1 = 0;\n\t\t\tif (t2 > 1) t2 = 1;\n\t\t\tconst pt1 = this.getPoint(t1);\n\t\t\tconst pt2 = this.getPoint(t2);\n\t\t\tconst tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n\t\t\ttangent.copy(pt2).sub(pt1).normalize();\n\t\t\treturn tangent;\n\t\t}\n\n\t\tgetTangentAt(u, optionalTarget) {\n\t\t\tconst t = this.getUtoTmapping(u);\n\t\t\treturn this.getTangent(t, optionalTarget);\n\t\t}\n\n\t\tcomputeFrenetFrames(segments, closed) {\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t\t\tconst normal = new Vector3();\n\t\t\tconst tangents = [];\n\t\t\tconst normals = [];\n\t\t\tconst binormals = [];\n\t\t\tconst vec = new Vector3();\n\t\t\tconst mat = new Matrix4(); // compute the tangent vectors for each segment on the curve\n\n\t\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\t\tconst u = i / segments;\n\t\t\t\ttangents[i] = this.getTangentAt(u, new Vector3());\n\t\t\t\ttangents[i].normalize();\n\t\t\t} // select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\n\t\t\tnormals[0] = new Vector3();\n\t\t\tbinormals[0] = new Vector3();\n\t\t\tlet min = Number.MAX_VALUE;\n\t\t\tconst tx = Math.abs(tangents[0].x);\n\t\t\tconst ty = Math.abs(tangents[0].y);\n\t\t\tconst tz = Math.abs(tangents[0].z);\n\n\t\t\tif (tx <= min) {\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set(1, 0, 0);\n\t\t\t}\n\n\t\t\tif (ty <= min) {\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set(0, 1, 0);\n\t\t\t}\n\n\t\t\tif (tz <= min) {\n\t\t\t\tnormal.set(0, 0, 1);\n\t\t\t}\n\n\t\t\tvec.crossVectors(tangents[0], normal).normalize();\n\t\t\tnormals[0].crossVectors(tangents[0], vec);\n\t\t\tbinormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\tnormals[i] = normals[i - 1].clone();\n\t\t\t\tbinormals[i] = binormals[i - 1].clone();\n\t\t\t\tvec.crossVectors(tangents[i - 1], tangents[i]);\n\n\t\t\t\tif (vec.length() > Number.EPSILON) {\n\t\t\t\t\tvec.normalize();\n\t\t\t\t\tconst theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n\t\t\t\t}\n\n\t\t\t\tbinormals[i].crossVectors(tangents[i], normals[i]);\n\t\t\t} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n\t\t\tif (closed === true) {\n\t\t\t\tlet theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n\t\t\t\t\ttheta = -theta;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));\n\t\t\t\t\tbinormals[i].crossVectors(tangents[i], normals[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass EllipseCurve extends Curve {\n\t\tconstructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {\n\t\t\tsuper();\n\t\t\tthis.type = 'EllipseCurve';\n\t\t\tthis.aX = aX;\n\t\t\tthis.aY = aY;\n\t\t\tthis.xRadius = xRadius;\n\t\t\tthis.yRadius = yRadius;\n\t\t\tthis.aStartAngle = aStartAngle;\n\t\t\tthis.aEndAngle = aEndAngle;\n\t\t\tthis.aClockwise = aClockwise;\n\t\t\tthis.aRotation = aRotation;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget) {\n\t\t\tconst point = optionalTarget || new Vector2();\n\t\t\tconst twoPi = Math.PI * 2;\n\t\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\t\tconst samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n\t\t\twhile (deltaAngle < 0) deltaAngle += twoPi;\n\n\t\t\twhile (deltaAngle > twoPi) deltaAngle -= twoPi;\n\n\t\t\tif (deltaAngle < Number.EPSILON) {\n\t\t\t\tif (samePoints) {\n\t\t\t\t\tdeltaAngle = 0;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.aClockwise === true && !samePoints) {\n\t\t\t\tif (deltaAngle === twoPi) {\n\t\t\t\t\tdeltaAngle = -twoPi;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\t\tlet x = this.aX + this.xRadius * Math.cos(angle);\n\t\t\tlet y = this.aY + this.yRadius * Math.sin(angle);\n\n\t\t\tif (this.aRotation !== 0) {\n\t\t\t\tconst cos = Math.cos(this.aRotation);\n\t\t\t\tconst sin = Math.sin(this.aRotation);\n\t\t\t\tconst tx = x - this.aX;\n\t\t\t\tconst ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n\t\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\t\ty = tx * sin + ty * cos + this.aY;\n\t\t\t}\n\n\t\t\treturn point.set(x, y);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.aX = source.aX;\n\t\t\tthis.aY = source.aY;\n\t\t\tthis.xRadius = source.xRadius;\n\t\t\tthis.yRadius = source.yRadius;\n\t\t\tthis.aStartAngle = source.aStartAngle;\n\t\t\tthis.aEndAngle = source.aEndAngle;\n\t\t\tthis.aClockwise = source.aClockwise;\n\t\t\tthis.aRotation = source.aRotation;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.aX = this.aX;\n\t\t\tdata.aY = this.aY;\n\t\t\tdata.xRadius = this.xRadius;\n\t\t\tdata.yRadius = this.yRadius;\n\t\t\tdata.aStartAngle = this.aStartAngle;\n\t\t\tdata.aEndAngle = this.aEndAngle;\n\t\t\tdata.aClockwise = this.aClockwise;\n\t\t\tdata.aRotation = this.aRotation;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.aX = json.aX;\n\t\t\tthis.aY = json.aY;\n\t\t\tthis.xRadius = json.xRadius;\n\t\t\tthis.yRadius = json.yRadius;\n\t\t\tthis.aStartAngle = json.aStartAngle;\n\t\t\tthis.aEndAngle = json.aEndAngle;\n\t\t\tthis.aClockwise = json.aClockwise;\n\t\t\tthis.aRotation = json.aRotation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tclass ArcCurve extends EllipseCurve {\n\t\tconstructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tsuper(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\tthis.type = 'ArcCurve';\n\t\t}\n\n\t}\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\t\tlet c0 = 0,\n\t\t\t\tc1 = 0,\n\t\t\t\tc2 = 0,\n\t\t\t\tc3 = 0;\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *\t p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *\t p(0) = x0, p(1) = x1\n\t\t *\tand\n\t\t *\t p'(0) = t0, p'(1) = t1.\n\t\t */\n\n\t\tfunction init(x0, x1, t0, t1) {\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\t}\n\n\t\treturn {\n\t\t\tinitCatmullRom: function (x0, x1, x2, x3, tension) {\n\t\t\t\tinit(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n\t\t\t},\n\t\t\tinitNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tlet t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n\t\t\t\tlet t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\t\t\t\tinit(x1, x2, t1, t2);\n\t\t\t},\n\t\t\tcalc: function (t) {\n\t\t\t\tconst t2 = t * t;\n\t\t\t\tconst t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\t\t\t}\n\t\t};\n\t} //\n\n\n\tconst tmp = new Vector3();\n\tconst px = new CubicPoly(),\n\t\t\t\tpy = new CubicPoly(),\n\t\t\t\tpz = new CubicPoly();\n\n\tclass CatmullRomCurve3 extends Curve {\n\t\tconstructor(points = [], closed = false, curveType = 'centripetal', tension = 0.5) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CatmullRomCurve3';\n\t\t\tthis.points = points;\n\t\t\tthis.closed = closed;\n\t\t\tthis.curveType = curveType;\n\t\t\tthis.tension = tension;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst points = this.points;\n\t\t\tconst l = points.length;\n\t\t\tconst p = (l - (this.closed ? 0 : 1)) * t;\n\t\t\tlet intPoint = Math.floor(p);\n\t\t\tlet weight = p - intPoint;\n\n\t\t\tif (this.closed) {\n\t\t\t\tintPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n\t\t\t} else if (weight === 0 && intPoint === l - 1) {\n\t\t\t\tintPoint = l - 2;\n\t\t\t\tweight = 1;\n\t\t\t}\n\n\t\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\t\tif (this.closed || intPoint > 0) {\n\t\t\t\tp0 = points[(intPoint - 1) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate first point\n\t\t\t\ttmp.subVectors(points[0], points[1]).add(points[0]);\n\t\t\t\tp0 = tmp;\n\t\t\t}\n\n\t\t\tconst p1 = points[intPoint % l];\n\t\t\tconst p2 = points[(intPoint + 1) % l];\n\n\t\t\tif (this.closed || intPoint + 2 < l) {\n\t\t\t\tp3 = points[(intPoint + 2) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate last point\n\t\t\t\ttmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n\t\t\t\tp3 = tmp;\n\t\t\t}\n\n\t\t\tif (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\t\tlet dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n\t\t\t\tlet dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n\t\t\t\tlet dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n\t\t\t\tif (dt1 < 1e-4) dt1 = 1.0;\n\t\t\t\tif (dt0 < 1e-4) dt0 = dt1;\n\t\t\t\tif (dt2 < 1e-4) dt2 = dt1;\n\t\t\t\tpx.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n\t\t\t\tpy.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n\t\t\t\tpz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n\t\t\t} else if (this.curveType === 'catmullrom') {\n\t\t\t\tpx.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n\t\t\t\tpy.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n\t\t\t\tpz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n\t\t\t}\n\n\t\t\tpoint.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tconst point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\tthis.closed = source.closed;\n\t\t\tthis.curveType = source.curveType;\n\t\t\tthis.tension = source.tension;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.points = [];\n\n\t\t\tfor (let i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tconst point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\tdata.closed = this.closed;\n\t\t\tdata.curveType = this.curveType;\n\t\t\tdata.tension = this.tension;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tconst point = json.points[i];\n\t\t\t\tthis.points.push(new Vector3().fromArray(point));\n\t\t\t}\n\n\t\t\tthis.closed = json.closed;\n\t\t\tthis.curveType = json.curveType;\n\t\t\tthis.tension = json.tension;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\t/**\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\tfunction CatmullRom(t, p0, p1, p2, p3) {\n\t\tconst v0 = (p2 - p0) * 0.5;\n\t\tconst v1 = (p3 - p1) * 0.5;\n\t\tconst t2 = t * t;\n\t\tconst t3 = t * t2;\n\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t} //\n\n\n\tfunction QuadraticBezierP0(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn k * k * p;\n\t}\n\n\tfunction QuadraticBezierP1(t, p) {\n\t\treturn 2 * (1 - t) * t * p;\n\t}\n\n\tfunction QuadraticBezierP2(t, p) {\n\t\treturn t * t * p;\n\t}\n\n\tfunction QuadraticBezier(t, p0, p1, p2) {\n\t\treturn QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n\t} //\n\n\n\tfunction CubicBezierP0(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn k * k * k * p;\n\t}\n\n\tfunction CubicBezierP1(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\t}\n\n\tfunction CubicBezierP2(t, p) {\n\t\treturn 3 * (1 - t) * t * t * p;\n\t}\n\n\tfunction CubicBezierP3(t, p) {\n\t\treturn t * t * t * p;\n\t}\n\n\tfunction CubicBezier(t, p0, p1, p2, p3) {\n\t\treturn CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n\t}\n\n\tclass CubicBezierCurve extends Curve {\n\t\tconstructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubicBezierCurve';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tclass CubicBezierCurve3 extends Curve {\n\t\tconstructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubicBezierCurve3';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tclass LineCurve extends Curve {\n\t\tconstructor(v1 = new Vector2(), v2 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineCurve';\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t}\n\n\t\tgetTangent(t, optionalTarget) {\n\t\t\tconst tangent = optionalTarget || new Vector2();\n\t\t\ttangent.copy(this.v2).sub(this.v1).normalize();\n\t\t\treturn tangent;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tclass LineCurve3 extends Curve {\n\t\tconstructor(v1 = new Vector3(), v2 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineCurve3';\n\t\t\tthis.isLineCurve3 = true;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass QuadraticBezierCurve extends Curve {\n\t\tconstructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'QuadraticBezierCurve';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tclass QuadraticBezierCurve3 extends Curve {\n\t\tconstructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'QuadraticBezierCurve3';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tclass SplineCurve extends Curve {\n\t\tconstructor(points = []) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SplineCurve';\n\t\t\tthis.points = points;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst points = this.points;\n\t\t\tconst p = (points.length - 1) * t;\n\t\t\tconst intPoint = Math.floor(p);\n\t\t\tconst weight = p - intPoint;\n\t\t\tconst p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n\t\t\tconst p1 = points[intPoint];\n\t\t\tconst p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n\t\t\tconst p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\t\t\tpoint.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tconst point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.points = [];\n\n\t\t\tfor (let i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tconst point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tconst point = json.points[i];\n\t\t\t\tthis.points.push(new Vector2().fromArray(point));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *\tcurves, but retains the api of a curve\n\t **************************************************************/\n\n\tclass CurvePath extends Curve {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'CurvePath';\n\t\t\tthis.curves = [];\n\t\t\tthis.autoClose = false; // Automatically closes the path\n\t\t}\n\n\t\tadd(curve) {\n\t\t\tthis.curves.push(curve);\n\t\t}\n\n\t\tclosePath() {\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tconst startPoint = this.curves[0].getPoint(0);\n\t\t\tconst endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n\t\t\tif (!startPoint.equals(endPoint)) {\n\t\t\t\tthis.curves.push(new LineCurve(endPoint, startPoint));\n\t\t\t}\n\t\t} // To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\n\t\tgetPoint(t) {\n\t\t\tconst d = t * this.getLength();\n\t\t\tconst curveLengths = this.getCurveLengths();\n\t\t\tlet i = 0; // To think about boundaries points.\n\n\t\t\twhile (i < curveLengths.length) {\n\t\t\t\tif (curveLengths[i] >= d) {\n\t\t\t\t\tconst diff = curveLengths[i] - d;\n\t\t\t\t\tconst curve = this.curves[i];\n\t\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\t\t\t\treturn curve.getPointAt(u);\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn null; // loop where sum != 0, sum > d , sum+1 <d\n\t\t} // We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\n\t\tgetLength() {\n\t\t\tconst lens = this.getCurveLengths();\n\t\t\treturn lens[lens.length - 1];\n\t\t} // cacheLengths must be recalculated.\n\n\n\t\tupdateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\t\t} // Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\n\t\tgetCurveLengths() {\n\t\t\t// We use cache values if curves and cache array are same length\n\t\t\tif (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n\t\t\t\treturn this.cacheLengths;\n\t\t\t} // Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\n\t\t\tconst lengths = [];\n\t\t\tlet sums = 0;\n\n\t\t\tfor (let i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tsums += this.curves[i].getLength();\n\t\t\t\tlengths.push(sums);\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\t\t\treturn lengths;\n\t\t}\n\n\t\tgetSpacedPoints(divisions = 40) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let i = 0; i <= divisions; i++) {\n\t\t\t\tpoints.push(this.getPoint(i / divisions));\n\t\t\t}\n\n\t\t\tif (this.autoClose) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t}\n\n\t\tgetPoints(divisions = 12) {\n\t\t\tconst points = [];\n\t\t\tlet last;\n\n\t\t\tfor (let i = 0, curves = this.curves; i < curves.length; i++) {\n\t\t\t\tconst curve = curves[i];\n\t\t\t\tconst resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;\n\t\t\t\tconst pts = curve.getPoints(resolution);\n\n\t\t\t\tfor (let j = 0; j < pts.length; j++) {\n\t\t\t\t\tconst point = pts[j];\n\t\t\t\t\tif (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t\tlast = point;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.curves = [];\n\n\t\t\tfor (let i = 0, l = source.curves.length; i < l; i++) {\n\t\t\t\tconst curve = source.curves[i];\n\t\t\t\tthis.curves.push(curve.clone());\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor (let i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tconst curve = this.curves[i];\n\t\t\t\tdata.curves.push(curve.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor (let i = 0, l = json.curves.length; i < l; i++) {\n\t\t\t\tconst curve = json.curves[i];\n\t\t\t\tthis.curves.push(new Curves[curve.type]().fromJSON(curve));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Path extends CurvePath {\n\t\tconstructor(points) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Path';\n\t\t\tthis.currentPoint = new Vector2();\n\n\t\t\tif (points) {\n\t\t\t\tthis.setFromPoints(points);\n\t\t\t}\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.moveTo(points[0].x, points[0].y);\n\n\t\t\tfor (let i = 1, l = points.length; i < l; i++) {\n\t\t\t\tthis.lineTo(points[i].x, points[i].y);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tmoveTo(x, y) {\n\t\t\tthis.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\t\t}\n\n\t\tlineTo(x, y) {\n\t\t\tconst curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tquadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tconst curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tbezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tconst curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tsplineThru(pts\n\t\t/*Array of Vector*/\n\t\t) {\n\t\t\tconst npts = [this.currentPoint.clone()].concat(pts);\n\t\t\tconst curve = new SplineCurve(npts);\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.copy(pts[pts.length - 1]);\n\t\t\treturn this;\n\t\t}\n\n\t\tarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tconst x0 = this.currentPoint.x;\n\t\t\tconst y0 = this.currentPoint.y;\n\t\t\tthis.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t}\n\n\t\tabsarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t}\n\n\t\tellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tconst x0 = this.currentPoint.x;\n\t\t\tconst y0 = this.currentPoint.y;\n\t\t\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\t\t\treturn this;\n\t\t}\n\n\t\tabsellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tconst curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n\t\t\tif (this.curves.length > 0) {\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tconst firstPoint = curve.getPoint(0);\n\n\t\t\t\tif (!firstPoint.equals(this.currentPoint)) {\n\t\t\t\t\tthis.lineTo(firstPoint.x, firstPoint.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.curves.push(curve);\n\t\t\tconst lastPoint = curve.getPoint(1);\n\t\t\tthis.currentPoint.copy(lastPoint);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.currentPoint.copy(source.currentPoint);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.currentPoint.fromArray(json.currentPoint);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Shape extends Path {\n\t\tconstructor(points) {\n\t\t\tsuper(points);\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.type = 'Shape';\n\t\t\tthis.holes = [];\n\t\t}\n\n\t\tgetPointsHoles(divisions) {\n\t\t\tconst holesPts = [];\n\n\t\t\tfor (let i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tholesPts[i] = this.holes[i].getPoints(divisions);\n\t\t\t}\n\n\t\t\treturn holesPts;\n\t\t} // get points of shape and holes (keypoints based on segments parameter)\n\n\n\t\textractPoints(divisions) {\n\t\t\treturn {\n\t\t\t\tshape: this.getPoints(divisions),\n\t\t\t\tholes: this.getPointsHoles(divisions)\n\t\t\t};\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.holes = [];\n\n\t\t\tfor (let i = 0, l = source.holes.length; i < l; i++) {\n\t\t\t\tconst hole = source.holes[i];\n\t\t\t\tthis.holes.push(hole.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor (let i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tconst hole = this.holes[i];\n\t\t\t\tdata.holes.push(hole.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor (let i = 0, l = json.holes.length; i < l; i++) {\n\t\t\t\tconst hole = json.holes[i];\n\t\t\t\tthis.holes.push(new Path().fromJSON(hole));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Light extends Object3D {\n\t\tconstructor(color, intensity = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Light';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.intensity = intensity;\n\t\t}\n\n\t\tdispose() {// Empty here in base class; some subclasses override.\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.intensity = source.intensity;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\t\t\tif (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n\t\t\tif (this.distance !== undefined) data.object.distance = this.distance;\n\t\t\tif (this.angle !== undefined) data.object.angle = this.angle;\n\t\t\tif (this.decay !== undefined) data.object.decay = this.decay;\n\t\t\tif (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n\t\t\tif (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tLight.prototype.isLight = true;\n\n\tclass HemisphereLight extends Light {\n\t\tconstructor(skyColor, groundColor, intensity) {\n\t\t\tsuper(skyColor, intensity);\n\t\t\tthis.type = 'HemisphereLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.groundColor = new Color(groundColor);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.groundColor.copy(source.groundColor);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tHemisphereLight.prototype.isHemisphereLight = true;\n\n\tconst _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _lightPositionWorld$1 = /*@__PURE__*/new Vector3();\n\n\tconst _lookTarget$1 = /*@__PURE__*/new Vector3();\n\n\tclass LightShadow {\n\t\tconstructor(camera) {\n\t\t\tthis.camera = camera;\n\t\t\tthis.bias = 0;\n\t\t\tthis.normalBias = 0;\n\t\t\tthis.radius = 1;\n\t\t\tthis.mapSize = new Vector2(512, 512);\n\t\t\tthis.map = null;\n\t\t\tthis.mapPass = null;\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.autoUpdate = true;\n\t\t\tthis.needsUpdate = false;\n\t\t\tthis._frustum = new Frustum();\n\t\t\tthis._frameExtents = new Vector2(1, 1);\n\t\t\tthis._viewportCount = 1;\n\t\t\tthis._viewports = [new Vector4(0, 0, 1, 1)];\n\t\t}\n\n\t\tgetViewportCount() {\n\t\t\treturn this._viewportCount;\n\t\t}\n\n\t\tgetFrustum() {\n\t\t\treturn this._frustum;\n\t\t}\n\n\t\tupdateMatrices(light) {\n\t\t\tconst shadowCamera = this.camera;\n\t\t\tconst shadowMatrix = this.matrix;\n\n\t\t\t_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tshadowCamera.position.copy(_lightPositionWorld$1);\n\n\t\t\t_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);\n\n\t\t\tshadowCamera.lookAt(_lookTarget$1);\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix$1);\n\n\t\t\tshadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n\t\t\tshadowMatrix.multiply(shadowCamera.projectionMatrix);\n\t\t\tshadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n\t\t}\n\n\t\tgetViewport(viewportIndex) {\n\t\t\treturn this._viewports[viewportIndex];\n\t\t}\n\n\t\tgetFrameExtents() {\n\t\t\treturn this._frameExtents;\n\t\t}\n\n\t\tdispose() {\n\t\t\tif (this.map) {\n\t\t\t\tthis.map.dispose();\n\t\t\t}\n\n\t\t\tif (this.mapPass) {\n\t\t\t\tthis.mapPass.dispose();\n\t\t\t}\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.camera = source.camera.clone();\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\t\t\tthis.mapSize.copy(source.mapSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst object = {};\n\t\t\tif (this.bias !== 0) object.bias = this.bias;\n\t\t\tif (this.normalBias !== 0) object.normalBias = this.normalBias;\n\t\t\tif (this.radius !== 1) object.radius = this.radius;\n\t\t\tif (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n\t\t\tobject.camera = this.camera.toJSON(false).object;\n\t\t\tdelete object.camera.matrix;\n\t\t\treturn object;\n\t\t}\n\n\t}\n\n\tclass SpotLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new PerspectiveCamera(50, 1, 0.5, 500));\n\t\t\tthis.focus = 1;\n\t\t}\n\n\t\tupdateMatrices(light) {\n\t\t\tconst camera = this.camera;\n\t\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tconst far = light.distance || camera.far;\n\n\t\t\tif (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\tsuper.updateMatrices(light);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.focus = source.focus;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpotLightShadow.prototype.isSpotLightShadow = true;\n\n\tclass SpotLight extends Light {\n\t\tconstructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'SpotLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.target = new Object3D();\n\t\t\tthis.distance = distance;\n\t\t\tthis.angle = angle;\n\t\t\tthis.penumbra = penumbra;\n\t\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\tthis.shadow = new SpotLightShadow();\n\t\t}\n\n\t\tget power() {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / Math.PI;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpotLight.prototype.isSpotLight = true;\n\n\tconst _projScreenMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _lightPositionWorld = /*@__PURE__*/new Vector3();\n\n\tconst _lookTarget = /*@__PURE__*/new Vector3();\n\n\tclass PointLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new PerspectiveCamera(90, 1, 0.5, 500));\n\t\t\tthis._frameExtents = new Vector2(4, 2);\n\t\t\tthis._viewportCount = 6;\n\t\t\tthis._viewports = [// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//\txzXZ\n\t\t\t//\t y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\t\t\t// positive X\n\t\t\tnew Vector4(2, 1, 1, 1), // negative X\n\t\t\tnew Vector4(0, 1, 1, 1), // positive Z\n\t\t\tnew Vector4(3, 1, 1, 1), // negative Z\n\t\t\tnew Vector4(1, 1, 1, 1), // positive Y\n\t\t\tnew Vector4(3, 0, 1, 1), // negative Y\n\t\t\tnew Vector4(1, 0, 1, 1)];\n\t\t\tthis._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n\t\t\tthis._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n\t\t}\n\n\t\tupdateMatrices(light, viewportIndex = 0) {\n\t\t\tconst camera = this.camera;\n\t\t\tconst shadowMatrix = this.matrix;\n\t\t\tconst far = light.distance || camera.far;\n\n\t\t\tif (far !== camera.far) {\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tcamera.position.copy(_lightPositionWorld);\n\n\t\t\t_lookTarget.copy(camera.position);\n\n\t\t\t_lookTarget.add(this._cubeDirections[viewportIndex]);\n\n\t\t\tcamera.up.copy(this._cubeUps[viewportIndex]);\n\t\t\tcamera.lookAt(_lookTarget);\n\t\t\tcamera.updateMatrixWorld();\n\t\t\tshadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix);\n\t\t}\n\n\t}\n\n\tPointLightShadow.prototype.isPointLightShadow = true;\n\n\tclass PointLight extends Light {\n\t\tconstructor(color, intensity, distance = 0, decay = 1) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'PointLight';\n\t\t\tthis.distance = distance;\n\t\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\tthis.shadow = new PointLightShadow();\n\t\t}\n\n\t\tget power() {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * 4 * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / (4 * Math.PI);\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tPointLight.prototype.isPointLight = true;\n\n\tclass OrthographicCamera extends Camera {\n\t\tconstructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000) {\n\t\t\tsuper();\n\t\t\tthis.type = 'OrthographicCamera';\n\t\t\tthis.zoom = 1;\n\t\t\tthis.view = null;\n\t\t\tthis.left = left;\n\t\t\tthis.right = right;\n\t\t\tthis.top = top;\n\t\t\tthis.bottom = bottom;\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tclearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tupdateProjectionMatrix() {\n\t\t\tconst dx = (this.right - this.left) / (2 * this.zoom);\n\t\t\tconst dy = (this.top - this.bottom) / (2 * this.zoom);\n\t\t\tconst cx = (this.right + this.left) / 2;\n\t\t\tconst cy = (this.top + this.bottom) / 2;\n\t\t\tlet left = cx - dx;\n\t\t\tlet right = cx + dx;\n\t\t\tlet top = cy + dy;\n\t\t\tlet bottom = cy - dy;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tconst scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n\t\t\t\tconst scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tOrthographicCamera.prototype.isOrthographicCamera = true;\n\n\tclass DirectionalLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n\t\t}\n\n\t}\n\n\tDirectionalLightShadow.prototype.isDirectionalLightShadow = true;\n\n\tclass DirectionalLight extends Light {\n\t\tconstructor(color, intensity) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'DirectionalLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.target = new Object3D();\n\t\t\tthis.shadow = new DirectionalLightShadow();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tDirectionalLight.prototype.isDirectionalLight = true;\n\n\tclass AmbientLight extends Light {\n\t\tconstructor(color, intensity) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'AmbientLight';\n\t\t}\n\n\t}\n\n\tAmbientLight.prototype.isAmbientLight = true;\n\n\tclass RectAreaLight extends Light {\n\t\tconstructor(color, intensity, width = 10, height = 10) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'RectAreaLight';\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tRectAreaLight.prototype.isRectAreaLight = true;\n\n\t/**\n\t * Primary reference:\n\t *\t https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *\t https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\t// 3-band SH defined by 9 coefficients\n\n\tclass SphericalHarmonics3 {\n\t\tconstructor() {\n\t\t\tthis.coefficients = [];\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients.push(new Vector3());\n\t\t\t}\n\t\t}\n\n\t\tset(coefficients) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].copy(coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tzero() {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\n\n\t\tgetAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z;\n\t\t\tconst coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 0.488603 * y);\n\t\t\ttarget.addScaledVector(coeff[2], 0.488603 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 0.488603 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 1.092548 * (x * y));\n\t\t\ttarget.addScaledVector(coeff[5], 1.092548 * (y * z));\n\t\t\ttarget.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n\t\t\ttarget.addScaledVector(coeff[7], 1.092548 * (x * z));\n\t\t\ttarget.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n\t\t\treturn target;\n\t\t} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\n\n\t\tgetIrradianceAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z;\n\t\t\tconst coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\t\t\t// band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n\t\t\ttarget.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n\t\t\ttarget.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n\t\t\ttarget.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n\t\t\ttarget.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n\t\t\ttarget.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\t\t}\n\n\t\tadd(sh) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].add(sh.coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledSH(sh, s) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].addScaledVector(sh.coefficients[i], s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(s) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].multiplyScalar(s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tlerp(sh, alpha) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].lerp(sh.coefficients[i], alpha);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(sh) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tif (!this.coefficients[i].equals(sh.coefficients[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tcopy(sh) {\n\t\t\treturn this.set(sh.coefficients);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tconst coefficients = this.coefficients;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].fromArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst coefficients = this.coefficients;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].toArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn array;\n\t\t} // evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\n\n\t\tstatic getBasisAt(normal, shBasis) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z; // band 0\n\n\t\t\tshBasis[0] = 0.282095; // band 1\n\n\t\t\tshBasis[1] = 0.488603 * y;\n\t\t\tshBasis[2] = 0.488603 * z;\n\t\t\tshBasis[3] = 0.488603 * x; // band 2\n\n\t\t\tshBasis[4] = 1.092548 * x * y;\n\t\t\tshBasis[5] = 1.092548 * y * z;\n\t\t\tshBasis[6] = 0.315392 * (3 * z * z - 1);\n\t\t\tshBasis[7] = 1.092548 * x * z;\n\t\t\tshBasis[8] = 0.546274 * (x * x - y * y);\n\t\t}\n\n\t}\n\n\tSphericalHarmonics3.prototype.isSphericalHarmonics3 = true;\n\n\tclass LightProbe extends Light {\n\t\tconstructor(sh = new SphericalHarmonics3(), intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tthis.sh = sh;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.sh.copy(source.sh);\n\t\t\treturn this;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\n\t\t\tthis.sh.fromArray(json.sh);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.sh = this.sh.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tLightProbe.prototype.isLightProbe = true;\n\n\tclass MaterialLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t\tthis.textures = {};\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst textures = this.textures;\n\n\t\t\tfunction getTexture(name) {\n\t\t\t\tif (textures[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.MaterialLoader: Undefined texture', name);\n\t\t\t\t}\n\n\t\t\t\treturn textures[name];\n\t\t\t}\n\n\t\t\tconst material = new Materials[json.type]();\n\t\t\tif (json.uuid !== undefined) material.uuid = json.uuid;\n\t\t\tif (json.name !== undefined) material.name = json.name;\n\t\t\tif (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n\t\t\tif (json.roughness !== undefined) material.roughness = json.roughness;\n\t\t\tif (json.metalness !== undefined) material.metalness = json.metalness;\n\t\t\tif (json.sheen !== undefined) material.sheen = new Color().setHex(json.sheen);\n\t\t\tif (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n\t\t\tif (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n\t\t\tif (json.shininess !== undefined) material.shininess = json.shininess;\n\t\t\tif (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n\t\t\tif (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\t\tif (json.transmission !== undefined) material.transmission = json.transmission;\n\t\t\tif (json.thickness !== undefined) material.thickness = json.thickness;\n\t\t\tif (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;\n\t\t\tif (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);\n\t\t\tif (json.fog !== undefined) material.fog = json.fog;\n\t\t\tif (json.flatShading !== undefined) material.flatShading = json.flatShading;\n\t\t\tif (json.blending !== undefined) material.blending = json.blending;\n\t\t\tif (json.combine !== undefined) material.combine = json.combine;\n\t\t\tif (json.side !== undefined) material.side = json.side;\n\t\t\tif (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;\n\t\t\tif (json.opacity !== undefined) material.opacity = json.opacity;\n\t\t\tif (json.transparent !== undefined) material.transparent = json.transparent;\n\t\t\tif (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n\t\t\tif (json.depthTest !== undefined) material.depthTest = json.depthTest;\n\t\t\tif (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n\t\t\tif (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n\t\t\tif (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n\t\t\tif (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n\t\t\tif (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n\t\t\tif (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n\t\t\tif (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n\t\t\tif (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n\t\t\tif (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n\t\t\tif (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n\t\t\tif (json.wireframe !== undefined) material.wireframe = json.wireframe;\n\t\t\tif (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif (json.rotation !== undefined) material.rotation = json.rotation;\n\t\t\tif (json.linewidth !== 1) material.linewidth = json.linewidth;\n\t\t\tif (json.dashSize !== undefined) material.dashSize = json.dashSize;\n\t\t\tif (json.gapSize !== undefined) material.gapSize = json.gapSize;\n\t\t\tif (json.scale !== undefined) material.scale = json.scale;\n\t\t\tif (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n\t\t\tif (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\t\tif (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\t\t\tif (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;\n\t\t\tif (json.morphNormals !== undefined) material.morphNormals = json.morphNormals;\n\t\t\tif (json.dithering !== undefined) material.dithering = json.dithering;\n\t\t\tif (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;\n\t\t\tif (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;\n\t\t\tif (json.vertexTangents !== undefined) material.vertexTangents = json.vertexTangents;\n\t\t\tif (json.visible !== undefined) material.visible = json.visible;\n\t\t\tif (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n\t\t\tif (json.userData !== undefined) material.userData = json.userData;\n\n\t\t\tif (json.vertexColors !== undefined) {\n\t\t\t\tif (typeof json.vertexColors === 'number') {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors > 0 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\t\t\t\t}\n\t\t\t} // Shader Material\n\n\n\t\t\tif (json.uniforms !== undefined) {\n\t\t\t\tfor (const name in json.uniforms) {\n\t\t\t\t\tconst uniform = json.uniforms[name];\n\t\t\t\t\tmaterial.uniforms[name] = {};\n\n\t\t\t\t\tswitch (uniform.type) {\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = getTexture(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Color().setHex(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector2().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = uniform.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json.defines !== undefined) material.defines = json.defines;\n\t\t\tif (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n\t\t\tif (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n\t\t\tif (json.extensions !== undefined) {\n\t\t\t\tfor (const key in json.extensions) {\n\t\t\t\t\tmaterial.extensions[key] = json.extensions[key];\n\t\t\t\t}\n\t\t\t} // Deprecated\n\n\n\t\t\tif (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n\t\t\t// for PointsMaterial\n\n\t\t\tif (json.size !== undefined) material.size = json.size;\n\t\t\tif (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n\t\t\tif (json.map !== undefined) material.map = getTexture(json.map);\n\t\t\tif (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n\t\t\tif (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n\t\t\tif (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n\t\t\tif (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n\t\t\tif (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n\t\t\tif (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n\t\t\tif (json.normalScale !== undefined) {\n\t\t\t\tlet normalScale = json.normalScale;\n\n\t\t\t\tif (Array.isArray(normalScale) === false) {\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\t\t\t\tnormalScale = [normalScale, normalScale];\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray(normalScale);\n\t\t\t}\n\n\t\t\tif (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n\t\t\tif (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n\t\t\tif (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n\t\t\tif (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n\t\t\tif (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n\t\t\tif (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n\t\t\tif (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n\t\t\tif (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n\t\t\tif (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n\t\t\tif (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n\t\t\tif (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n\t\t\tif (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n\t\t\tif (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n\t\t\tif (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n\t\t\tif (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n\t\t\tif (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n\t\t\tif (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n\t\t\tif (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n\t\t\tif (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n\t\t\tif (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n\t\t\tif (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n\t\t\tif (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n\t\t\tif (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);\n\t\t\treturn material;\n\t\t}\n\n\t\tsetTextures(value) {\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass LoaderUtils {\n\t\tstatic decodeText(array) {\n\t\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\t\treturn new TextDecoder().decode(array);\n\t\t\t} // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\n\t\t\tlet s = '';\n\n\t\t\tfor (let i = 0, il = array.length; i < il; i++) {\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode(array[i]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// merges multi-byte utf-8 characters.\n\t\t\t\treturn decodeURIComponent(escape(s));\n\t\t\t} catch (e) {\n\t\t\t\t// see #16358\n\t\t\t\treturn s;\n\t\t\t}\n\t\t}\n\n\t\tstatic extractUrlBase(url) {\n\t\t\tconst index = url.lastIndexOf('/');\n\t\t\tif (index === -1) return './';\n\t\t\treturn url.substr(0, index + 1);\n\t\t}\n\n\t}\n\n\tclass InstancedBufferGeometry extends BufferGeometry {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'InstancedBufferGeometry';\n\t\t\tthis.instanceCount = Infinity;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.instanceCount = source.instanceCount;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON(this);\n\t\t\tdata.instanceCount = this.instanceCount;\n\t\t\tdata.isInstancedBufferGeometry = true;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tInstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\n\tclass InstancedBufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized, meshPerAttribute) {\n\t\t\tif (typeof normalized === 'number') {\n\t\t\t\tmeshPerAttribute = normalized;\n\t\t\t\tnormalized = false;\n\t\t\t\tconsole.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');\n\t\t\t}\n\n\t\t\tsuper(array, itemSize, normalized);\n\t\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\t\t\tdata.isInstancedBufferAttribute = true;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tInstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\n\tclass BufferGeometryLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst interleavedBufferMap = {};\n\t\t\tconst arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer(json, uuid) {\n\t\t\t\tif (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n\t\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tconst interleavedBuffer = interleavedBuffers[uuid];\n\t\t\t\tconst buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n\t\t\t\tconst array = getTypedArray(interleavedBuffer.type, buffer);\n\t\t\t\tconst ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\t\t\t\tinterleavedBufferMap[uuid] = ib;\n\t\t\t\treturn ib;\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer(json, uuid) {\n\t\t\t\tif (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n\t\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\t\tconst arrayBuffer = arrayBuffers[uuid];\n\t\t\t\tconst ab = new Uint32Array(arrayBuffer).buffer;\n\t\t\t\tarrayBufferMap[uuid] = ab;\n\t\t\t\treturn ab;\n\t\t\t}\n\n\t\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\t\t\tconst index = json.data.index;\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tconst typedArray = getTypedArray(index.type, index.array);\n\t\t\t\tgeometry.setIndex(new BufferAttribute(typedArray, 1));\n\t\t\t}\n\n\t\t\tconst attributes = json.data.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tlet bufferAttribute;\n\n\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t} else {\n\t\t\t\t\tconst typedArray = getTypedArray(attribute.type, attribute.array);\n\t\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t}\n\n\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\tif (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);\n\n\t\t\t\tif (attribute.updateRange !== undefined) {\n\t\t\t\t\tbufferAttribute.updateRange.offset = attribute.updateRange.offset;\n\t\t\t\t\tbufferAttribute.updateRange.count = attribute.updateRange.count;\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute(key, bufferAttribute);\n\t\t\t}\n\n\t\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\t\tif (morphAttributes) {\n\t\t\t\tfor (const key in morphAttributes) {\n\t\t\t\t\tconst attributeArray = morphAttributes[key];\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor (let i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\t\tconst attribute = attributeArray[i];\n\t\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst typedArray = getTypedArray(attribute.type, attribute.array);\n\t\t\t\t\t\t\tbufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\t\t\tarray.push(bufferAttribute);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[key] = array;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif (morphTargetsRelative) {\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\t\t\t}\n\n\t\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif (groups !== undefined) {\n\t\t\t\tfor (let i = 0, n = groups.length; i !== n; ++i) {\n\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\tgeometry.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\t\tif (boundingSphere !== undefined) {\n\t\t\t\tconst center = new Vector3();\n\n\t\t\t\tif (boundingSphere.center !== undefined) {\n\t\t\t\t\tcenter.fromArray(boundingSphere.center);\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n\t\t\t}\n\n\t\t\tif (json.name) geometry.name = json.name;\n\t\t\tif (json.userData) geometry.userData = json.userData;\n\t\t\treturn geometry;\n\t\t}\n\n\t}\n\n\tclass ObjectLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tlet json = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (onError !== undefined) onError(error);\n\t\t\t\t\tconsole.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst metadata = json.metadata;\n\n\t\t\t\tif (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n\t\t\t\t\tconsole.error('THREE.ObjectLoader: Can\\'t load ' + url);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscope.parse(json, onLoad);\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json, onLoad) {\n\t\t\tconst animations = this.parseAnimations(json.animations);\n\t\t\tconst shapes = this.parseShapes(json.shapes);\n\t\t\tconst geometries = this.parseGeometries(json.geometries, shapes);\n\t\t\tconst images = this.parseImages(json.images, function () {\n\t\t\t\tif (onLoad !== undefined) onLoad(object);\n\t\t\t});\n\t\t\tconst textures = this.parseTextures(json.textures, images);\n\t\t\tconst materials = this.parseMaterials(json.materials, textures);\n\t\t\tconst object = this.parseObject(json.object, geometries, materials, animations);\n\t\t\tconst skeletons = this.parseSkeletons(json.skeletons, object);\n\t\t\tthis.bindSkeletons(object, skeletons); //\n\n\t\t\tif (onLoad !== undefined) {\n\t\t\t\tlet hasImages = false;\n\n\t\t\t\tfor (const uuid in images) {\n\t\t\t\t\tif (images[uuid] instanceof HTMLImageElement) {\n\t\t\t\t\t\thasImages = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hasImages === false) onLoad(object);\n\t\t\t}\n\n\t\t\treturn object;\n\t\t}\n\n\t\tparseShapes(json) {\n\t\t\tconst shapes = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst shape = new Shape().fromJSON(json[i]);\n\t\t\t\t\tshapes[shape.uuid] = shape;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t}\n\n\t\tparseSkeletons(json, object) {\n\t\t\tconst skeletons = {};\n\t\t\tconst bones = {}; // generate bone lookup table\n\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isBone) bones[child.uuid] = child;\n\t\t\t}); // create skeletons\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst skeleton = new Skeleton().fromJSON(json[i], bones);\n\t\t\t\t\tskeletons[skeleton.uuid] = skeleton;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn skeletons;\n\t\t}\n\n\t\tparseGeometries(json, shapes) {\n\t\t\tconst geometries = {};\n\t\t\tlet geometryShapes;\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tlet geometry;\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tswitch (data.type) {\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.detail);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (let j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tconst shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.curveSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (let j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tconst shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif (extrudePath !== undefined) {\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.options);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\t\t\t\t\t\t\tconsole.error('THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) geometry.name = data.name;\n\t\t\t\t\tif (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;\n\t\t\t\t\tgeometries[data.uuid] = geometry;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn geometries;\n\t\t}\n\n\t\tparseMaterials(json, textures) {\n\t\t\tconst cache = {}; // MultiMaterial\n\n\t\t\tconst materials = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tconst loader = new MaterialLoader();\n\t\t\t\tloader.setTextures(textures);\n\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tif (data.type === 'MultiMaterial') {\n\t\t\t\t\t\t// Deprecated\n\t\t\t\t\t\tconst array = [];\n\n\t\t\t\t\t\tfor (let j = 0; j < data.materials.length; j++) {\n\t\t\t\t\t\t\tconst material = data.materials[j];\n\n\t\t\t\t\t\t\tif (cache[material.uuid] === undefined) {\n\t\t\t\t\t\t\t\tcache[material.uuid] = loader.parse(material);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push(cache[material.uuid]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = array;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (cache[data.uuid] === undefined) {\n\t\t\t\t\t\t\tcache[data.uuid] = loader.parse(data);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = cache[data.uuid];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn materials;\n\t\t}\n\n\t\tparseAnimations(json) {\n\t\t\tconst animations = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0; i < json.length; i++) {\n\t\t\t\t\tconst data = json[i];\n\t\t\t\t\tconst clip = AnimationClip.parse(data);\n\t\t\t\t\tanimations[clip.uuid] = clip;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\n\t\tparseImages(json, onLoad) {\n\t\t\tconst scope = this;\n\t\t\tconst images = {};\n\t\t\tlet loader;\n\n\t\t\tfunction loadImage(url) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\treturn loader.load(url, function () {\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, undefined, function () {\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction deserializeImage(image) {\n\t\t\t\tif (typeof image === 'string') {\n\t\t\t\t\tconst url = image;\n\t\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n\t\t\t\t\treturn loadImage(path);\n\t\t\t\t} else {\n\t\t\t\t\tif (image.data) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: getTypedArray(image.type, image.data),\n\t\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\t\theight: image.height\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json !== undefined && json.length > 0) {\n\t\t\t\tconst manager = new LoadingManager(onLoad);\n\t\t\t\tloader = new ImageLoader(manager);\n\t\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\n\t\t\t\tfor (let i = 0, il = json.length; i < il; i++) {\n\t\t\t\t\tconst image = json[i];\n\t\t\t\t\tconst url = image.url;\n\n\t\t\t\t\tif (Array.isArray(url)) {\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\t\t\t\t\t\timages[image.uuid] = [];\n\n\t\t\t\t\t\tfor (let j = 0, jl = url.length; j < jl; j++) {\n\t\t\t\t\t\t\tconst currentUrl = url[j];\n\t\t\t\t\t\t\tconst deserializedImage = deserializeImage(currentUrl);\n\n\t\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\t\tif (deserializedImage instanceof HTMLImageElement) {\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(deserializedImage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// load single image\n\t\t\t\t\t\tconst deserializedImage = deserializeImage(image.url);\n\n\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\timages[image.uuid] = deserializedImage;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn images;\n\t\t}\n\n\t\tparseTextures(json, images) {\n\t\t\tfunction parseConstant(value, type) {\n\t\t\t\tif (typeof value === 'number') return value;\n\t\t\t\tconsole.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n\t\t\t\treturn type[value];\n\t\t\t}\n\n\t\t\tconst textures = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tif (data.image === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (images[data.image] === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined image', data.image);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet texture;\n\t\t\t\t\tconst image = images[data.image];\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\ttexture = new CubeTexture(image);\n\t\t\t\t\t\tif (image.length === 6) texture.needsUpdate = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (image && image.data) {\n\t\t\t\t\t\t\ttexture = new DataTexture(image.data, image.width, image.height);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexture = new Texture(image);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (image) texture.needsUpdate = true; // textures can have undefined image data\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) texture.name = data.name;\n\t\t\t\t\tif (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n\t\t\t\t\tif (data.offset !== undefined) texture.offset.fromArray(data.offset);\n\t\t\t\t\tif (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n\t\t\t\t\tif (data.center !== undefined) texture.center.fromArray(data.center);\n\t\t\t\t\tif (data.rotation !== undefined) texture.rotation = data.rotation;\n\n\t\t\t\t\tif (data.wrap !== undefined) {\n\t\t\t\t\t\ttexture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n\t\t\t\t\t\ttexture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.format !== undefined) texture.format = data.format;\n\t\t\t\t\tif (data.type !== undefined) texture.type = data.type;\n\t\t\t\t\tif (data.encoding !== undefined) texture.encoding = data.encoding;\n\t\t\t\t\tif (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n\t\t\t\t\tif (data.flipY !== undefined) texture.flipY = data.flipY;\n\t\t\t\t\tif (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\t\tif (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\t\ttextures[data.uuid] = texture;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn textures;\n\t\t}\n\n\t\tparseObject(data, geometries, materials, animations) {\n\t\t\tlet object;\n\n\t\t\tfunction getGeometry(name) {\n\t\t\t\tif (geometries[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined geometry', name);\n\t\t\t\t}\n\n\t\t\t\treturn geometries[name];\n\t\t\t}\n\n\t\t\tfunction getMaterial(name) {\n\t\t\t\tif (name === undefined) return undefined;\n\n\t\t\t\tif (Array.isArray(name)) {\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor (let i = 0, l = name.length; i < l; i++) {\n\t\t\t\t\t\tconst uuid = name[i];\n\n\t\t\t\t\t\tif (materials[uuid] === undefined) {\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', uuid);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push(materials[uuid]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\t\t\t\t}\n\n\t\t\t\tif (materials[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', name);\n\t\t\t\t}\n\n\t\t\t\treturn materials[name];\n\t\t\t}\n\n\t\t\tlet geometry, material;\n\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'Scene':\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif (data.background !== undefined) {\n\t\t\t\t\t\tif (Number.isInteger(data.background)) {\n\t\t\t\t\t\t\tobject.background = new Color(data.background);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.fog !== undefined) {\n\t\t\t\t\t\tif (data.fog.type === 'Fog') {\n\t\t\t\t\t\t\tobject.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n\t\t\t\t\t\t} else if (data.fog.type === 'FogExp2') {\n\t\t\t\t\t\t\tobject.fog = new FogExp2(data.fog.color, data.fog.density);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\t\t\t\t\tobject = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n\t\t\t\t\tif (data.focus !== undefined) object.focus = data.focus;\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\t\t\t\t\tobject = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\t\t\t\t\tobject = new AmbientLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tobject = new DirectionalLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tobject = new PointLight(data.color, data.intensity, data.distance, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tobject = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tobject = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tobject = new HemisphereLight(data.color, data.groundColor, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\t\t\t\t\tobject = new LightProbe().fromJSON(data);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new SkinnedMesh(geometry, material);\n\t\t\t\t\tif (data.bindMode !== undefined) object.bindMode = data.bindMode;\n\t\t\t\t\tif (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n\t\t\t\t\tif (data.skeleton !== undefined) object.skeleton = data.skeleton;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new Mesh(geometry, material);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tconst count = data.count;\n\t\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\t\tconst instanceColor = data.instanceColor;\n\t\t\t\t\tobject = new InstancedMesh(geometry, material, count);\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);\n\t\t\t\t\tif (instanceColor !== undefined) object.instanceColor = new BufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\t\t\t\t\tobject = new LOD();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\t\t\t\t\tobject = new Line(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\t\t\t\t\tobject = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\t\t\t\t\tobject = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\t\t\t\t\tobject = new Points(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\t\t\t\t\tobject = new Sprite(getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\t\t\t\t\tobject = new Group();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Bone':\n\t\t\t\t\tobject = new Bone();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tobject = new Object3D();\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\t\t\tif (data.name !== undefined) object.name = data.name;\n\n\t\t\tif (data.matrix !== undefined) {\n\t\t\t\tobject.matrix.fromArray(data.matrix);\n\t\t\t\tif (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\t\tif (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n\t\t\t} else {\n\t\t\t\tif (data.position !== undefined) object.position.fromArray(data.position);\n\t\t\t\tif (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n\t\t\t\tif (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n\t\t\t\tif (data.scale !== undefined) object.scale.fromArray(data.scale);\n\t\t\t}\n\n\t\t\tif (data.castShadow !== undefined) object.castShadow = data.castShadow;\n\t\t\tif (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif (data.shadow) {\n\t\t\t\tif (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\t\tif (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n\t\t\t\tif (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n\t\t\t}\n\n\t\t\tif (data.visible !== undefined) object.visible = data.visible;\n\t\t\tif (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n\t\t\tif (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n\t\t\tif (data.userData !== undefined) object.userData = data.userData;\n\t\t\tif (data.layers !== undefined) object.layers.mask = data.layers;\n\n\t\t\tif (data.children !== undefined) {\n\t\t\t\tconst children = data.children;\n\n\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\tobject.add(this.parseObject(children[i], geometries, materials, animations));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.animations !== undefined) {\n\t\t\t\tconst objectAnimations = data.animations;\n\n\t\t\t\tfor (let i = 0; i < objectAnimations.length; i++) {\n\t\t\t\t\tconst uuid = objectAnimations[i];\n\t\t\t\t\tobject.animations.push(animations[uuid]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.type === 'LOD') {\n\t\t\t\tif (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n\t\t\t\tconst levels = data.levels;\n\n\t\t\t\tfor (let l = 0; l < levels.length; l++) {\n\t\t\t\t\tconst level = levels[l];\n\t\t\t\t\tconst child = object.getObjectByProperty('uuid', level.object);\n\n\t\t\t\t\tif (child !== undefined) {\n\t\t\t\t\t\tobject.addLevel(child, level.distance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn object;\n\t\t}\n\n\t\tbindSkeletons(object, skeletons) {\n\t\t\tif (Object.keys(skeletons).length === 0) return;\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n\t\t\t\t\tconst skeleton = skeletons[child.skeleton];\n\n\t\t\t\t\tif (skeleton === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchild.bind(skeleton, child.bindMatrix);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t/* DEPRECATED */\n\n\n\t\tsetTexturePath(value) {\n\t\t\tconsole.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');\n\t\t\treturn this.setResourcePath(value);\n\t\t}\n\n\t}\n\n\tconst TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\tconst TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\tconst TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\tclass ImageBitmapLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\n\t\t\tif (typeof createImageBitmap === 'undefined') {\n\t\t\t\tconsole.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n\t\t\t}\n\n\t\t\tif (typeof fetch === 'undefined') {\n\t\t\t\tconsole.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n\t\t\t}\n\n\t\t\tthis.options = {\n\t\t\t\tpremultiplyAlpha: 'none'\n\t\t\t};\n\t\t}\n\n\t\tsetOptions(options) {\n\t\t\tthis.options = options;\n\t\t\treturn this;\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tconst fetchOptions = {};\n\t\t\tfetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n\t\t\tfetchOptions.headers = this.requestHeader;\n\t\t\tfetch(url, fetchOptions).then(function (res) {\n\t\t\t\treturn res.blob();\n\t\t\t}).then(function (blob) {\n\t\t\t\treturn createImageBitmap(blob, Object.assign(scope.options, {\n\t\t\t\t\tcolorSpaceConversion: 'none'\n\t\t\t\t}));\n\t\t\t}).then(function (imageBitmap) {\n\t\t\t\tCache.add(url, imageBitmap);\n\t\t\t\tif (onLoad) onLoad(imageBitmap);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}).catch(function (e) {\n\t\t\t\tif (onError) onError(e);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t});\n\t\t\tscope.manager.itemStart(url);\n\t\t}\n\n\t}\n\n\tImageBitmapLoader.prototype.isImageBitmapLoader = true;\n\n\tclass ShapePath {\n\t\tconstructor() {\n\t\t\tthis.type = 'ShapePath';\n\t\t\tthis.color = new Color();\n\t\t\tthis.subPaths = [];\n\t\t\tthis.currentPath = null;\n\t\t}\n\n\t\tmoveTo(x, y) {\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tlineTo(x, y) {\n\t\t\tthis.currentPath.lineTo(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tquadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tthis.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tbezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tthis.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tsplineThru(pts) {\n\t\t\tthis.currentPath.splineThru(pts);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoShapes(isCCW, noHoles) {\n\t\t\tfunction toShapesNoHoles(inSubpaths) {\n\t\t\t\tconst shapes = [];\n\n\t\t\t\tfor (let i = 0, l = inSubpaths.length; i < l; i++) {\n\t\t\t\t\tconst tmpPath = inSubpaths[i];\n\t\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\t\tshapes.push(tmpShape);\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon(inPt, inPolygon) {\n\t\t\t\tconst polyLen = inPolygon.length; // inPt on polygon contour => immediate success\t\tor\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//\twith the horizontal line through inPt, left of inPt\n\t\t\t\t//\tnot counting lowerY endpoints of edges and whole edges on that line\n\n\t\t\t\tlet inside = false;\n\n\t\t\t\tfor (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n\t\t\t\t\tlet edgeLowPt = inPolygon[p];\n\t\t\t\t\tlet edgeHighPt = inPolygon[q];\n\t\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif (Math.abs(edgeDy) > Number.EPSILON) {\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif (edgeDy < 0) {\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[q];\n\t\t\t\t\t\t\tedgeDx = -edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[p];\n\t\t\t\t\t\t\tedgeDy = -edgeDy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n\t\t\t\t\t\tif (inPt.y === edgeLowPt.y) {\n\t\t\t\t\t\t\tif (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n\t\t\t\t\t\t\tif (perpEdge === 0) return true; // inPt is on contour ?\n\n\t\t\t\t\t\t\tif (perpEdge < 0) continue;\n\t\t\t\t\t\t\tinside = !inside; // true intersection left of inPt\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif (inPt.y !== edgeLowPt.y) continue; // parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\n\t\t\t\t\t\tif (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn inside;\n\t\t\t}\n\n\t\t\tconst isClockWise = ShapeUtils.isClockWise;\n\t\t\tconst subPaths = this.subPaths;\n\t\t\tif (subPaths.length === 0) return [];\n\t\t\tif (noHoles === true) return toShapesNoHoles(subPaths);\n\t\t\tlet solid, tmpPath, tmpShape;\n\t\t\tconst shapes = [];\n\n\t\t\tif (subPaths.length === 1) {\n\t\t\t\ttmpPath = subPaths[0];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tlet holesFirst = !isClockWise(subPaths[0].getPoints());\n\t\t\tholesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n\t\t\tconst betterShapeHoles = [];\n\t\t\tconst newShapes = [];\n\t\t\tlet newShapeHoles = [];\n\t\t\tlet mainIdx = 0;\n\t\t\tlet tmpPoints;\n\t\t\tnewShapes[mainIdx] = undefined;\n\t\t\tnewShapeHoles[mainIdx] = [];\n\n\t\t\tfor (let i = 0, l = subPaths.length; i < l; i++) {\n\t\t\t\ttmpPath = subPaths[i];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise(tmpPoints);\n\t\t\t\tsolid = isCCW ? !solid : solid;\n\n\t\t\t\tif (solid) {\n\t\t\t\t\tif (!holesFirst && newShapes[mainIdx]) mainIdx++;\n\t\t\t\t\tnewShapes[mainIdx] = {\n\t\t\t\t\t\ts: new Shape(),\n\t\t\t\t\t\tp: tmpPoints\n\t\t\t\t\t};\n\t\t\t\t\tnewShapes[mainIdx].s.curves = tmpPath.curves;\n\t\t\t\t\tif (holesFirst) mainIdx++;\n\t\t\t\t\tnewShapeHoles[mainIdx] = []; //console.log('cw', i);\n\t\t\t\t} else {\n\t\t\t\t\tnewShapeHoles[mainIdx].push({\n\t\t\t\t\t\th: tmpPath,\n\t\t\t\t\t\tp: tmpPoints[0]\n\t\t\t\t\t}); //console.log('ccw', i);\n\t\t\t\t}\n\t\t\t} // only Holes? -> probably all Shapes with wrong orientation\n\n\n\t\t\tif (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n\t\t\tif (newShapes.length > 1) {\n\t\t\t\tlet ambiguous = false;\n\t\t\t\tconst toChange = [];\n\n\t\t\t\tfor (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tbetterShapeHoles[sIdx] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tconst sho = newShapeHoles[sIdx];\n\n\t\t\t\t\tfor (let hIdx = 0; hIdx < sho.length; hIdx++) {\n\t\t\t\t\t\tconst ho = sho[hIdx];\n\t\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\t\tfor (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n\t\t\t\t\t\t\tif (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n\t\t\t\t\t\t\t\tif (sIdx !== s2Idx) toChange.push({\n\t\t\t\t\t\t\t\t\tfroms: sIdx,\n\t\t\t\t\t\t\t\t\ttos: s2Idx,\n\t\t\t\t\t\t\t\t\thole: hIdx\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[s2Idx].push(ho);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\tbetterShapeHoles[sIdx].push(ho);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // console.log(\"ambiguous: \", ambiguous);\n\n\n\t\t\t\tif (toChange.length > 0) {\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif (!ambiguous) newShapeHoles = betterShapeHoles;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet tmpHoles;\n\n\t\t\tfor (let i = 0, il = newShapes.length; i < il; i++) {\n\t\t\t\ttmpShape = newShapes[i].s;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\ttmpHoles = newShapeHoles[i];\n\n\t\t\t\tfor (let j = 0, jl = tmpHoles.length; j < jl; j++) {\n\t\t\t\t\ttmpShape.holes.push(tmpHoles[j].h);\n\t\t\t\t}\n\t\t\t} //console.log(\"shape\", shapes);\n\n\n\t\t\treturn shapes;\n\t\t}\n\n\t}\n\n\tclass Font {\n\t\tconstructor(data) {\n\t\t\tthis.type = 'Font';\n\t\t\tthis.data = data;\n\t\t}\n\n\t\tgenerateShapes(text, size = 100) {\n\t\t\tconst shapes = [];\n\t\t\tconst paths = createPaths(text, size, this.data);\n\n\t\t\tfor (let p = 0, pl = paths.length; p < pl; p++) {\n\t\t\t\tArray.prototype.push.apply(shapes, paths[p].toShapes());\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t}\n\n\t}\n\n\tfunction createPaths(text, size, data) {\n\t\tconst chars = Array.from(text);\n\t\tconst scale = size / data.resolution;\n\t\tconst line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n\t\tconst paths = [];\n\t\tlet offsetX = 0,\n\t\t\t\toffsetY = 0;\n\n\t\tfor (let i = 0; i < chars.length; i++) {\n\t\t\tconst char = chars[i];\n\n\t\t\tif (char === '\\n') {\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\t\t\t} else {\n\t\t\t\tconst ret = createPath(char, scale, offsetX, offsetY, data);\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push(ret.path);\n\t\t\t}\n\t\t}\n\n\t\treturn paths;\n\t}\n\n\tfunction createPath(char, scale, offsetX, offsetY, data) {\n\t\tconst glyph = data.glyphs[char] || data.glyphs['?'];\n\n\t\tif (!glyph) {\n\t\t\tconsole.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst path = new ShapePath();\n\t\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif (glyph.o) {\n\t\t\tconst outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n\t\t\tfor (let i = 0, l = outline.length; i < l;) {\n\t\t\t\tconst action = outline[i++];\n\n\t\t\t\tswitch (action) {\n\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t// moveTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.moveTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t// lineTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.lineTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\t// quadraticCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t// bezierCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\toffsetX: glyph.ha * scale,\n\t\t\tpath: path\n\t\t};\n\t}\n\n\tFont.prototype.isFont = true;\n\n\tclass FontLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tlet json;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n\t\t\t\t\tjson = JSON.parse(text.substring(65, text.length - 2));\n\t\t\t\t}\n\n\t\t\t\tconst font = scope.parse(json);\n\t\t\t\tif (onLoad) onLoad(font);\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\treturn new Font(json);\n\t\t}\n\n\t}\n\n\tlet _context;\n\n\tconst AudioContext = {\n\t\tgetContext: function () {\n\t\t\tif (_context === undefined) {\n\t\t\t\t_context = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\t}\n\n\t\t\treturn _context;\n\t\t},\n\t\tsetContext: function (value) {\n\t\t\t_context = value;\n\t\t}\n\t};\n\n\tclass AudioLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\ttry {\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tconst bufferCopy = buffer.slice(0);\n\t\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData(bufferCopy, function (audioBuffer) {\n\t\t\t\t\t\tonLoad(audioBuffer);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t}\n\n\tclass HemisphereLightProbe extends LightProbe {\n\t\tconstructor(skyColor, groundColor, intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tconst color1 = new Color().set(skyColor);\n\t\t\tconst color2 = new Color().set(groundColor);\n\t\t\tconst sky = new Vector3(color1.r, color1.g, color1.b);\n\t\t\tconst ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\n\t\t\tconst c0 = Math.sqrt(Math.PI);\n\t\t\tconst c1 = c0 * Math.sqrt(0.75);\n\t\t\tthis.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);\n\t\t\tthis.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);\n\t\t}\n\n\t}\n\n\tHemisphereLightProbe.prototype.isHemisphereLightProbe = true;\n\n\tclass AmbientLightProbe extends LightProbe {\n\t\tconstructor(color, intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tconst color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\n\t\t\tthis.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));\n\t\t}\n\n\t}\n\n\tAmbientLightProbe.prototype.isAmbientLightProbe = true;\n\n\tconst _eyeRight = /*@__PURE__*/new Matrix4();\n\n\tconst _eyeLeft = /*@__PURE__*/new Matrix4();\n\n\tclass StereoCamera {\n\t\tconstructor() {\n\t\t\tthis.type = 'StereoCamera';\n\t\t\tthis.aspect = 1;\n\t\t\tthis.eyeSep = 0.064;\n\t\t\tthis.cameraL = new PerspectiveCamera();\n\t\t\tthis.cameraL.layers.enable(1);\n\t\t\tthis.cameraL.matrixAutoUpdate = false;\n\t\t\tthis.cameraR = new PerspectiveCamera();\n\t\t\tthis.cameraR.layers.enable(2);\n\t\t\tthis.cameraR.matrixAutoUpdate = false;\n\t\t\tthis._cache = {\n\t\t\t\tfocus: null,\n\t\t\t\tfov: null,\n\t\t\t\taspect: null,\n\t\t\t\tnear: null,\n\t\t\t\tfar: null,\n\t\t\t\tzoom: null,\n\t\t\t\teyeSep: null\n\t\t\t};\n\t\t}\n\n\t\tupdate(camera) {\n\t\t\tconst cache = this._cache;\n\t\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif (needsUpdate) {\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tconst projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tconst ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;\n\t\t\t\tlet xmin, xmax; // translate xOffset\n\n\t\t\t\t_eyeLeft.elements[12] = -eyeSepHalf;\n\t\t\t\t_eyeRight.elements[12] = eyeSepHalf; // for left eye\n\n\t\t\t\txmin = -ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n\t\t\t\txmin = -ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraR.projectionMatrix.copy(projectionMatrix);\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n\t\t\tthis.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n\t\t}\n\n\t}\n\n\tclass Clock {\n\t\tconstructor(autoStart = true) {\n\t\t\tthis.autoStart = autoStart;\n\t\t\tthis.startTime = 0;\n\t\t\tthis.oldTime = 0;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = false;\n\t\t}\n\n\t\tstart() {\n\t\t\tthis.startTime = now();\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\t\t}\n\n\t\tstop() {\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\t\t}\n\n\t\tgetElapsedTime() {\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\t\t}\n\n\t\tgetDelta() {\n\t\t\tlet diff = 0;\n\n\t\t\tif (this.autoStart && !this.running) {\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (this.running) {\n\t\t\t\tconst newTime = now();\n\t\t\t\tdiff = (newTime - this.oldTime) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\t\t\t\tthis.elapsedTime += diff;\n\t\t\t}\n\n\t\t\treturn diff;\n\t\t}\n\n\t}\n\n\tfunction now() {\n\t\treturn (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\n\t}\n\n\tconst _position$1 = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$1 = /*@__PURE__*/new Quaternion();\n\n\tconst _scale$1 = /*@__PURE__*/new Vector3();\n\n\tconst _orientation$1 = /*@__PURE__*/new Vector3();\n\n\tclass AudioListener extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'AudioListener';\n\t\t\tthis.context = AudioContext.getContext();\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect(this.context.destination);\n\t\t\tthis.filter = null;\n\t\t\tthis.timeDelta = 0; // private\n\n\t\t\tthis._clock = new Clock();\n\t\t}\n\n\t\tgetInput() {\n\t\t\treturn this.gain;\n\t\t}\n\n\t\tremoveFilter() {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t\tthis.gain.connect(this.context.destination);\n\t\t\t\tthis.filter = null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetFilter() {\n\t\t\treturn this.filter;\n\t\t}\n\n\t\tsetFilter(value) {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t} else {\n\t\t\t\tthis.gain.disconnect(this.context.destination);\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect(this.filter);\n\t\t\tthis.filter.connect(this.context.destination);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMasterVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\n\t\tsetMasterVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tconst listener = this.context.listener;\n\t\t\tconst up = this.up;\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\t\t\tthis.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);\n\n\t\t\t_orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);\n\n\t\t\tif (listener.positionX) {\n\t\t\t\t// code path for Chrome (see #14393)\n\t\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\t\t\t\tlistener.positionX.linearRampToValueAtTime(_position$1.x, endTime);\n\t\t\t\tlistener.positionY.linearRampToValueAtTime(_position$1.y, endTime);\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n\t\t\t\tlistener.upX.linearRampToValueAtTime(up.x, endTime);\n\t\t\t\tlistener.upY.linearRampToValueAtTime(up.y, endTime);\n\t\t\t\tlistener.upZ.linearRampToValueAtTime(up.z, endTime);\n\t\t\t} else {\n\t\t\t\tlistener.setPosition(_position$1.x, _position$1.y, _position$1.z);\n\t\t\t\tlistener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass Audio extends Object3D {\n\t\tconstructor(listener) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Audio';\n\t\t\tthis.listener = listener;\n\t\t\tthis.context = listener.context;\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect(listener.getInput());\n\t\t\tthis.autoplay = false;\n\t\t\tthis.buffer = null;\n\t\t\tthis.detune = 0;\n\t\t\tthis.loop = false;\n\t\t\tthis.loopStart = 0;\n\t\t\tthis.loopEnd = 0;\n\t\t\tthis.offset = 0;\n\t\t\tthis.duration = undefined;\n\t\t\tthis.playbackRate = 1;\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.hasPlaybackControl = true;\n\t\t\tthis.source = null;\n\t\t\tthis.sourceType = 'empty';\n\t\t\tthis._startedAt = 0;\n\t\t\tthis._progress = 0;\n\t\t\tthis._connected = false;\n\t\t\tthis.filters = [];\n\t\t}\n\n\t\tgetOutput() {\n\t\t\treturn this.gain;\n\t\t}\n\n\t\tsetNodeSource(audioNode) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMediaElementSource(mediaElement) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource(mediaElement);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMediaStreamSource(mediaStream) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource(mediaStream);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetBuffer(audioBuffer) {\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\t\t\tif (this.autoplay) this.play();\n\t\t\treturn this;\n\t\t}\n\n\t\tplay(delay = 0) {\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tconsole.warn('THREE.Audio: Audio is already playing.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\t\t\tconst source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind(this);\n\t\t\tsource.start(this._startedAt, this._progress + this.offset, this.duration);\n\t\t\tthis.isPlaying = true;\n\t\t\tthis.source = source;\n\t\t\tthis.setDetune(this.detune);\n\t\t\tthis.setPlaybackRate(this.playbackRate);\n\t\t\treturn this.connect();\n\t\t}\n\n\t\tpause() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\t// update current progress\n\t\t\t\tthis._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n\n\t\t\t\tif (this.loop === true) {\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\t\t\t\t\tthis._progress = this._progress % (this.duration || this.buffer.duration);\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\t\t\t\tthis.isPlaying = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tstop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\t\t\treturn this;\n\t\t}\n\n\t\tconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.connect(this.filters[0]);\n\n\t\t\t\tfor (let i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].connect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].connect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.connect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = true;\n\t\t\treturn this;\n\t\t}\n\n\t\tdisconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.disconnect(this.filters[0]);\n\n\t\t\t\tfor (let i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].disconnect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].disconnect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.disconnect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = false;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetFilters() {\n\t\t\treturn this.filters;\n\t\t}\n\n\t\tsetFilters(value) {\n\t\t\tif (!value) value = [];\n\n\t\t\tif (this._connected === true) {\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value.slice();\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.filters = value.slice();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDetune(value) {\n\t\t\tthis.detune = value;\n\t\t\tif (this.source.detune === undefined) return; // only set detune when available\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetDetune() {\n\t\t\treturn this.detune;\n\t\t}\n\n\t\tgetFilter() {\n\t\t\treturn this.getFilters()[0];\n\t\t}\n\n\t\tsetFilter(filter) {\n\t\t\treturn this.setFilters(filter ? [filter] : []);\n\t\t}\n\n\t\tsetPlaybackRate(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetPlaybackRate() {\n\t\t\treturn this.playbackRate;\n\t\t}\n\n\t\tonEnded() {\n\t\t\tthis.isPlaying = false;\n\t\t}\n\n\t\tgetLoop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn this.loop;\n\t\t}\n\n\t\tsetLoop(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.loop = this.loop;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoopStart(value) {\n\t\t\tthis.loopStart = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoopEnd(value) {\n\t\t\tthis.loopEnd = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\n\t\tsetVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tconst _position = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion = /*@__PURE__*/new Quaternion();\n\n\tconst _scale = /*@__PURE__*/new Vector3();\n\n\tconst _orientation = /*@__PURE__*/new Vector3();\n\n\tclass PositionalAudio extends Audio {\n\t\tconstructor(listener) {\n\t\t\tsuper(listener);\n\t\t\tthis.panner = this.context.createPanner();\n\t\t\tthis.panner.panningModel = 'HRTF';\n\t\t\tthis.panner.connect(this.gain);\n\t\t}\n\n\t\tgetOutput() {\n\t\t\treturn this.panner;\n\t\t}\n\n\t\tgetRefDistance() {\n\t\t\treturn this.panner.refDistance;\n\t\t}\n\n\t\tsetRefDistance(value) {\n\t\t\tthis.panner.refDistance = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetRolloffFactor() {\n\t\t\treturn this.panner.rolloffFactor;\n\t\t}\n\n\t\tsetRolloffFactor(value) {\n\t\t\tthis.panner.rolloffFactor = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetDistanceModel() {\n\t\t\treturn this.panner.distanceModel;\n\t\t}\n\n\t\tsetDistanceModel(value) {\n\t\t\tthis.panner.distanceModel = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMaxDistance() {\n\t\t\treturn this.panner.maxDistance;\n\t\t}\n\n\t\tsetMaxDistance(value) {\n\t\t\tthis.panner.maxDistance = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tif (this.hasPlaybackControl === true && this.isPlaying === false) return;\n\t\t\tthis.matrixWorld.decompose(_position, _quaternion, _scale);\n\n\t\t\t_orientation.set(0, 0, 1).applyQuaternion(_quaternion);\n\n\t\t\tconst panner = this.panner;\n\n\t\t\tif (panner.positionX) {\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\t\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\t\t\t\tpanner.positionX.linearRampToValueAtTime(_position.x, endTime);\n\t\t\t\tpanner.positionY.linearRampToValueAtTime(_position.y, endTime);\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime(_position.z, endTime);\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);\n\t\t\t} else {\n\t\t\t\tpanner.setPosition(_position.x, _position.y, _position.z);\n\t\t\t\tpanner.setOrientation(_orientation.x, _orientation.y, _orientation.z);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass AudioAnalyser {\n\t\tconstructor(audio, fftSize = 2048) {\n\t\t\tthis.analyser = audio.context.createAnalyser();\n\t\t\tthis.analyser.fftSize = fftSize;\n\t\t\tthis.data = new Uint8Array(this.analyser.frequencyBinCount);\n\t\t\taudio.getOutput().connect(this.analyser);\n\t\t}\n\n\t\tgetFrequencyData() {\n\t\t\tthis.analyser.getByteFrequencyData(this.data);\n\t\t\treturn this.data;\n\t\t}\n\n\t\tgetAverageFrequency() {\n\t\t\tlet value = 0;\n\t\t\tconst data = this.getFrequencyData();\n\n\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\tvalue += data[i];\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\t\t}\n\n\t}\n\n\tclass PropertyMixer {\n\t\tconstructor(binding, typeName, valueSize) {\n\t\t\tthis.binding = binding;\n\t\t\tthis.valueSize = valueSize;\n\t\t\tlet mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t\t//\n\t\t\t// interpolators can use .buffer as their .result\n\t\t\t// the data then goes to 'incoming'\n\t\t\t//\n\t\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t\t// the cumulative result and are compared to detect\n\t\t\t// changes\n\t\t\t//\n\t\t\t// 'orig' stores the original state of the property\n\t\t\t//\n\t\t\t// 'add' is used for additive cumulative results\n\t\t\t//\n\t\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t\t// to store intermediate quaternion multiplication results\n\n\t\t\tswitch (typeName) {\n\t\t\t\tcase 'quaternion':\n\t\t\t\t\tmixFunction = this._slerp;\n\t\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 6);\n\t\t\t\t\tthis._workIndex = 5;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'string':\n\t\t\t\tcase 'bool':\n\t\t\t\t\tmixFunction = this._select; // Use the regular mix function and for additive on these types,\n\t\t\t\t\t// additive is not relevant for non-numeric types\n\n\t\t\t\t\tmixFunctionAdditive = this._select;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\t\t\t\t\tthis.buffer = new Array(valueSize * 5);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmixFunction = this._lerp;\n\t\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 5);\n\t\t\t}\n\n\t\t\tthis._mixBufferRegion = mixFunction;\n\t\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\t\tthis._setIdentity = setIdentity;\n\t\t\tthis._origIndex = 3;\n\t\t\tthis._addIndex = 4;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t\tthis.useCount = 0;\n\t\t\tthis.referenceCount = 0;\n\t\t} // accumulate data in the 'incoming' region into 'accu<i>'\n\n\n\t\taccumulate(accuIndex, weight) {\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = accuIndex * stride + stride;\n\t\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\t\tif (currentWeight === 0) {\n\t\t\t\t// accuN := incoming * weight\n\t\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[offset + i] = buffer[i];\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\t\t\t} else {\n\t\t\t\t// accuN := accuN + incoming * weight\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tconst mix = weight / currentWeight;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, 0, mix, stride);\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\t\t} // accumulate data in the 'incoming' region into 'add'\n\n\n\t\taccumulateAdditive(weight) {\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif (this.cumulativeWeightAdditive === 0) {\n\t\t\t\t// add = identity\n\t\t\t\tthis._setIdentity();\n\t\t\t} // add := add + incoming * weight\n\n\n\t\t\tthis._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\t\t} // apply the state of 'accu<i>' to the binding when accus differ\n\n\n\t\tapply(accuIndex) {\n\t\t\tconst stride = this.valueSize,\n\t\t\t\t\t\tbuffer = this.buffer,\n\t\t\t\t\t\toffset = accuIndex * stride + stride,\n\t\t\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\t\t\t\t\t\tbinding = this.binding;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif (weight < 1) {\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n\t\t\t}\n\n\t\t\tif (weightAdditive > 0) {\n\t\t\t\t// accuN := accuN + additive accuN\n\t\t\t\tthis._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n\t\t\t}\n\n\t\t\tfor (let i = stride, e = stride + stride; i !== e; ++i) {\n\t\t\t\tif (buffer[i] !== buffer[i + stride]) {\n\t\t\t\t\t// value has changed -> update scene graph\n\t\t\t\t\tbinding.setValue(buffer, offset);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} // remember the state of the bound property and copy it to both accus\n\n\n\t\tsaveOriginalState() {\n\t\t\tconst binding = this.binding;\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\t\t\tbinding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n\t\t\tfor (let i = stride, e = originalValueOffset; i !== e; ++i) {\n\t\t\t\tbuffer[i] = buffer[originalValueOffset + i % stride];\n\t\t\t} // Add to identity for additive\n\n\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t} // apply the state previously taken via 'saveOriginalState' to the binding\n\n\n\t\trestoreOriginalState() {\n\t\t\tconst originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue(this.buffer, originalValueOffset);\n\t\t}\n\n\t\t_setAdditiveIdentityNumeric() {\n\t\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\tthis.buffer[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t_setAdditiveIdentityQuaternion() {\n\t\t\tthis._setAdditiveIdentityNumeric();\n\n\t\t\tthis.buffer[this._addIndex * this.valueSize + 3] = 1;\n\t\t}\n\n\t\t_setAdditiveIdentityOther() {\n\t\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor (let i = 0; i < this.valueSize; i++) {\n\t\t\t\tthis.buffer[targetIndex + i] = this.buffer[startIndex + i];\n\t\t\t}\n\t\t} // mix functions\n\n\n\t\t_select(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tif (t >= 0.5) {\n\t\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[dstOffset + i] = buffer[srcOffset + i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_slerp(buffer, dstOffset, srcOffset, t) {\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n\t\t}\n\n\t\t_slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tconst workOffset = this._workIndex * stride; // Store result in intermediate buffer offset\n\n\t\t\tQuaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result\n\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n\t\t}\n\n\t\t_lerp(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tconst s = 1 - t;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tconst j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\n\t\t_lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tconst j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n\tconst _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\n\n\tconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\n\tconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\n\n\tconst _directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\n\n\tconst _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\n\n\tconst _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\n\n\tconst _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\n\n\tconst _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\n\n\tconst _supportedObjectNames = ['material', 'materials', 'bones'];\n\n\tclass Composite {\n\t\tconstructor(targetGroup, path, optionalParsedPath) {\n\t\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n\t\t\tthis._targetGroup = targetGroup;\n\t\t\tthis._bindings = targetGroup.subscribe_(path, parsedPath);\n\t\t}\n\n\t\tgetValue(array, offset) {\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t\tbinding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n\t\t\tif (binding !== undefined) binding.getValue(array, offset);\n\t\t}\n\n\t\tsetValue(array, offset) {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].setValue(array, offset);\n\t\t\t}\n\t\t}\n\n\t\tbind() {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].bind();\n\t\t\t}\n\t\t}\n\n\t\tunbind() {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].unbind();\n\t\t\t}\n\t\t}\n\n\t} // Note: This class uses a State pattern on a per-method basis:\n\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t// prototype version of these methods with one that represents\n\t// the bound state. When the property is not found, the methods\n\t// become no-ops.\n\n\n\tclass PropertyBinding {\n\t\tconstructor(rootNode, path, parsedPath) {\n\t\t\tthis.path = path;\n\t\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\t\t\tthis.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n\t\t\tthis.rootNode = rootNode; // initial state of these methods that calls 'bind'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\n\t\tstatic create(root, path, parsedPath) {\n\t\t\tif (!(root && root.isAnimationObjectGroup)) {\n\t\t\t\treturn new PropertyBinding(root, path, parsedPath);\n\t\t\t} else {\n\t\t\t\treturn new PropertyBinding.Composite(root, path, parsedPath);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\n\n\t\tstatic sanitizeNodeName(name) {\n\t\t\treturn name.replace(/\\s/g, '_').replace(_reservedRe, '');\n\t\t}\n\n\t\tstatic parseTrackName(trackName) {\n\t\t\tconst matches = _trackRe.exec(trackName);\n\n\t\t\tif (!matches) {\n\t\t\t\tthrow new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n\t\t\t}\n\n\t\t\tconst results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[2],\n\t\t\t\tobjectName: matches[3],\n\t\t\t\tobjectIndex: matches[4],\n\t\t\t\tpropertyName: matches[5],\n\t\t\t\t// required\n\t\t\t\tpropertyIndex: matches[6]\n\t\t\t};\n\t\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n\n\t\t\tif (lastDot !== undefined && lastDot !== -1) {\n\t\t\t\tconst objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\n\t\t\t\tif (_supportedObjectNames.indexOf(objectName) !== -1) {\n\t\t\t\t\tresults.nodeName = results.nodeName.substring(0, lastDot);\n\t\t\t\t\tresults.objectName = objectName;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (results.propertyName === null || results.propertyName.length === 0) {\n\t\t\t\tthrow new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t}\n\n\t\tstatic findNode(root, nodeName) {\n\t\t\tif (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n\t\t\t\treturn root;\n\t\t\t} // search into skeleton bones.\n\n\n\t\t\tif (root.skeleton) {\n\t\t\t\tconst bone = root.skeleton.getBoneByName(nodeName);\n\n\t\t\t\tif (bone !== undefined) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t} // search into node subtree.\n\n\n\t\t\tif (root.children) {\n\t\t\t\tconst searchNodeSubtree = function (children) {\n\t\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\t\tconst childNode = children[i];\n\n\t\t\t\t\t\tif (childNode.name === nodeName || childNode.uuid === nodeName) {\n\t\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst result = searchNodeSubtree(childNode.children);\n\t\t\t\t\t\tif (result) return result;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t};\n\n\t\t\t\tconst subTreeNode = searchNodeSubtree(root.children);\n\n\t\t\t\tif (subTreeNode) {\n\t\t\t\t\treturn subTreeNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} // these are used to \"bind\" a nonexistent property\n\n\n\t\t_getValue_unavailable() {}\n\n\t\t_setValue_unavailable() {} // Getters\n\n\n\t\t_getValue_direct(buffer, offset) {\n\t\t\tbuffer[offset] = this.node[this.propertyName];\n\t\t}\n\n\t\t_getValue_array(buffer, offset) {\n\t\t\tconst source = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = source.length; i !== n; ++i) {\n\t\t\t\tbuffer[offset++] = source[i];\n\t\t\t}\n\t\t}\n\n\t\t_getValue_arrayElement(buffer, offset) {\n\t\t\tbuffer[offset] = this.resolvedProperty[this.propertyIndex];\n\t\t}\n\n\t\t_getValue_toArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.toArray(buffer, offset);\n\t\t} // Direct\n\n\n\t\t_setValue_direct(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t}\n\n\t\t_setValue_direct_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // EntireArray\n\n\n\t\t_setValue_array(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\t\t}\n\n\t\t_setValue_array_setNeedsUpdate(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // ArrayElement\n\n\n\t\t_setValue_arrayElement(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t}\n\n\t\t_setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // HasToFromArray\n\n\n\t\t_setValue_fromArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t}\n\n\t\t_setValue_fromArray_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}\n\n\t\t_getValue_unbound(targetArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.getValue(targetArray, offset);\n\t\t}\n\n\t\t_setValue_unbound(sourceArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.setValue(sourceArray, offset);\n\t\t} // create getter / setter pair for a property in the scene graph\n\n\n\t\tbind() {\n\t\t\tlet targetObject = this.node;\n\t\t\tconst parsedPath = this.parsedPath;\n\t\t\tconst objectName = parsedPath.objectName;\n\t\t\tconst propertyName = parsedPath.propertyName;\n\t\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif (!targetObject) {\n\t\t\t\ttargetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n\t\t\t\tthis.node = targetObject;\n\t\t\t} // set fail state so we can just 'return' on error\n\n\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable; // ensure there is a value node\n\n\t\t\tif (!targetObject) {\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (objectName) {\n\t\t\t\tlet objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n\t\t\t\tswitch (objectName) {\n\t\t\t\t\tcase 'materials':\n\t\t\t\t\t\tif (!targetObject.material) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!targetObject.material.materials) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\t\t\t\t\t\tif (!targetObject.skeleton) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} // potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n\t\t\t\t\t\tfor (let i = 0; i < targetObject.length; i++) {\n\t\t\t\t\t\t\tif (targetObject[i].name === objectIndex) {\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (targetObject[objectName] === undefined) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[objectName];\n\t\t\t\t}\n\n\t\t\t\tif (objectIndex !== undefined) {\n\t\t\t\t\tif (targetObject[objectIndex] === undefined) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[objectIndex];\n\t\t\t\t}\n\t\t\t} // resolve property\n\n\n\t\t\tconst nodeProperty = targetObject[propertyName];\n\n\t\t\tif (nodeProperty === undefined) {\n\t\t\t\tconst nodeName = parsedPath.nodeName;\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n\t\t\t\treturn;\n\t\t\t} // determine versioning scheme\n\n\n\t\t\tlet versioning = this.Versioning.None;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif (targetObject.needsUpdate !== undefined) {\n\t\t\t\t// material\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n\t\t\t\t// node transform\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t} // determine how the property gets bound\n\n\n\t\t\tlet bindingType = this.BindingType.Direct;\n\n\t\t\tif (propertyIndex !== undefined) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\t\t\tif (propertyName === 'morphTargetInfluences') {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif (!targetObject.geometry) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (targetObject.geometry.isBufferGeometry) {\n\t\t\t\t\t\tif (!targetObject.geometry.morphAttributes) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\t\t\t} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else if (Array.isArray(nodeProperty)) {\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else {\n\t\t\t\tthis.propertyName = propertyName;\n\t\t\t} // select getter / setter\n\n\n\t\t\tthis.getValue = this.GetterByBindingType[bindingType];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n\t\t}\n\n\t\tunbind() {\n\t\t\tthis.node = null; // back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\n\t}\n\n\tPropertyBinding.Composite = Composite;\n\tPropertyBinding.prototype.BindingType = {\n\t\tDirect: 0,\n\t\tEntireArray: 1,\n\t\tArrayElement: 2,\n\t\tHasFromToArray: 3\n\t};\n\tPropertyBinding.prototype.Versioning = {\n\t\tNone: 0,\n\t\tNeedsUpdate: 1,\n\t\tMatrixWorldNeedsUpdate: 2\n\t};\n\tPropertyBinding.prototype.GetterByBindingType = [PropertyBinding.prototype._getValue_direct, PropertyBinding.prototype._getValue_array, PropertyBinding.prototype._getValue_arrayElement, PropertyBinding.prototype._getValue_toArray];\n\tPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[// Direct\n\tPropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [// EntireArray\n\tPropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [// ArrayElement\n\tPropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [// HasToFromArray\n\tPropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate, PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *\t- Add objects you would otherwise pass as 'root' to the\n\t *\t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t *\t- Instead pass this object as 'root'.\n\t *\n\t *\t- You can also add and remove objects later when the mixer\n\t *\t\tis running.\n\t *\n\t * Note:\n\t *\n\t *\t\tObjects of this class appear as one object to the mixer,\n\t *\t\tso cache control of the individual objects must be done\n\t *\t\ton the group.\n\t *\n\t * Limitation:\n\t *\n\t *\t- The animated properties must be compatible among the\n\t *\t\tall objects in the group.\n\t *\n\t *\t- A single property can either be controlled through a\n\t *\t\ttarget group or directly, but not both.\n\t */\n\n\tclass AnimationObjectGroup {\n\t\tconstructor() {\n\t\t\tthis.uuid = generateUUID(); // cached objects followed by the active ones\n\n\t\t\tthis._objects = Array.prototype.slice.call(arguments);\n\t\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t\t// note: read by PropertyBinding.Composite\n\n\t\t\tconst indices = {};\n\t\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tindices[arguments[i].uuid] = i;\n\t\t\t}\n\n\t\t\tthis._paths = []; // inside: string\n\n\t\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\n\t\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\n\t\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\t\tconst scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tobjects: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._objects.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tget bindingsPerObject() {\n\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n\t\tadd() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tpaths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet knownObject = undefined,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tlet index = indicesByUUID[uuid];\n\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\t\t\t\tindex = nObjects++;\n\t\t\t\t\tindicesByUUID[uuid] = index;\n\t\t\t\t\tobjects.push(object); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tbindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n\t\t\t\t\t}\n\t\t\t\t} else if (index < nCachedObjects) {\n\t\t\t\t\tknownObject = objects[index]; // move existing object to the ACTIVE region\n\n\t\t\t\t\tconst firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex];\n\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\tobjects[index] = lastCachedObject;\n\t\t\t\t\tindicesByUUID[uuid] = firstActiveIndex;\n\t\t\t\t\tobjects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex];\n\t\t\t\t\t\tlet binding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\n\t\t\t\t\t\tif (binding === undefined) {\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\t\t\t\t\t\t\tbinding = new PropertyBinding(object, paths[j], parsedPaths[j]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t} else if (objects[index] !== knownObject) {\n\t\t\t\t\tconsole.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t}\n\n\t\tremove() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined && index >= nCachedObjects) {\n\t\t\t\t\t// move existing object into the CACHED region\n\t\t\t\t\tconst lastCachedIndex = nCachedObjects++,\n\t\t\t\t\t\t\t\tfirstActiveObject = objects[lastCachedIndex];\n\t\t\t\t\tindicesByUUID[firstActiveObject.uuid] = index;\n\t\t\t\t\tobjects[index] = firstActiveObject;\n\t\t\t\t\tindicesByUUID[uuid] = lastCachedIndex;\n\t\t\t\t\tobjects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tfirstActive = bindingsForPath[lastCachedIndex],\n\t\t\t\t\t\t\t\t\tbinding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = firstActive;\n\t\t\t\t\t\tbindingsForPath[lastCachedIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // remove & forget\n\n\n\t\tuncache() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined) {\n\t\t\t\t\tdelete indicesByUUID[uuid];\n\n\t\t\t\t\tif (index < nCachedObjects) {\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\t\t\t\t\t\tconst firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex],\n\t\t\t\t\t\t\t\t\tlastIndex = --nObjects,\n\t\t\t\t\t\t\t\t\tlastObject = objects[lastIndex]; // last cached object takes this object's place\n\n\t\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\t\tobjects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = firstActiveIndex;\n\t\t\t\t\t\tobjects[firstActiveIndex] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex],\n\t\t\t\t\t\t\t\t\t\tlast = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\t\t\t\t\t\tconst lastIndex = --nObjects,\n\t\t\t\t\t\t\t\t\tlastObject = objects[lastIndex];\n\n\t\t\t\t\t\tif (lastIndex > 0) {\n\t\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = index;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobjects[index] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tconst bindingsForPath = bindings[j];\n\t\t\t\t\t\t\tbindingsForPath[index] = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // Internal interface used by befriended PropertyBinding.Composite:\n\n\n\t\tsubscribe_(path, parsedPath) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\t\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\t\tlet index = indicesByPath[path];\n\t\t\tconst bindings = this._bindings;\n\t\t\tif (index !== undefined) return bindings[index];\n\t\t\tconst paths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tobjects = this._objects,\n\t\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\t\tbindingsForPath = new Array(nObjects);\n\t\t\tindex = bindings.length;\n\t\t\tindicesByPath[path] = index;\n\t\t\tpaths.push(path);\n\t\t\tparsedPaths.push(parsedPath);\n\t\t\tbindings.push(bindingsForPath);\n\n\t\t\tfor (let i = nCachedObjects, n = objects.length; i !== n; ++i) {\n\t\t\t\tconst object = objects[i];\n\t\t\t\tbindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\t\t}\n\n\t\tunsubscribe_(path) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\t\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\t\t\tindex = indicesByPath[path];\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tconst paths = this._paths,\n\t\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\t\t\tlastBindings = bindings[lastBindingsIndex],\n\t\t\t\t\t\t\tlastBindingsPath = path[lastBindingsIndex];\n\t\t\t\tindicesByPath[lastBindingsPath] = index;\n\t\t\t\tbindings[index] = lastBindings;\n\t\t\t\tbindings.pop();\n\t\t\t\tparsedPaths[index] = parsedPaths[lastBindingsIndex];\n\t\t\t\tparsedPaths.pop();\n\t\t\t\tpaths[index] = paths[lastBindingsIndex];\n\t\t\t\tpaths.pop();\n\t\t\t}\n\t\t}\n\n\t}\n\n\tAnimationObjectGroup.prototype.isAnimationObjectGroup = true;\n\n\tclass AnimationAction {\n\t\tconstructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {\n\t\t\tthis._mixer = mixer;\n\t\t\tthis._clip = clip;\n\t\t\tthis._localRoot = localRoot;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tconst tracks = clip.tracks,\n\t\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\t\tinterpolants = new Array(nTracks);\n\t\t\tconst interpolantSettings = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\n\t\t\tfor (let i = 0; i !== nTracks; ++i) {\n\t\t\t\tconst interpolant = tracks[i].createInterpolant(null);\n\t\t\t\tinterpolants[i] = interpolant;\n\t\t\t\tinterpolant.settings = interpolantSettings;\n\t\t\t}\n\n\t\t\tthis._interpolantSettings = interpolantSettings;\n\t\t\tthis._interpolants = interpolants; // bound by the mixer\n\t\t\t// inside: PropertyMixer (managed by the mixer)\n\n\t\t\tthis._propertyBindings = new Array(nTracks);\n\t\t\tthis._cacheIndex = null; // for the memory manager\n\n\t\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis.loop = LoopRepeat;\n\t\t\tthis._loopCount = -1; // global mixer time when the action is to be started\n\t\t\t// it's set back to 'null' upon start of the action\n\n\t\t\tthis._startTime = null; // scaled local time of the action\n\t\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1;\n\t\t\tthis._effectiveTimeScale = 1;\n\t\t\tthis.weight = 1;\n\t\t\tthis._effectiveWeight = 1;\n\t\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\t\tthis.paused = false; // true -> zero effective time scale\n\n\t\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\t\tthis.clampWhenFinished = false; // keep feeding the last frame?\n\n\t\t\tthis.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n\t\t\tthis.zeroSlopeAtEnd = true; // clips for start, loop and end\n\t\t} // State & Scheduling\n\n\n\t\tplay() {\n\t\t\tthis._mixer._activateAction(this);\n\n\t\t\treturn this;\n\t\t}\n\n\t\tstop() {\n\t\t\tthis._mixer._deactivateAction(this);\n\n\t\t\treturn this.reset();\n\t\t}\n\n\t\treset() {\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\t\t\tthis.time = 0; // restart clip\n\n\t\t\tthis._loopCount = -1; // forget previous loops\n\n\t\t\tthis._startTime = null; // forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\t\t}\n\n\t\tisRunning() {\n\t\t\treturn this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n\t\t} // return true when play has been called\n\n\n\t\tisScheduled() {\n\t\t\treturn this._mixer._isActiveAction(this);\n\t\t}\n\n\t\tstartAt(time) {\n\t\t\tthis._startTime = time;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoop(mode, repetitions) {\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\t\t\treturn this;\n\t\t} // Weight\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\n\n\t\tsetEffectiveWeight(weight) {\n\t\t\tthis.weight = weight; // note: same logic as when updated at runtime\n\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\t\treturn this.stopFading();\n\t\t} // return the weight considering fading and .enabled\n\n\n\t\tgetEffectiveWeight() {\n\t\t\treturn this._effectiveWeight;\n\t\t}\n\n\t\tfadeIn(duration) {\n\t\t\treturn this._scheduleFading(duration, 0, 1);\n\t\t}\n\n\t\tfadeOut(duration) {\n\t\t\treturn this._scheduleFading(duration, 1, 0);\n\t\t}\n\n\t\tcrossFadeFrom(fadeOutAction, duration, warp) {\n\t\t\tfadeOutAction.fadeOut(duration);\n\t\t\tthis.fadeIn(duration);\n\n\t\t\tif (warp) {\n\t\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\t\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\t\t\tfadeOutAction.warp(1.0, startEndRatio, duration);\n\t\t\t\tthis.warp(endStartRatio, 1.0, duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcrossFadeTo(fadeInAction, duration, warp) {\n\t\t\treturn fadeInAction.crossFadeFrom(this, duration, warp);\n\t\t}\n\n\t\tstopFading() {\n\t\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\t\tif (weightInterpolant !== null) {\n\t\t\t\tthis._weightInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(weightInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Time Scale Control\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\n\n\t\tsetEffectiveTimeScale(timeScale) {\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\t\t\treturn this.stopWarping();\n\t\t} // return the time scale considering warping and .paused\n\n\n\t\tgetEffectiveTimeScale() {\n\t\t\treturn this._effectiveTimeScale;\n\t\t}\n\n\t\tsetDuration(duration) {\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\t\t\treturn this.stopWarping();\n\t\t}\n\n\t\tsyncWith(action) {\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\t\t\treturn this.stopWarping();\n\t\t}\n\n\t\thalt(duration) {\n\t\t\treturn this.warp(this._effectiveTimeScale, 0, duration);\n\t\t}\n\n\t\twarp(startTimeScale, endTimeScale, duration) {\n\t\t\tconst mixer = this._mixer,\n\t\t\t\t\t\tnow = mixer.time,\n\t\t\t\t\t\ttimeScale = this.timeScale;\n\t\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tconst times = interpolant.parameterPositions,\n\t\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[0] = startTimeScale / timeScale;\n\t\t\tvalues[1] = endTimeScale / timeScale;\n\t\t\treturn this;\n\t\t}\n\n\t\tstopWarping() {\n\t\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif (timeScaleInterpolant !== null) {\n\t\t\t\tthis._timeScaleInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Object Accessors\n\n\n\t\tgetMixer() {\n\t\t\treturn this._mixer;\n\t\t}\n\n\t\tgetClip() {\n\t\t\treturn this._clip;\n\t\t}\n\n\t\tgetRoot() {\n\t\t\treturn this._localRoot || this._mixer._root;\n\t\t} // Interna\n\n\n\t\t_update(time, deltaTime, timeDirection, accuIndex) {\n\t\t\t// called by the mixer\n\t\t\tif (!this.enabled) {\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\t\t\t\tthis._updateWeight(time);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst startTime = this._startTime;\n\n\t\t\tif (startTime !== null) {\n\t\t\t\t// check for scheduled start of action\n\t\t\t\tconst timeRunning = (time - startTime) * timeDirection;\n\n\t\t\t\tif (timeRunning < 0 || timeDirection === 0) {\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\t\t\t} // start\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\t\t\t} // apply time scale and advance time\n\n\n\t\t\tdeltaTime *= this._updateTimeScale(time);\n\n\t\t\tconst clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\n\t\t\tconst weight = this._updateWeight(time);\n\n\t\t\tif (weight > 0) {\n\t\t\t\tconst interpolants = this._interpolants;\n\t\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\t\tswitch (this.blendMode) {\n\t\t\t\t\tcase AdditiveAnimationBlendMode:\n\t\t\t\t\t\tfor (let j = 0, m = interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\tinterpolants[j].evaluate(clipTime);\n\t\t\t\t\t\t\tpropertyMixers[j].accumulateAdditive(weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfor (let j = 0, m = interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\tinterpolants[j].evaluate(clipTime);\n\t\t\t\t\t\t\tpropertyMixers[j].accumulate(accuIndex, weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_updateWeight(time) {\n\t\t\tlet weight = 0;\n\n\t\t\tif (this.enabled) {\n\t\t\t\tweight = this.weight;\n\t\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tconst interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif (interpolantValue === 0) {\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\t\t}\n\n\t\t_updateTimeScale(time) {\n\t\t\tlet timeScale = 0;\n\n\t\t\tif (!this.paused) {\n\t\t\t\ttimeScale = this.timeScale;\n\t\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tconst interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif (timeScale === 0) {\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\t\t}\n\n\t\t_updateTime(deltaTime) {\n\t\t\tconst duration = this._clip.duration;\n\t\t\tconst loop = this.loop;\n\t\t\tlet time = this.time + deltaTime;\n\t\t\tlet loopCount = this._loopCount;\n\t\t\tconst pingPong = loop === LoopPingPong;\n\n\t\t\tif (deltaTime === 0) {\n\t\t\t\tif (loopCount === -1) return time;\n\t\t\t\treturn pingPong && (loopCount & 1) === 1 ? duration - time : time;\n\t\t\t}\n\n\t\t\tif (loop === LoopOnce) {\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tthis._loopCount = 0;\n\n\t\t\t\t\tthis._setEndings(true, true, false);\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\t\t\t\t\tif (time >= duration) {\n\t\t\t\t\t\ttime = duration;\n\t\t\t\t\t} else if (time < 0) {\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.time = time;\n\t\t\t\t\t\tbreak handle_stop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\taction: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// repetitive Repeat or PingPong\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tif (deltaTime >= 0) {\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(true, this.repetitions === 0, pingPong);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\t\t\t\t\t\tthis._setEndings(this.repetitions === 0, true, pingPong);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (time >= duration || time < 0) {\n\t\t\t\t\t// wrap around\n\t\t\t\t\tconst loopDelta = Math.floor(time / duration); // signed\n\n\t\t\t\t\ttime -= duration * loopDelta;\n\t\t\t\t\tloopCount += Math.abs(loopDelta);\n\t\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif (pending <= 0) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\t\t\t\t\t\tif (pending === 1) {\n\t\t\t\t\t\t\t// entering the last round\n\t\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\n\t\t\t\t\t\t\tthis._setEndings(atStart, !atStart, pingPong);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setEndings(false, false, pingPong);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'loop',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tloopDelta: loopDelta\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.time = time;\n\t\t\t\t}\n\n\t\t\t\tif (pingPong && (loopCount & 1) === 1) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\t\t\t\t\treturn duration - time;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn time;\n\t\t}\n\n\t\t_setEndings(atStart, atEnd, pingPong) {\n\t\t\tconst settings = this._interpolantSettings;\n\n\t\t\tif (pingPong) {\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\t\t\t} else {\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\t\t\tif (atStart) {\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\t\t\t}\n\n\t\t\t\tif (atEnd) {\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingEnd = WrapAroundEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_scheduleFading(duration, weightNow, weightThen) {\n\t\t\tconst mixer = this._mixer,\n\t\t\t\t\t\tnow = mixer.time;\n\t\t\tlet interpolant = this._weightInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tconst times = interpolant.parameterPositions,\n\t\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\tvalues[0] = weightNow;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[1] = weightThen;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AnimationMixer extends EventDispatcher {\n\t\tconstructor(root) {\n\t\t\tsuper();\n\t\t\tthis._root = root;\n\n\t\t\tthis._initMemoryManager();\n\n\t\t\tthis._accuIndex = 0;\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1.0;\n\t\t}\n\n\t\t_bindAction(action, prototypeAction) {\n\t\t\tconst root = action._localRoot || this._root,\n\t\t\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\t\t\tlet bindingsByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingsByName === undefined) {\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingsByName;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i !== nTracks; ++i) {\n\t\t\t\tconst track = tracks[i],\n\t\t\t\t\t\t\ttrackName = track.name;\n\t\t\t\tlet binding = bindingsByName[trackName];\n\n\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t} else {\n\t\t\t\t\tbinding = bindings[i];\n\n\t\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\t\t\t\t\t\tif (binding._cacheIndex === null) {\n\t\t\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n\t\t\t\t\tbinding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t}\n\n\t\t\t\tinterpolants[i].resultBuffer = binding.buffer;\n\t\t\t}\n\t\t}\n\n\t\t_activateAction(action) {\n\t\t\tif (!this._isActiveAction(action)) {\n\t\t\t\tif (action._cacheIndex === null) {\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\t\t\t\t\tconst rootUuid = (action._localRoot || this._root).uuid,\n\t\t\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\t\t\tthis._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n\t\t\t\t\tthis._addInactiveAction(action, clipUuid, rootUuid);\n\t\t\t\t}\n\n\t\t\t\tconst bindings = action._propertyBindings; // increment reference counts / sort out state\n\n\t\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\t\tif (binding.useCount++ === 0) {\n\t\t\t\t\t\tthis._lendBinding(binding);\n\n\t\t\t\t\t\tbinding.saveOriginalState();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction(action);\n\t\t\t}\n\t\t}\n\n\t\t_deactivateAction(action) {\n\t\t\tif (this._isActiveAction(action)) {\n\t\t\t\tconst bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n\t\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\t\tif (--binding.useCount === 0) {\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\t\tthis._takeBackBinding(binding);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction(action);\n\t\t\t}\n\t\t} // Memory manager\n\n\n\t\t_initMemoryManager() {\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._actionsByClip = {}; // inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n\t\t\tthis._nActiveBindings = 0;\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\n\t\t\tthis._nActiveControlInterpolants = 0;\n\t\t\tconst scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._actions.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveActions;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\t\t} // Memory management for AnimationAction objects\n\n\n\t\t_isActiveAction(action) {\n\t\t\tconst index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\t\t}\n\n\t\t_addInactiveAction(action, clipUuid, rootUuid) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip;\n\t\t\tlet actionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip === undefined) {\n\t\t\t\tactionsForClip = {\n\t\t\t\t\tknownActions: [action],\n\t\t\t\t\tactionByRoot: {}\n\t\t\t\t};\n\t\t\t\taction._byClipCacheIndex = 0;\n\t\t\t\tactionsByClip[clipUuid] = actionsForClip;\n\t\t\t} else {\n\t\t\t\tconst knownActions = actionsForClip.knownActions;\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push(action);\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push(action);\n\t\t\tactionsForClip.actionByRoot[rootUuid] = action;\n\t\t}\n\n\t\t_removeInactiveAction(action) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1],\n\t\t\t\t\t\tcacheIndex = action._cacheIndex;\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\tactions.pop();\n\t\t\taction._cacheIndex = null;\n\t\t\tconst clipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\t\tactionsForClip = actionsByClip[clipUuid],\n\t\t\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\t\t\t\t\tlastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n\t\t\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[byClipCacheIndex] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\t\t\taction._byClipCacheIndex = null;\n\t\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\t\t\trootUuid = (action._localRoot || this._root).uuid;\n\t\t\tdelete actionByRoot[rootUuid];\n\n\t\t\tif (knownActionsForClip.length === 0) {\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t}\n\n\t\t_removeInactiveBindingsForAction(action) {\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\tif (--binding.referenceCount === 0) {\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_lendAction(action) {\n\t\t\t// [ active actions |\tinactive actions\t]\n\t\t\t// [\tactive actions >| inactive actions ]\n\t\t\t//\t\t\t\t\t\t\t\t s\t\t\t\ta\n\t\t\t//\t\t\t\t\t\t\t\t\t<-swap->\n\t\t\t//\t\t\t\t\t\t\t\t a\t\t\t\ts\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveActions++,\n\t\t\t\t\t\tfirstInactiveAction = actions[lastActiveIndex];\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[lastActiveIndex] = action;\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = firstInactiveAction;\n\t\t}\n\n\t\t_takeBackAction(action) {\n\t\t\t// [\tactive actions\t| inactive actions ]\n\t\t\t// [ active actions |< inactive actions\t]\n\t\t\t//\t\t\t\ta\t\t\t\ts\n\t\t\t//\t\t\t\t <-swap->\n\t\t\t//\t\t\t\ts\t\t\t\ta\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveActions,\n\t\t\t\t\t\tlastActiveAction = actions[firstInactiveIndex];\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[firstInactiveIndex] = action;\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = lastActiveAction;\n\t\t} // Memory management for PropertyMixer objects\n\n\n\t\t_addInactiveBinding(binding, rootUuid, trackName) {\n\t\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindings = this._bindings;\n\t\t\tlet bindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName === undefined) {\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingByName;\n\t\t\t}\n\n\t\t\tbindingByName[trackName] = binding;\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push(binding);\n\t\t}\n\n\t\t_removeInactiveBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tpropBinding = binding.binding,\n\t\t\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\t\t\ttrackName = propBinding.path,\n\t\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid],\n\t\t\t\t\t\tlastInactiveBinding = bindings[bindings.length - 1],\n\t\t\t\t\t\tcacheIndex = binding._cacheIndex;\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[cacheIndex] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\t\t\tdelete bindingByName[trackName];\n\n\t\t\tif (Object.keys(bindingByName).length === 0) {\n\t\t\t\tdelete bindingsByRoot[rootUuid];\n\t\t\t}\n\t\t}\n\n\t\t_lendBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveBindings++,\n\t\t\t\t\t\tfirstInactiveBinding = bindings[lastActiveIndex];\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[lastActiveIndex] = binding;\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = firstInactiveBinding;\n\t\t}\n\n\t\t_takeBackBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveBindings,\n\t\t\t\t\t\tlastActiveBinding = bindings[firstInactiveIndex];\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[firstInactiveIndex] = binding;\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = lastActiveBinding;\n\t\t} // Memory management of Interpolants for weight and time scale\n\n\n\t\t_lendControlInterpolant() {\n\t\t\tconst interpolants = this._controlInterpolants,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants++;\n\t\t\tlet interpolant = interpolants[lastActiveIndex];\n\n\t\t\tif (interpolant === undefined) {\n\t\t\t\tinterpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[lastActiveIndex] = interpolant;\n\t\t\t}\n\n\t\t\treturn interpolant;\n\t\t}\n\n\t\t_takeBackControlInterpolant(interpolant) {\n\t\t\tconst interpolants = this._controlInterpolants,\n\t\t\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveControlInterpolants,\n\t\t\t\t\t\tlastActiveInterpolant = interpolants[firstInactiveIndex];\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[firstInactiveIndex] = interpolant;\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[prevIndex] = lastActiveInterpolant;\n\t\t} // return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\n\n\t\tclipAction(clip, optionalRoot, blendMode) {\n\t\t\tconst root = optionalRoot || this._root,\n\t\t\t\t\t\trootUuid = root.uuid;\n\t\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n\t\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\t\t\tconst actionsForClip = this._actionsByClip[clipUuid];\n\t\t\tlet prototypeAction = null;\n\n\t\t\tif (blendMode === undefined) {\n\t\t\t\tif (clipObject !== null) {\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\t\t\t\t} else {\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\tconst existingAction = actionsForClip.actionByRoot[rootUuid];\n\n\t\t\t\tif (existingAction !== undefined && existingAction.blendMode === blendMode) {\n\t\t\t\t\treturn existingAction;\n\t\t\t\t} // we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\n\n\t\t\t\tprototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n\t\t\t\tif (clipObject === null) clipObject = prototypeAction._clip;\n\t\t\t} // clip must be known when specified via string\n\n\n\t\t\tif (clipObject === null) return null; // allocate all resources required to run it\n\n\t\t\tconst newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n\n\t\t\tthis._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n\t\t\tthis._addInactiveAction(newAction, clipUuid, rootUuid);\n\n\t\t\treturn newAction;\n\t\t} // get an existing action\n\n\n\t\texistingAction(clip, optionalRoot) {\n\t\t\tconst root = optionalRoot || this._root,\n\t\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\t\tclipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n\t\t\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\treturn actionsForClip.actionByRoot[rootUuid] || null;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} // deactivates all previously scheduled actions\n\n\n\t\tstopAllAction() {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor (let i = nActions - 1; i >= 0; --i) {\n\t\t\t\tactions[i].stop();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // advance the time and update apply the animation\n\n\n\t\tupdate(deltaTime) {\n\t\t\tdeltaTime *= this.timeScale;\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\t\t\ttimeDirection = Math.sign(deltaTime),\n\t\t\t\t\t\taccuIndex = this._accuIndex ^= 1; // run active actions\n\n\t\t\tfor (let i = 0; i !== nActions; ++i) {\n\t\t\t\tconst action = actions[i];\n\n\t\t\t\taction._update(time, deltaTime, timeDirection, accuIndex);\n\t\t\t} // update scene graph\n\n\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor (let i = 0; i !== nBindings; ++i) {\n\t\t\t\tbindings[i].apply(accuIndex);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Allows you to seek to a specific time in an animation.\n\n\n\t\tsetTime(timeInSeconds) {\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\n\t\t\tfor (let i = 0; i < this._actions.length; i++) {\n\t\t\t\tthis._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\t\t\t}\n\n\t\t\treturn this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\t\t} // return this mixer's root target object\n\n\n\t\tgetRoot() {\n\t\t\treturn this._root;\n\t\t} // free all resources specific to a particular clip\n\n\n\t\tuncacheClip(clip) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\t\tactionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\t\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor (let i = 0, n = actionsToRemove.length; i !== n; ++i) {\n\t\t\t\t\tconst action = actionsToRemove[i];\n\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1];\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\t\t} // free all resources specific to a particular root target object\n\n\n\t\tuncacheRoot(root) {\n\t\t\tconst rootUuid = root.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor (const clipUuid in actionsByClip) {\n\t\t\t\tconst actionByRoot = actionsByClip[clipUuid].actionByRoot,\n\t\t\t\t\t\t\taction = actionByRoot[rootUuid];\n\n\t\t\t\tif (action !== undefined) {\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName !== undefined) {\n\t\t\t\tfor (const trackName in bindingByName) {\n\t\t\t\t\tconst binding = bindingByName[trackName];\n\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t} // remove a targeted clip from the cache\n\n\n\t\tuncacheAction(clip, optionalRoot) {\n\t\t\tconst action = this.existingAction(clip, optionalRoot);\n\n\t\t\tif (action !== null) {\n\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tAnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);\n\n\tclass Uniform {\n\t\tconstructor(value) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tconsole.warn('THREE.Uniform: Type parameter is no longer needed.');\n\t\t\t\tvalue = arguments[1];\n\t\t\t}\n\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n\t\t}\n\n\t}\n\n\tclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\t\tconstructor(array, stride, meshPerAttribute = 1) {\n\t\t\tsuper(array, stride);\n\t\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tconst ib = super.clone(data);\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn ib;\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tconst json = super.toJSON(data);\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn json;\n\t\t}\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\n\tclass GLBufferAttribute {\n\t\tconstructor(buffer, type, itemSize, elementSize, count) {\n\t\t\tthis.buffer = buffer;\n\t\t\tthis.type = type;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.elementSize = elementSize;\n\t\t\tthis.count = count;\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetBuffer(buffer) {\n\t\t\tthis.buffer = buffer;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetType(type, elementSize) {\n\t\t\tthis.type = type;\n\t\t\tthis.elementSize = elementSize;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetItemSize(itemSize) {\n\t\t\tthis.itemSize = itemSize;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetCount(count) {\n\t\t\tthis.count = count;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tGLBufferAttribute.prototype.isGLBufferAttribute = true;\n\n\tclass Raycaster {\n\t\tconstructor(origin, direction, near = 0, far = Infinity) {\n\t\t\tthis.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.camera = null;\n\t\t\tthis.layers = new Layers();\n\t\t\tthis.params = {\n\t\t\t\tMesh: {},\n\t\t\t\tLine: {\n\t\t\t\t\tthreshold: 1\n\t\t\t\t},\n\t\t\t\tLOD: {},\n\t\t\t\tPoints: {\n\t\t\t\t\tthreshold: 1\n\t\t\t\t},\n\t\t\t\tSprite: {}\n\t\t\t};\n\t\t}\n\n\t\tset(origin, direction) {\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\t\tthis.ray.set(origin, direction);\n\t\t}\n\n\t\tsetFromCamera(coords, camera) {\n\t\t\tif (camera && camera.isPerspectiveCamera) {\n\t\t\t\tthis.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n\t\t\t\tthis.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n\t\t\t\tthis.camera = camera;\n\t\t\t} else if (camera && camera.isOrthographicCamera) {\n\t\t\t\tthis.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n\n\t\t\t\tthis.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n\t\t\t\tthis.camera = camera;\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n\t\t\t}\n\t\t}\n\n\t\tintersectObject(object, recursive = false, intersects = []) {\n\t\t\tintersectObject(object, this, intersects, recursive);\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\n\t\tintersectObjects(objects, recursive = false, intersects = []) {\n\t\t\tfor (let i = 0, l = objects.length; i < l; i++) {\n\t\t\t\tintersectObject(objects[i], this, intersects, recursive);\n\t\t\t}\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\n\t}\n\n\tfunction ascSort(a, b) {\n\t\treturn a.distance - b.distance;\n\t}\n\n\tfunction intersectObject(object, raycaster, intersects, recursive) {\n\t\tif (object.layers.test(raycaster.layers)) {\n\t\t\tobject.raycast(raycaster, intersects);\n\t\t}\n\n\t\tif (recursive === true) {\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tintersectObject(children[i], raycaster, intersects, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tclass Spherical {\n\t\tconstructor(radius = 1, phi = 0, theta = 0) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi; // polar angle\n\n\t\t\tthis.theta = theta; // azimuthal angle\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(radius, phi, theta) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\t\t\treturn this;\n\t\t} // restrict phi to be betwee EPS and PI-EPS\n\n\n\t\tmakeSafe() {\n\t\t\tconst EPS = 0.000001;\n\t\t\tthis.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t}\n\n\t\tsetFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + y * y + z * z);\n\n\t\t\tif (this.radius === 0) {\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\t\t\t} else {\n\t\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\t\tthis.phi = Math.acos(clamp(y / this.radius, -1, 1));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t */\n\tclass Cylindrical {\n\t\tconstructor(radius = 1, theta = 0, y = 0) {\n\t\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\n\t\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\n\t\t\tthis.y = y; // height above the x-z plane\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(radius, theta, y) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t}\n\n\t\tsetFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + z * z);\n\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tconst _vector$4 = /*@__PURE__*/new Vector2();\n\n\tclass Box2 {\n\t\tconstructor(min = new Vector2(+Infinity, +Infinity), max = new Vector2(-Infinity, -Infinity)) {\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tset(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCenterAndSize(center, size) {\n\t\t\tconst halfSize = _vector$4.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.min.x = this.min.y = +Infinity;\n\t\t\tthis.max.x = this.max.y = -Infinity;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t}\n\n\t\tgetSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getSize() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n\t\t}\n\n\t\tcontainsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n\t\t}\n\n\t\tgetParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\t// using 4 splitting planes to rule out intersections\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\tconst clampedPoint = _vector$4.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t}\n\n\t\tintersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t}\n\n\t}\n\n\tBox2.prototype.isBox2 = true;\n\n\tconst _startP = /*@__PURE__*/new Vector3();\n\n\tconst _startEnd = /*@__PURE__*/new Vector3();\n\n\tclass Line3 {\n\t\tconstructor(start = new Vector3(), end = new Vector3()) {\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t}\n\n\t\tset(start, end) {\n\t\t\tthis.start.copy(start);\n\t\t\tthis.end.copy(end);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(line) {\n\t\t\tthis.start.copy(line.start);\n\t\t\tthis.end.copy(line.end);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.start, this.end).multiplyScalar(0.5);\n\t\t}\n\n\t\tdelta(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .delta() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.subVectors(this.end, this.start);\n\t\t}\n\n\t\tdistanceSq() {\n\t\t\treturn this.start.distanceToSquared(this.end);\n\t\t}\n\n\t\tdistance() {\n\t\t\treturn this.start.distanceTo(this.end);\n\t\t}\n\n\t\tat(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t}\n\n\t\tclosestPointToPointParameter(point, clampToLine) {\n\t\t\t_startP.subVectors(point, this.start);\n\n\t\t\t_startEnd.subVectors(this.end, this.start);\n\n\t\t\tconst startEnd2 = _startEnd.dot(_startEnd);\n\n\t\t\tconst startEnd_startP = _startEnd.dot(_startP);\n\n\t\t\tlet t = startEnd_startP / startEnd2;\n\n\t\t\tif (clampToLine) {\n\t\t\t\tt = clamp(t, 0, 1);\n\t\t\t}\n\n\t\t\treturn t;\n\t\t}\n\n\t\tclosestPointToPoint(point, clampToLine, target) {\n\t\t\tconst t = this.closestPointToPointParameter(point, clampToLine);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tthis.start.applyMatrix4(matrix);\n\t\t\tthis.end.applyMatrix4(matrix);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(line) {\n\t\t\treturn line.start.equals(this.start) && line.end.equals(this.end);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tclass ImmediateRenderObject extends Object3D {\n\t\tconstructor(material) {\n\t\t\tsuper();\n\t\t\tthis.material = material;\n\n\t\t\tthis.render = function ()\n\t\t\t/* renderCallback */\n\t\t\t{};\n\n\t\t\tthis.hasPositions = false;\n\t\t\tthis.hasNormals = false;\n\t\t\tthis.hasColors = false;\n\t\t\tthis.hasUvs = false;\n\t\t\tthis.positionArray = null;\n\t\t\tthis.normalArray = null;\n\t\t\tthis.colorArray = null;\n\t\t\tthis.uvArray = null;\n\t\t\tthis.count = 0;\n\t\t}\n\n\t}\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\tconst _vector$3 = /*@__PURE__*/new Vector3();\n\n\tclass SpotLightHelper extends Object3D {\n\t\tconstructor(light, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\t\tfor (let i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\t\tconst p1 = i / l * Math.PI * 2;\n\t\t\t\tconst p2 = j / l * Math.PI * 2;\n\t\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tthis.cone = new LineSegments(geometry, material);\n\t\t\tthis.add(this.cone);\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.cone.geometry.dispose();\n\t\t\tthis.cone.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tconst coneWidth = coneLength * Math.tan(this.light.angle);\n\t\t\tthis.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\t\t_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\tthis.cone.lookAt(_vector$3);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.cone.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.cone.material.color.copy(this.light.color);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tconst _vector$2 = /*@__PURE__*/new Vector3();\n\n\tconst _boneMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n\tclass SkeletonHelper extends LineSegments {\n\t\tconstructor(object) {\n\t\t\tconst bones = getBoneList(object);\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst vertices = [];\n\t\t\tconst colors = [];\n\t\t\tconst color1 = new Color(0, 0, 1);\n\t\t\tconst color2 = new Color(0, 1, 0);\n\n\t\t\tfor (let i = 0; i < bones.length; i++) {\n\t\t\t\tconst bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tcolors.push(color1.r, color1.g, color1.b);\n\t\t\t\t\tcolors.push(color2.r, color2.g, color2.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false,\n\t\t\t\ttransparent: true\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'SkeletonHelper';\n\t\t\tthis.isSkeletonHelper = true;\n\t\t\tthis.root = object;\n\t\t\tthis.bones = bones;\n\t\t\tthis.matrix = object.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tconst bones = this.bones;\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst position = geometry.getAttribute('position');\n\n\t\t\t_matrixWorldInv.copy(this.root.matrixWorld).invert();\n\n\t\t\tfor (let i = 0, j = 0; i < bones.length; i++) {\n\t\t\t\tconst bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n\n\t\t\t\t\t_vector$2.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);\n\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n\n\t\t\t\t\t_vector$2.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);\n\t\t\t\t\tj += 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tfunction getBoneList(object) {\n\t\tconst boneList = [];\n\n\t\tif (object && object.isBone) {\n\t\t\tboneList.push(object);\n\t\t}\n\n\t\tfor (let i = 0; i < object.children.length; i++) {\n\t\t\tboneList.push.apply(boneList, getBoneList(object.children[i]));\n\t\t}\n\n\t\treturn boneList;\n\t}\n\n\tclass PointLightHelper extends Mesh {\n\t\tconstructor(light, sphereSize, color) {\n\t\t\tconst geometry = new SphereGeometry(sphereSize, 4, 2);\n\t\t\tconst material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.color = color;\n\t\t\tthis.type = 'PointLightHelper';\n\t\t\tthis.matrix = this.light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.update();\n\t\t\t/*\n\t\t\t// TODO: delete this comment?\n\t\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\t\tconst d = light.distance;\n\t\t\tif ( d === 0.0 ) {\n\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t} else {\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t}\n\t\t\tthis.add( this.lightDistance );\n\t\t\t*/\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.material.color.copy(this.light.color);\n\t\t\t}\n\t\t\t/*\n\t\t\tconst d = this.light.distance;\n\t\t\t\tif ( d === 0.0 ) {\n\t\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.lightDistance.visible = true;\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t\t}\n\t\t\t*/\n\n\t\t}\n\n\t}\n\n\tconst _vector$1 = /*@__PURE__*/new Vector3();\n\n\tconst _color1 = /*@__PURE__*/new Color();\n\n\tconst _color2 = /*@__PURE__*/new Color();\n\n\tclass HemisphereLightHelper extends Object3D {\n\t\tconstructor(light, size, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tconst geometry = new OctahedronGeometry(size);\n\t\t\tgeometry.rotateY(Math.PI * 0.5);\n\t\t\tthis.material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tif (this.color === undefined) this.material.vertexColors = true;\n\t\t\tconst position = geometry.getAttribute('position');\n\t\t\tconst colors = new Float32Array(position.count * 3);\n\t\t\tgeometry.setAttribute('color', new BufferAttribute(colors, 3));\n\t\t\tthis.add(new Mesh(geometry, this.material));\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.children[0].geometry.dispose();\n\t\t\tthis.children[0].material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst mesh = this.children[0];\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tconst colors = mesh.geometry.getAttribute('color');\n\n\t\t\t\t_color1.copy(this.light.color);\n\n\t\t\t\t_color2.copy(this.light.groundColor);\n\n\t\t\t\tfor (let i = 0, l = colors.count; i < l; i++) {\n\t\t\t\t\tconst color = i < l / 2 ? _color1 : _color2;\n\t\t\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\t\t\t}\n\n\t\t\tmesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());\n\t\t}\n\n\t}\n\n\tclass GridHelper extends LineSegments {\n\t\tconstructor(size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888) {\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tconst center = divisions / 2;\n\t\t\tconst step = size / divisions;\n\t\t\tconst halfSize = size / 2;\n\t\t\tconst vertices = [],\n\t\t\t\t\t\tcolors = [];\n\n\t\t\tfor (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\t\t\t\tvertices.push(-halfSize, 0, k, halfSize, 0, k);\n\t\t\t\tvertices.push(k, 0, -halfSize, k, 0, halfSize);\n\t\t\t\tconst color = i === center ? color1 : color2;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'GridHelper';\n\t\t}\n\n\t}\n\n\tclass PolarGridHelper extends LineSegments {\n\t\tconstructor(radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888) {\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tconst vertices = [];\n\t\t\tconst colors = []; // create the radials\n\n\t\t\tfor (let i = 0; i <= radials; i++) {\n\t\t\t\tconst v = i / radials * (Math.PI * 2);\n\t\t\t\tconst x = Math.sin(v) * radius;\n\t\t\t\tconst z = Math.cos(v) * radius;\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\tconst color = i & 1 ? color1 : color2;\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t} // create the circles\n\n\n\t\t\tfor (let i = 0; i <= circles; i++) {\n\t\t\t\tconst color = i & 1 ? color1 : color2;\n\t\t\t\tconst r = radius - radius / circles * i;\n\n\t\t\t\tfor (let j = 0; j < divisions; j++) {\n\t\t\t\t\t// first vertex\n\t\t\t\t\tlet v = j / divisions * (Math.PI * 2);\n\t\t\t\t\tlet x = Math.sin(v) * r;\n\t\t\t\t\tlet z = Math.cos(v) * r;\n\t\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\t\tcolors.push(color.r, color.g, color.b); // second vertex\n\n\t\t\t\t\tv = (j + 1) / divisions * (Math.PI * 2);\n\t\t\t\t\tx = Math.sin(v) * r;\n\t\t\t\t\tz = Math.cos(v) * r;\n\t\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'PolarGridHelper';\n\t\t}\n\n\t}\n\n\tconst _v1 = /*@__PURE__*/new Vector3();\n\n\tconst _v2 = /*@__PURE__*/new Vector3();\n\n\tconst _v3 = /*@__PURE__*/new Vector3();\n\n\tclass DirectionalLightHelper extends Object3D {\n\t\tconstructor(light, size, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tif (size === undefined) size = 1;\n\t\t\tlet geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tthis.lightPlane = new Line(geometry, material);\n\t\t\tthis.add(this.lightPlane);\n\t\t\tgeometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\t\t\tthis.targetLine = new Line(geometry, material);\n\t\t\tthis.add(this.targetLine);\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.lightPlane.geometry.dispose();\n\t\t\tthis.lightPlane.material.dispose();\n\t\t\tthis.targetLine.geometry.dispose();\n\t\t\tthis.targetLine.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\t_v1.setFromMatrixPosition(this.light.matrixWorld);\n\n\t\t\t_v2.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\t_v3.subVectors(_v2, _v1);\n\n\t\t\tthis.lightPlane.lookAt(_v2);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.lightPlane.material.color.set(this.color);\n\t\t\t\tthis.targetLine.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.lightPlane.material.color.copy(this.light.color);\n\t\t\t\tthis.targetLine.material.color.copy(this.light.color);\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt(_v2);\n\t\t\tthis.targetLine.scale.z = _v3.length();\n\t\t}\n\n\t}\n\n\tconst _vector = /*@__PURE__*/new Vector3();\n\n\tconst _camera = /*@__PURE__*/new Camera();\n\t/**\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\n\tclass CameraHelper extends LineSegments {\n\t\tconstructor(camera) {\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tconst vertices = [];\n\t\t\tconst colors = [];\n\t\t\tconst pointMap = {}; // colors\n\n\t\t\tconst colorFrustum = new Color(0xffaa00);\n\t\t\tconst colorCone = new Color(0xff0000);\n\t\t\tconst colorUp = new Color(0x00aaff);\n\t\t\tconst colorTarget = new Color(0xffffff);\n\t\t\tconst colorCross = new Color(0x333333); // near\n\n\t\t\taddLine('n1', 'n2', colorFrustum);\n\t\t\taddLine('n2', 'n4', colorFrustum);\n\t\t\taddLine('n4', 'n3', colorFrustum);\n\t\t\taddLine('n3', 'n1', colorFrustum); // far\n\n\t\t\taddLine('f1', 'f2', colorFrustum);\n\t\t\taddLine('f2', 'f4', colorFrustum);\n\t\t\taddLine('f4', 'f3', colorFrustum);\n\t\t\taddLine('f3', 'f1', colorFrustum); // sides\n\n\t\t\taddLine('n1', 'f1', colorFrustum);\n\t\t\taddLine('n2', 'f2', colorFrustum);\n\t\t\taddLine('n3', 'f3', colorFrustum);\n\t\t\taddLine('n4', 'f4', colorFrustum); // cone\n\n\t\t\taddLine('p', 'n1', colorCone);\n\t\t\taddLine('p', 'n2', colorCone);\n\t\t\taddLine('p', 'n3', colorCone);\n\t\t\taddLine('p', 'n4', colorCone); // up\n\n\t\t\taddLine('u1', 'u2', colorUp);\n\t\t\taddLine('u2', 'u3', colorUp);\n\t\t\taddLine('u3', 'u1', colorUp); // target\n\n\t\t\taddLine('c', 't', colorTarget);\n\t\t\taddLine('p', 'c', colorCross); // cross\n\n\t\t\taddLine('cn1', 'cn2', colorCross);\n\t\t\taddLine('cn3', 'cn4', colorCross);\n\t\t\taddLine('cf1', 'cf2', colorCross);\n\t\t\taddLine('cf3', 'cf4', colorCross);\n\n\t\t\tfunction addLine(a, b, color) {\n\t\t\t\taddPoint(a, color);\n\t\t\t\taddPoint(b, color);\n\t\t\t}\n\n\t\t\tfunction addPoint(id, color) {\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\n\t\t\t\tif (pointMap[id] === undefined) {\n\t\t\t\t\tpointMap[id] = [];\n\t\t\t\t}\n\n\t\t\t\tpointMap[id].push(vertices.length / 3 - 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'CameraHelper';\n\t\t\tthis.camera = camera;\n\t\t\tif (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();\n\t\t\tthis.matrix = camera.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.pointMap = pointMap;\n\t\t\tthis.update();\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst pointMap = this.pointMap;\n\t\t\tconst w = 1,\n\t\t\t\t\t\th = 1; // we need just camera projection matrix inverse\n\t\t\t// world matrix must be identity\n\n\t\t\t_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target\n\n\n\t\t\tsetPoint('c', pointMap, geometry, _camera, 0, 0, -1);\n\t\t\tsetPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near\n\n\t\t\tsetPoint('n1', pointMap, geometry, _camera, -w, -h, -1);\n\t\t\tsetPoint('n2', pointMap, geometry, _camera, w, -h, -1);\n\t\t\tsetPoint('n3', pointMap, geometry, _camera, -w, h, -1);\n\t\t\tsetPoint('n4', pointMap, geometry, _camera, w, h, -1); // far\n\n\t\t\tsetPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\n\t\t\tsetPoint('f2', pointMap, geometry, _camera, w, -h, 1);\n\t\t\tsetPoint('f3', pointMap, geometry, _camera, -w, h, 1);\n\t\t\tsetPoint('f4', pointMap, geometry, _camera, w, h, 1); // up\n\n\t\t\tsetPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross\n\n\t\t\tsetPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\n\t\t\tsetPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n\t\t\tsetPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\n\t\t\tsetPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n\t\t\tsetPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);\n\t\t\tsetPoint('cn2', pointMap, geometry, _camera, w, 0, -1);\n\t\t\tsetPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);\n\t\t\tsetPoint('cn4', pointMap, geometry, _camera, 0, h, -1);\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t}\n\n\tfunction setPoint(point, pointMap, geometry, camera, x, y, z) {\n\t\t_vector.set(x, y, z).unproject(camera);\n\n\t\tconst points = pointMap[point];\n\n\t\tif (points !== undefined) {\n\t\t\tconst position = geometry.getAttribute('position');\n\n\t\t\tfor (let i = 0, l = points.length; i < l; i++) {\n\t\t\t\tposition.setXYZ(points[i], _vector.x, _vector.y, _vector.z);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst _box = /*@__PURE__*/new Box3();\n\n\tclass BoxHelper extends LineSegments {\n\t\tconstructor(object, color = 0xffff00) {\n\t\t\tconst indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tconst positions = new Float32Array(8 * 3);\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.object = object;\n\t\t\tthis.type = 'BoxHelper';\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.update();\n\t\t}\n\n\t\tupdate(object) {\n\t\t\tif (object !== undefined) {\n\t\t\t\tconsole.warn('THREE.BoxHelper: .update() has no longer arguments.');\n\t\t\t}\n\n\t\t\tif (this.object !== undefined) {\n\t\t\t\t_box.setFromObject(this.object);\n\t\t\t}\n\n\t\t\tif (_box.isEmpty()) return;\n\t\t\tconst min = _box.min;\n\t\t\tconst max = _box.max;\n\t\t\t/*\n\t\t\t\t5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\t\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tconst position = this.geometry.attributes.position;\n\t\t\tconst array = position.array;\n\t\t\tarray[0] = max.x;\n\t\t\tarray[1] = max.y;\n\t\t\tarray[2] = max.z;\n\t\t\tarray[3] = min.x;\n\t\t\tarray[4] = max.y;\n\t\t\tarray[5] = max.z;\n\t\t\tarray[6] = min.x;\n\t\t\tarray[7] = min.y;\n\t\t\tarray[8] = max.z;\n\t\t\tarray[9] = max.x;\n\t\t\tarray[10] = min.y;\n\t\t\tarray[11] = max.z;\n\t\t\tarray[12] = max.x;\n\t\t\tarray[13] = max.y;\n\t\t\tarray[14] = min.z;\n\t\t\tarray[15] = min.x;\n\t\t\tarray[16] = max.y;\n\t\t\tarray[17] = min.z;\n\t\t\tarray[18] = min.x;\n\t\t\tarray[19] = min.y;\n\t\t\tarray[20] = min.z;\n\t\t\tarray[21] = max.x;\n\t\t\tarray[22] = min.y;\n\t\t\tarray[23] = min.z;\n\t\t\tposition.needsUpdate = true;\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t}\n\n\t\tsetFromObject(object) {\n\t\t\tthis.object = object;\n\t\t\tthis.update();\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tLineSegments.prototype.copy.call(this, source);\n\t\t\tthis.object = source.object;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Box3Helper extends LineSegments {\n\t\tconstructor(box, color = 0xffff00) {\n\t\t\tconst indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tconst positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.box = box;\n\t\t\tthis.type = 'Box3Helper';\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tconst box = this.box;\n\t\t\tif (box.isEmpty()) return;\n\t\t\tbox.getCenter(this.position);\n\t\t\tbox.getSize(this.scale);\n\t\t\tthis.scale.multiplyScalar(0.5);\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tclass PlaneHelper extends Line {\n\t\tconstructor(plane, size = 1, hex = 0xffff00) {\n\t\t\tconst color = hex;\n\t\t\tconst positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.computeBoundingSphere();\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.type = 'PlaneHelper';\n\t\t\tthis.plane = plane;\n\t\t\tthis.size = size;\n\t\t\tconst positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n\t\t\tconst geometry2 = new BufferGeometry();\n\t\t\tgeometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\t\t\tgeometry2.computeBoundingSphere();\n\t\t\tthis.add(new Mesh(geometry2, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\topacity: 0.2,\n\t\t\t\ttransparent: true,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false\n\t\t\t})));\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tlet scale = -this.plane.constant;\n\t\t\tif (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n\t\t\tthis.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n\t\t\tthis.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\t\tthis.lookAt(this.plane.normal);\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tconst _axis = /*@__PURE__*/new Vector3();\n\n\tlet _lineGeometry, _coneGeometry;\n\n\tclass ArrowHelper extends Object3D {\n\t\t// dir is assumed to be normalized\n\t\tconstructor(dir = new Vector3(0, 0, 1), origin = new Vector3(0, 0, 0), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ArrowHelper';\n\n\t\t\tif (_lineGeometry === undefined) {\n\t\t\t\t_lineGeometry = new BufferGeometry();\n\n\t\t\t\t_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n\t\t\t\t_coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);\n\n\t\t\t\t_coneGeometry.translate(0, -0.5, 0);\n\t\t\t}\n\n\t\t\tthis.position.copy(origin);\n\t\t\tthis.line = new Line(_lineGeometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.line.matrixAutoUpdate = false;\n\t\t\tthis.add(this.line);\n\t\t\tthis.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.cone.matrixAutoUpdate = false;\n\t\t\tthis.add(this.cone);\n\t\t\tthis.setDirection(dir);\n\t\t\tthis.setLength(length, headLength, headWidth);\n\t\t}\n\n\t\tsetDirection(dir) {\n\t\t\t// dir is assumed to be normalized\n\t\t\tif (dir.y > 0.99999) {\n\t\t\t\tthis.quaternion.set(0, 0, 0, 1);\n\t\t\t} else if (dir.y < -0.99999) {\n\t\t\t\tthis.quaternion.set(1, 0, 0, 0);\n\t\t\t} else {\n\t\t\t\t_axis.set(dir.z, 0, -dir.x).normalize();\n\n\t\t\t\tconst radians = Math.acos(dir.y);\n\t\t\t\tthis.quaternion.setFromAxisAngle(_axis, radians);\n\t\t\t}\n\t\t}\n\n\t\tsetLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {\n\t\t\tthis.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n\n\t\t\tthis.line.updateMatrix();\n\t\t\tthis.cone.scale.set(headWidth, headLength, headWidth);\n\t\t\tthis.cone.position.y = length;\n\t\t\tthis.cone.updateMatrix();\n\t\t}\n\n\t\tsetColor(color) {\n\t\t\tthis.line.material.color.set(color);\n\t\t\tthis.cone.material.color.set(color);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source, false);\n\t\t\tthis.line.copy(source.line);\n\t\t\tthis.cone.copy(source.cone);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AxesHelper extends LineSegments {\n\t\tconstructor(size = 1) {\n\t\t\tconst vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n\t\t\tconst colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'AxesHelper';\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t}\n\n\tconst _floatView = new Float32Array(1);\n\n\tconst _int32View = new Int32Array(_floatView.buffer);\n\n\tclass DataUtils {\n\t\t// Converts float32 to float16 (stored as uint16 value).\n\t\tstatic toHalfFloat(val) {\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t* used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t* by James Tursa?s half-precision code. */\n\t\t\t_floatView[0] = val;\n\t\t\tconst x = _int32View[0];\n\t\t\tlet bits = x >> 16 & 0x8000;\n\t\t\t/* Get the sign */\n\n\t\t\tlet m = x >> 12 & 0x07ff;\n\t\t\t/* Keep one extra bit for rounding */\n\n\t\t\tconst e = x >> 23 & 0xff;\n\t\t\t/* Using int is faster here */\n\n\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t* half, return signed zero. */\n\n\t\t\tif (e < 103) return bits;\n\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\n\t\t\tif (e > 142) {\n\t\t\t\tbits |= 0x7c00;\n\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\n\t\t\t\tbits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n\t\t\t\treturn bits;\n\t\t\t}\n\t\t\t/* If exponent underflows but not too much, return a denormal */\n\n\n\t\t\tif (e < 113) {\n\t\t\t\tm |= 0x0800;\n\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t* to 1, which is OK. */\n\n\t\t\t\tbits |= (m >> 114 - e) + (m >> 113 - e & 1);\n\t\t\t\treturn bits;\n\t\t\t}\n\n\t\t\tbits |= e - 112 << 10 | m >> 1;\n\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t* the exponent, which is OK. */\n\n\t\t\tbits += m & 1;\n\t\t\treturn bits;\n\t\t}\n\n\t}\n\n\tconst LOD_MIN = 4;\n\tconst LOD_MAX = 8;\n\tconst SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\n\tconst EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n\tconst TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\n\tconst MAX_SAMPLES = 20;\n\tconst ENCODINGS = {\n\t\t[LinearEncoding]: 0,\n\t\t[sRGBEncoding]: 1,\n\t\t[RGBEEncoding]: 2,\n\t\t[RGBM7Encoding]: 3,\n\t\t[RGBM16Encoding]: 4,\n\t\t[RGBDEncoding]: 5,\n\t\t[GammaEncoding]: 6\n\t};\n\tconst backgroundMaterial = new MeshBasicMaterial({\n\t\tside: BackSide,\n\t\tdepthWrite: false,\n\t\tdepthTest: false\n\t});\n\tconst backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);\n\n\tconst _flatCamera = /*@__PURE__*/new OrthographicCamera();\n\n\tconst {\n\t\t_lodPlanes,\n\t\t_sizeLods,\n\t\t_sigmas\n\t} = /*@__PURE__*/_createPlanes();\n\n\tconst _clearColor = /*@__PURE__*/new Color();\n\n\tlet _oldTarget = null; // Golden Ratio\n\n\tconst PHI = (1 + Math.sqrt(5)) / 2;\n\tconst INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\n\tconst _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];\n\t/**\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t *\n\t * Paper: Fast, Accurate Image-Based Lighting\n\t * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n\t*/\n\n\tfunction convertLinearToRGBE(color) {\n\t\tconst maxComponent = Math.max(color.r, color.g, color.b);\n\t\tconst fExp = Math.min(Math.max(Math.ceil(Math.log2(maxComponent)), -128.0), 127.0);\n\t\tcolor.multiplyScalar(Math.pow(2.0, -fExp));\n\t\tconst alpha = (fExp + 128.0) / 255.0;\n\t\treturn alpha;\n\t}\n\n\tclass PMREMGenerator {\n\t\tconstructor(renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t\tthis._pingPongRenderTarget = null;\n\t\t\tthis._blurMaterial = _getBlurShader(MAX_SAMPLES);\n\t\t\tthis._equirectShader = null;\n\t\t\tthis._cubemapShader = null;\n\n\t\t\tthis._compileMaterial(this._blurMaterial);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\n\n\t\tfromScene(scene, sigma = 0, near = 0.1, far = 100) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\n\t\t\tthis._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\n\n\t\t\tif (sigma > 0) {\n\t\t\t\tthis._blur(cubeUVRenderTarget, 0, 0, sigma);\n\t\t\t}\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\n\n\t\tfromEquirectangular(equirectangular) {\n\t\t\treturn this._fromTexture(equirectangular);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\n\n\t\tfromCubemap(cubemap) {\n\t\t\treturn this._fromTexture(cubemap);\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\n\n\t\tcompileCubemapShader() {\n\t\t\tif (this._cubemapShader === null) {\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t\tthis._compileMaterial(this._cubemapShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\n\n\t\tcompileEquirectangularShader() {\n\t\t\tif (this._equirectShader === null) {\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t\tthis._compileMaterial(this._equirectShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\n\n\t\tdispose() {\n\t\t\tthis._blurMaterial.dispose();\n\n\t\t\tif (this._cubemapShader !== null) this._cubemapShader.dispose();\n\t\t\tif (this._equirectShader !== null) this._equirectShader.dispose();\n\n\t\t\tfor (let i = 0; i < _lodPlanes.length; i++) {\n\t\t\t\t_lodPlanes[i].dispose();\n\t\t\t}\n\t\t} // private interface\n\n\n\t\t_cleanup(outputTarget) {\n\t\t\tthis._pingPongRenderTarget.dispose();\n\n\t\t\tthis._renderer.setRenderTarget(_oldTarget);\n\n\t\t\toutputTarget.scissorTest = false;\n\n\t\t\t_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n\t\t}\n\n\t\t_fromTexture(texture) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tconst cubeUVRenderTarget = this._allocateTargets(texture);\n\n\t\t\tthis._textureToCubeUV(texture, cubeUVRenderTarget);\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\n\t\t_allocateTargets(texture) {\n\t\t\t// warning: null texture is valid\n\t\t\tconst params = {\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tformat: RGBEFormat,\n\t\t\t\tencoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,\n\t\t\t\tdepthBuffer: false\n\t\t\t};\n\n\t\t\tconst cubeUVRenderTarget = _createRenderTarget(params);\n\n\t\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget(params);\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\n\t\t_compileMaterial(material) {\n\t\t\tconst tmpMesh = new Mesh(_lodPlanes[0], material);\n\n\t\t\tthis._renderer.compile(tmpMesh, _flatCamera);\n\t\t}\n\n\t\t_sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\n\t\t\tconst fov = 90;\n\t\t\tconst aspect = 1;\n\t\t\tconst cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tconst upSign = [1, -1, 1, 1, 1, 1];\n\t\t\tconst forwardSign = [1, 1, 1, -1, -1, -1];\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst originalAutoClear = renderer.autoClear;\n\t\t\tconst outputEncoding = renderer.outputEncoding;\n\t\t\tconst toneMapping = renderer.toneMapping;\n\t\t\trenderer.getClearColor(_clearColor);\n\t\t\trenderer.toneMapping = NoToneMapping;\n\t\t\trenderer.outputEncoding = LinearEncoding;\n\t\t\trenderer.autoClear = false;\n\t\t\tlet useSolidColor = false;\n\t\t\tconst background = scene.background;\n\n\t\t\tif (background) {\n\t\t\t\tif (background.isColor) {\n\t\t\t\t\tbackgroundMaterial.color.copy(background).convertSRGBToLinear();\n\t\t\t\t\tscene.background = null;\n\t\t\t\t\tconst alpha = convertLinearToRGBE(backgroundMaterial.color);\n\t\t\t\t\tbackgroundMaterial.opacity = alpha;\n\t\t\t\t\tuseSolidColor = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbackgroundMaterial.color.copy(_clearColor).convertSRGBToLinear();\n\t\t\t\tconst alpha = convertLinearToRGBE(backgroundMaterial.color);\n\t\t\t\tbackgroundMaterial.opacity = alpha;\n\t\t\t\tuseSolidColor = true;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst col = i % 3;\n\n\t\t\t\tif (col == 0) {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(forwardSign[i], 0, 0);\n\t\t\t\t} else if (col == 1) {\n\t\t\t\t\tcubeCamera.up.set(0, 0, upSign[i]);\n\t\t\t\t\tcubeCamera.lookAt(0, forwardSign[i], 0);\n\t\t\t\t} else {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(0, 0, forwardSign[i]);\n\t\t\t\t}\n\n\t\t\t\t_setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\n\n\t\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\n\t\t\t\tif (useSolidColor) {\n\t\t\t\t\trenderer.render(backgroundBox, cubeCamera);\n\t\t\t\t}\n\n\t\t\t\trenderer.render(scene, cubeCamera);\n\t\t\t}\n\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.outputEncoding = outputEncoding;\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t}\n\n\t\t_textureToCubeUV(texture, cubeUVRenderTarget) {\n\t\t\tconst renderer = this._renderer;\n\n\t\t\tif (texture.isCubeTexture) {\n\t\t\t\tif (this._cubemapShader == null) {\n\t\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._equirectShader == null) {\n\t\t\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\t\tconst mesh = new Mesh(_lodPlanes[0], material);\n\t\t\tconst uniforms = material.uniforms;\n\t\t\tuniforms['envMap'].value = texture;\n\n\t\t\tif (!texture.isCubeTexture) {\n\t\t\t\tuniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);\n\t\t\t}\n\n\t\t\tuniforms['inputEncoding'].value = ENCODINGS[texture.encoding];\n\t\t\tuniforms['outputEncoding'].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];\n\n\t\t\t_setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\n\n\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\t\t\trenderer.render(mesh, _flatCamera);\n\t\t}\n\n\t\t_applyPMREM(cubeUVRenderTarget) {\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst autoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tfor (let i = 1; i < TOTAL_LODS; i++) {\n\t\t\t\tconst sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);\n\t\t\t\tconst poleAxis = _axisDirections[(i - 1) % _axisDirections.length];\n\n\t\t\t\tthis._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n\t\t\t}\n\n\t\t\trenderer.autoClear = autoClear;\n\t\t}\n\t\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\n\n\t\t_blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n\t\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\t\tthis._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n\n\t\t\tthis._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n\t\t}\n\n\t\t_halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst blurMaterial = this._blurMaterial;\n\n\t\t\tif (direction !== 'latitudinal' && direction !== 'longitudinal') {\n\t\t\t\tconsole.error('blur direction must be either latitudinal or longitudinal!');\n\t\t\t} // Number of standard deviations at which to cut off the discrete approximation.\n\n\n\t\t\tconst STANDARD_DEVIATIONS = 3;\n\t\t\tconst blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);\n\t\t\tconst blurUniforms = blurMaterial.uniforms;\n\t\t\tconst pixels = _sizeLods[lodIn] - 1;\n\t\t\tconst radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n\t\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\t\tconst samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n\n\t\t\tif (samples > MAX_SAMPLES) {\n\t\t\t\tconsole.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);\n\t\t\t}\n\n\t\t\tconst weights = [];\n\t\t\tlet sum = 0;\n\n\t\t\tfor (let i = 0; i < MAX_SAMPLES; ++i) {\n\t\t\t\tconst x = i / sigmaPixels;\n\t\t\t\tconst weight = Math.exp(-x * x / 2);\n\t\t\t\tweights.push(weight);\n\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tsum += weight;\n\t\t\t\t} else if (i < samples) {\n\t\t\t\t\tsum += 2 * weight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < weights.length; i++) {\n\t\t\t\tweights[i] = weights[i] / sum;\n\t\t\t}\n\n\t\t\tblurUniforms['envMap'].value = targetIn.texture;\n\t\t\tblurUniforms['samples'].value = samples;\n\t\t\tblurUniforms['weights'].value = weights;\n\t\t\tblurUniforms['latitudinal'].value = direction === 'latitudinal';\n\n\t\t\tif (poleAxis) {\n\t\t\t\tblurUniforms['poleAxis'].value = poleAxis;\n\t\t\t}\n\n\t\t\tblurUniforms['dTheta'].value = radiansPerPixel;\n\t\t\tblurUniforms['mipInt'].value = LOD_MAX - lodIn;\n\t\t\tblurUniforms['inputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tblurUniforms['outputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tconst outputSize = _sizeLods[lodOut];\n\t\t\tconst x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\n\t\t\tconst y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\n\n\t\t\t_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n\n\t\t\trenderer.setRenderTarget(targetOut);\n\t\t\trenderer.render(blurMesh, _flatCamera);\n\t\t}\n\n\t}\n\n\tfunction _isLDR(texture) {\n\t\tif (texture === undefined || texture.type !== UnsignedByteType) return false;\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\t}\n\n\tfunction _createPlanes() {\n\t\tconst _lodPlanes = [];\n\t\tconst _sizeLods = [];\n\t\tconst _sigmas = [];\n\t\tlet lod = LOD_MAX;\n\n\t\tfor (let i = 0; i < TOTAL_LODS; i++) {\n\t\t\tconst sizeLod = Math.pow(2, lod);\n\n\t\t\t_sizeLods.push(sizeLod);\n\n\t\t\tlet sigma = 1.0 / sizeLod;\n\n\t\t\tif (i > LOD_MAX - LOD_MIN) {\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\n\t\t\t} else if (i == 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\t_sigmas.push(sigma);\n\n\t\t\tconst texelSize = 1.0 / (sizeLod - 1);\n\t\t\tconst min = -texelSize / 2;\n\t\t\tconst max = 1 + texelSize / 2;\n\t\t\tconst uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n\t\t\tconst cubeFaces = 6;\n\t\t\tconst vertices = 6;\n\t\t\tconst positionSize = 3;\n\t\t\tconst uvSize = 2;\n\t\t\tconst faceIndexSize = 1;\n\t\t\tconst position = new Float32Array(positionSize * vertices * cubeFaces);\n\t\t\tconst uv = new Float32Array(uvSize * vertices * cubeFaces);\n\t\t\tconst faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n\n\t\t\tfor (let face = 0; face < cubeFaces; face++) {\n\t\t\t\tconst x = face % 3 * 2 / 3 - 1;\n\t\t\t\tconst y = face > 2 ? 0 : -1;\n\t\t\t\tconst coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n\t\t\t\tposition.set(coordinates, positionSize * vertices * face);\n\t\t\t\tuv.set(uv1, uvSize * vertices * face);\n\t\t\t\tconst fill = [face, face, face, face, face, face];\n\t\t\t\tfaceIndex.set(fill, faceIndexSize * vertices * face);\n\t\t\t}\n\n\t\t\tconst planes = new BufferGeometry();\n\t\t\tplanes.setAttribute('position', new BufferAttribute(position, positionSize));\n\t\t\tplanes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n\t\t\tplanes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n\n\t\t\t_lodPlanes.push(planes);\n\n\t\t\tif (lod > LOD_MIN) {\n\t\t\t\tlod--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t_lodPlanes,\n\t\t\t_sizeLods,\n\t\t\t_sigmas\n\t\t};\n\t}\n\n\tfunction _createRenderTarget(params) {\n\t\tconst cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\t}\n\n\tfunction _setViewport(target, x, y, width, height) {\n\t\ttarget.viewport.set(x, y, width, height);\n\t\ttarget.scissor.set(x, y, width, height);\n\t}\n\n\tfunction _getBlurShader(maxSamples) {\n\t\tconst weights = new Float32Array(maxSamples);\n\t\tconst poleAxis = new Vector3(0, 1, 0);\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'SphericalGaussianBlur',\n\t\t\tdefines: {\n\t\t\t\t'n': maxSamples\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'samples': {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\t'weights': {\n\t\t\t\t\tvalue: weights\n\t\t\t\t},\n\t\t\t\t'latitudinal': {\n\t\t\t\t\tvalue: false\n\t\t\t\t},\n\t\t\t\t'dTheta': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'mipInt': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'poleAxis': {\n\t\t\t\t\tvalue: poleAxis\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getEquirectShader() {\n\t\tconst texelSize = new Vector2(1, 1);\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'EquirectangularToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'texelSize': {\n\t\t\t\t\tvalue: texelSize\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCubemapShader() {\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'CubemapToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t${_getEncodings()}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCommonVertexShader() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`\n\t\t);\n\t}\n\n\tfunction _getEncodings() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t`\n\t\t);\n\t}\n\n\tconst LineStrip = 0;\n\tconst LinePieces = 1;\n\tconst NoColors = 0;\n\tconst FaceColors = 1;\n\tconst VertexColors = 2;\n\tfunction MeshFaceMaterial(materials) {\n\t\tconsole.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\n\t\treturn materials;\n\t}\n\tfunction MultiMaterial(materials = []) {\n\t\tconsole.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\n\t\tmaterials.clone = function () {\n\t\t\treturn materials.slice();\n\t\t};\n\n\t\treturn materials;\n\t}\n\tfunction PointCloud(geometry, material) {\n\t\tconsole.warn('THREE.PointCloud has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction Particle(material) {\n\t\tconsole.warn('THREE.Particle has been renamed to THREE.Sprite.');\n\t\treturn new Sprite(material);\n\t}\n\tfunction ParticleSystem(geometry, material) {\n\t\tconsole.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction PointCloudMaterial(parameters) {\n\t\tconsole.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleBasicMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleSystemMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction Vertex(x, y, z) {\n\t\tconsole.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n\t\treturn new Vector3(x, y, z);\n\t} //\n\n\tfunction DynamicBufferAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');\n\t\treturn new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);\n\t}\n\tfunction Int8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');\n\t\treturn new Int8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');\n\t\treturn new Uint8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8ClampedAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');\n\t\treturn new Uint8ClampedBufferAttribute(array, itemSize);\n\t}\n\tfunction Int16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');\n\t\treturn new Int16BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');\n\t\treturn new Uint16BufferAttribute(array, itemSize);\n\t}\n\tfunction Int32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');\n\t\treturn new Int32BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');\n\t\treturn new Uint32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');\n\t\treturn new Float32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float64Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');\n\t\treturn new Float64BufferAttribute(array, itemSize);\n\t} //\n\n\tCurve.create = function (construct, getPoint) {\n\t\tconsole.log('THREE.Curve.create() has been deprecated');\n\t\tconstruct.prototype = Object.create(Curve.prototype);\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\t\treturn construct;\n\t}; //\n\n\n\tPath.prototype.fromPoints = function (points) {\n\t\tconsole.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\n\t\treturn this.setFromPoints(points);\n\t}; //\n\n\n\tfunction AxisHelper(size) {\n\t\tconsole.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\n\t\treturn new AxesHelper(size);\n\t}\n\tfunction BoundingBoxHelper(object, color) {\n\t\tconsole.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');\n\t\treturn new BoxHelper(object, color);\n\t}\n\tfunction EdgesHelper(object, hex) {\n\t\tconsole.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\n\t\treturn new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\t\tconsole.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\t\tconsole.error('THREE.SkeletonHelper: update() no longer needs to be called.');\n\t};\n\n\tfunction WireframeHelper(object, hex) {\n\t\tconsole.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\n\t\treturn new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t} //\n\n\tLoader.prototype.extractUrlBase = function (url) {\n\t\tconsole.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');\n\t\treturn LoaderUtils.extractUrlBase(url);\n\t};\n\n\tLoader.Handlers = {\n\t\tadd: function ()\n\t\t/* regex, loader */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');\n\t\t},\n\t\tget: function ()\n\t\t/* file */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');\n\t\t}\n\t};\n\tfunction XHRLoader(manager) {\n\t\tconsole.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\n\t\treturn new FileLoader(manager);\n\t}\n\tfunction BinaryTextureLoader(manager) {\n\t\tconsole.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\n\t\treturn new DataTextureLoader(manager);\n\t} //\n\n\tBox2.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox2.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox2.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox2.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tBox3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox3.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox3.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox3.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t};\n\n\tBox3.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tSphere.prototype.empty = function () {\n\t\tconsole.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t}; //\n\n\n\tFrustum.prototype.setFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');\n\t\treturn this.setFromProjectionMatrix(m);\n\t}; //\n\n\n\tLine3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Line3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t}; //\n\n\n\tMatrix3.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix3.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n\t\treturn vector.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.multiplyVector3Array = function ()\n\t/* a */\n\t{\n\t\tconsole.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');\n\t\treturn attribute.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.applyToVector3Array = function ()\n\t/* array, offset, length */\n\t{\n\t\tconsole.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tMatrix4.prototype.extractPosition = function (m) {\n\t\tconsole.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n\t\treturn this.copyPosition(m);\n\t};\n\n\tMatrix4.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix4.prototype.getPosition = function () {\n\t\tconsole.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n\t\treturn new Vector3().setFromMatrixColumn(this, 3);\n\t};\n\n\tMatrix4.prototype.setRotationFromQuaternion = function (q) {\n\t\tconsole.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n\t\treturn this.makeRotationFromQuaternion(q);\n\t};\n\n\tMatrix4.prototype.multiplyToArray = function () {\n\t\tconsole.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\n\t};\n\n\tMatrix4.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector4 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector3Array = function ()\n\t/* a */\n\t{\n\t\tconsole.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateAxis = function (v) {\n\t\tconsole.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n\t\tv.transformDirection(this);\n\t};\n\n\tMatrix4.prototype.crossVector = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.translate = function () {\n\t\tconsole.error('THREE.Matrix4: .translate() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateX = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateX() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateY = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateY() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateZ = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateZ() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateByAxis = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n\t};\n\n\tMatrix4.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');\n\t\treturn attribute.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.applyToVector3Array = function ()\n\t/* array, offset, length */\n\t{\n\t\tconsole.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.makeFrustum = function (left, right, bottom, top, near, far) {\n\t\tconsole.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');\n\t\treturn this.makePerspective(left, right, top, bottom, near, far);\n\t};\n\n\tMatrix4.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tPlane.prototype.isIntersectionLine = function (line) {\n\t\tconsole.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n\t\treturn this.intersectsLine(line);\n\t}; //\n\n\n\tQuaternion.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n\t\treturn vector.applyQuaternion(this);\n\t};\n\n\tQuaternion.prototype.inverse = function () {\n\t\tconsole.warn('THREE.Quaternion: .inverse() has been renamed to invert().');\n\t\treturn this.invert();\n\t}; //\n\n\n\tRay.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tRay.prototype.isIntersectionPlane = function (plane) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n\t\treturn this.intersectsPlane(plane);\n\t};\n\n\tRay.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t}; //\n\n\n\tTriangle.prototype.area = function () {\n\t\tconsole.warn('THREE.Triangle: .area() has been renamed to .getArea().');\n\t\treturn this.getArea();\n\t};\n\n\tTriangle.prototype.barycoordFromPoint = function (point, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn this.getBarycoord(point, target);\n\t};\n\n\tTriangle.prototype.midpoint = function (target) {\n\t\tconsole.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');\n\t\treturn this.getMidpoint(target);\n\t};\n\n\tTriangle.prototypenormal = function (target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn this.getNormal(target);\n\t};\n\n\tTriangle.prototype.plane = function (target) {\n\t\tconsole.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');\n\t\treturn this.getPlane(target);\n\t};\n\n\tTriangle.barycoordFromPoint = function (point, a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn Triangle.getBarycoord(point, a, b, c, target);\n\t};\n\n\tTriangle.normal = function (a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn Triangle.getNormal(a, b, c, target);\n\t}; //\n\n\n\tShape.prototype.extractAllPoints = function (divisions) {\n\t\tconsole.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');\n\t\treturn this.extractPoints(divisions);\n\t};\n\n\tShape.prototype.extrude = function (options) {\n\t\tconsole.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\n\t\treturn new ExtrudeGeometry(this, options);\n\t};\n\n\tShape.prototype.makeGeometry = function (options) {\n\t\tconsole.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\n\t\treturn new ShapeGeometry(this, options);\n\t}; //\n\n\n\tVector2.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector2.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector2.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector3.prototype.setEulerFromRotationMatrix = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n\t};\n\n\tVector3.prototype.setEulerFromQuaternion = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n\t};\n\n\tVector3.prototype.getPositionFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n\t\treturn this.setFromMatrixPosition(m);\n\t};\n\n\tVector3.prototype.getScaleFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n\t\treturn this.setFromMatrixScale(m);\n\t};\n\n\tVector3.prototype.getColumnFromMatrix = function (index, matrix) {\n\t\tconsole.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n\t\treturn this.setFromMatrixColumn(matrix, index);\n\t};\n\n\tVector3.prototype.applyProjection = function (m) {\n\t\tconsole.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');\n\t\treturn this.applyMatrix4(m);\n\t};\n\n\tVector3.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector3.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector3.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector4.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector4.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tObject3D.prototype.getChildByName = function (name) {\n\t\tconsole.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n\t\treturn this.getObjectByName(name);\n\t};\n\n\tObject3D.prototype.renderDepth = function () {\n\t\tconsole.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n\t};\n\n\tObject3D.prototype.translate = function (distance, axis) {\n\t\tconsole.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n\t\treturn this.translateOnAxis(axis, distance);\n\t};\n\n\tObject3D.prototype.getWorldRotation = function () {\n\t\tconsole.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');\n\t};\n\n\tObject3D.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t}\n\t\t}\n\t});\n\n\tMesh.prototype.setDrawMode = function () {\n\t\tconsole.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t};\n\n\tObject.defineProperties(Mesh.prototype, {\n\t\tdrawMode: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');\n\t\t\t\treturn TrianglesDrawMode;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t\t}\n\t\t}\n\t});\n\n\tSkinnedMesh.prototype.initBones = function () {\n\t\tconsole.error('THREE.SkinnedMesh: initBones() has been removed.');\n\t}; //\n\n\n\tPerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n\t\tconsole.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');\n\t\tif (filmGauge !== undefined) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength(focalLength);\n\t}; //\n\n\n\tObject.defineProperties(Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .onlyShadow has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .shadowDarkness has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function ()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(DynamicDrawUsage);\n\t\t\t}\n\t\t}\n\t});\n\n\tBufferAttribute.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tBufferAttribute.prototype.copyIndicesArray = function ()\n\t/* indices */\n\t{\n\t\tconsole.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');\n\t}, BufferAttribute.prototype.setArray = function ()\n\t/* array */\n\t{\n\t\tconsole.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\tBufferGeometry.prototype.addIndex = function (index) {\n\t\tconsole.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n\t\tthis.setIndex(index);\n\t};\n\n\tBufferGeometry.prototype.addAttribute = function (name, attribute) {\n\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');\n\n\t\tif (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n\t\t\treturn this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n\t\t}\n\n\t\tif (name === 'index') {\n\t\t\tconsole.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n\t\t\tthis.setIndex(attribute);\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this.setAttribute(name, attribute);\n\t};\n\n\tBufferGeometry.prototype.addDrawCall = function (start, count, indexOffset) {\n\t\tif (indexOffset !== undefined) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n\t\t}\n\n\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n\t\tthis.addGroup(start, count);\n\t};\n\n\tBufferGeometry.prototype.clearDrawCalls = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n\t\tthis.clearGroups();\n\t};\n\n\tBufferGeometry.prototype.computeOffsets = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n\t};\n\n\tBufferGeometry.prototype.removeAttribute = function (name) {\n\t\tconsole.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');\n\t\treturn this.deleteAttribute(name);\n\t};\n\n\tBufferGeometry.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t});\n\n\tInterleavedBuffer.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tInterleavedBuffer.prototype.setArray = function ()\n\t/* array */\n\t{\n\t\tconsole.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\n\tExtrudeGeometry.prototype.getArrays = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShapeList = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShape = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShape() has been removed.');\n\t}; //\n\n\n\tScene.prototype.dispose = function () {\n\t\tconsole.error('THREE.Scene: .dispose() has been removed.');\n\t}; //\n\n\n\tUniform.prototype.onUpdate = function () {\n\t\tconsole.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');\n\t\treturn this;\n\t}; //\n\n\n\tObject.defineProperties(Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t}\n\t\t},\n\t\toverdraw: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapRGB has been removed.');\n\t\t\t\treturn new Color();\n\t\t\t}\n\t\t},\n\t\tshading: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\tthis.flatShading = value === FlatShading;\n\t\t\t}\n\t\t},\n\t\tstencilMask: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\treturn this.stencilFuncMask;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\tthis.stencilFuncMask = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tWebGLRenderer.prototype.clearTarget = function (renderTarget, color, depth, stencil) {\n\t\tconsole.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');\n\t\tthis.setRenderTarget(renderTarget);\n\t\tthis.clear(color, depth, stencil);\n\t};\n\n\tWebGLRenderer.prototype.animate = function (callback) {\n\t\tconsole.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');\n\t\tthis.setAnimationLoop(callback);\n\t};\n\n\tWebGLRenderer.prototype.getCurrentRenderTarget = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\n\t\treturn this.getRenderTarget();\n\t};\n\n\tWebGLRenderer.prototype.getMaxAnisotropy = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');\n\t\treturn this.capabilities.getMaxAnisotropy();\n\t};\n\n\tWebGLRenderer.prototype.getPrecision = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\n\t\treturn this.capabilities.precision;\n\t};\n\n\tWebGLRenderer.prototype.resetGLState = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\n\t\treturn this.state.reset();\n\t};\n\n\tWebGLRenderer.prototype.supportsFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsHalfFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_half_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsStandardDerivatives = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n\t\treturn this.extensions.get('OES_standard_derivatives');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_s3tc');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_pvrtc');\n\t};\n\n\tWebGLRenderer.prototype.supportsBlendMinMax = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n\t\treturn this.extensions.get('EXT_blend_minmax');\n\t};\n\n\tWebGLRenderer.prototype.supportsVertexTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');\n\t\treturn this.capabilities.vertexTextures;\n\t};\n\n\tWebGLRenderer.prototype.supportsInstancedArrays = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n\t\treturn this.extensions.get('ANGLE_instanced_arrays');\n\t};\n\n\tWebGLRenderer.prototype.enableScissorTest = function (boolean) {\n\t\tconsole.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n\t\tthis.setScissorTest(boolean);\n\t};\n\n\tWebGLRenderer.prototype.initMaterial = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPrePlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPostPlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.updateShadowMap = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setFaceCulling = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.allocTextureUnit = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture2D = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTextureCube = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.getActiveMipMapLevel = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');\n\t\treturn this.getActiveMipmapLevel();\n\t};\n\n\tObject.defineProperties(WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function ()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');\n\t\t\t\treturn this.getContext();\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');\n\t\t\t\treturn this.xr;\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\tthis.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t\treturn 1.0;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function ()\n\t\t\t/* cullFace */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t}\n\t});\n\tfunction WebGLRenderTargetCube(width, height, options) {\n\t\tconsole.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');\n\t\treturn new WebGLCubeRenderTarget(width, options);\n\t} //\n\n\tObject.defineProperties(WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tAudio.prototype.load = function (file) {\n\t\tconsole.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\n\t\tconst scope = this;\n\t\tconst audioLoader = new AudioLoader();\n\t\taudioLoader.load(file, function (buffer) {\n\t\t\tscope.setBuffer(buffer);\n\t\t});\n\t\treturn this;\n\t};\n\n\tAudioAnalyser.prototype.getData = function () {\n\t\tconsole.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n\t\treturn this.getFrequencyData();\n\t}; //\n\n\n\tCubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n\t\tconsole.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\n\t\treturn this.update(renderer, scene);\n\t};\n\n\tCubeCamera.prototype.clear = function (renderer, color, depth, stencil) {\n\t\tconsole.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');\n\t\treturn this.renderTarget.clear(renderer, color, depth, stencil);\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n\t\tconst loader = new TextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tconst texture = loader.load(url, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n\t\tconst loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tconst texture = loader.load(urls, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n\t}; //\n\n\n\tfunction CanvasRenderer() {\n\t\tconsole.error('THREE.CanvasRenderer has been removed');\n\t} //\n\n\tfunction JSONLoader() {\n\t\tconsole.error('THREE.JSONLoader has been removed.');\n\t} //\n\n\tconst SceneUtils = {\n\t\tcreateMultiMaterialObject: function ()\n\t\t/* geometry, materials */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tdetach: function ()\n\t\t/* child, parent, scene */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tattach: function ()\n\t\t/* child, scene, parent */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t}\n\t}; //\n\n\tfunction LensFlare() {\n\t\tconsole.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');\n\t}\n\n\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n\t\t\tdetail: {\n\t\t\t\trevision: REVISION\n\t\t\t}\n\t\t}));\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\tif (typeof window !== 'undefined') {\n\t\tif (window.__THREE__) {\n\t\t\tconsole.warn('WARNING: Multiple instances of Three.js being imported.');\n\t\t} else {\n\t\t\twindow.__THREE__ = REVISION;\n\t\t}\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DataUtils = DataUtils;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float16BufferAttribute = Float16BufferAttribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GLBufferAttribute = GLBufferAttribute;\n\texports.GLSL1 = GLSL1;\n\texports.GLSL3 = GLSL3;\n\texports.GammaEncoding = GammaEncoding;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SplineCurve = SplineCurve;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultipleRenderTargets = WebGLMultipleRenderTargets;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","module.exports = function( THREE ) {\n\t/**\n\t * @author qiao / https://github.com/qiao\n\t * @author mrdoob / http://mrdoob.com\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author erich666 / http://erichaines.com\n\t */\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\n\tfunction OrbitControls( object, domElement ) {\n\n\t\tthis.object = object;\n\n\t\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\tthis.target = new THREE.Vector3();\n\n\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\n\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = 0; // radians\n\t\tthis.maxPolarAngle = Math.PI; // radians\n\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\t\tthis.minAzimuthAngle = - Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.25;\n\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = true;\n\t\tthis.zoomSpeed = 1.0;\n\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 1.0;\n\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = true;\n\t\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t\t// Set to false to disable use of the keys\n\t\tthis.enableKeys = true;\n\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\n\t\t// for reset\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\n\t\t//\n\t\t// public methods\n\t\t//\n\n\t\tthis.getPolarAngle = function () {\n\n\t\t\treturn spherical.phi;\n\n\t\t};\n\n\t\tthis.getAzimuthalAngle = function () {\n\n\t\t\treturn spherical.theta;\n\n\t\t};\n\n\t\tthis.reset = function () {\n\n\t\t\tscope.target.copy( scope.target0 );\n\t\t\tscope.object.position.copy( scope.position0 );\n\t\t\tscope.object.zoom = scope.zoom0;\n\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\tscope.update();\n\n\t\t\tstate = STATE.NONE;\n\n\t\t};\n\n\t\t// this method is exposed, but perhaps it would be better if we can make it private...\n\t\tthis.update = function() {\n\n\t\t\tvar offset = new THREE.Vector3();\n\n\t\t\t// so camera.up is the orbit axis\n\t\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\t\tvar quatInverse = quat.clone().inverse();\n\n\t\t\tvar lastPosition = new THREE.Vector3();\n\t\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\t\treturn function update () {\n\n\t\t\t\tvar position = scope.object.position;\n\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t\t// angle from z-axis around y-axis\n\t\t\t\tspherical.setFromVector3( offset );\n\n\t\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t\t}\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t\t// restrict theta to be between desired limits\n\t\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\t\tspherical.makeSafe();\n\n\n\t\t\t\tspherical.radius *= scale;\n\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t\t// move target to panned location\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tscale = 1;\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t\t// update condition is:\n\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\t\tif ( zoomChanged ||\n\t\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\t\tzoomChanged = false;\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t};\n\n\t\t}();\n\n\t\tthis.dispose = function() {\n\n\t\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t\t};\n\n\t\t//\n\t\t// internals\n\t\t//\n\n\t\tvar scope = this;\n\n\t\tvar changeEvent = { type: 'change' };\n\t\tvar startEvent = { type: 'start' };\n\t\tvar endEvent = { type: 'end' };\n\n\t\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\t\tvar state = STATE.NONE;\n\n\t\tvar EPS = 0.000001;\n\n\t\t// current position in spherical coordinates\n\t\tvar spherical = new THREE.Spherical();\n\t\tvar sphericalDelta = new THREE.Spherical();\n\n\t\tvar scale = 1;\n\t\tvar panOffset = new THREE.Vector3();\n\t\tvar zoomChanged = false;\n\n\t\tvar rotateStart = new THREE.Vector2();\n\t\tvar rotateEnd = new THREE.Vector2();\n\t\tvar rotateDelta = new THREE.Vector2();\n\n\t\tvar panStart = new THREE.Vector2();\n\t\tvar panEnd = new THREE.Vector2();\n\t\tvar panDelta = new THREE.Vector2();\n\n\t\tvar dollyStart = new THREE.Vector2();\n\t\tvar dollyEnd = new THREE.Vector2();\n\t\tvar dollyDelta = new THREE.Vector2();\n\n\t\tfunction getAutoRotationAngle() {\n\n\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t\t}\n\n\t\tfunction getZoomScale() {\n\n\t\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t\t}\n\n\t\tfunction rotateLeft( angle ) {\n\n\t\t\tsphericalDelta.theta -= angle;\n\n\t\t}\n\n\t\tfunction rotateUp( angle ) {\n\n\t\t\tsphericalDelta.phi -= angle;\n\n\t\t}\n\n\t\tvar panLeft = function() {\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\t\tv.multiplyScalar( - distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\tvar panUp = function() {\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\n\t\t\t\tv.multiplyScalar( distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\tvar pan = function() {\n\n\t\t\tvar offset = new THREE.Vector3();\n\n\t\t\treturn function pan ( deltaX, deltaY ) {\n\n\t\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\t\t// perspective\n\t\t\t\t\tvar position = scope.object.position;\n\t\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\t\t// orthographic\n\t\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\t\tscope.enablePan = false;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}();\n\n\t\tfunction dollyIn( dollyScale ) {\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tscale /= dollyScale;\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction dollyOut( dollyScale ) {\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tscale *= dollyScale;\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\t\t// event callbacks - update the object state\n\t\t//\n\n\t\tfunction handleMouseDownRotate( event ) {\n\n\t\t\t//console.log( 'handleMouseDownRotate' );\n\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownDolly( event ) {\n\n\t\t\t//console.log( 'handleMouseDownDolly' );\n\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownPan( event ) {\n\n\t\t\t//console.log( 'handleMouseDownPan' );\n\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseMoveRotate( event ) {\n\n\t\t\t//console.log( 'handleMouseMoveRotate' );\n\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMoveDolly( event ) {\n\n\t\t\t//console.log( 'handleMouseMoveDolly' );\n\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMovePan( event ) {\n\n\t\t\t//console.log( 'handleMouseMovePan' );\n\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseUp( event ) {\n\n\t\t\t//console.log( 'handleMouseUp' );\n\n\t\t}\n\n\t\tfunction handleMouseWheel( event ) {\n\n\t\t\t//console.log( 'handleMouseWheel' );\n\n\t\t\tif ( event.deltaY < 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleKeyDown( event ) {\n\n\t\t\t//console.log( 'handleKeyDown' );\n\n\t\t\tswitch ( event.keyCode ) {\n\n\t\t\t\tcase scope.keys.UP:\n\t\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.LEFT:\n\t\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.RIGHT:\n\t\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction handleTouchStartRotate( event ) {\n\n\t\t\t//console.log( 'handleTouchStartRotate' );\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t}\n\n\t\tfunction handleTouchStartDolly( event ) {\n\n\t\t\t//console.log( 'handleTouchStartDolly' );\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyStart.set( 0, distance );\n\n\t\t}\n\n\t\tfunction handleTouchStartPan( event ) {\n\n\t\t\t//console.log( 'handleTouchStartPan' );\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t}\n\n\t\tfunction handleTouchMoveRotate( event ) {\n\n\t\t\t//console.log( 'handleTouchMoveRotate' );\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchMoveDolly( event ) {\n\n\t\t\t//console.log( 'handleTouchMoveDolly' );\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyEnd.set( 0, distance );\n\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchMovePan( event ) {\n\n\t\t\t//console.log( 'handleTouchMovePan' );\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchEnd( event ) {\n\n\t\t\t//console.log( 'handleTouchEnd' );\n\n\t\t}\n\n\t\t//\n\t\t// event handlers - FSM: listen for events and reset state\n\t\t//\n\n\t\tfunction onMouseDown( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\tstate = STATE.PAN;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseUp( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\thandleMouseUp( event );\n\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onMouseWheel( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\thandleMouseWheel( event );\n\n\t\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t}\n\n\t\tfunction onKeyDown( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\t\thandleKeyDown( event );\n\n\t\t}\n\n\t\tfunction onTouchStart( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tswitch ( event.touches.length ) {\n\n\t\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\thandleTouchStartDolly( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\tswitch ( event.touches.length ) {\n\n\t\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMoveDolly( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchEnd( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\thandleTouchEnd( event );\n\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onContextMenu( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t}\n\n\t\t//\n\n\t\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\t\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\t\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t\t// force an update at start\n\n\t\tthis.update();\n\n\t};\n\n\tOrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\tOrbitControls.prototype.constructor = OrbitControls;\n\n\tObject.defineProperties( OrbitControls.prototype, {\n\n\t\tcenter: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\t\treturn this.target;\n\n\t\t\t}\n\n\t\t},\n\n\t\t// backward compatibility\n\n\t\tnoZoom: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\treturn ! this.enableZoom;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\tthis.enableZoom = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoRotate: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\treturn ! this.enableRotate;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\tthis.enableRotate = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoPan: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\treturn ! this.enablePan;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\tthis.enablePan = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoKeys: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\treturn ! this.enableKeys;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\tthis.enableKeys = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tstaticMoving : {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\treturn ! this.enableDamping;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\tthis.enableDamping = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tdynamicDampingFactor : {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\treturn this.dampingFactor;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\tthis.dampingFactor = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\treturn OrbitControls;\n};\n",null,null,null,null,null,null],"names":["HMR_HOST","HMR_PORT","HMR_SECURE","HMR_ENV_HASH","module","bundle","HMR_BUNDLE_ID","OVERLAY_ID","OldModule","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","undefined","checkedAssets","acceptedAssets","assetsToAccept","location","protocol","indexOf","hostname","port","parent","isParcelRequire","WebSocket","getHostname","getPort","test","ws","onmessage","event","JSON","parse","type","removeErrorOverlay","assets","filter","asset","envHash","handled","forEach","didAccept","hmrAcceptCheck","root","id","depsByBundle","console","clear","hmrApply","i","length","hmrAcceptRun","window","reload","ansiDiagnostic","diagnostics","ansi","stack","codeframe","error","message","hints","join","overlay","createErrorOverlay","html","document","body","appendChild","onerror","e","onclose","warn","getElementById","remove","log","createElement","errorHTML","diagnostic","map","hint","innerHTML","modules","parents","k","d","dep","Array","isArray","concat","getParents","link","newLink","cloneNode","onload","parentNode","removeChild","setAttribute","getAttribute","split","Date","now","insertBefore","nextSibling","cssTimeout","setTimeout","links","querySelectorAll","href","servedFromHMRServer","RegExp","absolute","origin","updateLink","reloadCSS","deps","Function","output","cached","cache","some","v","cb","assetsToAlsoAccept","apply","getRandomNum","max","min","Math","floor","random","constructor","velocity","Vector3","acceleration","wonderTheta","maxSpeed","boost","Start","radius","theta","degToRad","phi","mesh","position","x","sin","cos","y","z","Update","time","ApplyForce","multiplyScalar","add","clampLength","head","clone","lookAt","BuildMesh","geometry","CylinderGeometry","rotateX","material","MeshNormalMaterial","Mesh","f","count","params","seek","maxForce","align","effectiveRange","separate","choesin","group","Group","agents","agent","Agent","Align","Separate","Cohesion","AvoidBoxContainer","currAgent","sumVec","steer","otherAgent","dist","distanceTo","divideScalar","normalize","subVectors","closeVec","Seek","target","toGoalVector","distance","steerVector","sumVector","Avoid","currentCreature","wall","computeBoundingSphere","boundingSphere","toMeVector","pow","rangeWidth","rangeHeight","rangeDepth","resetDescription","addEventListener","className","clearTimeout","Boid","OrbitControls","renderer","camera","PerspectiveCamera","innerWidth","innerHeight","controls","domElement","autoRotate","enableDamping","dampingFactor","update","_Resize","aspect","container","clientWidth","clientHeight","updateProjectionMatrix","setSize","setPixelRatio","devicePixelRatio","entities","WebGLRenderer","antialias","cameraController","CameraController","scene","Scene","ambientLight","AmbientLight","intensity","fog","Fog","setAnimationLoop","Add","entity","inGroup","render","Entity","Error","global","factory","exports","define","amd","globalThis","self","THREE","REVISION","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","TOUCH","DOLLY_PAN","DOLLY_ROTATE","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipMapNearestFilter","NearestMipmapLinearFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipMapNearestFilter","LinearMipmapLinearFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","NormalAnimationBlendMode","AdditiveAnimationBlendMode","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","ZeroStencilOp","KeepStencilOp","ReplaceStencilOp","IncrementStencilOp","DecrementStencilOp","IncrementWrapStencilOp","DecrementWrapStencilOp","InvertStencilOp","NeverStencilFunc","LessStencilFunc","EqualStencilFunc","LessEqualStencilFunc","GreaterStencilFunc","NotEqualStencilFunc","GreaterEqualStencilFunc","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","StreamDrawUsage","StaticReadUsage","DynamicReadUsage","StreamReadUsage","StaticCopyUsage","DynamicCopyUsage","StreamCopyUsage","GLSL1","GLSL3","listener","_listeners","listeners","hasEventListener","removeEventListener","listenerArray","index","splice","dispatchEvent","array","slice","l","_lut","toString","_seed","DEG2RAD","PI","RAD2DEG","d0","d1","d2","d3","uuid","toUpperCase","value","n","m","a1","a2","b1","b2","t","lambda","dt","lerp","exp","abs","euclideanModulo","low","high","range","s","degrees","radians","ceil","LN2","q","a","b","c","order","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","MathUtils","Object","freeze","__proto__","generateUUID","clamp","mapLinear","inverseLerp","damp","pingpong","smoothstep","smootherstep","randInt","randFloat","randFloatSpread","seededRandom","radToDeg","isPowerOfTwo","ceilPowerOfTwo","floorPowerOfTwo","setQuaternionFromProperEuler","width","height","setScalar","scalar","setX","setY","setComponent","getComponent","copy","w","addVectors","addScalar","addScaledVector","sub","subScalar","multiply","divide","applyMatrix3","elements","clampScalar","minVal","maxVal","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","angle","atan2","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","Vector2","prototype","isVector2","arguments","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","g","h","invert","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","r","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","scale","rotate","translate","matrix","Matrix3","isMatrix3","_canvas","getDataURL","image","src","HTMLCanvasElement","canvas","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","EventDispatcher","Texture","DEFAULT_IMAGE","mapping","DEFAULT_MAPPING","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","defineProperty","name","mipmaps","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","updateMatrix","source","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","isDataTexture","serializeImage","transformUv","uv","needsUpdate","isTexture","HTMLImageElement","ImageBitmap","ImageUtils","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","epsilon","epsilon2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","Vector4","isVector4","options","depth","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","setTexture","WebGLRenderTarget","isWebGLRenderTarget","il","WebGLMultipleRenderTargets","isWebGLMultipleRenderTargets","samples","WebGLMultisampleRenderTarget","isWebGLMultisampleRenderTarget","_x","_y","_z","_w","slerp","qa","qb","qm","slerpQuaternions","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","Number","EPSILON","len","tDir","multiplyQuaternionsFlat","_onChangeCallback","quaternion","setFromEuler","euler","isEuler","_order","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","conjugate","p","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","Quaternion","isQuaternion","multiplyVectors","applyEuler","applyQuaternion","_quaternion$4","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector$c","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","isVector3","Infinity","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","expandByPoint","setFromCenterAndSize","size","halfSize","_vector$b","setFromObject","object","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","boundingBox","computeBoundingBox","_box$3","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","_center","_extents","_v0$2","_v1$7","_v2$3","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","distanceToPoint","clampedPoint","getBoundingSphere","intersect","_points","Box3","isBox3","_testAxis","v0","extents","j","p0","p1","p2","_box$2","_v1$6","_toFarthestPoint","_toPoint","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","missingRadiusHalf","_vector$a","_segCenter","_segDir","_diff","_edge1","_edge2","_normal$1","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","segExtent","a01","b0","s0","sqrDist","extDet","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","sign","DdQxE2","DdE1xQ","QdN","n14","n24","n34","n41","n42","n43","n44","Matrix4","copyPosition","setFromMatrix3","makeBasis","extractRotation","scaleX","_v1$5","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","yx","zx","zy","x2","y2","z2","wx","wy","wz","decompose","_m1$2","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","isMatrix4","_matrix$1","_quaternion$3","Euler","DefaultOrder","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","RotationOrders","mask","channel","enable","enableAll","toggle","disable","disableAll","layers","_object3DId","_v1$4","_q1","_m1$1","_target","_position$3","_scale$2","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","DefaultUp","onRotationChange","onQuaternionChange","defineProperties","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","Layers","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","userData","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","isObject3D","removeFromParent","attach","getObjectById","getObjectByProperty","getObjectByName","child","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","force","updateParents","updateChildren","geometries","materials","shapes","skeletons","stringify","isInstancedMesh","instanceMatrix","instanceColor","library","element","isMesh","isLine","isPoints","serialize","parameters","shape","isSkinnedMesh","bindMode","bindMatrix","skeleton","uuids","animation","extractFromCache","values","key","recursive","_vector1","_vector2$1","_normalMatrix","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","referencePoint","Plane","isPlane","_v0$1","_v1$3","_v2$2","_v3$1","_vab","_vac","_vbc","_vap","_vbp","_vcp","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","Triangle","getPlane","d4","vc","d5","d6","vb","va","materialId","blending","side","vertexColors","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","alphaToCoverage","premultipliedAlpha","toneMapped","onBuild","onBeforeCompile","customProgramCacheKey","setValues","newValue","flatShading","currentValue","isColor","isRoot","color","getHex","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","envMap","combine","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationColor","sizeAttenuation","linewidth","dashSize","gapSize","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","morphTargets","morphNormals","srcPlanes","dstPlanes","Material","isMaterial","_colorKeywords","_hslA","_hslB","setRGB","setHex","setStyle","hex","setHSL","hue2rgb","style","string","parseFloat","exec","components","parseInt","handleAlpha","charAt","setColorName","toLowerCase","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","SRGBToLinear","copyLinearToSRGB","LinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpColors","lerpHSL","normalized","Color","NAMES","MeshBasicMaterial","isMeshBasicMaterial","_vector$9","_vector2","itemSize","TypeError","usage","updateRange","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZ","setXYZW","onUpload","BufferAttribute","isBufferAttribute","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float16BufferAttribute","isFloat16BufferAttribute","Float32Array","Float64Array","TYPED_ARRAYS","buffer","_id","_m1","_obj","_offset","_box$1","_boxMorphTargets","_vector$8","attributes","morphAttributes","morphTargetsRelative","groups","drawRange","getIndex","setIndex","arrayMax","Uint32BufferAttribute","Uint16BufferAttribute","deleteAttribute","hasAttribute","addGroup","materialIndex","clearGroups","setDrawRange","tangent","Float32BufferAttribute","morphAttributesPosition","isGLBufferAttribute","morphAttribute","isNaN","Sphere","jl","computeFaceNormals","computeTangents","indices","positions","normals","uvs","nVertices","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","isFinite","handleTriangle","tmp2","n2","handleVertex","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","ab","normalizeNormals","merge","isBufferGeometry","attribute1","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","array2","geometry2","BufferGeometry","newAttribute","convertBufferAttribute","morphArray","keys","hasMorphAttributes","attributeArray","_inverseMatrix$2","_ray$2","Ray","_sphere$3","_vA$1","_vB$1","_vC$1","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA$1","_uvB$1","_uvC$1","_intersectionPoint","_intersectionPointWorld","updateMorphTargets","morphTargetInfluences","morphTargetDictionary","assign","ml","String","raycaster","intersects","intersection","morphPosition","groupMaterial","checkBufferGeometryIntersection","faceIndex","face","isGeometry","morphInfluences","influence","boneTransform","checkIntersection","widthSegments","heightSegments","depthSegments","scope","vertices","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","property","uniforms","merged","cloneUniforms","UniformsUtils","mergeUniforms","default_vertex","default_fragment","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","uniform","ShaderMaterial","isShaderMaterial","Camera","fov","zoom","focus","view","filmGauge","filmOffset","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","tan","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","enabled","offsetX","offsetY","clearViewOffset","skew","isPerspectiveCamera","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","_needsFlipEnvMap","CubeTexture","isCubeTexture","dummy","isInteger","fromEquirectangularTexture","shader","tEquirect","BoxGeometry","currentMinFilter","CubeCamera","stencil","WebGLCubeRenderTarget","_sphere$2","_vector$7","p4","p5","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","isAnimating","animationLoop","requestId","frame","requestAnimationFrame","onAnimationFrame","stop","cancelAnimationFrame","setContext","gl","capabilities","isWebGL2","buffers","WeakMap","bufferType","createBuffer","bindBuffer","bufferData","FLOAT","HALF_FLOAT","UNSIGNED_SHORT","SHORT","UNSIGNED_INT","INT","BYTE","UNSIGNED_BYTE","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","isInterleavedBufferAttribute","get","deleteBuffer","delete","elementSize","updateBuffer","width_half","height_half","segment_width","segment_height","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","envmap_physical_pars_fragment","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmission_fragment","transmission_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","ShaderChunk","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","background","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","physical","transmissionSamplerSize","transmissionSamplerMap","cubemaps","state","objects","clearColor","clearAlpha","planeMesh","boxMesh","currentBackground","currentBackgroundVersion","currentTonemapping","renderList","forceClear","isScene","session","getSession","environmentBlendMode","setClear","autoClear","autoClearColor","autoClearDepth","autoClearStencil","toneMapping","unshift","PlaneGeometry","getClearColor","setClearColor","getClearAlpha","setClearAlpha","maxVertexAttributes","MAX_VERTEX_ATTRIBS","extension","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","program","updateBuffers","getBindingState","bindVertexArrayObject","saveCache","ELEMENT_ARRAY_BUFFER","setupVertexAttributes","createVertexArray","createVertexArrayOES","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","programMap","stateMap","createVertexArrayObject","newAttributes","enabledAttributes","attributeDivisors","cachedAttributes","geometryAttributes","attributesNum","cachedAttribute","geometryAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableVertexAttribArray","stride","vertexAttribIPointer","vertexAttribPointer","isInstancedBufferGeometry","initAttributes","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","_maxInstanceCount","enableAttribute","ARRAY_BUFFER","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","disableUnusedAttributes","reset","geometryId","programId","deleteVertexArrayObject","resetDefaultState","setup","releaseStatesOfGeometry","releaseStatesOfProgram","info","mode","drawArrays","primcount","methodName","setMode","renderInstances","maxAnisotropy","has","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","getMaxPrecision","logarithmicDepthBuffer","maxTextures","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","floatVertexTextures","maxSamples","MAX_SAMPLES","getMaxAnisotropy","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","numPlanes","numIntersection","init","enableLocalClipping","projectPlanes","beginShadows","endShadows","resetGlobalState","setState","useCache","materialProperties","nGlobal","lGlobal","dstArray","clippingState","skipTransform","nPlanes","flatSize","viewMatrix","i4","cubemap","mapTextureMapping","onTextureDispose","getExtension","wireframeAttributes","onGeometryDispose","memory","geometryIndex","geometryPosition","previousAttribute","currentAttribute","updateWireframeAttribute","getWireframeAttribute","drawElements","calls","triangles","lines","instanceCount","TRIANGLES","LINES","LINE_STRIP","LINE_LOOP","POINTS","programs","autoReset","influencesList","workInfluences","objectInfluences","influences","sort","absNumericalSort","MAX_SAFE_INTEGER","numericalSort","morphInfluencesSum","morphBaseInfluence","getUniforms","setValue","updateMap","buffergeometry","onInstancedMeshDispose","instancedMesh","wrapR","DataTexture2DArray","isDataTexture2DArray","DataTexture3D","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","nBlocks","blockSize","firstElem","allocateTextureUnit","uniform1f","addr","uniform2f","arraysEqual","uniform2fv","uniform3f","uniform3fv","uniform4f","uniform4fv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniform1ui","uniform2uiv","uniform3uiv","uniform4uiv","unit","safeSetTexture2D","setTexture3D","safeSetTextureCube","setTexture2DArray","setValueV1f","setValueV2f","setValueV3f","setValueV4f","setValueM2","setValueM3","setValueM4","setValueV1i","setValueV2i","setValueV3i","setValueV4i","setValueV1ui","setValueV2ui","setValueV3ui","setValueV4ui","setValueT1","setValueT3D1","setValueT6","setValueT2DArray1","uniform1fv","flatten","uniform1iv","uniform1uiv","units","allocTexUnits","setValueV1fArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueV1iArray","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV1uiArray","setValueV2uiArray","setValueV3uiArray","setValueV4uiArray","setValueT1Array","setValueT6Array","activeInfo","getSingularSetter","getPureArraySetter","PureArrayUniform","updateCache","seq","StructuredUniform","RePathPart","uniformObject","path","pathLength","lastIndex","match","matchEnd","idIsIndex","subscript","addUniform","SingleUniform","next","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","parseUniform","WebGLUniforms","setOptional","upload","seqWithValue","createShader","shaderSource","compileShader","programIdCount","status","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","trim","getShaderSource","addLineNumbers","functionName","getEncodingComponents","toneMappingName","chunks","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filterEmptyLine","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","numClippingPlanes","numClipIntersection","includePattern","includeReplacer","include","resolveIncludes","deprecatedUnrollLoopPattern","unrollLoopPattern","loopReplacer","deprecatedLoopReplacer","snippet","precisionstring","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapMode","envMapModeDefine","envMapBlendingDefine","cacheKey","generateShadowMapTypeDefine","generateEnvMapTypeDefine","generateEnvMapModeDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","generateExtensions","customDefines","generateDefines","createProgram","prefixVertex","prefixFragment","versionString","isRawShaderMaterial","generatePrecision","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","vertexAlphas","vertexUvs","uvsVertexOnly","skinning","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","getToneMappingFunction","getTexelDecodingFunction","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","getTexelEncodingFunction","outputEncoding","depthPacking","replaceLightNums","replaceClippingPlaneNums","unrollLoops","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","vertexErrors","getShaderErrors","fragmentErrors","getError","VALIDATE_STATUS","prefix","deleteShader","cachedUniforms","fetchAttributeLocations","destroy","deleteProgram","usedTimes","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","bones","nVertexUniforms","nVertexMatrices","shadows","environment","isMeshStandardMaterial","getMaxBones","getTextureEncodingFromMap","isFogExp2","directional","spot","rectArea","hemi","shadowMap","pl","preexistingProgram","WebGLProgram","pop","getParameters","getProgramCacheKey","acquireProgram","releaseProgram","groupOrder","renderItems","renderItemsIndex","opaque","transmissive","defaultProgram","renderItem","getNextRenderItem","customOpaqueSort","customTransparentSort","painterSortStable","reversePainterSortStable","finish","lists","renderCallDepth","list","WebGLRenderList","light","halfWidth","halfHeight","nextVersion","lightA","lightB","UniformsCache","shadowCache","ShadowUniformsCache","hash","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","shadowCastingLightsFirst","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","WebGLLights","lightsArray","shadowsArray","shadowLight","setupLights","setupLightsView","pushLight","pushShadow","renderStates","renderState","WebGLRenderState","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","_renderer","_objects","_capabilities","_frustum","Frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","_maxTextureSize","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","mapPass","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","renderObject","VSMPass","renderBufferDirect","useMorphing","result","getMaterialVariant","getDepthMaterialVariant","customMaterial","customDepthMaterial","getDistanceMaterialVariant","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","shadowCamera","kl","depthMaterial","getDepthMaterial","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","DEPTH_TEST","depthMask","setFunc","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","setOp","stencilOp","clearStencil","colorBuffer","ColorBuffer","DepthBuffer","StencilBuffer","enabledCapabilities","xrFramebuffer","currentBoundFramebuffers","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","lineWidthAvailable","glVersion","VERSION","currentTextureSlot","currentBoundTextures","scissorParam","SCISSOR_BOX","viewportParam","VIEWPORT","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","setFlipSided","setCullFace","CULL_FACE","framebuffer","bindFramebuffer","FRAMEBUFFER","DRAW_FRAMEBUFFER","useProgram","equationToGL","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","MIN","MAX","MIN_EXT","MAX_EXT","factorToGL","ZERO","ONE","SRC_COLOR","SRC_ALPHA","SRC_ALPHA_SATURATE","DST_COLOR","DST_ALPHA","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_DST_ALPHA","BLEND","blendFuncSeparate","blendFunc","blendEquationSeparate","frontFaceCW","setPolygonOffset","SAMPLE_ALPHA_TO_COVERAGE","frontFace","CW","CCW","cullFace","BACK","FRONT","FRONT_AND_BACK","lineWidth","factor","POLYGON_OFFSET_FILL","SCISSOR_TEST","webglSlot","TEXTURE0","activeTexture","webglType","webglTexture","boundTexture","compressedTexImage2D","texImage3D","KEEP","READ_FRAMEBUFFER","bindXRFramebuffer","setMaterial","setLineWidth","unbindTexture","_gl","utils","_videoTextures","useOffscreenCanvas","OffscreenCanvas","err","needsPowerOfTwo","needsNewCanvas","maxSize","createCanvas","supportsMips","generateMipmap","textureProperties","__maxMipLevel","log2","internalFormatName","glFormat","glType","RED","R32F","R16F","R8","RGB","RGB32F","RGB16F","RGB8","RGBA32F","RGBA16F","RGBA8","LINEAR","deallocateTexture","isVideoTexture","onRenderTargetDispose","deallocateRenderTarget","__webglInit","deleteTexture","__webglTexture","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","attachmentProperties","textureUnits","textureUnit","slot","updateVideoTexture","__version","complete","uploadTexture","TEXTURE_2D_ARRAY","TEXTURE_3D","uploadCubeTexture","wrappingToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","filterToGL","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","textureType","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","filterFallback","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","initTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","textureNeedsPowerOfTwo","isPowerOfTwo$1","resizeImage","convert","glInternalFormat","getInternalFormat","setTextureParameters","mipmap","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT24","DEPTH24_STENCIL8","DEPTH_COMPONENT16","DEPTH_STENCIL","isCompressedTexture","textureNeedsGenerateMipmaps","isCompressed","cubeImage","mipmapImage","attachment","textureTarget","framebufferTexture2D","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","isCube","setTexture2D","webglDepthTexture","setupDepthTexture","createRenderbuffer","setupRenderBufferStorage","isMultipleRenderTargets","isRenderTarget3D","createFramebuffer","COLOR_ATTACHMENT0","setupFrameBufferTexture","glTextureType","isTexture3D","setupDepthRenderbuffer","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","blitFramebuffer","warnedTexture2D","warnedTextureCube","setTextureCube","resetTextureUnits","setupRenderTarget","updateRenderTargetMipmap","updateMultisampleRenderTarget","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","LUMINANCE","LUMINANCE_ALPHA","RED_INTEGER","RG","RG_INTEGER","RGB_INTEGER","RGBA_INTEGER","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8","UNSIGNED_INT_24_8_WEBGL","cameras","ArrayCamera","isArrayCamera","isGroup","_moveEvent","_targetRay","_grip","_hand","getHandSpace","joints","inputState","pinching","getTargetRaySpace","hasLinearVelocity","linearVelocity","hasAngularVelocity","angularVelocity","getGripSpace","disconnect","inputSource","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","hand","visibilityState","getPose","targetRaySpace","transform","inputjoint","jointPose","getJointPose","jointName","joint","jointRadius","indexTip","thumbTip","distanceToPinch","threshold","handedness","gripSpace","framebufferScaleFactor","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","cameraAutoUpdate","isPresenting","getController","controller","WebXRController","getControllerGrip","getHand","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","onSessionEvent","onSessionEnd","onInputSourcesChange","getContextAttributes","xrCompatible","makeXRCompatible","layerInit","baseLayer","XRWebGLLayer","updateRenderState","requestReferenceSpace","inputSources","removed","added","cameraLPos","cameraRPos","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","updateCamera","depthNear","depthFar","setProjectionFromUnion","getCamera","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","WebGLAnimation","isFog","density","pixelRatio","transmissionRenderTarget","refreshUniformsCommon","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","uvScaleMap","uv2ScaleMap","refreshFogUniforms","refreshMaterialUniforms","display","createCanvasElement","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","renderListStack","renderStateStack","sortObjects","toneMappingExposure","_this","_isContextLost","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_currentDrawBuffers","_clippingEnabled","_localClippingEnabled","_transmissionRenderTarget","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","contextNames","contextAttributes","contextName","onContextLost","onContextRestore","isWebGL1Renderer","shift","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","WebGLExtensions","WebGLCapabilities","WebGLUtils","WebGLState","WebGLInfo","WebGLProperties","WebGLTextures","WebGLCubeMaps","WebGLAttributes","WebGLBindingStates","WebGLGeometries","WebGLObjects","WebGLMorphtargets","WebGLClipping","WebGLPrograms","WebGLMaterials","WebGLRenderLists","WebGLRenderStates","WebGLBackground","WebGLShadowMap","WebGLBufferRenderer","WebGLIndexedBufferRenderer","initGLContext","WebXRManager","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","onXRSessionStart","onXRSessionEnd","preventDefault","infoAutoReset","shadowMapAutoUpdate","shadowMapNeedsUpdate","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReferences","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","DYNAMIC_DRAW","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","getTargetPixelRatio","isLineSegments","isLineLoop","isSprite","compile","material2","getProgram","projectObject","opaqueObjects","transmissiveObjects","transparentObjects","renderObjects","renderTransmissiveObjects","isLOD","isImmediateRenderObject","camera2","renderObjectImmediate","lightsStateVersion","programCacheKey","updateCommonMaterialProperties","needsLights","materialNeedsLights","progUniforms","uniformsList","needsProgramChange","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","computeBoneTexture","boneTextureSize","markUniformsLightsNeedsUpdate","framebufferBound","drawBuffersWEBGL","layer","framebufferTextureLayer","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","halfFloatSupportedByExt","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","copyTextureToTexture3D","sourceBox","glTarget","unpackRowLen","UNPACK_ROW_LENGTH","unpackImageHeight","UNPACK_IMAGE_HEIGHT","unpackSkipPixels","UNPACK_SKIP_PIXELS","unpackSkipRows","UNPACK_SKIP_ROWS","unpackSkipImages","UNPACK_SKIP_IMAGES","texSubImage3D","resetState","__THREE_DEVTOOLS__","CustomEvent","detail","WebGL1Renderer","FogExp2","arrayBuffers","_uuid","ib","InterleavedBuffer","isInterleavedBuffer","_vector$6","interleavedBuffer","interleavedBuffers","InterleavedBufferAttribute","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","float32Array","transformVertex","Sprite","vertexPosition","mvPosition","_v1$2","_v2$1","_currentLevel","levels","addLevel","getCurrentLevel","getObjectForDistance","_basePosition","_skinIndex","_skinWeight","_vector$5","_matrix","bindMatrixInverse","bind","calculateInverses","normalizeSkinWeights","skinWeight","skinIndex","weight","boneIndex","boneInverses","SkinnedMesh","Bone","isBone","DataTexture","_offsetMatrix","_identityMatrix","boneMatrices","inverse","bone","Skeleton","getBoneByName","fromJSON","json","boneInverse","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","getColorAt","getMatrixAt","raycastTimes","instanceId","setColorAt","setMatrixAt","InstancedMesh","linecap","linejoin","_start$1","_end$1","_inverseMatrix$1","_ray$1","_sphere$1","computeLineDistances","lineDistances","Line","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","distSq","_start","_end","LineSegments","LineLoop","_inverseMatrix","_ray","_sphere","_position$2","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","video","requestVideoFrameCallback","updateVideo","hasVideoFrameCallback","readyState","HAVE_CURRENT_DATA","VideoTexture","CompressedTexture","CanvasTexture","isCanvasTexture","DepthTexture","segments","thetaStart","thetaLength","vertex","segment","radiusTop","radiusBottom","radialSegments","openEnded","indexArray","generateTorso","generateCap","slope","indexRow","sinTheta","cosTheta","centerIndexStart","centerIndexEnd","vertexBuffer","uvBuffer","subdivide","applyRadius","generateUVs","getVertexByIndex","subdivideFace","cols","aj","bj","rows","pushVertex","azimuth","inclination","correctUVs","correctSeam","centroid","azi","correctUV","PolyhedronGeometry","_v0","_v1$1","_normal","_triangle","thresholdAngle","precisionPoints","thresholdDot","indexAttr","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","reverseHash","index0","Earcut","triangulate","holeIndices","dim","hasHoles","outerLen","outerNode","linkedList","prev","invSize","eliminateHoles","earcutLinked","clockwise","last","signedArea","insertNode","removeNode","again","steiner","area","ear","pass","indexCurve","isEarHashed","isEar","filterPoints","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","zOrder","prevZ","nextZ","locallyInside","isValidDiagonal","splitPolygon","queue","getLeftmost","compareX","eliminateHole","hole","findHoleBridge","hx","hy","mx","my","tanMin","sectorContainsSector","sortLinked","tail","numMerges","pSize","qSize","inSize","leftmost","px","py","intersectsPolygon","middleInside","q1","q2","o1","o2","o3","o4","onSegment","num","inside","Node","an","bp","sum","contour","isClockWise","pts","ShapeUtils","triangulateShape","holes","faces","removeDupEndPts","addContour","holeIndex","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","extrudeByPath","splineTube","binormal","position2","getSpacedPoints","computeFrenetFrames","shapePoints","extractPoints","reverse","hl","ahole","pt","vec","vlen","flen","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","contourMovements","getBevelVec","holesMovements","oneHoleMovements","verticesMovements","bs","vert","scalePt2","binormals","buildLidFaces","buildSideFaces","f3","layeroffset","sidewalls","sl","slen1","slen2","f4","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","toJSON$1","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","phiStart","phiLength","inverseSegments","base","n1","func","slices","stacks","EPS","pu","pv","sliceCount","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","indexOffset","shapeVertices","shapeHoles","shapeHole","thetaEnd","grid","verticesRow","uOffset","ExtrudeGeometry","text","font","isFont","generateShapes","tube","tubularSegments","arc","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","cs","closed","frames","P","generateBufferData","generateSegment","generateIndices","getPointAt","edge","edges","o","ol","edge1","edge2","Geometries","BoxBufferGeometry","CircleGeometry","CircleBufferGeometry","ConeGeometry","ConeBufferGeometry","CylinderBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","EdgesGeometry","ExtrudeBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","LatheGeometry","LatheBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","ParametricGeometry","ParametricBufferGeometry","PlaneBufferGeometry","PolyhedronBufferGeometry","RingGeometry","RingBufferGeometry","ShapeGeometry","ShapeBufferGeometry","SphereGeometry","SphereBufferGeometry","TetrahedronGeometry","TetrahedronBufferGeometry","TextGeometry","TextBufferGeometry","TorusGeometry","TorusBufferGeometry","TorusKnotGeometry","TorusKnotBufferGeometry","TubeGeometry","TubeBufferGeometry","WireframeGeometry","RawShaderMaterial","ior","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","compareTime","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","find","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","startIndex","endIndex","interpolant","evaluate","resultBuffer","referenceQuat","numTimes","valueStart","valueEnd","blendMode","parameterPositions","sampleValues","sampleSize","_cachedIndex","settings","DefaultSettings_","pp","validate_interval","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","getSettings_","copySampleValue_","Interpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","trackType","getInterpolation","InterpolantFactoryMethodDiscrete","DiscreteInterpolant","InterpolantFactoryMethodLinear","LinearInterpolant","InterpolantFactoryMethodSmooth","CubicInterpolant","factoryMethod","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","KeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","duration","jsonTracks","frameTime","parseKeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","morphTarget","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","typeName","getTrackTypeForValueTypeName","Cache","files","file","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","DefaultLoadingManager","LoadingManager","manager","crossOrigin","withCredentials","resourcePath","requestHeader","load","loadAsync","Promise","resolve","reject","setCrossOrigin","setWithCredentials","setPath","setResourcePath","setRequestHeader","loading","Loader","dataUriRegex","dataUriRegexResult","request","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","XMLHttpRequest","open","callbacks","overrideMimeType","header","send","setResponseType","setMimeType","FileLoader","AnimationClip","loaded","texDatas","mipmapCount","loadTexture","isCubemap","onImageLoad","onImageError","substr","urls","ImageLoader","texData","isJPEG","search","arcLengthDivisions","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","arcLengths","targetArcLength","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","t2","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","Curve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","twoPi","deltaAngle","samePoints","EllipseCurve","isEllipseCurve","aRadius","ArcCurve","isArcCurve","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","t3","CubicPoly","pz","curveType","intPoint","CatmullRomCurve3","isCatmullRomCurve3","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","v3","CubicBezier","CubicBezierCurve","isCubicBezierCurve","CubicBezierCurve3","isCubicBezierCurve3","LineCurve","isLineCurve","isLineCurve3","QuadraticBezier","QuadraticBezierCurve","isQuadraticBezierCurve","QuadraticBezierCurve3","isQuadraticBezierCurve3","CatmullRom","SplineCurve","isSplineCurve","Curves","LineCurve3","curves","autoClose","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","diff","lens","cacheLengths","sums","CurvePath","currentPoint","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","Path","getPointsHoles","holesPts","Light","HemisphereLight","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","_frameExtents","_viewportCount","_viewports","shadowMatrix","viewportIndex","LightShadow","SpotLightShadow","isSpotLightShadow","power","SpotLight","_lightPositionWorld","_lookTarget","_cubeDirections","_cubeUps","PointLightShadow","PointLight","scaleW","scaleH","OrthographicCamera","DirectionalLightShadow","isDirectionalLightShadow","DirectionalLight","RectAreaLight","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","SphericalHarmonics3","isSphericalHarmonics3","LightProbe","getTexture","shading","setTextures","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","interleavedBufferMap","arrayBufferMap","getArrayBuffer","getTypedArray","arrayBuffer","typedArray","bufferAttribute","getInterleavedBuffer","bufferAttributeConstr","drawcalls","offsets","LoaderUtils","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","hasImages","Shape","geometryShapes","bufferGeometryLoader","BufferGeometryLoader","details","MaterialLoader","loadImage","currentUrl","deserializedImage","deserializeImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","LOD","objectAnimations","setTexturePath","createImageBitmap","fetch","setOptions","fetchOptions","credentials","headers","then","res","blob","colorSpaceConversion","imageBitmap","catch","ImageBitmapLoader","isImageBitmapLoader","subPaths","currentPath","toShapes","isCCW","noHoles","inSubpaths","tmpPath","tmpShape","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","toShapesNoHoles","solid","holesFirst","betterShapeHoles","newShapes","newShapeHoles","mainIdx","tmpPoints","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","isPointInsidePolygon","froms","tos","tmpHoles","paths","createPaths","chars","line_height","yMax","yMin","underlineThickness","char","ret","createPath","glyph","glyphs","familyName","ShapePath","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","action","ha","Font","substring","AudioContext","webkitAudioContext","bufferCopy","decodeAudioData","audioBuffer","sky","ground","HemisphereLightProbe","isHemisphereLightProbe","AmbientLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","eyeSep","_cache","eyeSepHalf","eyeSepOnProjection","ymax","xmin","xmax","autoStart","oldTime","elapsedTime","running","getElapsedTime","getDelta","newTime","performance","_position$1","_quaternion$1","_scale$1","_orientation$1","gain","createGain","connect","destination","timeDelta","_clock","Clock","getInput","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position","_quaternion","_scale","_orientation","Audio","panner","createPanner","panningModel","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accumulate","accuIndex","currentWeight","mix","accumulateAdditive","weightAdditive","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","targetIndex","workOffset","_RESERVED_CHARS_RE","_reservedRe","_wordChar","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","firstValidIndex","nCachedObjects_","bindings","unbind","rootNode","node","findNode","nodeName","_getValue_unbound","_setValue_unbound","create","isAnimationObjectGroup","Composite","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","_getValue_direct","_getValue_array","resolvedProperty","_getValue_arrayElement","_getValue_toArray","_setValue_direct","targetObject","_setValue_direct_setNeedsUpdate","_setValue_direct_setMatrixWorldNeedsUpdate","_setValue_array","dest","_setValue_array_setNeedsUpdate","_setValue_array_setMatrixWorldNeedsUpdate","_setValue_arrayElement","_setValue_arrayElement_setNeedsUpdate","_setValue_arrayElement_setMatrixWorldNeedsUpdate","_setValue_fromArray","_setValue_fromArray_setNeedsUpdate","_setValue_fromArray_setMatrixWorldNeedsUpdate","targetArray","sourceArray","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","AnimationObjectGroup","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","_updateWeight","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_initMemoryManager","_accuIndex","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","PropertyMixer","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","AnimationAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","AnimationMixer","Uniform","InstancedInterleavedBuffer","setType","setItemSize","setCount","GLBufferAttribute","setFromCamera","coords","intersectObject","ascSort","intersectObjects","other","makeSafe","setFromCartesianCoords","_vector$4","Box2","isBox2","_startP","_startEnd","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","ImmediateRenderObject","_vector$3","cone","coneLength","coneWidth","_vector$2","_boneMatrix","_matrixWorldInv","getBoneList","isSkeletonHelper","boneList","sphereSize","_vector$1","_color1","_color2","radials","circles","_v1","_v2","_v3","lightPlane","targetLine","_vector","_camera","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box","positions2","_axis","_lineGeometry","_coneGeometry","headLength","headWidth","setDirection","setColor","_floatView","_int32View","toHalfFloat","val","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","ENCODINGS","backgroundMaterial","backgroundBox","_flatCamera","_lodPlanes","_sizeLods","_sigmas","_createPlanes","_clearColor","_oldTarget","PHI","INV_PHI","_axisDirections","maxComponent","fExp","_pingPongRenderTarget","_blurMaterial","_getBlurShader","_equirectShader","_cubemapShader","_compileMaterial","fromScene","sigma","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","fromEquirectangular","equirectangular","_fromTexture","fromCubemap","compileCubemapShader","_getCubemapShader","compileEquirectangularShader","_getEquirectShader","outputTarget","_setViewport","_textureToCubeUV","_isLDR","_createRenderTarget","tmpMesh","cubeCamera","upSign","forwardSign","originalAutoClear","useSolidColor","convertLinearToRGBE","col","poleAxis","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","STANDARD_DEVIATIONS","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","weights","outputSize","lod","sizeLod","texelSize","cubeFaces","positionSize","uvSize","faceIndexSize","coordinates","fill","shaderMaterial","_getCommonVertexShader","_getEncodings","LineStrip","LinePieces","NoColors","FaceColors","VertexColors","isMultiMaterial","Int8BufferAttribute","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Int16BufferAttribute","Int32BufferAttribute","Float64BufferAttribute","construct","fromPoints","AxesHelper","BoxHelper","GridHelper","setColors","SkeletonHelper","Handlers","DataTextureLoader","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","Line3","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","getInverse","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","prototypenormal","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","getChildByName","renderDepth","getWorldRotation","applyMatrix","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","removeAttribute","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","initMaterial","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","audioLoader","AudioLoader","AudioAnalyser","getData","updateCubeMap","TextureLoader","loadTextureCube","CubeTextureLoader","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","__THREE__","AnimationLoader","ArrowHelper","AudioListener","AxisHelper","BinaryTextureLoader","BoundingBoxHelper","Box3Helper","CameraHelper","CanvasRenderer","CompressedTextureLoader","Cylindrical","DataUtils","DirectionalLightHelper","DynamicBufferAttribute","EdgesHelper","Float32Attribute","Float64Attribute","FontLoader","HemisphereLightHelper","Int16Attribute","Int32Attribute","Int8Attribute","JSONLoader","LensFlare","MeshFaceMaterial","MultiMaterial","ObjectLoader","PMREMGenerator","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PlaneHelper","PointCloud","PointCloudMaterial","PointLightHelper","PolarGridHelper","PositionalAudio","Raycaster","Spherical","SpotLightHelper","StereoCamera","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","WebGLRenderTargetCube","WireframeHelper","XHRLoader"],"version":3,"file":"index.HASH_REF_c75227167347e57df55b258c72166a09.js.map","sourceRoot":"/__parcel_source_root/"}