{"mappings":"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WAAW86B,MAAM;;MAElBjJ;QACC7xB,OAAO;;MAER9Z;QACC8Z,OAAO;;MAERs3C;QACCt3C,WAAWmL;;MAEZosC;QACCv3C,WAAWmL;;MAEZoqB;QACCv1B,OAAO;;;IAGTw3C;MACCjhB;QACCv2B,OAAO;;;IAGTy3C;MACCjhB;QACCx2B,OAAO;;MAER03C;QACC13C,QAAQ;;MAET22B;QACC32B,OAAO;;MAER42B;QACC52B,OAAO;;MAER23C;QACC33C,OAAO;;;IAGT43C;MACCliB;QACC11B,OAAO;;MAER21B;QACC31B,OAAO;;;IAGT63C;MACCriB;QACCx1B,OAAO;;MAERy1B;QACCz1B,OAAO;;;IAGT83C;MACCxhB;QACCt2B,OAAO;;;IAGT+3C;MACCniB;QACC51B,OAAO;;MAER61B;QACC71B,OAAO;;;IAGTg4C;MACCliB;QACC91B,OAAO;;MAERg2B;QACCh2B,WAAW4G,QAAQ,GAAG;;;IAGxBqxC;MACChiB;QACCj2B,OAAO;;MAERk2B;QACCl2B,OAAO;;MAERm2B;QACCn2B,OAAO;;;IAGTk4C;MACC9hB;QACCp2B,OAAO;;;IAGTm4C;MACC9hB;QACCr2B,OAAO;;;IAGTo4C;MACCvhB;QACC72B,OAAO;;;IAGTlP;MACCunD;QACCr4C,OAAO;;MAERs4C;QACCt4C,OAAO;;MAERu4C;QACCv4C,OAAO;;MAERw4C;QACCx4C,WAAW86B,MAAM;;;IAGnBgM;MACC2R;QACCz4C;;MAED04C;QACC14C;;MAED24C;QACC34C;QACA44C;UACCh6B;UACA2V;;;MAGFskB;QACC74C;QACA44C;UACCE;UACAC;UACAC;UACAC;;;MAGFC;QACCl5C;;MAEDm5C;QACCn5C;;MAEDo5C;QACCp5C;QACA44C;UACCrkB;UACApqC;UACAy0B;UACApxB;UACA6rD;UACAC;UACAC;;;MAGFC;QACCx5C;QACA44C;UACCE;UACAC;UACAC;UACAC;;;MAGFQ;QACCz5C;;MAED05C;QACC15C;;MAED25C;QACC35C;QACA44C;UACCrkB;UACApqC;UACAovD;UACA/rD;;;MAGFosD;QACC55C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gf,UAAUA;EAClBhf,QAAQq+G,sBAAsBA;EAC9Br+G,QAAQumJ,SAASA;EACjBvmJ,QAAQu7I,eAAeA;EACvBv7I,QAAQqgG,eAAeA;EACvBrgG,QAAQs5F,iBAAiBA;EACzBt5F,QAAQs5C,wBAAwBA;EAChCt5C,QAAQ+f,6BAA6BA;EACrC/f,QAAQkgB,+BAA+BA;EACvClgB,QAAQ4f,oBAAoBA;EAC5B5f,QAAQwmJ,wBAAwBA;EAChCxmJ,QAAQxC,gBAAgBA;EACxBwC,QAAQswF,aAAaA;EACrBtwF,QAAQm1G,oBAAoBA;EAC5Bn1G,QAAQymJ,kBAAkBA;EAC1BzmJ,QAAQmK,mBAAmBA;EAC3BnK,QAAQ0mJ,YAAYA;EACpB1mJ,QAAQiK,sBAAsBA;EAC9BjK,QAAQyC,aAAaA;EACrBzC,QAAQkK,kBAAkBA;EAC1BlK,QAAQqL,gBAAgBA;EACxBrL,QAAQ0K,eAAeA;EAEvBmG,OAAO0K,eAAevb,SAAS;IAAgBwO,OAAO;;;;;AC35mCvjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["./node_modules/@parcel/runtime-browser-hmr/lib/HMRRuntime.js","./src/app.js","./src/setup.js","../node_modules/three/build/three.js","../node_modules/three-orbit-controls/index.js","./node_modules/uuid/index.js","./node_modules/uuid/v1.js","./node_modules/uuid/lib/rng-browser.js","./node_modules/uuid/lib/bytesToUuid.js","./node_modules/uuid/v4.js","./node_modules/@parcel/transformer-js/lib/esmodule-helpers.js"],"sourcesContent":[null,null,null,"/**\n * @license\n * Copyright 2010-2021 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\tconst REVISION = '129';\n\tconst MOUSE = {\n\t\tLEFT: 0,\n\t\tMIDDLE: 1,\n\t\tRIGHT: 2,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2\n\t};\n\tconst TOUCH = {\n\t\tROTATE: 0,\n\t\tPAN: 1,\n\t\tDOLLY_PAN: 2,\n\t\tDOLLY_ROTATE: 3\n\t};\n\tconst CullFaceNone = 0;\n\tconst CullFaceBack = 1;\n\tconst CullFaceFront = 2;\n\tconst CullFaceFrontBack = 3;\n\tconst BasicShadowMap = 0;\n\tconst PCFShadowMap = 1;\n\tconst PCFSoftShadowMap = 2;\n\tconst VSMShadowMap = 3;\n\tconst FrontSide = 0;\n\tconst BackSide = 1;\n\tconst DoubleSide = 2;\n\tconst FlatShading = 1;\n\tconst SmoothShading = 2;\n\tconst NoBlending = 0;\n\tconst NormalBlending = 1;\n\tconst AdditiveBlending = 2;\n\tconst SubtractiveBlending = 3;\n\tconst MultiplyBlending = 4;\n\tconst CustomBlending = 5;\n\tconst AddEquation = 100;\n\tconst SubtractEquation = 101;\n\tconst ReverseSubtractEquation = 102;\n\tconst MinEquation = 103;\n\tconst MaxEquation = 104;\n\tconst ZeroFactor = 200;\n\tconst OneFactor = 201;\n\tconst SrcColorFactor = 202;\n\tconst OneMinusSrcColorFactor = 203;\n\tconst SrcAlphaFactor = 204;\n\tconst OneMinusSrcAlphaFactor = 205;\n\tconst DstAlphaFactor = 206;\n\tconst OneMinusDstAlphaFactor = 207;\n\tconst DstColorFactor = 208;\n\tconst OneMinusDstColorFactor = 209;\n\tconst SrcAlphaSaturateFactor = 210;\n\tconst NeverDepth = 0;\n\tconst AlwaysDepth = 1;\n\tconst LessDepth = 2;\n\tconst LessEqualDepth = 3;\n\tconst EqualDepth = 4;\n\tconst GreaterEqualDepth = 5;\n\tconst GreaterDepth = 6;\n\tconst NotEqualDepth = 7;\n\tconst MultiplyOperation = 0;\n\tconst MixOperation = 1;\n\tconst AddOperation = 2;\n\tconst NoToneMapping = 0;\n\tconst LinearToneMapping = 1;\n\tconst ReinhardToneMapping = 2;\n\tconst CineonToneMapping = 3;\n\tconst ACESFilmicToneMapping = 4;\n\tconst CustomToneMapping = 5;\n\tconst UVMapping = 300;\n\tconst CubeReflectionMapping = 301;\n\tconst CubeRefractionMapping = 302;\n\tconst EquirectangularReflectionMapping = 303;\n\tconst EquirectangularRefractionMapping = 304;\n\tconst CubeUVReflectionMapping = 306;\n\tconst CubeUVRefractionMapping = 307;\n\tconst RepeatWrapping = 1000;\n\tconst ClampToEdgeWrapping = 1001;\n\tconst MirroredRepeatWrapping = 1002;\n\tconst NearestFilter = 1003;\n\tconst NearestMipmapNearestFilter = 1004;\n\tconst NearestMipMapNearestFilter = 1004;\n\tconst NearestMipmapLinearFilter = 1005;\n\tconst NearestMipMapLinearFilter = 1005;\n\tconst LinearFilter = 1006;\n\tconst LinearMipmapNearestFilter = 1007;\n\tconst LinearMipMapNearestFilter = 1007;\n\tconst LinearMipmapLinearFilter = 1008;\n\tconst LinearMipMapLinearFilter = 1008;\n\tconst UnsignedByteType = 1009;\n\tconst ByteType = 1010;\n\tconst ShortType = 1011;\n\tconst UnsignedShortType = 1012;\n\tconst IntType = 1013;\n\tconst UnsignedIntType = 1014;\n\tconst FloatType = 1015;\n\tconst HalfFloatType = 1016;\n\tconst UnsignedShort4444Type = 1017;\n\tconst UnsignedShort5551Type = 1018;\n\tconst UnsignedShort565Type = 1019;\n\tconst UnsignedInt248Type = 1020;\n\tconst AlphaFormat = 1021;\n\tconst RGBFormat = 1022;\n\tconst RGBAFormat = 1023;\n\tconst LuminanceFormat = 1024;\n\tconst LuminanceAlphaFormat = 1025;\n\tconst RGBEFormat = RGBAFormat;\n\tconst DepthFormat = 1026;\n\tconst DepthStencilFormat = 1027;\n\tconst RedFormat = 1028;\n\tconst RedIntegerFormat = 1029;\n\tconst RGFormat = 1030;\n\tconst RGIntegerFormat = 1031;\n\tconst RGBIntegerFormat = 1032;\n\tconst RGBAIntegerFormat = 1033;\n\tconst RGB_S3TC_DXT1_Format = 33776;\n\tconst RGBA_S3TC_DXT1_Format = 33777;\n\tconst RGBA_S3TC_DXT3_Format = 33778;\n\tconst RGBA_S3TC_DXT5_Format = 33779;\n\tconst RGB_PVRTC_4BPPV1_Format = 35840;\n\tconst RGB_PVRTC_2BPPV1_Format = 35841;\n\tconst RGBA_PVRTC_4BPPV1_Format = 35842;\n\tconst RGBA_PVRTC_2BPPV1_Format = 35843;\n\tconst RGB_ETC1_Format = 36196;\n\tconst RGB_ETC2_Format = 37492;\n\tconst RGBA_ETC2_EAC_Format = 37496;\n\tconst RGBA_ASTC_4x4_Format = 37808;\n\tconst RGBA_ASTC_5x4_Format = 37809;\n\tconst RGBA_ASTC_5x5_Format = 37810;\n\tconst RGBA_ASTC_6x5_Format = 37811;\n\tconst RGBA_ASTC_6x6_Format = 37812;\n\tconst RGBA_ASTC_8x5_Format = 37813;\n\tconst RGBA_ASTC_8x6_Format = 37814;\n\tconst RGBA_ASTC_8x8_Format = 37815;\n\tconst RGBA_ASTC_10x5_Format = 37816;\n\tconst RGBA_ASTC_10x6_Format = 37817;\n\tconst RGBA_ASTC_10x8_Format = 37818;\n\tconst RGBA_ASTC_10x10_Format = 37819;\n\tconst RGBA_ASTC_12x10_Format = 37820;\n\tconst RGBA_ASTC_12x12_Format = 37821;\n\tconst RGBA_BPTC_Format = 36492;\n\tconst SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tconst SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tconst SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tconst SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tconst SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tconst SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tconst SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tconst SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tconst SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tconst SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tconst SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tconst SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tconst SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tconst SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tconst LoopOnce = 2200;\n\tconst LoopRepeat = 2201;\n\tconst LoopPingPong = 2202;\n\tconst InterpolateDiscrete = 2300;\n\tconst InterpolateLinear = 2301;\n\tconst InterpolateSmooth = 2302;\n\tconst ZeroCurvatureEnding = 2400;\n\tconst ZeroSlopeEnding = 2401;\n\tconst WrapAroundEnding = 2402;\n\tconst NormalAnimationBlendMode = 2500;\n\tconst AdditiveAnimationBlendMode = 2501;\n\tconst TrianglesDrawMode = 0;\n\tconst TriangleStripDrawMode = 1;\n\tconst TriangleFanDrawMode = 2;\n\tconst LinearEncoding = 3000;\n\tconst sRGBEncoding = 3001;\n\tconst GammaEncoding = 3007;\n\tconst RGBEEncoding = 3002;\n\tconst LogLuvEncoding = 3003;\n\tconst RGBM7Encoding = 3004;\n\tconst RGBM16Encoding = 3005;\n\tconst RGBDEncoding = 3006;\n\tconst BasicDepthPacking = 3200;\n\tconst RGBADepthPacking = 3201;\n\tconst TangentSpaceNormalMap = 0;\n\tconst ObjectSpaceNormalMap = 1;\n\tconst ZeroStencilOp = 0;\n\tconst KeepStencilOp = 7680;\n\tconst ReplaceStencilOp = 7681;\n\tconst IncrementStencilOp = 7682;\n\tconst DecrementStencilOp = 7683;\n\tconst IncrementWrapStencilOp = 34055;\n\tconst DecrementWrapStencilOp = 34056;\n\tconst InvertStencilOp = 5386;\n\tconst NeverStencilFunc = 512;\n\tconst LessStencilFunc = 513;\n\tconst EqualStencilFunc = 514;\n\tconst LessEqualStencilFunc = 515;\n\tconst GreaterStencilFunc = 516;\n\tconst NotEqualStencilFunc = 517;\n\tconst GreaterEqualStencilFunc = 518;\n\tconst AlwaysStencilFunc = 519;\n\tconst StaticDrawUsage = 35044;\n\tconst DynamicDrawUsage = 35048;\n\tconst StreamDrawUsage = 35040;\n\tconst StaticReadUsage = 35045;\n\tconst DynamicReadUsage = 35049;\n\tconst StreamReadUsage = 35041;\n\tconst StaticCopyUsage = 35046;\n\tconst DynamicCopyUsage = 35050;\n\tconst StreamCopyUsage = 35042;\n\tconst GLSL1 = '100';\n\tconst GLSL3 = '300 es';\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\tclass EventDispatcher {\n\t\taddEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) this._listeners = {};\n\t\t\tconst listeners = this._listeners;\n\n\t\t\tif (listeners[type] === undefined) {\n\t\t\t\tlisteners[type] = [];\n\t\t\t}\n\n\t\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\t\tlisteners[type].push(listener);\n\t\t\t}\n\t\t}\n\n\t\thasEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return false;\n\t\t\tconst listeners = this._listeners;\n\t\t\treturn listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\t\t}\n\n\t\tremoveEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tconst listeners = this._listeners;\n\t\t\tconst listenerArray = listeners[type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tconst index = listenerArray.indexOf(listener);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdispatchEvent(event) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tconst listeners = this._listeners;\n\t\t\tconst listenerArray = listeners[event.type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tevent.target = this; // Make a copy, in case listeners are removed while iterating.\n\n\t\t\t\tconst array = listenerArray.slice(0);\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tarray[i].call(this, event);\n\t\t\t\t}\n\n\t\t\t\tevent.target = null;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tconst _lut = [];\n\n\tfor (let i = 0; i < 256; i++) {\n\t\t_lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n\t}\n\n\tlet _seed = 1234567;\n\tconst DEG2RAD = Math.PI / 180;\n\tconst RAD2DEG = 180 / Math.PI; // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\tfunction generateUUID() {\n\t\tconst d0 = Math.random() * 0xffffffff | 0;\n\t\tconst d1 = Math.random() * 0xffffffff | 0;\n\t\tconst d2 = Math.random() * 0xffffffff | 0;\n\t\tconst d3 = Math.random() * 0xffffffff | 0;\n\t\tconst uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n\t\treturn uuid.toUpperCase();\n\t}\n\n\tfunction clamp(value, min, max) {\n\t\treturn Math.max(min, Math.min(max, value));\n\t} // compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\n\tfunction euclideanModulo(n, m) {\n\t\treturn (n % m + m) % m;\n\t} // Linear mapping from range <a1, a2> to range <b1, b2>\n\n\n\tfunction mapLinear(x, a1, a2, b1, b2) {\n\t\treturn b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n\t} // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n\n\n\tfunction inverseLerp(x, y, value) {\n\t\tif (x !== y) {\n\t\t\treturn (value - x) / (y - x);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t} // https://en.wikipedia.org/wiki/Linear_interpolation\n\n\n\tfunction lerp(x, y, t) {\n\t\treturn (1 - t) * x + t * y;\n\t} // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n\n\n\tfunction damp(x, y, lambda, dt) {\n\t\treturn lerp(x, y, 1 - Math.exp(-lambda * dt));\n\t} // https://www.desmos.com/calculator/vcsjnyz7x4\n\n\n\tfunction pingpong(x, length = 1) {\n\t\treturn length - Math.abs(euclideanModulo(x, length * 2) - length);\n\t} // http://en.wikipedia.org/wiki/Smoothstep\n\n\n\tfunction smoothstep(x, min, max) {\n\t\tif (x <= min) return 0;\n\t\tif (x >= max) return 1;\n\t\tx = (x - min) / (max - min);\n\t\treturn x * x * (3 - 2 * x);\n\t}\n\n\tfunction smootherstep(x, min, max) {\n\t\tif (x <= min) return 0;\n\t\tif (x >= max) return 1;\n\t\tx = (x - min) / (max - min);\n\t\treturn x * x * x * (x * (x * 6 - 15) + 10);\n\t} // Random integer from <low, high> interval\n\n\n\tfunction randInt(low, high) {\n\t\treturn low + Math.floor(Math.random() * (high - low + 1));\n\t} // Random float from <low, high> interval\n\n\n\tfunction randFloat(low, high) {\n\t\treturn low + Math.random() * (high - low);\n\t} // Random float from <-range/2, range/2> interval\n\n\n\tfunction randFloatSpread(range) {\n\t\treturn range * (0.5 - Math.random());\n\t} // Deterministic pseudo-random float in the interval [ 0, 1 ]\n\n\n\tfunction seededRandom(s) {\n\t\tif (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm\n\n\t\t_seed = _seed * 16807 % 2147483647;\n\t\treturn (_seed - 1) / 2147483646;\n\t}\n\n\tfunction degToRad(degrees) {\n\t\treturn degrees * DEG2RAD;\n\t}\n\n\tfunction radToDeg(radians) {\n\t\treturn radians * RAD2DEG;\n\t}\n\n\tfunction isPowerOfTwo(value) {\n\t\treturn (value & value - 1) === 0 && value !== 0;\n\t}\n\n\tfunction ceilPowerOfTwo(value) {\n\t\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n\t}\n\n\tfunction floorPowerOfTwo(value) {\n\t\treturn Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n\t}\n\n\tfunction setQuaternionFromProperEuler(q, a, b, c, order) {\n\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t// angles are in radians\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\t\tconst c2 = cos(b / 2);\n\t\tconst s2 = sin(b / 2);\n\t\tconst c13 = cos((a + c) / 2);\n\t\tconst s13 = sin((a + c) / 2);\n\t\tconst c1_3 = cos((a - c) / 2);\n\t\tconst s1_3 = sin((a - c) / 2);\n\t\tconst c3_1 = cos((c - a) / 2);\n\t\tconst s3_1 = sin((c - a) / 2);\n\n\t\tswitch (order) {\n\t\t\tcase 'XYX':\n\t\t\t\tq.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZY':\n\t\t\t\tq.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXZ':\n\t\t\t\tq.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZX':\n\t\t\t\tq.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXY':\n\t\t\t\tq.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYZ':\n\t\t\t\tq.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n\t\t}\n\t}\n\n\tvar MathUtils = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tDEG2RAD: DEG2RAD,\n\t\tRAD2DEG: RAD2DEG,\n\t\tgenerateUUID: generateUUID,\n\t\tclamp: clamp,\n\t\teuclideanModulo: euclideanModulo,\n\t\tmapLinear: mapLinear,\n\t\tinverseLerp: inverseLerp,\n\t\tlerp: lerp,\n\t\tdamp: damp,\n\t\tpingpong: pingpong,\n\t\tsmoothstep: smoothstep,\n\t\tsmootherstep: smootherstep,\n\t\trandInt: randInt,\n\t\trandFloat: randFloat,\n\t\trandFloatSpread: randFloatSpread,\n\t\tseededRandom: seededRandom,\n\t\tdegToRad: degToRad,\n\t\tradToDeg: radToDeg,\n\t\tisPowerOfTwo: isPowerOfTwo,\n\t\tceilPowerOfTwo: ceilPowerOfTwo,\n\t\tfloorPowerOfTwo: floorPowerOfTwo,\n\t\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler\n\t});\n\n\tclass Vector2 {\n\t\tconstructor(x = 0, y = 0) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tget width() {\n\t\t\treturn this.x;\n\t\t}\n\n\t\tset width(value) {\n\t\t\tthis.x = value;\n\t\t}\n\n\t\tget height() {\n\t\t\treturn this.y;\n\t\t}\n\n\t\tset height(value) {\n\t\t\tthis.y = value;\n\t\t}\n\n\t\tset(x, y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6];\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7];\n\t\t\treturn this;\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y;\n\t\t}\n\n\t\tcross(v) {\n\t\t\treturn this.x * v.y - this.y * v.x;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tangle() {\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\t\t\tconst angle = Math.atan2(-this.y, -this.x) + Math.PI;\n\t\t\treturn angle;\n\t\t}\n\n\t\tdistanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t}\n\n\t\tdistanceToSquared(v) {\n\t\t\tconst dx = this.x - v.x,\n\t\t\t\t\t\tdy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\t\t}\n\n\t\tmanhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateAround(center, angle) {\n\t\t\tconst c = Math.cos(angle),\n\t\t\t\t\t\ts = Math.sin(angle);\n\t\t\tconst x = this.x - center.x;\n\t\t\tconst y = this.y - center.y;\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector2.prototype.isVector2 = true;\n\n\tclass Matrix3 {\n\t\tconstructor() {\n\t\t\tthis.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tset(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[1] = n21;\n\t\t\tte[2] = n31;\n\t\t\tte[3] = n12;\n\t\t\tte[4] = n22;\n\t\t\tte[5] = n32;\n\t\t\tte[6] = n13;\n\t\t\tte[7] = n23;\n\t\t\tte[8] = n33;\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\tthis.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(m) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\treturn this;\n\t\t}\n\n\t\textractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrix3Column(this, 0);\n\t\t\tyAxis.setFromMatrix3Column(this, 1);\n\t\t\tzAxis.setFromMatrix3Column(this, 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrix4(m) {\n\t\t\tconst me = m.elements;\n\t\t\tthis.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(m) {\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t}\n\n\t\tpremultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t}\n\n\t\tmultiplyMatrices(a, b) {\n\t\t\tconst ae = a.elements;\n\t\t\tconst be = b.elements;\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = ae[0],\n\t\t\t\t\t\ta12 = ae[3],\n\t\t\t\t\t\ta13 = ae[6];\n\t\t\tconst a21 = ae[1],\n\t\t\t\t\t\ta22 = ae[4],\n\t\t\t\t\t\ta23 = ae[7];\n\t\t\tconst a31 = ae[2],\n\t\t\t\t\t\ta32 = ae[5],\n\t\t\t\t\t\ta33 = ae[8];\n\t\t\tconst b11 = be[0],\n\t\t\t\t\t\tb12 = be[3],\n\t\t\t\t\t\tb13 = be[6];\n\t\t\tconst b21 = be[1],\n\t\t\t\t\t\tb22 = be[4],\n\t\t\t\t\t\tb23 = be[7];\n\t\t\tconst b31 = be[2],\n\t\t\t\t\t\tb32 = be[5],\n\t\t\t\t\t\tb33 = be[8];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[3] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[4] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[5] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[8] *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeterminant() {\n\t\t\tconst te = this.elements;\n\t\t\tconst a = te[0],\n\t\t\t\t\t\tb = te[1],\n\t\t\t\t\t\tc = te[2],\n\t\t\t\t\t\td = te[3],\n\t\t\t\t\t\te = te[4],\n\t\t\t\t\t\tf = te[5],\n\t\t\t\t\t\tg = te[6],\n\t\t\t\t\t\th = te[7],\n\t\t\t\t\t\ti = te[8];\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\t}\n\n\t\tinvert() {\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tn11 = te[0],\n\t\t\t\t\t\tn21 = te[1],\n\t\t\t\t\t\tn31 = te[2],\n\t\t\t\t\t\tn12 = te[3],\n\t\t\t\t\t\tn22 = te[4],\n\t\t\t\t\t\tn32 = te[5],\n\t\t\t\t\t\tn13 = te[6],\n\t\t\t\t\t\tn23 = te[7],\n\t\t\t\t\t\tn33 = te[8],\n\t\t\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\t\t\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tconst detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n31 * n23 - n33 * n21) * detInv;\n\t\t\tte[2] = (n32 * n21 - n31 * n22) * detInv;\n\t\t\tte[3] = t12 * detInv;\n\t\t\tte[4] = (n33 * n11 - n31 * n13) * detInv;\n\t\t\tte[5] = (n31 * n12 - n32 * n11) * detInv;\n\t\t\tte[6] = t13 * detInv;\n\t\t\tte[7] = (n21 * n13 - n23 * n11) * detInv;\n\t\t\tte[8] = (n22 * n11 - n21 * n12) * detInv;\n\t\t\treturn this;\n\t\t}\n\n\t\ttranspose() {\n\t\t\tlet tmp;\n\t\t\tconst m = this.elements;\n\t\t\ttmp = m[1];\n\t\t\tm[1] = m[3];\n\t\t\tm[3] = tmp;\n\t\t\ttmp = m[2];\n\t\t\tm[2] = m[6];\n\t\t\tm[6] = tmp;\n\t\t\ttmp = m[5];\n\t\t\tm[5] = m[7];\n\t\t\tm[7] = tmp;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetNormalMatrix(matrix4) {\n\t\t\treturn this.setFromMatrix4(matrix4).invert().transpose();\n\t\t}\n\n\t\ttransposeIntoArray(r) {\n\t\t\tconst m = this.elements;\n\t\t\tr[0] = m[0];\n\t\t\tr[1] = m[3];\n\t\t\tr[2] = m[6];\n\t\t\tr[3] = m[1];\n\t\t\tr[4] = m[4];\n\t\t\tr[5] = m[7];\n\t\t\tr[6] = m[2];\n\t\t\tr[7] = m[5];\n\t\t\tr[8] = m[8];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n\t\t\tconst c = Math.cos(rotation);\n\t\t\tconst s = Math.sin(rotation);\n\t\t\tthis.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(sx, sy) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= sx;\n\t\t\tte[3] *= sx;\n\t\t\tte[6] *= sx;\n\t\t\tte[1] *= sy;\n\t\t\tte[4] *= sy;\n\t\t\tte[7] *= sy;\n\t\t\treturn this;\n\t\t}\n\n\t\trotate(theta) {\n\t\t\tconst c = Math.cos(theta);\n\t\t\tconst s = Math.sin(theta);\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = te[0],\n\t\t\t\t\t\ta12 = te[3],\n\t\t\t\t\t\ta13 = te[6];\n\t\t\tconst a21 = te[1],\n\t\t\t\t\t\ta22 = te[4],\n\t\t\t\t\t\ta23 = te[7];\n\t\t\tte[0] = c * a11 + s * a21;\n\t\t\tte[3] = c * a12 + s * a22;\n\t\t\tte[6] = c * a13 + s * a23;\n\t\t\tte[1] = -s * a11 + c * a21;\n\t\t\tte[4] = -s * a12 + c * a22;\n\t\t\tte[7] = -s * a13 + c * a23;\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(tx, ty) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] += tx * te[2];\n\t\t\tte[3] += tx * te[5];\n\t\t\tte[6] += tx * te[8];\n\t\t\tte[1] += ty * te[2];\n\t\t\tte[4] += ty * te[5];\n\t\t\tte[7] += ty * te[8];\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(matrix) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = matrix.elements;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\treturn array;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().fromArray(this.elements);\n\t\t}\n\n\t}\n\n\tMatrix3.prototype.isMatrix3 = true;\n\n\tlet _canvas;\n\n\tclass ImageUtils {\n\t\tstatic getDataURL(image) {\n\t\t\tif (/^data:/i.test(image.src)) {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tif (typeof HTMLCanvasElement == 'undefined') {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tlet canvas;\n\n\t\t\tif (image instanceof HTMLCanvasElement) {\n\t\t\t\tcanvas = image;\n\t\t\t} else {\n\t\t\t\tif (_canvas === undefined) _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tconst context = _canvas.getContext('2d');\n\n\t\t\t\tif (image instanceof ImageData) {\n\t\t\t\t\tcontext.putImageData(image, 0, 0);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.drawImage(image, 0, 0, image.width, image.height);\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\t\t\t}\n\n\t\t\tif (canvas.width > 2048 || canvas.height > 2048) {\n\t\t\t\tconsole.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);\n\t\t\t\treturn canvas.toDataURL('image/jpeg', 0.6);\n\t\t\t} else {\n\t\t\t\treturn canvas.toDataURL('image/png');\n\t\t\t}\n\t\t}\n\n\t}\n\n\tlet textureId = 0;\n\n\tclass Texture extends EventDispatcher {\n\t\tconstructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding) {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: textureId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.image = image;\n\t\t\tthis.mipmaps = [];\n\t\t\tthis.mapping = mapping;\n\t\t\tthis.wrapS = wrapS;\n\t\t\tthis.wrapT = wrapT;\n\t\t\tthis.magFilter = magFilter;\n\t\t\tthis.minFilter = minFilter;\n\t\t\tthis.anisotropy = anisotropy;\n\t\t\tthis.format = format;\n\t\t\tthis.internalFormat = null;\n\t\t\tthis.type = type;\n\t\t\tthis.offset = new Vector2(0, 0);\n\t\t\tthis.repeat = new Vector2(1, 1);\n\t\t\tthis.center = new Vector2(0, 0);\n\t\t\tthis.rotation = 0;\n\t\t\tthis.matrixAutoUpdate = true;\n\t\t\tthis.matrix = new Matrix3();\n\t\t\tthis.generateMipmaps = true;\n\t\t\tthis.premultiplyAlpha = false;\n\t\t\tthis.flipY = true;\n\t\t\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t\t//\n\t\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n\t\t\tthis.encoding = encoding;\n\t\t\tthis.version = 0;\n\t\t\tthis.onUpdate = null;\n\t\t}\n\n\t\tupdateMatrix() {\n\t\t\tthis.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice(0);\n\t\t\tthis.mapping = source.mapping;\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\t\t\tthis.anisotropy = source.anisotropy;\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\t\t\tthis.offset.copy(source.offset);\n\t\t\tthis.repeat.copy(source.repeat);\n\t\t\tthis.center.copy(source.center);\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst isRootObject = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (!isRootObject && meta.textures[this.uuid] !== undefined) {\n\t\t\t\treturn meta.textures[this.uuid];\n\t\t\t}\n\n\t\t\tconst output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\t\t\t\tmapping: this.mapping,\n\t\t\t\trepeat: [this.repeat.x, this.repeat.y],\n\t\t\t\toffset: [this.offset.x, this.offset.y],\n\t\t\t\tcenter: [this.center.x, this.center.y],\n\t\t\t\trotation: this.rotation,\n\t\t\t\twrap: [this.wrapS, this.wrapT],\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\t\t\t\tflipY: this.flipY,\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\t\t\t};\n\n\t\t\tif (this.image !== undefined) {\n\t\t\t\t// TODO: Move to THREE.Image\n\t\t\t\tconst image = this.image;\n\n\t\t\t\tif (image.uuid === undefined) {\n\t\t\t\t\timage.uuid = generateUUID(); // UGH\n\t\t\t\t}\n\n\t\t\t\tif (!isRootObject && meta.images[image.uuid] === undefined) {\n\t\t\t\t\tlet url;\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor (let i = 0, l = image.length; i < l; i++) {\n\t\t\t\t\t\t\t// check cube texture with data textures\n\t\t\t\t\t\t\tif (image[i].isDataTexture) {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i].image));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// process single image\n\t\t\t\t\t\turl = serializeImage(image);\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[image.uuid] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\t\t\t}\n\n\t\t\tif (!isRootObject) {\n\t\t\t\tmeta.textures[this.uuid] = output;\n\t\t\t}\n\n\t\t\treturn output;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t\ttransformUv(uv) {\n\t\t\tif (this.mapping !== UVMapping) return uv;\n\t\t\tuv.applyMatrix3(this.matrix);\n\n\t\t\tif (uv.x < 0 || uv.x > 1) {\n\t\t\t\tswitch (this.wrapS) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.x) % 2) === 1) {\n\t\t\t\t\t\t\tuv.x = Math.ceil(uv.x) - uv.x;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (uv.y < 0 || uv.y > 1) {\n\t\t\t\tswitch (this.wrapT) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.y) % 2) === 1) {\n\t\t\t\t\t\t\tuv.y = Math.ceil(uv.y) - uv.y;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.flipY) {\n\t\t\t\tuv.y = 1 - uv.y;\n\t\t\t}\n\n\t\t\treturn uv;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\tTexture.prototype.isTexture = true;\n\n\tfunction serializeImage(image) {\n\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t// default images\n\t\t\treturn ImageUtils.getDataURL(image);\n\t\t} else {\n\t\t\tif (image.data) {\n\t\t\t\t// images of DataTexture\n\t\t\t\treturn {\n\t\t\t\t\tdata: Array.prototype.slice.call(image.data),\n\t\t\t\t\twidth: image.width,\n\t\t\t\t\theight: image.height,\n\t\t\t\t\ttype: image.data.constructor.name\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.Texture: Unable to serialize Texture.');\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t}\n\n\tclass Vector4 {\n\t\tconstructor(x = 0, y = 0, z = 0, w = 1) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t}\n\n\t\tget width() {\n\t\t\treturn this.z;\n\t\t}\n\n\t\tset width(value) {\n\t\t\tthis.z = value;\n\t\t}\n\n\t\tget height() {\n\t\t\treturn this.w;\n\t\t}\n\n\t\tset height(value) {\n\t\t\tthis.w = value;\n\t\t}\n\n\t\tset(x, y, z, w) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetW(w) {\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.w = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tcase 3:\n\t\t\t\t\treturn this.w;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z, this.w);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = v.w !== undefined ? v.w : 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\tthis.w *= v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z,\n\t\t\t\t\t\tw = this.w;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n\t\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tsetAxisAngleFromQuaternion(q) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\t\t// q is assumed to be normalized\n\t\t\tthis.w = 2 * Math.acos(q.w);\n\t\t\tconst s = Math.sqrt(1 - q.w * q.w);\n\n\t\t\tif (s < 0.0001) {\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t} else {\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetAxisAngleFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tlet angle, x, y, z; // variables for result\n\n\t\t\tconst epsilon = 0.01,\n\t\t\t\t\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\n\t\t\t\t\t\t// margin to distinguish between 0 and 180 degrees\n\t\t\tte = m.elements,\n\t\t\t\t\t\tm11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8],\n\t\t\t\t\t\tm21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9],\n\t\t\t\t\t\tm31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10];\n\n\t\t\tif (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\t\t\t\tif (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\t\t\t\t\tthis.set(1, 0, 0, 0);\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\t\t\t\t} // otherwise this singularity is angle = 180\n\n\n\t\t\t\tangle = Math.PI;\n\t\t\t\tconst xx = (m11 + 1) / 2;\n\t\t\t\tconst yy = (m22 + 1) / 2;\n\t\t\t\tconst zz = (m33 + 1) / 2;\n\t\t\t\tconst xy = (m12 + m21) / 4;\n\t\t\t\tconst xz = (m13 + m31) / 4;\n\t\t\t\tconst yz = (m23 + m32) / 4;\n\n\t\t\t\tif (xx > yy && xx > zz) {\n\t\t\t\t\t// m11 is the largest diagonal term\n\t\t\t\t\tif (xx < epsilon) {\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = Math.sqrt(xx);\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\t\t\t\t\t}\n\t\t\t\t} else if (yy > zz) {\n\t\t\t\t\t// m22 is the largest diagonal term\n\t\t\t\t\tif (yy < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty = Math.sqrt(yy);\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\t\t\t\tif (zz < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz = Math.sqrt(zz);\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set(x, y, z, angle);\n\t\t\t\treturn this; // return 180 deg rotation\n\t\t\t} // as we have reached here there are no singularities so we can handle normally\n\n\n\t\t\tlet s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n\t\t\tif (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = (m32 - m23) / s;\n\t\t\tthis.y = (m13 - m31) / s;\n\t\t\tthis.z = (m21 - m12) / s;\n\t\t\tthis.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\tthis.w = Math.min(this.w, v.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\tthis.w = Math.max(this.w, v.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\tthis.w = Math.max(min.w, Math.min(max.w, this.w));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\tthis.w = Math.max(minVal, Math.min(maxVal, this.w));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\tthis.w = Math.floor(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\tthis.w = Math.ceil(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\tthis.w = Math.round(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\tthis.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\tthis.w = -this.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\tthis.w += (v.w - this.w) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\tthis.w = v1.w + (v2.w - v1.w) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\tthis.w = array[offset + 3];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\tarray[offset + 3] = this.w;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\tthis.w = attribute.getW(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\tthis.w = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector4.prototype.isVector4 = true;\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\n\tclass WebGLRenderTarget extends EventDispatcher {\n\t\tconstructor(width, height, options) {\n\t\t\tsuper();\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = 1;\n\t\t\tthis.scissor = new Vector4(0, 0, width, height);\n\t\t\tthis.scissorTest = false;\n\t\t\tthis.viewport = new Vector4(0, 0, width, height);\n\t\t\toptions = options || {};\n\t\t\tthis.texture = new Texture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\tthis.texture.image = {};\n\t\t\tthis.texture.image.width = width;\n\t\t\tthis.texture.image.height = height;\n\t\t\tthis.texture.image.depth = 1;\n\t\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\t}\n\n\t\tsetTexture(texture) {\n\t\t\ttexture.image = {\n\t\t\t\twidth: this.width,\n\t\t\t\theight: this.height,\n\t\t\t\tdepth: this.depth\n\t\t\t};\n\t\t\tthis.texture = texture;\n\t\t}\n\n\t\tsetSize(width, height, depth = 1) {\n\t\t\tif (this.width !== width || this.height !== height || this.depth !== depth) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.depth = depth;\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\t\t\t\tthis.texture.image.depth = depth;\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.viewport.copy(source.viewport);\n\t\t\tthis.texture = source.texture.clone();\n\t\t\tthis.texture.image = { ...this.texture.image\n\t\t\t}; // See #20328.\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tWebGLRenderTarget.prototype.isWebGLRenderTarget = true;\n\n\tclass WebGLMultipleRenderTargets extends WebGLRenderTarget {\n\t\tconstructor(width, height, count) {\n\t\t\tsuper(width, height);\n\t\t\tconst texture = this.texture;\n\t\t\tthis.texture = [];\n\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tthis.texture[i] = texture.clone();\n\t\t\t}\n\t\t}\n\n\t\tsetSize(width, height, depth = 1) {\n\t\t\tif (this.width !== width || this.height !== height || this.depth !== depth) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.depth = depth;\n\n\t\t\t\tfor (let i = 0, il = this.texture.length; i < il; i++) {\n\t\t\t\t\tthis.texture[i].image.width = width;\n\t\t\t\t\tthis.texture[i].image.height = height;\n\t\t\t\t\tthis.texture[i].image.depth = depth;\n\t\t\t\t}\n\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.dispose();\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.viewport.set(0, 0, this.width, this.height);\n\t\t\tthis.scissor.set(0, 0, this.width, this.height);\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\tthis.texture.length = 0;\n\n\t\t\tfor (let i = 0, il = source.texture.length; i < il; i++) {\n\t\t\t\tthis.texture[i] = source.texture[i].clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tWebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;\n\n\tclass WebGLMultisampleRenderTarget extends WebGLRenderTarget {\n\t\tconstructor(width, height, options) {\n\t\t\tsuper(width, height, options);\n\t\t\tthis.samples = 4;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy.call(this, source);\n\t\t\tthis.samples = source.samples;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;\n\n\tclass Quaternion {\n\t\tconstructor(x = 0, y = 0, z = 0, w = 1) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\t\t}\n\n\t\tstatic slerp(qa, qb, qm, t) {\n\t\t\tconsole.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');\n\t\t\treturn qm.slerpQuaternions(qa, qb, t);\n\t\t}\n\n\t\tstatic slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\t\tlet x0 = src0[srcOffset0 + 0],\n\t\t\t\t\ty0 = src0[srcOffset0 + 1],\n\t\t\t\t\tz0 = src0[srcOffset0 + 2],\n\t\t\t\t\tw0 = src0[srcOffset0 + 3];\n\t\t\tconst x1 = src1[srcOffset1 + 0],\n\t\t\t\t\t\ty1 = src1[srcOffset1 + 1],\n\t\t\t\t\t\tz1 = src1[srcOffset1 + 2],\n\t\t\t\t\t\tw1 = src1[srcOffset1 + 3];\n\n\t\t\tif (t === 0) {\n\t\t\t\tdst[dstOffset + 0] = x0;\n\t\t\t\tdst[dstOffset + 1] = y0;\n\t\t\t\tdst[dstOffset + 2] = z0;\n\t\t\t\tdst[dstOffset + 3] = w0;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (t === 1) {\n\t\t\t\tdst[dstOffset + 0] = x1;\n\t\t\t\tdst[dstOffset + 1] = y1;\n\t\t\t\tdst[dstOffset + 2] = z1;\n\t\t\t\tdst[dstOffset + 3] = w1;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n\t\t\t\tlet s = 1 - t;\n\t\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\t\t\t\tdir = cos >= 0 ? 1 : -1,\n\t\t\t\t\t\t\tsqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n\t\t\t\tif (sqrSin > Number.EPSILON) {\n\t\t\t\t\tconst sin = Math.sqrt(sqrSin),\n\t\t\t\t\t\t\t\tlen = Math.atan2(sin, cos * dir);\n\t\t\t\t\ts = Math.sin(s * len) / sin;\n\t\t\t\t\tt = Math.sin(t * len) / sin;\n\t\t\t\t}\n\n\t\t\t\tconst tDir = t * dir;\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n\t\t\t\tif (s === 1 - t) {\n\t\t\t\t\tconst f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdst[dstOffset] = x0;\n\t\t\tdst[dstOffset + 1] = y0;\n\t\t\tdst[dstOffset + 2] = z0;\n\t\t\tdst[dstOffset + 3] = w0;\n\t\t}\n\n\t\tstatic multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n\t\t\tconst x0 = src0[srcOffset0];\n\t\t\tconst y0 = src0[srcOffset0 + 1];\n\t\t\tconst z0 = src0[srcOffset0 + 2];\n\t\t\tconst w0 = src0[srcOffset0 + 3];\n\t\t\tconst x1 = src1[srcOffset1];\n\t\t\tconst y1 = src1[srcOffset1 + 1];\n\t\t\tconst z1 = src1[srcOffset1 + 2];\n\t\t\tconst w1 = src1[srcOffset1 + 3];\n\t\t\tdst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\t\tdst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\t\tdst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\t\tdst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\t\t\treturn dst;\n\t\t}\n\n\t\tget x() {\n\t\t\treturn this._x;\n\t\t}\n\n\t\tset x(value) {\n\t\t\tthis._x = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget y() {\n\t\t\treturn this._y;\n\t\t}\n\n\t\tset y(value) {\n\t\t\tthis._y = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget z() {\n\t\t\treturn this._z;\n\t\t}\n\n\t\tset z(value) {\n\t\t\tthis._z = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget w() {\n\t\t\treturn this._w;\n\t\t}\n\n\t\tset w(value) {\n\t\t\tthis._w = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tset(x, y, z, w) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._w);\n\t\t}\n\n\t\tcopy(quaternion) {\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromEuler(euler, update) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tthrow new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tconst x = euler._x,\n\t\t\t\t\t\ty = euler._y,\n\t\t\t\t\t\tz = euler._z,\n\t\t\t\t\t\torder = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tconst cos = Math.cos;\n\t\t\tconst sin = Math.sin;\n\t\t\tconst c1 = cos(x / 2);\n\t\t\tconst c2 = cos(y / 2);\n\t\t\tconst c3 = cos(z / 2);\n\t\t\tconst s1 = sin(x / 2);\n\t\t\tconst s2 = sin(y / 2);\n\t\t\tconst s3 = sin(z / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromAxisAngle(axis, angle) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\t\t// assumes axis is normalized\n\t\t\tconst halfAngle = angle / 2,\n\t\t\t\t\t\ts = Math.sin(halfAngle);\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos(halfAngle);\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tconst te = m.elements,\n\t\t\t\t\t\tm11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8],\n\t\t\t\t\t\tm21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9],\n\t\t\t\t\t\tm31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10],\n\t\t\t\t\t\ttrace = m11 + m22 + m33;\n\n\t\t\tif (trace > 0) {\n\t\t\t\tconst s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = (m32 - m23) * s;\n\t\t\t\tthis._y = (m13 - m31) * s;\n\t\t\t\tthis._z = (m21 - m12) * s;\n\t\t\t} else if (m11 > m22 && m11 > m33) {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\t\t\t\tthis._w = (m32 - m23) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = (m12 + m21) / s;\n\t\t\t\tthis._z = (m13 + m31) / s;\n\t\t\t} else if (m22 > m33) {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\t\t\t\tthis._w = (m13 - m31) / s;\n\t\t\t\tthis._x = (m12 + m21) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = (m23 + m32) / s;\n\t\t\t} else {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\t\t\t\tthis._w = (m21 - m12) / s;\n\t\t\t\tthis._x = (m13 + m31) / s;\n\t\t\t\tthis._y = (m23 + m32) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromUnitVectors(vFrom, vTo) {\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\t\t\tlet r = vFrom.dot(vTo) + 1;\n\n\t\t\tif (r < Number.EPSILON) {\n\t\t\t\t// vFrom and vTo point in opposite directions\n\t\t\t\tr = 0;\n\n\t\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t} else {\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\t\t}\n\n\t\tangleTo(q) {\n\t\t\treturn 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));\n\t\t}\n\n\t\trotateTowards(q, step) {\n\t\t\tconst angle = this.angleTo(q);\n\t\t\tif (angle === 0) return this;\n\t\t\tconst t = Math.min(1, step / angle);\n\t\t\tthis.slerp(q, t);\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\treturn this.set(0, 0, 0, 1);\n\t\t}\n\n\t\tinvert() {\n\t\t\t// quaternion is assumed to have unit length\n\t\t\treturn this.conjugate();\n\t\t}\n\n\t\tconjugate() {\n\t\t\tthis._x *= -1;\n\t\t\tthis._y *= -1;\n\t\t\tthis._z *= -1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n\t\t}\n\n\t\tnormalize() {\n\t\t\tlet l = this.length();\n\n\t\t\tif (l === 0) {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\t\t\t} else {\n\t\t\t\tl = 1 / l;\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(q, p) {\n\t\t\tif (p !== undefined) {\n\t\t\t\tconsole.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n\t\t\t\treturn this.multiplyQuaternions(q, p);\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions(this, q);\n\t\t}\n\n\t\tpremultiply(q) {\n\t\t\treturn this.multiplyQuaternions(q, this);\n\t\t}\n\n\t\tmultiplyQuaternions(a, b) {\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\t\tconst qax = a._x,\n\t\t\t\t\t\tqay = a._y,\n\t\t\t\t\t\tqaz = a._z,\n\t\t\t\t\t\tqaw = a._w;\n\t\t\tconst qbx = b._x,\n\t\t\t\t\t\tqby = b._y,\n\t\t\t\t\t\tqbz = b._z,\n\t\t\t\t\t\tqbw = b._w;\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tslerp(qb, t) {\n\t\t\tif (t === 0) return this;\n\t\t\tif (t === 1) return this.copy(qb);\n\t\t\tconst x = this._x,\n\t\t\t\t\t\ty = this._y,\n\t\t\t\t\t\tz = this._z,\n\t\t\t\t\t\tw = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif (cosHalfTheta < 0) {\n\t\t\t\tthis._w = -qb._w;\n\t\t\t\tthis._x = -qb._x;\n\t\t\t\tthis._y = -qb._y;\n\t\t\t\tthis._z = -qb._z;\n\t\t\t\tcosHalfTheta = -cosHalfTheta;\n\t\t\t} else {\n\t\t\t\tthis.copy(qb);\n\t\t\t}\n\n\t\t\tif (cosHalfTheta >= 1.0) {\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif (sqrSinHalfTheta <= Number.EPSILON) {\n\t\t\t\tconst s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\t\t\t\tthis.normalize();\n\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n\t\t\tconst halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n\t\t\tconst ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n\t\t\t\t\t\tratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\t\t\tthis._w = w * ratioA + this._w * ratioB;\n\t\t\tthis._x = x * ratioA + this._x * ratioB;\n\t\t\tthis._y = y * ratioA + this._y * ratioB;\n\t\t\tthis._z = z * ratioA + this._z * ratioB;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tslerpQuaternions(qa, qb, t) {\n\t\t\tthis.copy(qa).slerp(qb, t);\n\t\t}\n\n\t\tequals(quaternion) {\n\t\t\treturn quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis._x = array[offset];\n\t\t\tthis._y = array[offset + 1];\n\t\t\tthis._z = array[offset + 2];\n\t\t\tthis._w = array[offset + 3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._w;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index) {\n\t\t\tthis._x = attribute.getX(index);\n\t\t\tthis._y = attribute.getY(index);\n\t\t\tthis._z = attribute.getZ(index);\n\t\t\tthis._w = attribute.getW(index);\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChangeCallback() {}\n\n\t}\n\n\tQuaternion.prototype.isQuaternion = true;\n\n\tclass Vector3 {\n\t\tconstructor(x = 0, y = 0, z = 0) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t}\n\n\t\tset(x, y, z) {\n\t\t\tif (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n\t\t\t\treturn this.multiplyVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyVectors(a, b) {\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion(_quaternion$4.setFromEuler(euler));\n\t\t}\n\n\t\tapplyAxisAngle(axis, angle) {\n\t\t\treturn this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\n\t\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\treturn this.applyMatrix3(m).normalize();\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tconst w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\t\t\tthis.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n\t\t\tthis.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n\t\t\tthis.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst qx = q.x,\n\t\t\t\t\t\tqy = q.y,\n\t\t\t\t\t\tqz = q.z,\n\t\t\t\t\t\tqw = q.w; // calculate quat * vector\n\n\t\t\tconst ix = qw * x + qy * z - qz * y;\n\t\t\tconst iy = qw * y + qz * x - qx * z;\n\t\t\tconst iz = qw * z + qx * y - qy * x;\n\t\t\tconst iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t\t\treturn this;\n\t\t}\n\n\t\tproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n\t\t}\n\n\t\tunproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z;\n\t\t\treturn this.normalize();\n\t\t}\n\n\t\tdivide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\t} // TODO lengthSquared?\n\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tcross(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n\t\t\t\treturn this.crossVectors(v, w);\n\t\t\t}\n\n\t\t\treturn this.crossVectors(this, v);\n\t\t}\n\n\t\tcrossVectors(a, b) {\n\t\t\tconst ax = a.x,\n\t\t\t\t\t\tay = a.y,\n\t\t\t\t\t\taz = a.z;\n\t\t\tconst bx = b.x,\n\t\t\t\t\t\tby = b.y,\n\t\t\t\t\t\tbz = b.z;\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\t\t\treturn this;\n\t\t}\n\n\t\tprojectOnVector(v) {\n\t\t\tconst denominator = v.lengthSq();\n\t\t\tif (denominator === 0) return this.set(0, 0, 0);\n\t\t\tconst scalar = v.dot(this) / denominator;\n\t\t\treturn this.copy(v).multiplyScalar(scalar);\n\t\t}\n\n\t\tprojectOnPlane(planeNormal) {\n\t\t\t_vector$c.copy(this).projectOnVector(planeNormal);\n\n\t\t\treturn this.sub(_vector$c);\n\t\t}\n\n\t\treflect(normal) {\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\t\t\treturn this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));\n\t\t}\n\n\t\tangleTo(v) {\n\t\t\tconst denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n\t\t\tif (denominator === 0) return Math.PI / 2;\n\t\t\tconst theta = this.dot(v) / denominator; // clamp, to handle numerical problems\n\n\t\t\treturn Math.acos(clamp(theta, -1, 1));\n\t\t}\n\n\t\tdistanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t}\n\n\t\tdistanceToSquared(v) {\n\t\t\tconst dx = this.x - v.x,\n\t\t\t\t\t\tdy = this.y - v.y,\n\t\t\t\t\t\tdz = this.z - v.z;\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\t\t}\n\n\t\tmanhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n\t\t}\n\n\t\tsetFromSpherical(s) {\n\t\t\treturn this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n\t\t}\n\n\t\tsetFromSphericalCoords(radius, phi, theta) {\n\t\t\tconst sinPhiRadius = Math.sin(phi) * radius;\n\t\t\tthis.x = sinPhiRadius * Math.sin(theta);\n\t\t\tthis.y = Math.cos(phi) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos(theta);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCylindrical(c) {\n\t\t\treturn this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n\t\t}\n\n\t\tsetFromCylindricalCoords(radius, theta, y) {\n\t\t\tthis.x = radius * Math.sin(theta);\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos(theta);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixPosition(m) {\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[12];\n\t\t\tthis.y = e[13];\n\t\t\tthis.z = e[14];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixScale(m) {\n\t\t\tconst sx = this.setFromMatrixColumn(m, 0).length();\n\t\t\tconst sy = this.setFromMatrixColumn(m, 1).length();\n\t\t\tconst sz = this.setFromMatrixColumn(m, 2).length();\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixColumn(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 4);\n\t\t}\n\n\t\tsetFromMatrix3Column(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 3);\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tVector3.prototype.isVector3 = true;\n\n\tconst _vector$c = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n\tclass Box3 {\n\t\tconstructor(min = new Vector3(+Infinity, +Infinity, +Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tset(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromArray(array) {\n\t\t\tlet minX = +Infinity;\n\t\t\tlet minY = +Infinity;\n\t\t\tlet minZ = +Infinity;\n\t\t\tlet maxX = -Infinity;\n\t\t\tlet maxY = -Infinity;\n\t\t\tlet maxZ = -Infinity;\n\n\t\t\tfor (let i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\tconst x = array[i];\n\t\t\t\tconst y = array[i + 1];\n\t\t\t\tconst z = array[i + 2];\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromBufferAttribute(attribute) {\n\t\t\tlet minX = +Infinity;\n\t\t\tlet minY = +Infinity;\n\t\t\tlet minZ = +Infinity;\n\t\t\tlet maxX = -Infinity;\n\t\t\tlet maxY = -Infinity;\n\t\t\tlet maxZ = -Infinity;\n\n\t\t\tfor (let i = 0, l = attribute.count; i < l; i++) {\n\t\t\t\tconst x = attribute.getX(i);\n\t\t\t\tconst y = attribute.getY(i);\n\t\t\t\tconst z = attribute.getZ(i);\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCenterAndSize(center, size) {\n\t\t\tconst halfSize = _vector$b.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromObject(object) {\n\t\t\tthis.makeEmpty();\n\t\t\treturn this.expandByObject(object);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.min.x = this.min.y = this.min.z = +Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t}\n\n\t\tgetSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getSize() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByObject(object) {\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tconst geometry = object.geometry;\n\n\t\t\tif (geometry !== undefined) {\n\t\t\t\tif (geometry.boundingBox === null) {\n\t\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\t}\n\n\t\t\t\t_box$3.copy(geometry.boundingBox);\n\n\t\t\t\t_box$3.applyMatrix4(object.matrixWorld);\n\n\t\t\t\tthis.union(_box$3);\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tthis.expandByObject(children[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n\t\t}\n\n\t\tcontainsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n\t\t}\n\n\t\tgetParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint(sphere.center, _vector$b); // If that point is inside the sphere, the AABB and sphere intersect.\n\n\t\t\treturn _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\t\tlet min, max;\n\n\t\t\tif (plane.normal.x > 0) {\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\t\t\t} else {\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\t\t\t}\n\n\t\t\tif (plane.normal.y > 0) {\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\t\t\t}\n\n\t\t\tif (plane.normal.z > 0) {\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\t\t\t}\n\n\t\t\treturn min <= -plane.constant && max >= -plane.constant;\n\t\t}\n\n\t\tintersectsTriangle(triangle) {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} // compute box center and extents\n\n\n\t\t\tthis.getCenter(_center);\n\n\t\t\t_extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n\t\t\t_v0$2.subVectors(triangle.a, _center);\n\n\t\t\t_v1$7.subVectors(triangle.b, _center);\n\n\t\t\t_v2$3.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n\t\t\t_f0.subVectors(_v1$7, _v0$2);\n\n\t\t\t_f1.subVectors(_v2$3, _v1$7);\n\n\t\t\t_f2.subVectors(_v0$2, _v2$3); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n\t\t\tlet axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n\t\t\tif (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // test 3 face normals from the aabb\n\n\n\t\t\taxes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\n\n\t\t\t_triangleNormal.crossVectors(_f0, _f1);\n\n\t\t\taxes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n\t\t\treturn satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents);\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\tconst clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t}\n\n\t\tgetBoundingSphere(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\n\t\t\t}\n\n\t\t\tthis.getCenter(target.center);\n\t\t\ttarget.radius = this.getSize(_vector$b).length() * 0.5;\n\t\t\treturn target;\n\t\t}\n\n\t\tintersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n\t\t\tif (this.isEmpty()) this.makeEmpty();\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n\t\t\t_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n\t\t\t_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n\t\t\t_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n\t\t\t_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n\t\t\t_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n\t\t\t_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n\t\t\t_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n\t\t\t_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n\t\t\tthis.setFromPoints(_points);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t}\n\n\t}\n\n\tBox3.prototype.isBox3 = true;\n\tconst _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\n\tconst _vector$b = /*@__PURE__*/new Vector3();\n\n\tconst _box$3 = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\n\tconst _v0$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v1$7 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$3 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\n\tconst _f0 = /*@__PURE__*/new Vector3();\n\n\tconst _f1 = /*@__PURE__*/new Vector3();\n\n\tconst _f2 = /*@__PURE__*/new Vector3();\n\n\tconst _center = /*@__PURE__*/new Vector3();\n\n\tconst _extents = /*@__PURE__*/new Vector3();\n\n\tconst _triangleNormal = /*@__PURE__*/new Vector3();\n\n\tconst _testAxis = /*@__PURE__*/new Vector3();\n\n\tfunction satForAxes(axes, v0, v1, v2, extents) {\n\t\tfor (let i = 0, j = axes.length - 3; i <= j; i += 3) {\n\t\t\t_testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n\t\t\tconst r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n\t\t\tconst p0 = v0.dot(_testAxis);\n\t\t\tconst p1 = v1.dot(_testAxis);\n\t\t\tconst p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n\t\t\tif (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tconst _box$2 = /*@__PURE__*/new Box3();\n\n\tconst _v1$6 = /*@__PURE__*/new Vector3();\n\n\tconst _toFarthestPoint = /*@__PURE__*/new Vector3();\n\n\tconst _toPoint = /*@__PURE__*/new Vector3();\n\n\tclass Sphere {\n\t\tconstructor(center = new Vector3(), radius = -1) {\n\t\t\tthis.center = center;\n\t\t\tthis.radius = radius;\n\t\t}\n\n\t\tset(center, radius) {\n\t\t\tthis.center.copy(center);\n\t\t\tthis.radius = radius;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points, optionalCenter) {\n\t\t\tconst center = this.center;\n\n\t\t\tif (optionalCenter !== undefined) {\n\t\t\t\tcenter.copy(optionalCenter);\n\t\t\t} else {\n\t\t\t\t_box$2.setFromPoints(points).getCenter(center);\n\t\t\t}\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt(maxRadiusSq);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(sphere) {\n\t\t\tthis.center.copy(sphere.center);\n\t\t\tthis.radius = sphere.radius;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\treturn this.radius < 0;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.center.set(0, 0, 0);\n\t\t\tthis.radius = -1;\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.distanceToSquared(this.center) <= this.radius * this.radius;\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn point.distanceTo(this.center) - this.radius;\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\tconst radiusSum = this.radius + sphere.radius;\n\t\t\treturn sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsSphere(this);\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\treturn Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tconst deltaLengthSq = this.center.distanceToSquared(point);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.copy(point);\n\n\t\t\tif (deltaLengthSq > this.radius * this.radius) {\n\t\t\t\ttarget.sub(this.center).normalize();\n\t\t\t\ttarget.multiplyScalar(this.radius).add(this.center);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t}\n\n\t\tgetBoundingBox(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .getBoundingBox() target is now required');\n\t\t\t\ttarget = new Box3();\n\t\t\t}\n\n\t\t\tif (this.isEmpty()) {\n\t\t\t\t// Empty sphere produces empty bounding box\n\t\t\t\ttarget.makeEmpty();\n\t\t\t\treturn target;\n\t\t\t}\n\n\t\t\ttarget.set(this.center, this.center);\n\t\t\ttarget.expandByScalar(this.radius);\n\t\t\treturn target;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tthis.center.applyMatrix4(matrix);\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.center.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n\t\t\t_toPoint.subVectors(point, this.center);\n\n\t\t\tconst lengthSq = _toPoint.lengthSq();\n\n\t\t\tif (lengthSq > this.radius * this.radius) {\n\t\t\t\tconst length = Math.sqrt(lengthSq);\n\t\t\t\tconst missingRadiusHalf = (length - this.radius) * 0.5; // Nudge this sphere towards the target point. Add half the missing distance to radius,\n\t\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\n\t\t\t\t// the whole missing distance were just added to radius.\n\n\t\t\t\tthis.center.add(_toPoint.multiplyScalar(missingRadiusHalf / length));\n\t\t\t\tthis.radius += missingRadiusHalf;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(sphere) {\n\t\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n\t\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\n\t\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\n\t\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\n\t\t\t_toFarthestPoint.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);\n\n\t\t\tthis.expandByPoint(_v1$6.copy(sphere.center).add(_toFarthestPoint));\n\t\t\tthis.expandByPoint(_v1$6.copy(sphere.center).sub(_toFarthestPoint));\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(sphere) {\n\t\t\treturn sphere.center.equals(this.center) && sphere.radius === this.radius;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tconst _vector$a = /*@__PURE__*/new Vector3();\n\n\tconst _segCenter = /*@__PURE__*/new Vector3();\n\n\tconst _segDir = /*@__PURE__*/new Vector3();\n\n\tconst _diff = /*@__PURE__*/new Vector3();\n\n\tconst _edge1 = /*@__PURE__*/new Vector3();\n\n\tconst _edge2 = /*@__PURE__*/new Vector3();\n\n\tconst _normal$1 = /*@__PURE__*/new Vector3();\n\n\tclass Ray {\n\t\tconstructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {\n\t\t\tthis.origin = origin;\n\t\t\tthis.direction = direction;\n\t\t}\n\n\t\tset(origin, direction) {\n\t\t\tthis.origin.copy(origin);\n\t\t\tthis.direction.copy(direction);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(ray) {\n\t\t\tthis.origin.copy(ray.origin);\n\t\t\tthis.direction.copy(ray.direction);\n\t\t\treturn this;\n\t\t}\n\n\t\tat(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(t).add(this.origin);\n\t\t}\n\n\t\tlookAt(v) {\n\t\t\tthis.direction.copy(v).sub(this.origin).normalize();\n\t\t\treturn this;\n\t\t}\n\n\t\trecast(t) {\n\t\t\tthis.origin.copy(this.at(t, _vector$a));\n\t\t\treturn this;\n\t\t}\n\n\t\tclosestPointToPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(point, this.origin);\n\t\t\tconst directionDistance = target.dot(this.direction);\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn target.copy(this.origin);\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn Math.sqrt(this.distanceSqToPoint(point));\n\t\t}\n\n\t\tdistanceSqToPoint(point) {\n\t\t\tconst directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn this.origin.distanceToSquared(point);\n\t\t\t}\n\n\t\t\t_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n\t\t\treturn _vector$a.distanceToSquared(point);\n\t\t}\n\n\t\tdistanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\t\t\t_segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n\t\t\t_segDir.copy(v1).sub(v0).normalize();\n\n\t\t\t_diff.copy(this.origin).sub(_segCenter);\n\n\t\t\tconst segExtent = v0.distanceTo(v1) * 0.5;\n\t\t\tconst a01 = -this.direction.dot(_segDir);\n\n\t\t\tconst b0 = _diff.dot(this.direction);\n\n\t\t\tconst b1 = -_diff.dot(_segDir);\n\n\t\t\tconst c = _diff.lengthSq();\n\n\t\t\tconst det = Math.abs(1 - a01 * a01);\n\t\t\tlet s0, s1, sqrDist, extDet;\n\n\t\t\tif (det > 0) {\n\t\t\t\t// The ray and segment are not parallel.\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif (s0 >= 0) {\n\t\t\t\t\tif (s1 >= -extDet) {\n\t\t\t\t\t\tif (s1 <= extDet) {\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// region 1\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 5\n\t\t\t\t\t\ts1 = -segExtent;\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (s1 <= -extDet) {\n\t\t\t\t\t\t// region 4\n\t\t\t\t\t\ts0 = Math.max(0, -(-a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else if (s1 <= extDet) {\n\t\t\t\t\t\t// region 3\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 2\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Ray and segment are parallel.\n\t\t\t\ts1 = a01 > 0 ? -segExtent : segExtent;\n\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t}\n\n\t\t\tif (optionalPointOnRay) {\n\t\t\t\toptionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n\t\t\t}\n\n\t\t\tif (optionalPointOnSegment) {\n\t\t\t\toptionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\t\t}\n\n\t\tintersectSphere(sphere, target) {\n\t\t\t_vector$a.subVectors(sphere.center, this.origin);\n\n\t\t\tconst tca = _vector$a.dot(this.direction);\n\n\t\t\tconst d2 = _vector$a.dot(_vector$a) - tca * tca;\n\t\t\tconst radius2 = sphere.radius * sphere.radius;\n\t\t\tif (d2 > radius2) return null;\n\t\t\tconst thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n\t\t\tconst t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n\t\t\tconst t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n\t\t\tif (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\n\t\t\tif (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n\t\t\treturn this.at(t0, target);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\treturn this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n\t\t}\n\n\t\tdistanceToPlane(plane) {\n\t\t\tconst denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (plane.distanceToPoint(this.origin) === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} // Null is preferable to undefined since undefined means.... it is undefined\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\t\t}\n\n\t\tintersectPlane(plane, target) {\n\t\t\tconst t = this.distanceToPlane(plane);\n\n\t\t\tif (t === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this.at(t, target);\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\t// check if the ray lies on the plane first\n\t\t\tconst distToPoint = plane.distanceToPoint(this.origin);\n\n\t\t\tif (distToPoint === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator * distToPoint < 0) {\n\t\t\t\treturn true;\n\t\t\t} // ray origin is behind the plane (and is pointing behind it)\n\n\n\t\t\treturn false;\n\t\t}\n\n\t\tintersectBox(box, target) {\n\t\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\t\tconst invdirx = 1 / this.direction.x,\n\t\t\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\t\t\tinvdirz = 1 / this.direction.z;\n\t\t\tconst origin = this.origin;\n\n\t\t\tif (invdirx >= 0) {\n\t\t\t\ttmin = (box.min.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.max.x - origin.x) * invdirx;\n\t\t\t} else {\n\t\t\t\ttmin = (box.max.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.min.x - origin.x) * invdirx;\n\t\t\t}\n\n\t\t\tif (invdiry >= 0) {\n\t\t\t\ttymin = (box.min.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.max.y - origin.y) * invdiry;\n\t\t\t} else {\n\t\t\t\ttymin = (box.max.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.min.y - origin.y) * invdiry;\n\t\t\t}\n\n\t\t\tif (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif (tymin > tmin || tmin !== tmin) tmin = tymin;\n\t\t\tif (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n\t\t\tif (invdirz >= 0) {\n\t\t\t\ttzmin = (box.min.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.max.z - origin.z) * invdirz;\n\t\t\t} else {\n\t\t\t\ttzmin = (box.max.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.min.z - origin.z) * invdirz;\n\t\t\t}\n\n\t\t\tif (tmin > tzmax || tzmin > tmax) return null;\n\t\t\tif (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n\t\t\tif (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n\t\t\tif (tmax < 0) return null;\n\t\t\treturn this.at(tmin >= 0 ? tmin : tmax, target);\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn this.intersectBox(box, _vector$a) !== null;\n\t\t}\n\n\t\tintersectTriangle(a, b, c, backfaceCulling, target) {\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\t\t_edge1.subVectors(b, a);\n\n\t\t\t_edge2.subVectors(c, a);\n\n\t\t\t_normal$1.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//\t |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//\t |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//\t |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n\t\t\tlet DdN = this.direction.dot(_normal$1);\n\t\t\tlet sign;\n\n\t\t\tif (DdN > 0) {\n\t\t\t\tif (backfaceCulling) return null;\n\t\t\t\tsign = 1;\n\t\t\t} else if (DdN < 0) {\n\t\t\t\tsign = -1;\n\t\t\t\tDdN = -DdN;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_diff.subVectors(this.origin, a);\n\n\t\t\tconst DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n\t\t\tif (DdQxE2 < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n\t\t\tif (DdE1xQ < 0) {\n\t\t\t\treturn null;\n\t\t\t} // b1+b2 > 1, no intersection\n\n\n\t\t\tif (DdQxE2 + DdE1xQ > DdN) {\n\t\t\t\treturn null;\n\t\t\t} // Line intersects triangle, check if ray does.\n\n\n\t\t\tconst QdN = -sign * _diff.dot(_normal$1); // t < 0, no intersection\n\n\n\t\t\tif (QdN < 0) {\n\t\t\t\treturn null;\n\t\t\t} // Ray intersects triangle.\n\n\n\t\t\treturn this.at(QdN / DdN, target);\n\t\t}\n\n\t\tapplyMatrix4(matrix4) {\n\t\t\tthis.origin.applyMatrix4(matrix4);\n\t\t\tthis.direction.transformDirection(matrix4);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(ray) {\n\t\t\treturn ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tclass Matrix4 {\n\t\tconstructor() {\n\t\t\tthis.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tset(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[4] = n12;\n\t\t\tte[8] = n13;\n\t\t\tte[12] = n14;\n\t\t\tte[1] = n21;\n\t\t\tte[5] = n22;\n\t\t\tte[9] = n23;\n\t\t\tte[13] = n24;\n\t\t\tte[2] = n31;\n\t\t\tte[6] = n32;\n\t\t\tte[10] = n33;\n\t\t\tte[14] = n34;\n\t\t\tte[3] = n41;\n\t\t\tte[7] = n42;\n\t\t\tte[11] = n43;\n\t\t\tte[15] = n44;\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\tthis.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Matrix4().fromArray(this.elements);\n\t\t}\n\n\t\tcopy(m) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\tte[9] = me[9];\n\t\t\tte[10] = me[10];\n\t\t\tte[11] = me[11];\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\tte[15] = me[15];\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyPosition(m) {\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tme = m.elements;\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrix3(m) {\n\t\t\tconst me = m.elements;\n\t\t\tthis.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\textractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrixColumn(this, 0);\n\t\t\tyAxis.setFromMatrixColumn(this, 1);\n\t\t\tzAxis.setFromMatrixColumn(this, 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeBasis(xAxis, yAxis, zAxis) {\n\t\t\tthis.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\textractRotation(m) {\n\t\t\t// this method does not support reflection matrices\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\n\t\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();\n\n\t\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();\n\n\t\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();\n\n\t\t\tte[0] = me[0] * scaleX;\n\t\t\tte[1] = me[1] * scaleX;\n\t\t\tte[2] = me[2] * scaleX;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = me[4] * scaleY;\n\t\t\tte[5] = me[5] * scaleY;\n\t\t\tte[6] = me[6] * scaleY;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = me[8] * scaleZ;\n\t\t\tte[9] = me[9] * scaleZ;\n\t\t\tte[10] = me[10] * scaleZ;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationFromEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tconst te = this.elements;\n\t\t\tconst x = euler.x,\n\t\t\t\t\t\ty = euler.y,\n\t\t\t\t\t\tz = euler.z;\n\t\t\tconst a = Math.cos(x),\n\t\t\t\t\t\tb = Math.sin(x);\n\t\t\tconst c = Math.cos(y),\n\t\t\t\t\t\td = Math.sin(y);\n\t\t\tconst e = Math.cos(z),\n\t\t\t\t\t\tf = Math.sin(z);\n\n\t\t\tif (euler.order === 'XYZ') {\n\t\t\t\tconst ae = a * e,\n\t\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -c * f;\n\t\t\t\tte[8] = d;\n\t\t\t\tte[1] = af + be * d;\n\t\t\t\tte[5] = ae - bf * d;\n\t\t\t\tte[9] = -b * c;\n\t\t\t\tte[2] = bf - ae * d;\n\t\t\t\tte[6] = be + af * d;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YXZ') {\n\t\t\t\tconst ce = c * e,\n\t\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce + df * b;\n\t\t\t\tte[4] = de * b - cf;\n\t\t\t\tte[8] = a * d;\n\t\t\t\tte[1] = a * f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b;\n\t\t\t\tte[2] = cf * b - de;\n\t\t\t\tte[6] = df + ce * b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZXY') {\n\t\t\t\tconst ce = c * e,\n\t\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce - df * b;\n\t\t\t\tte[4] = -a * f;\n\t\t\t\tte[8] = de + cf * b;\n\t\t\t\tte[1] = cf + de * b;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = df - ce * b;\n\t\t\t\tte[2] = -a * d;\n\t\t\t\tte[6] = b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZYX') {\n\t\t\t\tconst ae = a * e,\n\t\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = be * d - af;\n\t\t\t\tte[8] = ae * d + bf;\n\t\t\t\tte[1] = c * f;\n\t\t\t\tte[5] = bf * d + ae;\n\t\t\t\tte[9] = af * d - be;\n\t\t\t\tte[2] = -d;\n\t\t\t\tte[6] = b * c;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YZX') {\n\t\t\t\tconst ac = a * c,\n\t\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = bd - ac * f;\n\t\t\t\tte[8] = bc * f + ad;\n\t\t\t\tte[1] = f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b * e;\n\t\t\t\tte[2] = -d * e;\n\t\t\t\tte[6] = ad * f + bc;\n\t\t\t\tte[10] = ac - bd * f;\n\t\t\t} else if (euler.order === 'XZY') {\n\t\t\t\tconst ac = a * c,\n\t\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -f;\n\t\t\t\tte[8] = d * e;\n\t\t\t\tte[1] = ac * f + bd;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = ad * f - bc;\n\t\t\t\tte[2] = bc * f - ad;\n\t\t\t\tte[6] = b * e;\n\t\t\t\tte[10] = bd * f + ac;\n\t\t\t} // bottom row\n\n\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0; // last column\n\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationFromQuaternion(q) {\n\t\t\treturn this.compose(_zero, q, _one);\n\t\t}\n\n\t\tlookAt(eye, target, up) {\n\t\t\tconst te = this.elements;\n\n\t\t\t_z.subVectors(eye, target);\n\n\t\t\tif (_z.lengthSq() === 0) {\n\t\t\t\t// eye and target are in the same position\n\t\t\t\t_z.z = 1;\n\t\t\t}\n\n\t\t\t_z.normalize();\n\n\t\t\t_x.crossVectors(up, _z);\n\n\t\t\tif (_x.lengthSq() === 0) {\n\t\t\t\t// up and z are parallel\n\t\t\t\tif (Math.abs(up.z) === 1) {\n\t\t\t\t\t_z.x += 0.0001;\n\t\t\t\t} else {\n\t\t\t\t\t_z.z += 0.0001;\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\n\t\t\t\t_x.crossVectors(up, _z);\n\t\t\t}\n\n\t\t\t_x.normalize();\n\n\t\t\t_y.crossVectors(_z, _x);\n\n\t\t\tte[0] = _x.x;\n\t\t\tte[4] = _y.x;\n\t\t\tte[8] = _z.x;\n\t\t\tte[1] = _x.y;\n\t\t\tte[5] = _y.y;\n\t\t\tte[9] = _z.y;\n\t\t\tte[2] = _x.z;\n\t\t\tte[6] = _y.z;\n\t\t\tte[10] = _z.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(m, n) {\n\t\t\tif (n !== undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n\t\t\t\treturn this.multiplyMatrices(m, n);\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t}\n\n\t\tpremultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t}\n\n\t\tmultiplyMatrices(a, b) {\n\t\t\tconst ae = a.elements;\n\t\t\tconst be = b.elements;\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = ae[0],\n\t\t\t\t\t\ta12 = ae[4],\n\t\t\t\t\t\ta13 = ae[8],\n\t\t\t\t\t\ta14 = ae[12];\n\t\t\tconst a21 = ae[1],\n\t\t\t\t\t\ta22 = ae[5],\n\t\t\t\t\t\ta23 = ae[9],\n\t\t\t\t\t\ta24 = ae[13];\n\t\t\tconst a31 = ae[2],\n\t\t\t\t\t\ta32 = ae[6],\n\t\t\t\t\t\ta33 = ae[10],\n\t\t\t\t\t\ta34 = ae[14];\n\t\t\tconst a41 = ae[3],\n\t\t\t\t\t\ta42 = ae[7],\n\t\t\t\t\t\ta43 = ae[11],\n\t\t\t\t\t\ta44 = ae[15];\n\t\t\tconst b11 = be[0],\n\t\t\t\t\t\tb12 = be[4],\n\t\t\t\t\t\tb13 = be[8],\n\t\t\t\t\t\tb14 = be[12];\n\t\t\tconst b21 = be[1],\n\t\t\t\t\t\tb22 = be[5],\n\t\t\t\t\t\tb23 = be[9],\n\t\t\t\t\t\tb24 = be[13];\n\t\t\tconst b31 = be[2],\n\t\t\t\t\t\tb32 = be[6],\n\t\t\t\t\t\tb33 = be[10],\n\t\t\t\t\t\tb34 = be[14];\n\t\t\tconst b41 = be[3],\n\t\t\t\t\t\tb42 = be[7],\n\t\t\t\t\t\tb43 = be[11],\n\t\t\t\t\t\tb44 = be[15];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[8] *= s;\n\t\t\tte[12] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[9] *= s;\n\t\t\tte[13] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[10] *= s;\n\t\t\tte[14] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[11] *= s;\n\t\t\tte[15] *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeterminant() {\n\t\t\tconst te = this.elements;\n\t\t\tconst n11 = te[0],\n\t\t\t\t\t\tn12 = te[4],\n\t\t\t\t\t\tn13 = te[8],\n\t\t\t\t\t\tn14 = te[12];\n\t\t\tconst n21 = te[1],\n\t\t\t\t\t\tn22 = te[5],\n\t\t\t\t\t\tn23 = te[9],\n\t\t\t\t\t\tn24 = te[13];\n\t\t\tconst n31 = te[2],\n\t\t\t\t\t\tn32 = te[6],\n\t\t\t\t\t\tn33 = te[10],\n\t\t\t\t\t\tn34 = te[14];\n\t\t\tconst n41 = te[3],\n\t\t\t\t\t\tn42 = te[7],\n\t\t\t\t\t\tn43 = te[11],\n\t\t\t\t\t\tn44 = te[15]; //TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n\t\t}\n\n\t\ttranspose() {\n\t\t\tconst te = this.elements;\n\t\t\tlet tmp;\n\t\t\ttmp = te[1];\n\t\t\tte[1] = te[4];\n\t\t\tte[4] = tmp;\n\t\t\ttmp = te[2];\n\t\t\tte[2] = te[8];\n\t\t\tte[8] = tmp;\n\t\t\ttmp = te[6];\n\t\t\tte[6] = te[9];\n\t\t\tte[9] = tmp;\n\t\t\ttmp = te[3];\n\t\t\tte[3] = te[12];\n\t\t\tte[12] = tmp;\n\t\t\ttmp = te[7];\n\t\t\tte[7] = te[13];\n\t\t\tte[13] = tmp;\n\t\t\ttmp = te[11];\n\t\t\tte[11] = te[14];\n\t\t\tte[14] = tmp;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetPosition(x, y, z) {\n\t\t\tconst te = this.elements;\n\n\t\t\tif (x.isVector3) {\n\t\t\t\tte[12] = x.x;\n\t\t\t\tte[13] = x.y;\n\t\t\t\tte[14] = x.z;\n\t\t\t} else {\n\t\t\t\tte[12] = x;\n\t\t\t\tte[13] = y;\n\t\t\t\tte[14] = z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tinvert() {\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tn11 = te[0],\n\t\t\t\t\t\tn21 = te[1],\n\t\t\t\t\t\tn31 = te[2],\n\t\t\t\t\t\tn41 = te[3],\n\t\t\t\t\t\tn12 = te[4],\n\t\t\t\t\t\tn22 = te[5],\n\t\t\t\t\t\tn32 = te[6],\n\t\t\t\t\t\tn42 = te[7],\n\t\t\t\t\t\tn13 = te[8],\n\t\t\t\t\t\tn23 = te[9],\n\t\t\t\t\t\tn33 = te[10],\n\t\t\t\t\t\tn43 = te[11],\n\t\t\t\t\t\tn14 = te[12],\n\t\t\t\t\t\tn24 = te[13],\n\t\t\t\t\t\tn34 = te[14],\n\t\t\t\t\t\tn44 = te[15],\n\t\t\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tconst detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n\t\t\tte[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n\t\t\tte[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n\t\t\tte[4] = t12 * detInv;\n\t\t\tte[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n\t\t\tte[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n\t\t\tte[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n\t\t\tte[8] = t13 * detInv;\n\t\t\tte[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n\t\t\tte[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n\t\t\tte[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n\t\t\tte[12] = t14 * detInv;\n\t\t\tte[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n\t\t\tte[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n\t\t\tte[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(v) {\n\t\t\tconst te = this.elements;\n\t\t\tconst x = v.x,\n\t\t\t\t\t\ty = v.y,\n\t\t\t\t\t\tz = v.z;\n\t\t\tte[0] *= x;\n\t\t\tte[4] *= y;\n\t\t\tte[8] *= z;\n\t\t\tte[1] *= x;\n\t\t\tte[5] *= y;\n\t\t\tte[9] *= z;\n\t\t\tte[2] *= x;\n\t\t\tte[6] *= y;\n\t\t\tte[10] *= z;\n\t\t\tte[3] *= x;\n\t\t\tte[7] *= y;\n\t\t\tte[11] *= z;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMaxScaleOnAxis() {\n\t\t\tconst te = this.elements;\n\t\t\tconst scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n\t\t\tconst scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n\t\t\tconst scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\t\t\treturn Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n\t\t}\n\n\t\tmakeTranslation(x, y, z) {\n\t\t\tthis.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationX(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationY(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationZ(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationAxis(axis, angle) {\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t\tconst c = Math.cos(angle);\n\t\t\tconst s = Math.sin(angle);\n\t\t\tconst t = 1 - c;\n\t\t\tconst x = axis.x,\n\t\t\t\t\t\ty = axis.y,\n\t\t\t\t\t\tz = axis.z;\n\t\t\tconst tx = t * x,\n\t\t\t\t\t\tty = t * y;\n\t\t\tthis.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeScale(x, y, z) {\n\t\t\tthis.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeShear(xy, xz, yx, yz, zx, zy) {\n\t\t\tthis.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tcompose(position, quaternion, scale) {\n\t\t\tconst te = this.elements;\n\t\t\tconst x = quaternion._x,\n\t\t\t\t\t\ty = quaternion._y,\n\t\t\t\t\t\tz = quaternion._z,\n\t\t\t\t\t\tw = quaternion._w;\n\t\t\tconst x2 = x + x,\n\t\t\t\t\t\ty2 = y + y,\n\t\t\t\t\t\tz2 = z + z;\n\t\t\tconst xx = x * x2,\n\t\t\t\t\t\txy = x * y2,\n\t\t\t\t\t\txz = x * z2;\n\t\t\tconst yy = y * y2,\n\t\t\t\t\t\tyz = y * z2,\n\t\t\t\t\t\tzz = z * z2;\n\t\t\tconst wx = w * x2,\n\t\t\t\t\t\twy = w * y2,\n\t\t\t\t\t\twz = w * z2;\n\t\t\tconst sx = scale.x,\n\t\t\t\t\t\tsy = scale.y,\n\t\t\t\t\t\tsz = scale.z;\n\t\t\tte[0] = (1 - (yy + zz)) * sx;\n\t\t\tte[1] = (xy + wz) * sx;\n\t\t\tte[2] = (xz - wy) * sx;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = (xy - wz) * sy;\n\t\t\tte[5] = (1 - (xx + zz)) * sy;\n\t\t\tte[6] = (yz + wx) * sy;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = (xz + wy) * sz;\n\t\t\tte[9] = (yz - wx) * sz;\n\t\t\tte[10] = (1 - (xx + yy)) * sz;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = position.x;\n\t\t\tte[13] = position.y;\n\t\t\tte[14] = position.z;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tdecompose(position, quaternion, scale) {\n\t\t\tconst te = this.elements;\n\n\t\t\tlet sx = _v1$5.set(te[0], te[1], te[2]).length();\n\n\t\t\tconst sy = _v1$5.set(te[4], te[5], te[6]).length();\n\n\t\t\tconst sz = _v1$5.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n\n\t\t\tconst det = this.determinant();\n\t\t\tif (det < 0) sx = -sx;\n\t\t\tposition.x = te[12];\n\t\t\tposition.y = te[13];\n\t\t\tposition.z = te[14]; // scale the rotation part\n\n\t\t\t_m1$2.copy(this);\n\n\t\t\tconst invSX = 1 / sx;\n\t\t\tconst invSY = 1 / sy;\n\t\t\tconst invSZ = 1 / sz;\n\t\t\t_m1$2.elements[0] *= invSX;\n\t\t\t_m1$2.elements[1] *= invSX;\n\t\t\t_m1$2.elements[2] *= invSX;\n\t\t\t_m1$2.elements[4] *= invSY;\n\t\t\t_m1$2.elements[5] *= invSY;\n\t\t\t_m1$2.elements[6] *= invSY;\n\t\t\t_m1$2.elements[8] *= invSZ;\n\t\t\t_m1$2.elements[9] *= invSZ;\n\t\t\t_m1$2.elements[10] *= invSZ;\n\t\t\tquaternion.setFromRotationMatrix(_m1$2);\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakePerspective(left, right, top, bottom, near, far) {\n\t\t\tif (far === undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n\t\t\t}\n\n\t\t\tconst te = this.elements;\n\t\t\tconst x = 2 * near / (right - left);\n\t\t\tconst y = 2 * near / (top - bottom);\n\t\t\tconst a = (right + left) / (right - left);\n\t\t\tconst b = (top + bottom) / (top - bottom);\n\t\t\tconst c = -(far + near) / (far - near);\n\t\t\tconst d = -2 * far * near / (far - near);\n\t\t\tte[0] = x;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = a;\n\t\t\tte[12] = 0;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = y;\n\t\t\tte[9] = b;\n\t\t\tte[13] = 0;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = c;\n\t\t\tte[14] = d;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = -1;\n\t\t\tte[15] = 0;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeOrthographic(left, right, top, bottom, near, far) {\n\t\t\tconst te = this.elements;\n\t\t\tconst w = 1.0 / (right - left);\n\t\t\tconst h = 1.0 / (top - bottom);\n\t\t\tconst p = 1.0 / (far - near);\n\t\t\tconst x = (right + left) * w;\n\t\t\tconst y = (top + bottom) * h;\n\t\t\tconst z = (far + near) * p;\n\t\t\tte[0] = 2 * w;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = 0;\n\t\t\tte[12] = -x;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = 2 * h;\n\t\t\tte[9] = 0;\n\t\t\tte[13] = -y;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = -2 * p;\n\t\t\tte[14] = -z;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(matrix) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = matrix.elements;\n\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\tarray[offset + 9] = te[9];\n\t\t\tarray[offset + 10] = te[10];\n\t\t\tarray[offset + 11] = te[11];\n\t\t\tarray[offset + 12] = te[12];\n\t\t\tarray[offset + 13] = te[13];\n\t\t\tarray[offset + 14] = te[14];\n\t\t\tarray[offset + 15] = te[15];\n\t\t\treturn array;\n\t\t}\n\n\t}\n\n\tMatrix4.prototype.isMatrix4 = true;\n\n\tconst _v1$5 = /*@__PURE__*/new Vector3();\n\n\tconst _m1$2 = /*@__PURE__*/new Matrix4();\n\n\tconst _zero = /*@__PURE__*/new Vector3(0, 0, 0);\n\n\tconst _one = /*@__PURE__*/new Vector3(1, 1, 1);\n\n\tconst _x = /*@__PURE__*/new Vector3();\n\n\tconst _y = /*@__PURE__*/new Vector3();\n\n\tconst _z = /*@__PURE__*/new Vector3();\n\n\tconst _matrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n\tclass Euler {\n\t\tconstructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order;\n\t\t}\n\n\t\tget x() {\n\t\t\treturn this._x;\n\t\t}\n\n\t\tset x(value) {\n\t\t\tthis._x = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget y() {\n\t\t\treturn this._y;\n\t\t}\n\n\t\tset y(value) {\n\t\t\tthis._y = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget z() {\n\t\t\treturn this._z;\n\t\t}\n\n\t\tset z(value) {\n\t\t\tthis._z = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget order() {\n\t\t\treturn this._order;\n\t\t}\n\n\t\tset order(value) {\n\t\t\tthis._order = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tset(x, y, z, order) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._order);\n\t\t}\n\n\t\tcopy(euler) {\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromRotationMatrix(m, order, update) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tconst te = m.elements;\n\t\t\tconst m11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8];\n\t\t\tconst m21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9];\n\t\t\tconst m31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10];\n\t\t\torder = order || this._order;\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._y = Math.asin(clamp(m13, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m13) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = Math.asin(-clamp(m23, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m23) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = Math.asin(clamp(m32, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m32) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._y = Math.asin(-clamp(m31, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m31) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._z = Math.asin(clamp(m21, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m21) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._z = Math.asin(-clamp(m12, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m12) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tthis._order = order;\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromQuaternion(q, order, update) {\n\t\t\t_matrix$1.makeRotationFromQuaternion(q);\n\n\t\t\treturn this.setFromRotationMatrix(_matrix$1, order, update);\n\t\t}\n\n\t\tsetFromVector3(v, order) {\n\t\t\treturn this.set(v.x, v.y, v.z, order || this._order);\n\t\t}\n\n\t\treorder(newOrder) {\n\t\t\t// WARNING: this discards revolution information -bhouston\n\t\t\t_quaternion$3.setFromEuler(this);\n\n\t\t\treturn this.setFromQuaternion(_quaternion$3, newOrder);\n\t\t}\n\n\t\tequals(euler) {\n\t\t\treturn euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n\t\t}\n\n\t\tfromArray(array) {\n\t\t\tthis._x = array[0];\n\t\t\tthis._y = array[1];\n\t\t\tthis._z = array[2];\n\t\t\tif (array[3] !== undefined) this._order = array[3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._order;\n\t\t\treturn array;\n\t\t}\n\n\t\ttoVector3(optionalResult) {\n\t\t\tif (optionalResult) {\n\t\t\t\treturn optionalResult.set(this._x, this._y, this._z);\n\t\t\t} else {\n\t\t\t\treturn new Vector3(this._x, this._y, this._z);\n\t\t\t}\n\t\t}\n\n\t\t_onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChangeCallback() {}\n\n\t}\n\n\tEuler.prototype.isEuler = true;\n\tEuler.DefaultOrder = 'XYZ';\n\tEuler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\n\n\tclass Layers {\n\t\tconstructor() {\n\t\t\tthis.mask = 1 | 0;\n\t\t}\n\n\t\tset(channel) {\n\t\t\tthis.mask = 1 << channel | 0;\n\t\t}\n\n\t\tenable(channel) {\n\t\t\tthis.mask |= 1 << channel | 0;\n\t\t}\n\n\t\tenableAll() {\n\t\t\tthis.mask = 0xffffffff | 0;\n\t\t}\n\n\t\ttoggle(channel) {\n\t\t\tthis.mask ^= 1 << channel | 0;\n\t\t}\n\n\t\tdisable(channel) {\n\t\t\tthis.mask &= ~(1 << channel | 0);\n\t\t}\n\n\t\tdisableAll() {\n\t\t\tthis.mask = 0;\n\t\t}\n\n\t\ttest(layers) {\n\t\t\treturn (this.mask & layers.mask) !== 0;\n\t\t}\n\n\t}\n\n\tlet _object3DId = 0;\n\n\tconst _v1$4 = /*@__PURE__*/new Vector3();\n\n\tconst _q1 = /*@__PURE__*/new Quaternion();\n\n\tconst _m1$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _target = /*@__PURE__*/new Vector3();\n\n\tconst _position$3 = /*@__PURE__*/new Vector3();\n\n\tconst _scale$2 = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$2 = /*@__PURE__*/new Quaternion();\n\n\tconst _xAxis = /*@__PURE__*/new Vector3(1, 0, 0);\n\n\tconst _yAxis = /*@__PURE__*/new Vector3(0, 1, 0);\n\n\tconst _zAxis = /*@__PURE__*/new Vector3(0, 0, 1);\n\n\tconst _addedEvent = {\n\t\ttype: 'added'\n\t};\n\tconst _removedEvent = {\n\t\ttype: 'removed'\n\t};\n\n\tclass Object3D extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: _object3DId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'Object3D';\n\t\t\tthis.parent = null;\n\t\t\tthis.children = [];\n\t\t\tthis.up = Object3D.DefaultUp.clone();\n\t\t\tconst position = new Vector3();\n\t\t\tconst rotation = new Euler();\n\t\t\tconst quaternion = new Quaternion();\n\t\t\tconst scale = new Vector3(1, 1, 1);\n\n\t\t\tfunction onRotationChange() {\n\t\t\t\tquaternion.setFromEuler(rotation, false);\n\t\t\t}\n\n\t\t\tfunction onQuaternionChange() {\n\t\t\t\trotation.setFromQuaternion(quaternion, undefined, false);\n\t\t\t}\n\n\t\t\trotation._onChange(onRotationChange);\n\n\t\t\tquaternion._onChange(onQuaternionChange);\n\n\t\t\tObject.defineProperties(this, {\n\t\t\t\tposition: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: position\n\t\t\t\t},\n\t\t\t\trotation: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: rotation\n\t\t\t\t},\n\t\t\t\tquaternion: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: quaternion\n\t\t\t\t},\n\t\t\t\tscale: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: scale\n\t\t\t\t},\n\t\t\t\tmodelViewMatrix: {\n\t\t\t\t\tvalue: new Matrix4()\n\t\t\t\t},\n\t\t\t\tnormalMatrix: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.matrixWorld = new Matrix4();\n\t\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\tthis.layers = new Layers();\n\t\t\tthis.visible = true;\n\t\t\tthis.castShadow = false;\n\t\t\tthis.receiveShadow = false;\n\t\t\tthis.frustumCulled = true;\n\t\t\tthis.renderOrder = 0;\n\t\t\tthis.animations = [];\n\t\t\tthis.userData = {};\n\t\t}\n\n\t\tonBeforeRender() {}\n\n\t\tonAfterRender() {}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\t\t\tthis.matrix.premultiply(matrix);\n\t\t\tthis.matrix.decompose(this.position, this.quaternion, this.scale);\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\tthis.quaternion.premultiply(q);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRotationFromAxisAngle(axis, angle) {\n\t\t\t// assumes axis is normalized\n\t\t\tthis.quaternion.setFromAxisAngle(axis, angle);\n\t\t}\n\n\t\tsetRotationFromEuler(euler) {\n\t\t\tthis.quaternion.setFromEuler(euler, true);\n\t\t}\n\n\t\tsetRotationFromMatrix(m) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tthis.quaternion.setFromRotationMatrix(m);\n\t\t}\n\n\t\tsetRotationFromQuaternion(q) {\n\t\t\t// assumes q is normalized\n\t\t\tthis.quaternion.copy(q);\n\t\t}\n\n\t\trotateOnAxis(axis, angle) {\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.multiply(_q1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateOnWorldAxis(axis, angle) {\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.premultiply(_q1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateX(angle) {\n\t\t\treturn this.rotateOnAxis(_xAxis, angle);\n\t\t}\n\n\t\trotateY(angle) {\n\t\t\treturn this.rotateOnAxis(_yAxis, angle);\n\t\t}\n\n\t\trotateZ(angle) {\n\t\t\treturn this.rotateOnAxis(_zAxis, angle);\n\t\t}\n\n\t\ttranslateOnAxis(axis, distance) {\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_v1$4.copy(axis).applyQuaternion(this.quaternion);\n\n\t\t\tthis.position.add(_v1$4.multiplyScalar(distance));\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslateX(distance) {\n\t\t\treturn this.translateOnAxis(_xAxis, distance);\n\t\t}\n\n\t\ttranslateY(distance) {\n\t\t\treturn this.translateOnAxis(_yAxis, distance);\n\t\t}\n\n\t\ttranslateZ(distance) {\n\t\t\treturn this.translateOnAxis(_zAxis, distance);\n\t\t}\n\n\t\tlocalToWorld(vector) {\n\t\t\treturn vector.applyMatrix4(this.matrixWorld);\n\t\t}\n\n\t\tworldToLocal(vector) {\n\t\t\treturn vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n\t\t}\n\n\t\tlookAt(x, y, z) {\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\t\t\tif (x.isVector3) {\n\t\t\t\t_target.copy(x);\n\t\t\t} else {\n\t\t\t\t_target.set(x, y, z);\n\t\t\t}\n\n\t\t\tconst parent = this.parent;\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_position$3.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\tif (this.isCamera || this.isLight) {\n\t\t\t\t_m1$1.lookAt(_position$3, _target, this.up);\n\t\t\t} else {\n\t\t\t\t_m1$1.lookAt(_target, _position$3, this.up);\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix(_m1$1);\n\n\t\t\tif (parent) {\n\t\t\t\t_m1$1.extractRotation(parent.matrixWorld);\n\n\t\t\t\t_q1.setFromRotationMatrix(_m1$1);\n\n\t\t\t\tthis.quaternion.premultiply(_q1.invert());\n\t\t\t}\n\t\t}\n\n\t\tadd(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.add(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object === this) {\n\t\t\t\tconsole.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object && object.isObject3D) {\n\t\t\t\tif (object.parent !== null) {\n\t\t\t\t\tobject.parent.remove(object);\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push(object);\n\t\t\t\tobject.dispatchEvent(_addedEvent);\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tremove(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.remove(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst index = this.children.indexOf(object);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice(index, 1);\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tremoveFromParent() {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tparent.remove(this);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclear() {\n\t\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\t\tconst object = this.children[i];\n\t\t\t\tobject.parent = null;\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\tthis.children.length = 0;\n\t\t\treturn this;\n\t\t}\n\n\t\tattach(object) {\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_m1$1.copy(this.matrixWorld).invert();\n\n\t\t\tif (object.parent !== null) {\n\t\t\t\tobject.parent.updateWorldMatrix(true, false);\n\n\t\t\t\t_m1$1.multiply(object.parent.matrixWorld);\n\t\t\t}\n\n\t\t\tobject.applyMatrix4(_m1$1);\n\t\t\tthis.add(object);\n\t\t\tobject.updateWorldMatrix(false, true);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetObjectById(id) {\n\t\t\treturn this.getObjectByProperty('id', id);\n\t\t}\n\n\t\tgetObjectByName(name) {\n\t\t\treturn this.getObjectByProperty('name', name);\n\t\t}\n\n\t\tgetObjectByProperty(name, value) {\n\t\t\tif (this[name] === value) return this;\n\n\t\t\tfor (let i = 0, l = this.children.length; i < l; i++) {\n\t\t\t\tconst child = this.children[i];\n\t\t\t\tconst object = child.getObjectByProperty(name, value);\n\n\t\t\t\tif (object !== undefined) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tgetWorldPosition(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldPosition() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\treturn target.setFromMatrixPosition(this.matrixWorld);\n\t\t}\n\n\t\tgetWorldQuaternion(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldQuaternion() target is now required');\n\t\t\t\ttarget = new Quaternion();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position$3, target, _scale$2);\n\t\t\treturn target;\n\t\t}\n\n\t\tgetWorldScale(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldScale() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position$3, _quaternion$2, target);\n\t\t\treturn target;\n\t\t}\n\n\t\tgetWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tconst e = this.matrixWorld.elements;\n\t\t\treturn target.set(e[8], e[9], e[10]).normalize();\n\t\t}\n\n\t\traycast() {}\n\n\t\ttraverse(callback) {\n\t\t\tcallback(this);\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverse(callback);\n\t\t\t}\n\t\t}\n\n\t\ttraverseVisible(callback) {\n\t\t\tif (this.visible === false) return;\n\t\t\tcallback(this);\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverseVisible(callback);\n\t\t\t}\n\t\t}\n\n\t\ttraverseAncestors(callback) {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tcallback(parent);\n\t\t\t\tparent.traverseAncestors(callback);\n\t\t\t}\n\t\t}\n\n\t\tupdateMatrix() {\n\t\t\tthis.matrix.compose(this.position, this.quaternion, this.scale);\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.matrixWorldNeedsUpdate || force) {\n\t\t\t\tif (this.parent === null) {\n\t\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\t\tforce = true;\n\t\t\t} // update children\n\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].updateMatrixWorld(force);\n\t\t\t}\n\t\t}\n\n\t\tupdateWorldMatrix(updateParents, updateChildren) {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (updateParents === true && parent !== null) {\n\t\t\t\tparent.updateWorldMatrix(true, false);\n\t\t\t}\n\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.parent === null) {\n\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t} else {\n\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t} // update children\n\n\n\t\t\tif (updateChildren === true) {\n\t\t\t\tconst children = this.children;\n\n\t\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateWorldMatrix(false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tconst isRootObject = meta === undefined || typeof meta === 'string';\n\t\t\tconst output = {}; // meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\n\t\t\tif (isRootObject) {\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {},\n\t\t\t\t\tskeletons: {},\n\t\t\t\t\tanimations: {}\n\t\t\t\t};\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\t\t\t} // standard Object3D serialization\n\n\n\t\t\tconst object = {};\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\t\t\tif (this.name !== '') object.name = this.name;\n\t\t\tif (this.castShadow === true) object.castShadow = true;\n\t\t\tif (this.receiveShadow === true) object.receiveShadow = true;\n\t\t\tif (this.visible === false) object.visible = false;\n\t\t\tif (this.frustumCulled === false) object.frustumCulled = false;\n\t\t\tif (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\t\t\tif (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n\t\t\tif (this.isInstancedMesh) {\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\t\tif (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();\n\t\t\t} //\n\n\n\t\t\tfunction serialize(library, element) {\n\t\t\t\tif (library[element.uuid] === undefined) {\n\t\t\t\t\tlibrary[element.uuid] = element.toJSON(meta);\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\t\t\t}\n\n\t\t\tif (this.isMesh || this.isLine || this.isPoints) {\n\t\t\t\tobject.geometry = serialize(meta.geometries, this.geometry);\n\t\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\t\tif (parameters !== undefined && parameters.shapes !== undefined) {\n\t\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\t\tif (Array.isArray(shapes)) {\n\t\t\t\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\t\t\t\tconst shape = shapes[i];\n\t\t\t\t\t\t\tserialize(meta.shapes, shape);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tserialize(meta.shapes, shapes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isSkinnedMesh) {\n\t\t\t\tobject.bindMode = this.bindMode;\n\t\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\t\tif (this.skeleton !== undefined) {\n\t\t\t\t\tserialize(meta.skeletons, this.skeleton);\n\t\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.material !== undefined) {\n\t\t\t\tif (Array.isArray(this.material)) {\n\t\t\t\t\tconst uuids = [];\n\n\t\t\t\t\tfor (let i = 0, l = this.material.length; i < l; i++) {\n\t\t\t\t\t\tuuids.push(serialize(meta.materials, this.material[i]));\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\t\t\t\t} else {\n\t\t\t\t\tobject.material = serialize(meta.materials, this.material);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.children.length > 0) {\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\t\t\tobject.children.push(this.children[i].toJSON(meta).object);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.animations.length > 0) {\n\t\t\t\tobject.animations = [];\n\n\t\t\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\t\t\tconst animation = this.animations[i];\n\t\t\t\t\tobject.animations.push(serialize(meta.animations, animation));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRootObject) {\n\t\t\t\tconst geometries = extractFromCache(meta.geometries);\n\t\t\t\tconst materials = extractFromCache(meta.materials);\n\t\t\t\tconst textures = extractFromCache(meta.textures);\n\t\t\t\tconst images = extractFromCache(meta.images);\n\t\t\t\tconst shapes = extractFromCache(meta.shapes);\n\t\t\t\tconst skeletons = extractFromCache(meta.skeletons);\n\t\t\t\tconst animations = extractFromCache(meta.animations);\n\t\t\t\tif (geometries.length > 0) output.geometries = geometries;\n\t\t\t\tif (materials.length > 0) output.materials = materials;\n\t\t\t\tif (textures.length > 0) output.textures = textures;\n\t\t\t\tif (images.length > 0) output.images = images;\n\t\t\t\tif (shapes.length > 0) output.shapes = shapes;\n\t\t\t\tif (skeletons.length > 0) output.skeletons = skeletons;\n\t\t\t\tif (animations.length > 0) output.animations = animations;\n\t\t\t}\n\n\t\t\toutput.object = object;\n\t\t\treturn output; // extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (const key in cache) {\n\t\t\t\t\tconst data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\n\t\tclone(recursive) {\n\t\t\treturn new this.constructor().copy(this, recursive);\n\t\t}\n\n\t\tcopy(source, recursive = true) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.up.copy(source.up);\n\t\t\tthis.position.copy(source.position);\n\t\t\tthis.rotation.order = source.rotation.order;\n\t\t\tthis.quaternion.copy(source.quaternion);\n\t\t\tthis.scale.copy(source.scale);\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.matrixWorld.copy(source.matrixWorld);\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\n\t\t\tif (recursive === true) {\n\t\t\t\tfor (let i = 0; i < source.children.length; i++) {\n\t\t\t\t\tconst child = source.children[i];\n\t\t\t\t\tthis.add(child.clone());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3(0, 1, 0);\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\tObject3D.prototype.isObject3D = true;\n\n\tconst _vector1 = /*@__PURE__*/new Vector3();\n\n\tconst _vector2$1 = /*@__PURE__*/new Vector3();\n\n\tconst _normalMatrix = /*@__PURE__*/new Matrix3();\n\n\tclass Plane {\n\t\tconstructor(normal = new Vector3(1, 0, 0), constant = 0) {\n\t\t\t// normal is assumed to be normalized\n\t\t\tthis.normal = normal;\n\t\t\tthis.constant = constant;\n\t\t}\n\n\t\tset(normal, constant) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = constant;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponents(x, y, z, w) {\n\t\t\tthis.normal.set(x, y, z);\n\t\t\tthis.constant = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromNormalAndCoplanarPoint(normal, point) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = -point.dot(this.normal);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCoplanarPoints(a, b, c) {\n\t\t\tconst normal = _vector1.subVectors(c, b).cross(_vector2$1.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\n\t\t\tthis.setFromNormalAndCoplanarPoint(normal, a);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(plane) {\n\t\t\tthis.normal.copy(plane.normal);\n\t\t\tthis.constant = plane.constant;\n\t\t\treturn this;\n\t\t}\n\n\t\tnormalize() {\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar(inverseNormalLength);\n\t\t\tthis.constant *= inverseNormalLength;\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.constant *= -1;\n\t\t\tthis.normal.negate();\n\t\t\treturn this;\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn this.normal.dot(point) + this.constant;\n\t\t}\n\n\t\tdistanceToSphere(sphere) {\n\t\t\treturn this.distanceToPoint(sphere.center) - sphere.radius;\n\t\t}\n\n\t\tprojectPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .projectPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n\t\t}\n\n\t\tintersectLine(line, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .intersectLine() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tconst direction = line.delta(_vector1);\n\t\t\tconst denominator = this.normal.dot(direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (this.distanceToPoint(line.start) === 0) {\n\t\t\t\t\treturn target.copy(line.start);\n\t\t\t\t} // Unsure if this is the correct method to handle this case.\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n\t\t\tif (t < 0 || t > 1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn target.copy(direction).multiplyScalar(t).add(line.start);\n\t\t}\n\n\t\tintersectsLine(line) {\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\t\tconst startSign = this.distanceToPoint(line.start);\n\t\t\tconst endSign = this.distanceToPoint(line.end);\n\t\t\treturn startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsPlane(this);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\treturn sphere.intersectsPlane(this);\n\t\t}\n\n\t\tcoplanarPoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .coplanarPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.constant);\n\t\t}\n\n\t\tapplyMatrix4(matrix, optionalNormalMatrix) {\n\t\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n\n\t\t\tconst referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n\t\t\tconst normal = this.normal.applyMatrix3(normalMatrix).normalize();\n\t\t\tthis.constant = -referencePoint.dot(normal);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.constant -= offset.dot(this.normal);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(plane) {\n\t\t\treturn plane.normal.equals(this.normal) && plane.constant === this.constant;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tPlane.prototype.isPlane = true;\n\n\tconst _v0$1 = /*@__PURE__*/new Vector3();\n\n\tconst _v1$3 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v3$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vab = /*@__PURE__*/new Vector3();\n\n\tconst _vac = /*@__PURE__*/new Vector3();\n\n\tconst _vbc = /*@__PURE__*/new Vector3();\n\n\tconst _vap = /*@__PURE__*/new Vector3();\n\n\tconst _vbp = /*@__PURE__*/new Vector3();\n\n\tconst _vcp = /*@__PURE__*/new Vector3();\n\n\tclass Triangle {\n\t\tconstructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t}\n\n\t\tstatic getNormal(a, b, c, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getNormal() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(c, b);\n\n\t\t\t_v0$1.subVectors(a, b);\n\n\t\t\ttarget.cross(_v0$1);\n\t\t\tconst targetLengthSq = target.lengthSq();\n\n\t\t\tif (targetLengthSq > 0) {\n\t\t\t\treturn target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n\t\t\t}\n\n\t\t\treturn target.set(0, 0, 0);\n\t\t} // static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n\n\t\tstatic getBarycoord(point, a, b, c, target) {\n\t\t\t_v0$1.subVectors(c, a);\n\n\t\t\t_v1$3.subVectors(b, a);\n\n\t\t\t_v2$2.subVectors(point, a);\n\n\t\t\tconst dot00 = _v0$1.dot(_v0$1);\n\n\t\t\tconst dot01 = _v0$1.dot(_v1$3);\n\n\t\t\tconst dot02 = _v0$1.dot(_v2$2);\n\n\t\t\tconst dot11 = _v1$3.dot(_v1$3);\n\n\t\t\tconst dot12 = _v1$3.dot(_v2$2);\n\n\t\t\tconst denom = dot00 * dot11 - dot01 * dot01;\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getBarycoord() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t} // collinear or singular triangle\n\n\n\t\t\tif (denom === 0) {\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set(-2, -1, -1);\n\t\t\t}\n\n\t\t\tconst invDenom = 1 / denom;\n\t\t\tconst u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\t\t\tconst v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n\t\t\treturn target.set(1 - u - v, v, u);\n\t\t}\n\n\t\tstatic containsPoint(point, a, b, c) {\n\t\t\tthis.getBarycoord(point, a, b, c, _v3$1);\n\t\t\treturn _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;\n\t\t}\n\n\t\tstatic getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n\t\t\tthis.getBarycoord(point, p1, p2, p3, _v3$1);\n\t\t\ttarget.set(0, 0);\n\t\t\ttarget.addScaledVector(uv1, _v3$1.x);\n\t\t\ttarget.addScaledVector(uv2, _v3$1.y);\n\t\t\ttarget.addScaledVector(uv3, _v3$1.z);\n\t\t\treturn target;\n\t\t}\n\n\t\tstatic isFrontFacing(a, b, c, direction) {\n\t\t\t_v0$1.subVectors(c, b);\n\n\t\t\t_v1$3.subVectors(a, b); // strictly front facing\n\n\n\t\t\treturn _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n\t\t}\n\n\t\tset(a, b, c) {\n\t\t\tthis.a.copy(a);\n\t\t\tthis.b.copy(b);\n\t\t\tthis.c.copy(c);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPointsAndIndices(points, i0, i1, i2) {\n\t\t\tthis.a.copy(points[i0]);\n\t\t\tthis.b.copy(points[i1]);\n\t\t\tthis.c.copy(points[i2]);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(triangle) {\n\t\t\tthis.a.copy(triangle.a);\n\t\t\tthis.b.copy(triangle.b);\n\t\t\tthis.c.copy(triangle.c);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetArea() {\n\t\t\t_v0$1.subVectors(this.c, this.b);\n\n\t\t\t_v1$3.subVectors(this.a, this.b);\n\n\t\t\treturn _v0$1.cross(_v1$3).length() * 0.5;\n\t\t}\n\n\t\tgetMidpoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getMidpoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n\t\t}\n\n\t\tgetNormal(target) {\n\t\t\treturn Triangle.getNormal(this.a, this.b, this.c, target);\n\t\t}\n\n\t\tgetPlane(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getPlane() target is now required');\n\t\t\t\ttarget = new Plane();\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints(this.a, this.b, this.c);\n\t\t}\n\n\t\tgetBarycoord(point, target) {\n\t\t\treturn Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n\t\t}\n\n\t\tgetUV(point, uv1, uv2, uv3, target) {\n\t\t\treturn Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn Triangle.containsPoint(point, this.a, this.b, this.c);\n\t\t}\n\n\t\tisFrontFacing(direction) {\n\t\t\treturn Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsTriangle(this);\n\t\t}\n\n\t\tclosestPointToPoint(p, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tconst a = this.a,\n\t\t\t\t\t\tb = this.b,\n\t\t\t\t\t\tc = this.c;\n\t\t\tlet v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors(b, a);\n\n\t\t\t_vac.subVectors(c, a);\n\n\t\t\t_vap.subVectors(p, a);\n\n\t\t\tconst d1 = _vab.dot(_vap);\n\n\t\t\tconst d2 = _vac.dot(_vap);\n\n\t\t\tif (d1 <= 0 && d2 <= 0) {\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy(a);\n\t\t\t}\n\n\t\t\t_vbp.subVectors(p, b);\n\n\t\t\tconst d3 = _vab.dot(_vbp);\n\n\t\t\tconst d4 = _vac.dot(_vbp);\n\n\t\t\tif (d3 >= 0 && d4 <= d3) {\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy(b);\n\t\t\t}\n\n\t\t\tconst vc = d1 * d4 - d3 * d2;\n\n\t\t\tif (vc <= 0 && d1 >= 0 && d3 <= 0) {\n\t\t\t\tv = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vab, v);\n\t\t\t}\n\n\t\t\t_vcp.subVectors(p, c);\n\n\t\t\tconst d5 = _vab.dot(_vcp);\n\n\t\t\tconst d6 = _vac.dot(_vcp);\n\n\t\t\tif (d6 >= 0 && d5 <= d6) {\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy(c);\n\t\t\t}\n\n\t\t\tconst vb = d5 * d2 - d1 * d6;\n\n\t\t\tif (vb <= 0 && d2 >= 0 && d6 <= 0) {\n\t\t\t\tw = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vac, w);\n\t\t\t}\n\n\t\t\tconst va = d3 * d6 - d5 * d4;\n\n\t\t\tif (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n\t\t\t\t_vbc.subVectors(c, b);\n\n\t\t\t\tw = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n\t\t\t\treturn target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n\t\t\t} // face region\n\n\n\t\t\tconst denom = 1 / (va + vb + vc); // u = va * denom\n\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\t\t\treturn target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n\t\t}\n\n\t\tequals(triangle) {\n\t\t\treturn triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n\t\t}\n\n\t}\n\n\tlet materialId = 0;\n\n\tclass Material extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: materialId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'Material';\n\t\t\tthis.fog = true;\n\t\t\tthis.blending = NormalBlending;\n\t\t\tthis.side = FrontSide;\n\t\t\tthis.vertexColors = false;\n\t\t\tthis.opacity = 1;\n\t\t\tthis.transparent = false;\n\t\t\tthis.blendSrc = SrcAlphaFactor;\n\t\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\t\tthis.blendEquation = AddEquation;\n\t\t\tthis.blendSrcAlpha = null;\n\t\t\tthis.blendDstAlpha = null;\n\t\t\tthis.blendEquationAlpha = null;\n\t\t\tthis.depthFunc = LessEqualDepth;\n\t\t\tthis.depthTest = true;\n\t\t\tthis.depthWrite = true;\n\t\t\tthis.stencilWriteMask = 0xff;\n\t\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\t\tthis.stencilRef = 0;\n\t\t\tthis.stencilFuncMask = 0xff;\n\t\t\tthis.stencilFail = KeepStencilOp;\n\t\t\tthis.stencilZFail = KeepStencilOp;\n\t\t\tthis.stencilZPass = KeepStencilOp;\n\t\t\tthis.stencilWrite = false;\n\t\t\tthis.clippingPlanes = null;\n\t\t\tthis.clipIntersection = false;\n\t\t\tthis.clipShadows = false;\n\t\t\tthis.shadowSide = null;\n\t\t\tthis.colorWrite = true;\n\t\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\t\tthis.polygonOffset = false;\n\t\t\tthis.polygonOffsetFactor = 0;\n\t\t\tthis.polygonOffsetUnits = 0;\n\t\t\tthis.dithering = false;\n\t\t\tthis.alphaTest = 0;\n\t\t\tthis.alphaToCoverage = false;\n\t\t\tthis.premultipliedAlpha = false;\n\t\t\tthis.visible = true;\n\t\t\tthis.toneMapped = true;\n\t\t\tthis.userData = {};\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tonBuild()\n\t\t/* shaderobject, renderer */\n\t\t{}\n\n\t\tonBeforeCompile()\n\t\t/* shaderobject, renderer */\n\t\t{}\n\n\t\tcustomProgramCacheKey() {\n\t\t\treturn this.onBeforeCompile.toString();\n\t\t}\n\n\t\tsetValues(values) {\n\t\t\tif (values === undefined) return;\n\n\t\t\tfor (const key in values) {\n\t\t\t\tconst newValue = values[key];\n\n\t\t\t\tif (newValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Material: \\'' + key + '\\' parameter is undefined.');\n\t\t\t\t\tcontinue;\n\t\t\t\t} // for backward compatability if shading is set in the constructor\n\n\n\t\t\t\tif (key === 'shading') {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\t\tthis.flatShading = newValue === FlatShading ? true : false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst currentValue = this[key];\n\n\t\t\t\tif (currentValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue && currentValue.isColor) {\n\t\t\t\t\tcurrentValue.set(newValue);\n\t\t\t\t} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n\t\t\t\t\tcurrentValue.copy(newValue);\n\t\t\t\t} else {\n\t\t\t\t\tthis[key] = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst isRoot = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (isRoot) {\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard Material serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.color && this.color.isColor) data.color = this.color.getHex();\n\t\t\tif (this.roughness !== undefined) data.roughness = this.roughness;\n\t\t\tif (this.metalness !== undefined) data.metalness = this.metalness;\n\t\t\tif (this.sheen && this.sheen.isColor) data.sheen = this.sheen.getHex();\n\t\t\tif (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n\t\t\tif (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n\t\t\tif (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n\t\t\tif (this.shininess !== undefined) data.shininess = this.shininess;\n\t\t\tif (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n\t\t\tif (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\t\tif (this.clearcoatMap && this.clearcoatMap.isTexture) {\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n\t\t\tif (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n\t\t\tif (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n\n\t\t\tif (this.lightMap && this.lightMap.isTexture) {\n\t\t\t\tdata.lightMap = this.lightMap.toJSON(meta).uuid;\n\t\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.aoMap && this.aoMap.isTexture) {\n\t\t\t\tdata.aoMap = this.aoMap.toJSON(meta).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.bumpMap && this.bumpMap.isTexture) {\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON(meta).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\t\t\t}\n\n\t\t\tif (this.normalMap && this.normalMap.isTexture) {\n\t\t\t\tdata.normalMap = this.normalMap.toJSON(meta).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.displacementMap && this.displacementMap.isTexture) {\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON(meta).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\t\t\t}\n\n\t\t\tif (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n\t\t\tif (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n\t\t\tif (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n\t\t\tif (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n\t\t\tif (this.envMap && this.envMap.isTexture) {\n\t\t\t\tdata.envMap = this.envMap.toJSON(meta).uuid;\n\t\t\t\tif (this.combine !== undefined) data.combine = this.combine;\n\t\t\t}\n\n\t\t\tif (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n\t\t\tif (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;\n\t\t\tif (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;\n\n\t\t\tif (this.gradientMap && this.gradientMap.isTexture) {\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.transmission !== undefined) data.transmission = this.transmission;\n\t\t\tif (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;\n\t\t\tif (this.thickness !== undefined) data.thickness = this.thickness;\n\t\t\tif (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;\n\t\t\tif (this.attenuationDistance !== undefined) data.attenuationDistance = this.attenuationDistance;\n\t\t\tif (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();\n\t\t\tif (this.size !== undefined) data.size = this.size;\n\t\t\tif (this.shadowSide !== null) data.shadowSide = this.shadowSide;\n\t\t\tif (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n\t\t\tif (this.blending !== NormalBlending) data.blending = this.blending;\n\t\t\tif (this.side !== FrontSide) data.side = this.side;\n\t\t\tif (this.vertexColors) data.vertexColors = true;\n\t\t\tif (this.opacity < 1) data.opacity = this.opacity;\n\t\t\tif (this.transparent === true) data.transparent = this.transparent;\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\t\t\tdata.colorWrite = this.colorWrite;\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n\t\t\tif (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n\t\t\tif (this.polygonOffset === true) data.polygonOffset = true;\n\t\t\tif (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\t\tif (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\t\t\tif (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n\t\t\tif (this.dashSize !== undefined) data.dashSize = this.dashSize;\n\t\t\tif (this.gapSize !== undefined) data.gapSize = this.gapSize;\n\t\t\tif (this.scale !== undefined) data.scale = this.scale;\n\t\t\tif (this.dithering === true) data.dithering = true;\n\t\t\tif (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n\t\t\tif (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;\n\t\t\tif (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif (this.wireframe === true) data.wireframe = this.wireframe;\n\t\t\tif (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n\t\t\tif (this.morphTargets === true) data.morphTargets = true;\n\t\t\tif (this.morphNormals === true) data.morphNormals = true;\n\t\t\tif (this.flatShading === true) data.flatShading = this.flatShading;\n\t\t\tif (this.visible === false) data.visible = false;\n\t\t\tif (this.toneMapped === false) data.toneMapped = false;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (const key in cache) {\n\t\t\t\t\tconst data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\n\t\t\tif (isRoot) {\n\t\t\t\tconst textures = extractFromCache(meta.textures);\n\t\t\t\tconst images = extractFromCache(meta.images);\n\t\t\t\tif (textures.length > 0) data.textures = textures;\n\t\t\t\tif (images.length > 0) data.images = images;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.vertexColors = source.vertexColors;\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\t\t\tconst srcPlanes = source.clippingPlanes;\n\t\t\tlet dstPlanes = null;\n\n\t\t\tif (srcPlanes !== null) {\n\t\t\t\tconst n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array(n);\n\n\t\t\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\t\t\tdstPlanes[i] = srcPlanes[i].clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.shadowSide = source.shadowSide;\n\t\t\tthis.colorWrite = source.colorWrite;\n\t\t\tthis.precision = source.precision;\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\t\tthis.dithering = source.dithering;\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.toneMapped = source.toneMapped;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t}\n\n\tMaterial.prototype.isMaterial = true;\n\n\tconst _colorKeywords = {\n\t\t'aliceblue': 0xF0F8FF,\n\t\t'antiquewhite': 0xFAEBD7,\n\t\t'aqua': 0x00FFFF,\n\t\t'aquamarine': 0x7FFFD4,\n\t\t'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC,\n\t\t'bisque': 0xFFE4C4,\n\t\t'black': 0x000000,\n\t\t'blanchedalmond': 0xFFEBCD,\n\t\t'blue': 0x0000FF,\n\t\t'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A,\n\t\t'burlywood': 0xDEB887,\n\t\t'cadetblue': 0x5F9EA0,\n\t\t'chartreuse': 0x7FFF00,\n\t\t'chocolate': 0xD2691E,\n\t\t'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED,\n\t\t'cornsilk': 0xFFF8DC,\n\t\t'crimson': 0xDC143C,\n\t\t'cyan': 0x00FFFF,\n\t\t'darkblue': 0x00008B,\n\t\t'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B,\n\t\t'darkgray': 0xA9A9A9,\n\t\t'darkgreen': 0x006400,\n\t\t'darkgrey': 0xA9A9A9,\n\t\t'darkkhaki': 0xBDB76B,\n\t\t'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F,\n\t\t'darkorange': 0xFF8C00,\n\t\t'darkorchid': 0x9932CC,\n\t\t'darkred': 0x8B0000,\n\t\t'darksalmon': 0xE9967A,\n\t\t'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B,\n\t\t'darkslategray': 0x2F4F4F,\n\t\t'darkslategrey': 0x2F4F4F,\n\t\t'darkturquoise': 0x00CED1,\n\t\t'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493,\n\t\t'deepskyblue': 0x00BFFF,\n\t\t'dimgray': 0x696969,\n\t\t'dimgrey': 0x696969,\n\t\t'dodgerblue': 0x1E90FF,\n\t\t'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0,\n\t\t'forestgreen': 0x228B22,\n\t\t'fuchsia': 0xFF00FF,\n\t\t'gainsboro': 0xDCDCDC,\n\t\t'ghostwhite': 0xF8F8FF,\n\t\t'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520,\n\t\t'gray': 0x808080,\n\t\t'green': 0x008000,\n\t\t'greenyellow': 0xADFF2F,\n\t\t'grey': 0x808080,\n\t\t'honeydew': 0xF0FFF0,\n\t\t'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C,\n\t\t'indigo': 0x4B0082,\n\t\t'ivory': 0xFFFFF0,\n\t\t'khaki': 0xF0E68C,\n\t\t'lavender': 0xE6E6FA,\n\t\t'lavenderblush': 0xFFF0F5,\n\t\t'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD,\n\t\t'lightblue': 0xADD8E6,\n\t\t'lightcoral': 0xF08080,\n\t\t'lightcyan': 0xE0FFFF,\n\t\t'lightgoldenrodyellow': 0xFAFAD2,\n\t\t'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90,\n\t\t'lightgrey': 0xD3D3D3,\n\t\t'lightpink': 0xFFB6C1,\n\t\t'lightsalmon': 0xFFA07A,\n\t\t'lightseagreen': 0x20B2AA,\n\t\t'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899,\n\t\t'lightslategrey': 0x778899,\n\t\t'lightsteelblue': 0xB0C4DE,\n\t\t'lightyellow': 0xFFFFE0,\n\t\t'lime': 0x00FF00,\n\t\t'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6,\n\t\t'magenta': 0xFF00FF,\n\t\t'maroon': 0x800000,\n\t\t'mediumaquamarine': 0x66CDAA,\n\t\t'mediumblue': 0x0000CD,\n\t\t'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB,\n\t\t'mediumseagreen': 0x3CB371,\n\t\t'mediumslateblue': 0x7B68EE,\n\t\t'mediumspringgreen': 0x00FA9A,\n\t\t'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585,\n\t\t'midnightblue': 0x191970,\n\t\t'mintcream': 0xF5FFFA,\n\t\t'mistyrose': 0xFFE4E1,\n\t\t'moccasin': 0xFFE4B5,\n\t\t'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080,\n\t\t'oldlace': 0xFDF5E6,\n\t\t'olive': 0x808000,\n\t\t'olivedrab': 0x6B8E23,\n\t\t'orange': 0xFFA500,\n\t\t'orangered': 0xFF4500,\n\t\t'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA,\n\t\t'palegreen': 0x98FB98,\n\t\t'paleturquoise': 0xAFEEEE,\n\t\t'palevioletred': 0xDB7093,\n\t\t'papayawhip': 0xFFEFD5,\n\t\t'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F,\n\t\t'pink': 0xFFC0CB,\n\t\t'plum': 0xDDA0DD,\n\t\t'powderblue': 0xB0E0E6,\n\t\t'purple': 0x800080,\n\t\t'rebeccapurple': 0x663399,\n\t\t'red': 0xFF0000,\n\t\t'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1,\n\t\t'saddlebrown': 0x8B4513,\n\t\t'salmon': 0xFA8072,\n\t\t'sandybrown': 0xF4A460,\n\t\t'seagreen': 0x2E8B57,\n\t\t'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D,\n\t\t'silver': 0xC0C0C0,\n\t\t'skyblue': 0x87CEEB,\n\t\t'slateblue': 0x6A5ACD,\n\t\t'slategray': 0x708090,\n\t\t'slategrey': 0x708090,\n\t\t'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F,\n\t\t'steelblue': 0x4682B4,\n\t\t'tan': 0xD2B48C,\n\t\t'teal': 0x008080,\n\t\t'thistle': 0xD8BFD8,\n\t\t'tomato': 0xFF6347,\n\t\t'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE,\n\t\t'wheat': 0xF5DEB3,\n\t\t'white': 0xFFFFFF,\n\t\t'whitesmoke': 0xF5F5F5,\n\t\t'yellow': 0xFFFF00,\n\t\t'yellowgreen': 0x9ACD32\n\t};\n\tconst _hslA = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\tconst _hslB = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\n\tfunction hue2rgb(p, q, t) {\n\t\tif (t < 0) t += 1;\n\t\tif (t > 1) t -= 1;\n\t\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\t\tif (t < 1 / 2) return q;\n\t\tif (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n\t\treturn p;\n\t}\n\n\tfunction SRGBToLinear(c) {\n\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t}\n\n\tfunction LinearToSRGB(c) {\n\t\treturn c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n\t}\n\n\tclass Color {\n\t\tconstructor(r, g, b) {\n\t\t\tif (g === undefined && b === undefined) {\n\t\t\t\t// r is THREE.Color, hex or string\n\t\t\t\treturn this.set(r);\n\t\t\t}\n\n\t\t\treturn this.setRGB(r, g, b);\n\t\t}\n\n\t\tset(value) {\n\t\t\tif (value && value.isColor) {\n\t\t\t\tthis.copy(value);\n\t\t\t} else if (typeof value === 'number') {\n\t\t\t\tthis.setHex(value);\n\t\t\t} else if (typeof value === 'string') {\n\t\t\t\tthis.setStyle(value);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetHex(hex) {\n\t\t\thex = Math.floor(hex);\n\t\t\tthis.r = (hex >> 16 & 255) / 255;\n\t\t\tthis.g = (hex >> 8 & 255) / 255;\n\t\t\tthis.b = (hex & 255) / 255;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRGB(r, g, b) {\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetHSL(h, s, l) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = euclideanModulo(h, 1);\n\t\t\ts = clamp(s, 0, 1);\n\t\t\tl = clamp(l, 0, 1);\n\n\t\t\tif (s === 0) {\n\t\t\t\tthis.r = this.g = this.b = l;\n\t\t\t} else {\n\t\t\t\tconst p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\t\tconst q = 2 * l - p;\n\t\t\t\tthis.r = hue2rgb(q, p, h + 1 / 3);\n\t\t\t\tthis.g = hue2rgb(q, p, h);\n\t\t\t\tthis.b = hue2rgb(q, p, h - 1 / 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetStyle(style) {\n\t\t\tfunction handleAlpha(string) {\n\t\t\t\tif (string === undefined) return;\n\n\t\t\t\tif (parseFloat(string) < 1) {\n\t\t\t\t\tconsole.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet m;\n\n\t\t\tif (m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(style)) {\n\t\t\t\t// rgb / hsl\n\t\t\t\tlet color;\n\t\t\t\tconst name = m[1];\n\t\t\t\tconst components = m[2];\n\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(255, parseInt(color[1], 10)) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min(255, parseInt(color[2], 10)) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min(255, parseInt(color[3], 10)) / 255;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(100, parseInt(color[1], 10)) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min(100, parseInt(color[2], 10)) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min(100, parseInt(color[3], 10)) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\t\t\t\t\t\tif (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tconst h = parseFloat(color[1]) / 360;\n\t\t\t\t\t\t\tconst s = parseInt(color[2], 10) / 100;\n\t\t\t\t\t\t\tconst l = parseInt(color[3], 10) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this.setHSL(h, s, l);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n\t\t\t\t// hex color\n\t\t\t\tconst hex = m[1];\n\t\t\t\tconst size = hex.length;\n\n\t\t\t\tif (size === 3) {\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t} else if (size === 6) {\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style && style.length > 0) {\n\t\t\t\treturn this.setColorName(style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetColorName(style) {\n\t\t\t// color keywords\n\t\t\tconst hex = _colorKeywords[style.toLowerCase()];\n\n\t\t\tif (hex !== undefined) {\n\t\t\t\t// red\n\t\t\t\tthis.setHex(hex);\n\t\t\t} else {\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn('THREE.Color: Unknown color ' + style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.r, this.g, this.b);\n\t\t}\n\n\t\tcopy(color) {\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyGammaToLinear(color, gammaFactor = 2.0) {\n\t\t\tthis.r = Math.pow(color.r, gammaFactor);\n\t\t\tthis.g = Math.pow(color.g, gammaFactor);\n\t\t\tthis.b = Math.pow(color.b, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyLinearToGamma(color, gammaFactor = 2.0) {\n\t\t\tconst safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n\t\t\tthis.r = Math.pow(color.r, safeInverse);\n\t\t\tthis.g = Math.pow(color.g, safeInverse);\n\t\t\tthis.b = Math.pow(color.b, safeInverse);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertGammaToLinear(gammaFactor) {\n\t\t\tthis.copyGammaToLinear(this, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertLinearToGamma(gammaFactor) {\n\t\t\tthis.copyLinearToGamma(this, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopySRGBToLinear(color) {\n\t\t\tthis.r = SRGBToLinear(color.r);\n\t\t\tthis.g = SRGBToLinear(color.g);\n\t\t\tthis.b = SRGBToLinear(color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyLinearToSRGB(color) {\n\t\t\tthis.r = LinearToSRGB(color.r);\n\t\t\tthis.g = LinearToSRGB(color.g);\n\t\t\tthis.b = LinearToSRGB(color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertSRGBToLinear() {\n\t\t\tthis.copySRGBToLinear(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertLinearToSRGB() {\n\t\t\tthis.copyLinearToSRGB(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetHex() {\n\t\t\treturn this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n\t\t}\n\n\t\tgetHexString() {\n\t\t\treturn ('000000' + this.getHex().toString(16)).slice(-6);\n\t\t}\n\n\t\tgetHSL(target) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Color: .getHSL() target is now required');\n\t\t\t\ttarget = {\n\t\t\t\t\th: 0,\n\t\t\t\t\ts: 0,\n\t\t\t\t\tl: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst r = this.r,\n\t\t\t\t\t\tg = this.g,\n\t\t\t\t\t\tb = this.b;\n\t\t\tconst max = Math.max(r, g, b);\n\t\t\tconst min = Math.min(r, g, b);\n\t\t\tlet hue, saturation;\n\t\t\tconst lightness = (min + max) / 2.0;\n\n\t\t\tif (min === max) {\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\t\t\t} else {\n\t\t\t\tconst delta = max - min;\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase r:\n\t\t\t\t\t\thue = (g - b) / delta + (g < b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase g:\n\t\t\t\t\t\thue = (b - r) / delta + 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase b:\n\t\t\t\t\t\thue = (r - g) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\t\t\treturn target;\n\t\t}\n\n\t\tgetStyle() {\n\t\t\treturn 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n\t\t}\n\n\t\toffsetHSL(h, s, l) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\t_hslA.h += h;\n\t\t\t_hslA.s += s;\n\t\t\t_hslA.l += l;\n\t\t\tthis.setHSL(_hslA.h, _hslA.s, _hslA.l);\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(color) {\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\taddColors(color1, color2) {\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(color) {\n\t\t\tthis.r = Math.max(0, this.r - color.r);\n\t\t\tthis.g = Math.max(0, this.g - color.g);\n\t\t\tthis.b = Math.max(0, this.b - color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(color) {\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerp(color, alpha) {\n\t\t\tthis.r += (color.r - this.r) * alpha;\n\t\t\tthis.g += (color.g - this.g) * alpha;\n\t\t\tthis.b += (color.b - this.b) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpColors(color1, color2, alpha) {\n\t\t\tthis.r = color1.r + (color2.r - color1.r) * alpha;\n\t\t\tthis.g = color1.g + (color2.g - color1.g) * alpha;\n\t\t\tthis.b = color1.b + (color2.b - color1.b) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpHSL(color, alpha) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\tcolor.getHSL(_hslB);\n\t\t\tconst h = lerp(_hslA.h, _hslB.h, alpha);\n\t\t\tconst s = lerp(_hslA.s, _hslB.s, alpha);\n\t\t\tconst l = lerp(_hslA.l, _hslB.l, alpha);\n\t\t\tthis.setHSL(h, s, l);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(c) {\n\t\t\treturn c.r === this.r && c.g === this.g && c.b === this.b;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.r = array[offset];\n\t\t\tthis.g = array[offset + 1];\n\t\t\tthis.b = array[offset + 2];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.r;\n\t\t\tarray[offset + 1] = this.g;\n\t\t\tarray[offset + 2] = this.b;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index) {\n\t\t\tthis.r = attribute.getX(index);\n\t\t\tthis.g = attribute.getY(index);\n\t\t\tthis.b = attribute.getZ(index);\n\n\t\t\tif (attribute.normalized === true) {\n\t\t\t\t// assuming Uint8Array\n\t\t\t\tthis.r /= 255;\n\t\t\t\tthis.g /= 255;\n\t\t\t\tthis.b /= 255;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn this.getHex();\n\t\t}\n\n\t}\n\n\tColor.NAMES = _colorKeywords;\n\tColor.prototype.isColor = true;\n\tColor.prototype.r = 1;\n\tColor.prototype.g = 1;\n\tColor.prototype.b = 1;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\tdepthTest: <bool>,\n\t *\tdepthWrite: <bool>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tclass MeshBasicMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshBasicMaterial';\n\t\t\tthis.color = new Color(0xffffff); // emissive\n\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tconst _vector$9 = /*@__PURE__*/new Vector3();\n\n\tconst _vector2 = /*@__PURE__*/new Vector2();\n\n\tclass BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tif (Array.isArray(array)) {\n\t\t\t\tthrow new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n\t\t\t}\n\n\t\t\tthis.name = '';\n\t\t\tthis.array = array;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\t\tthis.normalized = normalized === true;\n\t\t\tthis.usage = StaticDrawUsage;\n\t\t\tthis.updateRange = {\n\t\t\t\toffset: 0,\n\t\t\t\tcount: -1\n\t\t\t};\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tonUploadCallback() {}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor (let i = 0, l = this.itemSize; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyArray(array) {\n\t\t\tthis.array.set(array);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyColorsArray(colors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = colors.length; i < l; i++) {\n\t\t\t\tlet color = colors[i];\n\n\t\t\t\tif (color === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n\t\t\t\t\tcolor = new Color();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = color.r;\n\t\t\t\tarray[offset++] = color.g;\n\t\t\t\tarray[offset++] = color.b;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector2sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector2();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector3sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector3();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector4sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector4();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t\tarray[offset++] = vector.w;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tif (this.itemSize === 2) {\n\t\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector2.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector2.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXY(i, _vector2.x, _vector2.y);\n\t\t\t\t}\n\t\t\t} else if (this.itemSize === 3) {\n\t\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector$9.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector$9.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(value, offset = 0) {\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetX(index) {\n\t\t\treturn this.array[index * this.itemSize];\n\t\t}\n\n\t\tsetX(index, x) {\n\t\t\tthis.array[index * this.itemSize] = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetY(index) {\n\t\t\treturn this.array[index * this.itemSize + 1];\n\t\t}\n\n\t\tsetY(index, y) {\n\t\t\tthis.array[index * this.itemSize + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetZ(index) {\n\t\t\treturn this.array[index * this.itemSize + 2];\n\t\t}\n\n\t\tsetZ(index, z) {\n\t\t\tthis.array[index * this.itemSize + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetW(index) {\n\t\t\treturn this.array[index * this.itemSize + 3];\n\t\t}\n\n\t\tsetW(index, w) {\n\t\t\tthis.array[index * this.itemSize + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXY(index, x, y) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZ(index, x, y, z) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZW(index, x, y, z, w) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\tthis.array[index + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tonUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.array, this.itemSize).copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call(this.array),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.usage !== StaticDrawUsage) data.usage = this.usage;\n\t\t\tif (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tBufferAttribute.prototype.isBufferAttribute = true; //\n\n\tclass Int8BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int8Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint8BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint8Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint8ClampedArray(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Int16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Int32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Float16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tFloat16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\n\tclass Float32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Float32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Float64BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Float64Array(array), itemSize, normalized);\n\t\t}\n\n\t} //\n\n\tfunction arrayMax(array) {\n\t\tif (array.length === 0) return -Infinity;\n\t\tlet max = array[0];\n\n\t\tfor (let i = 1, l = array.length; i < l; ++i) {\n\t\t\tif (array[i] > max) max = array[i];\n\t\t}\n\n\t\treturn max;\n\t}\n\n\tconst TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\tUint8ClampedArray: Uint8ClampedArray,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\tfunction getTypedArray(type, buffer) {\n\t\treturn new TYPED_ARRAYS[type](buffer);\n\t}\n\n\tlet _id = 0;\n\n\tconst _m1 = /*@__PURE__*/new Matrix4();\n\n\tconst _obj = /*@__PURE__*/new Object3D();\n\n\tconst _offset = /*@__PURE__*/new Vector3();\n\n\tconst _box$1 = /*@__PURE__*/new Box3();\n\n\tconst _boxMorphTargets = /*@__PURE__*/new Box3();\n\n\tconst _vector$8 = /*@__PURE__*/new Vector3();\n\n\tclass BufferGeometry extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: _id++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'BufferGeometry';\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.morphTargetsRelative = false;\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\t\t\tthis.drawRange = {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: Infinity\n\t\t\t};\n\t\t\tthis.userData = {};\n\t\t}\n\n\t\tgetIndex() {\n\t\t\treturn this.index;\n\t\t}\n\n\t\tsetIndex(index) {\n\t\t\tif (Array.isArray(index)) {\n\t\t\t\tthis.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n\t\t\t} else {\n\t\t\t\tthis.index = index;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetAttribute(name) {\n\t\t\treturn this.attributes[name];\n\t\t}\n\n\t\tsetAttribute(name, attribute) {\n\t\t\tthis.attributes[name] = attribute;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeleteAttribute(name) {\n\t\t\tdelete this.attributes[name];\n\t\t\treturn this;\n\t\t}\n\n\t\thasAttribute(name) {\n\t\t\treturn this.attributes[name] !== undefined;\n\t\t}\n\n\t\taddGroup(start, count, materialIndex = 0) {\n\t\t\tthis.groups.push({\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex\n\t\t\t});\n\t\t}\n\n\t\tclearGroups() {\n\t\t\tthis.groups = [];\n\t\t}\n\n\t\tsetDrawRange(start, count) {\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tconst position = this.attributes.position;\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tposition.needsUpdate = true;\n\t\t\t}\n\n\t\t\tconst normal = this.attributes.normal;\n\n\t\t\tif (normal !== undefined) {\n\t\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\t\t\t\tnormal.applyNormalMatrix(normalMatrix);\n\t\t\t\tnormal.needsUpdate = true;\n\t\t\t}\n\n\t\t\tconst tangent = this.attributes.tangent;\n\n\t\t\tif (tangent !== undefined) {\n\t\t\t\ttangent.transformDirection(matrix);\n\t\t\t\ttangent.needsUpdate = true;\n\t\t\t}\n\n\t\t\tif (this.boundingBox !== null) {\n\t\t\t\tthis.computeBoundingBox();\n\t\t\t}\n\n\t\t\tif (this.boundingSphere !== null) {\n\t\t\t\tthis.computeBoundingSphere();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\t_m1.makeRotationFromQuaternion(q);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateX(angle) {\n\t\t\t// rotate geometry around world x-axis\n\t\t\t_m1.makeRotationX(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateY(angle) {\n\t\t\t// rotate geometry around world y-axis\n\t\t\t_m1.makeRotationY(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateZ(angle) {\n\t\t\t// rotate geometry around world z-axis\n\t\t\t_m1.makeRotationZ(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(x, y, z) {\n\t\t\t// translate geometry\n\t\t\t_m1.makeTranslation(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(x, y, z) {\n\t\t\t// scale geometry\n\t\t\t_m1.makeScale(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\tlookAt(vector) {\n\t\t\t_obj.lookAt(vector);\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4(_obj.matrix);\n\t\t\treturn this;\n\t\t}\n\n\t\tcenter() {\n\t\t\tthis.computeBoundingBox();\n\t\t\tthis.boundingBox.getCenter(_offset).negate();\n\t\t\tthis.translate(_offset.x, _offset.y, _offset.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tconst position = [];\n\n\t\t\tfor (let i = 0, l = points.length; i < l; i++) {\n\t\t\t\tconst point = points[i];\n\t\t\t\tposition.push(point.x, point.y, point.z || 0);\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(position, 3));\n\t\t\treturn this;\n\t\t}\n\n\t\tcomputeBoundingBox() {\n\t\t\tif (this.boundingBox === null) {\n\t\t\t\tthis.boundingBox = new Box3();\n\t\t\t}\n\n\t\t\tconst position = this.attributes.position;\n\t\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tthis.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_box$1.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$8.addVectors(this.boundingBox.min, _box$1.min);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$8);\n\n\t\t\t\t\t\t\t_vector$8.addVectors(this.boundingBox.max, _box$1.max);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$8);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$1.min);\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$1.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.boundingBox.makeEmpty();\n\t\t\t}\n\n\t\t\tif (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t}\n\t\t}\n\n\t\tcomputeBoundingSphere() {\n\t\t\tif (this.boundingSphere === null) {\n\t\t\t\tthis.boundingSphere = new Sphere();\n\t\t\t}\n\n\t\t\tconst position = this.attributes.position;\n\t\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingSphere.set(new Vector3(), Infinity);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position) {\n\t\t\t\t// first, find the center of the bounding sphere\n\t\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t\t_box$1.setFromBufferAttribute(position); // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$8.addVectors(_box$1.min, _boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_vector$8);\n\n\t\t\t\t\t\t\t_vector$8.addVectors(_box$1.max, _boxMorphTargets.max);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_vector$8);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_box$1.expandByPoint(_boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_boxMorphTargets.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_box$1.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\n\t\t\t\tlet maxRadiusSq = 0;\n\n\t\t\t\tfor (let i = 0, il = position.count; i < il; i++) {\n\t\t\t\t\t_vector$8.fromBufferAttribute(position, i);\n\n\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n\t\t\t\t} // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\t\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor (let j = 0, jl = morphAttribute.count; j < jl; j++) {\n\t\t\t\t\t\t\t_vector$8.fromBufferAttribute(morphAttribute, j);\n\n\t\t\t\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute(position, j);\n\n\t\t\t\t\t\t\t\t_vector$8.add(_offset);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n\t\t\t\tif (isNaN(this.boundingSphere.radius)) {\n\t\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcomputeFaceNormals() {// backwards compatibility\n\t\t}\n\n\t\tcomputeTangents() {\n\t\t\tconst index = this.index;\n\t\t\tconst attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html\n\t\t\t// (per vertex tangents)\n\n\t\t\tif (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst indices = index.array;\n\t\t\tconst positions = attributes.position.array;\n\t\t\tconst normals = attributes.normal.array;\n\t\t\tconst uvs = attributes.uv.array;\n\t\t\tconst nVertices = positions.length / 3;\n\n\t\t\tif (attributes.tangent === undefined) {\n\t\t\t\tthis.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));\n\t\t\t}\n\n\t\t\tconst tangents = attributes.tangent.array;\n\t\t\tconst tan1 = [],\n\t\t\t\t\t\ttan2 = [];\n\n\t\t\tfor (let i = 0; i < nVertices; i++) {\n\t\t\t\ttan1[i] = new Vector3();\n\t\t\t\ttan2[i] = new Vector3();\n\t\t\t}\n\n\t\t\tconst vA = new Vector3(),\n\t\t\t\t\t\tvB = new Vector3(),\n\t\t\t\t\t\tvC = new Vector3(),\n\t\t\t\t\t\tuvA = new Vector2(),\n\t\t\t\t\t\tuvB = new Vector2(),\n\t\t\t\t\t\tuvC = new Vector2(),\n\t\t\t\t\t\tsdir = new Vector3(),\n\t\t\t\t\t\ttdir = new Vector3();\n\n\t\t\tfunction handleTriangle(a, b, c) {\n\t\t\t\tvA.fromArray(positions, a * 3);\n\t\t\t\tvB.fromArray(positions, b * 3);\n\t\t\t\tvC.fromArray(positions, c * 3);\n\t\t\t\tuvA.fromArray(uvs, a * 2);\n\t\t\t\tuvB.fromArray(uvs, b * 2);\n\t\t\t\tuvC.fromArray(uvs, c * 2);\n\t\t\t\tvB.sub(vA);\n\t\t\t\tvC.sub(vA);\n\t\t\t\tuvB.sub(uvA);\n\t\t\t\tuvC.sub(uvA);\n\t\t\t\tconst r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\t\tif (!isFinite(r)) return;\n\t\t\t\tsdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n\t\t\t\ttdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n\t\t\t\ttan1[a].add(sdir);\n\t\t\t\ttan1[b].add(sdir);\n\t\t\t\ttan1[c].add(sdir);\n\t\t\t\ttan2[a].add(tdir);\n\t\t\t\ttan2[b].add(tdir);\n\t\t\t\ttan2[c].add(tdir);\n\t\t\t}\n\n\t\t\tlet groups = this.groups;\n\n\t\t\tif (groups.length === 0) {\n\t\t\t\tgroups = [{\n\t\t\t\t\tstart: 0,\n\t\t\t\t\tcount: indices.length\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tfor (let i = 0, il = groups.length; i < il; ++i) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst start = group.start;\n\t\t\t\tconst count = group.count;\n\n\t\t\t\tfor (let j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst tmp = new Vector3(),\n\t\t\t\t\t\ttmp2 = new Vector3();\n\t\t\tconst n = new Vector3(),\n\t\t\t\t\t\tn2 = new Vector3();\n\n\t\t\tfunction handleVertex(v) {\n\t\t\t\tn.fromArray(normals, v * 3);\n\t\t\t\tn2.copy(n);\n\t\t\t\tconst t = tan1[v]; // Gram-Schmidt orthogonalize\n\n\t\t\t\ttmp.copy(t);\n\t\t\t\ttmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness\n\n\t\t\t\ttmp2.crossVectors(n2, t);\n\t\t\t\tconst test = tmp2.dot(tan2[v]);\n\t\t\t\tconst w = test < 0.0 ? -1.0 : 1.0;\n\t\t\t\ttangents[v * 4] = tmp.x;\n\t\t\t\ttangents[v * 4 + 1] = tmp.y;\n\t\t\t\ttangents[v * 4 + 2] = tmp.z;\n\t\t\t\ttangents[v * 4 + 3] = w;\n\t\t\t}\n\n\t\t\tfor (let i = 0, il = groups.length; i < il; ++i) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst start = group.start;\n\t\t\t\tconst count = group.count;\n\n\t\t\t\tfor (let j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleVertex(indices[j + 0]);\n\t\t\t\t\thandleVertex(indices[j + 1]);\n\t\t\t\t\thandleVertex(indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcomputeVertexNormals() {\n\t\t\tconst index = this.index;\n\t\t\tconst positionAttribute = this.getAttribute('position');\n\n\t\t\tif (positionAttribute !== undefined) {\n\t\t\t\tlet normalAttribute = this.getAttribute('normal');\n\n\t\t\t\tif (normalAttribute === undefined) {\n\t\t\t\t\tnormalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n\t\t\t\t\tthis.setAttribute('normal', normalAttribute);\n\t\t\t\t} else {\n\t\t\t\t\t// reset existing normals to zero\n\t\t\t\t\tfor (let i = 0, il = normalAttribute.count; i < il; i++) {\n\t\t\t\t\t\tnormalAttribute.setXYZ(i, 0, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst pA = new Vector3(),\n\t\t\t\t\t\t\tpB = new Vector3(),\n\t\t\t\t\t\t\tpC = new Vector3();\n\t\t\t\tconst nA = new Vector3(),\n\t\t\t\t\t\t\tnB = new Vector3(),\n\t\t\t\t\t\t\tnC = new Vector3();\n\t\t\t\tconst cb = new Vector3(),\n\t\t\t\t\t\t\tab = new Vector3(); // indexed elements\n\n\t\t\t\tif (index) {\n\t\t\t\t\tfor (let i = 0, il = index.count; i < il; i += 3) {\n\t\t\t\t\t\tconst vA = index.getX(i + 0);\n\t\t\t\t\t\tconst vB = index.getX(i + 1);\n\t\t\t\t\t\tconst vC = index.getX(i + 2);\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, vA);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, vB);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, vC);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnA.fromBufferAttribute(normalAttribute, vA);\n\t\t\t\t\t\tnB.fromBufferAttribute(normalAttribute, vB);\n\t\t\t\t\t\tnC.fromBufferAttribute(normalAttribute, vC);\n\t\t\t\t\t\tnA.add(cb);\n\t\t\t\t\t\tnB.add(cb);\n\t\t\t\t\t\tnC.add(cb);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\t\t\t\tfor (let i = 0, il = positionAttribute.count; i < il; i += 3) {\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, i + 0);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, i + 1);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, i + 2);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tmerge(geometry, offset) {\n\t\t\tif (!(geometry && geometry.isBufferGeometry)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (offset === undefined) {\n\t\t\t\toffset = 0;\n\t\t\t\tconsole.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');\n\t\t\t}\n\n\t\t\tconst attributes = this.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tif (geometry.attributes[key] === undefined) continue;\n\t\t\t\tconst attribute1 = attributes[key];\n\t\t\t\tconst attributeArray1 = attribute1.array;\n\t\t\t\tconst attribute2 = geometry.attributes[key];\n\t\t\t\tconst attributeArray2 = attribute2.array;\n\t\t\t\tconst attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tconst length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\n\n\t\t\t\tfor (let i = 0, j = attributeOffset; i < length; i++, j++) {\n\t\t\t\t\tattributeArray1[j] = attributeArray2[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tnormalizeNormals() {\n\t\t\tconst normals = this.attributes.normal;\n\n\t\t\tfor (let i = 0, il = normals.count; i < il; i++) {\n\t\t\t\t_vector$8.fromBufferAttribute(normals, i);\n\n\t\t\t\t_vector$8.normalize();\n\n\t\t\t\tnormals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);\n\t\t\t}\n\t\t}\n\n\t\ttoNonIndexed() {\n\t\t\tfunction convertBufferAttribute(attribute, indices) {\n\t\t\t\tconst array = attribute.array;\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst normalized = attribute.normalized;\n\t\t\t\tconst array2 = new array.constructor(indices.length * itemSize);\n\t\t\t\tlet index = 0,\n\t\t\t\t\t\tindex2 = 0;\n\n\t\t\t\tfor (let i = 0, l = indices.length; i < l; i++) {\n\t\t\t\t\tindex = indices[i] * itemSize;\n\n\t\t\t\t\tfor (let j = 0; j < itemSize; j++) {\n\t\t\t\t\t\tarray2[index2++] = array[index++];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(array2, itemSize, normalized);\n\t\t\t} //\n\n\n\t\t\tif (this.index === null) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst geometry2 = new BufferGeometry();\n\t\t\tconst indices = this.index.array;\n\t\t\tconst attributes = this.attributes; // attributes\n\n\t\t\tfor (const name in attributes) {\n\t\t\t\tconst attribute = attributes[name];\n\t\t\t\tconst newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\tgeometry2.setAttribute(name, newAttribute);\n\t\t\t} // morph attributes\n\n\n\t\t\tconst morphAttributes = this.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst morphArray = [];\n\t\t\t\tconst morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (let i = 0, il = morphAttribute.length; i < il; i++) {\n\t\t\t\t\tconst attribute = morphAttribute[i];\n\t\t\t\t\tconst newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\t\tmorphArray.push(newAttribute);\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[name] = morphArray;\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative; // groups\n\n\t\t\tconst groups = this.groups;\n\n\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tgeometry2.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t}\n\n\t\t\treturn geometry2;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n\t\t\tif (this.parameters !== undefined) {\n\t\t\t\tconst parameters = this.parameters;\n\n\t\t\t\tfor (const key in parameters) {\n\t\t\t\t\tif (parameters[key] !== undefined) data[key] = parameters[key];\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t} // for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\n\t\t\tdata.data = {\n\t\t\t\tattributes: {}\n\t\t\t};\n\t\t\tconst index = this.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call(index.array)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst attributes = this.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tdata.data.attributes[key] = attribute.toJSON(data.data);\n\t\t\t}\n\n\t\t\tconst morphAttributes = {};\n\t\t\tlet hasMorphAttributes = false;\n\n\t\t\tfor (const key in this.morphAttributes) {\n\t\t\t\tconst attributeArray = this.morphAttributes[key];\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\tconst attribute = attributeArray[i];\n\t\t\t\t\tarray.push(attribute.toJSON(data.data));\n\t\t\t\t}\n\n\t\t\t\tif (array.length > 0) {\n\t\t\t\t\tmorphAttributes[key] = array;\n\t\t\t\t\thasMorphAttributes = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasMorphAttributes) {\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\t\t\t}\n\n\t\t\tconst groups = this.groups;\n\n\t\t\tif (groups.length > 0) {\n\t\t\t\tdata.data.groups = JSON.parse(JSON.stringify(groups));\n\t\t\t}\n\n\t\t\tconst boundingSphere = this.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tclone() {\n\t\t\t/*\n\t\t\t // Handle primitives\n\t\t\t\t const parameters = this.parameters;\n\t\t\t\t if ( parameters !== undefined ) {\n\t\t\t\t const values = [];\n\t\t\t\t for ( const key in parameters ) {\n\t\t\t\t values.push( parameters[ key ] );\n\t\t\t\t }\n\t\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\t\t\t\t }\n\t\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\t\t\treturn new BufferGeometry().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\t// reset\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // used for storing cloned, shared data\n\n\t\t\tconst data = {}; // name\n\n\t\t\tthis.name = source.name; // index\n\n\t\t\tconst index = source.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tthis.setIndex(index.clone(data));\n\t\t\t} // attributes\n\n\n\t\t\tconst attributes = source.attributes;\n\n\t\t\tfor (const name in attributes) {\n\t\t\t\tconst attribute = attributes[name];\n\t\t\t\tthis.setAttribute(name, attribute.clone(data));\n\t\t\t} // morph attributes\n\n\n\t\t\tconst morphAttributes = source.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst array = [];\n\t\t\t\tconst morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (let i = 0, l = morphAttribute.length; i < l; i++) {\n\t\t\t\t\tarray.push(morphAttribute[i].clone(data));\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[name] = array;\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative; // groups\n\n\t\t\tconst groups = source.groups;\n\n\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tthis.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t} // bounding box\n\n\n\t\t\tconst boundingBox = source.boundingBox;\n\n\t\t\tif (boundingBox !== null) {\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\t\t\t} // bounding sphere\n\n\n\t\t\tconst boundingSphere = source.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\t\t\t} // draw range\n\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count; // user data\n\n\t\t\tthis.userData = source.userData;\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tBufferGeometry.prototype.isBufferGeometry = true;\n\n\tconst _inverseMatrix$2 = /*@__PURE__*/new Matrix4();\n\n\tconst _ray$2 = /*@__PURE__*/new Ray();\n\n\tconst _sphere$3 = /*@__PURE__*/new Sphere();\n\n\tconst _vA$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vB$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vC$1 = /*@__PURE__*/new Vector3();\n\n\tconst _tempA = /*@__PURE__*/new Vector3();\n\n\tconst _tempB = /*@__PURE__*/new Vector3();\n\n\tconst _tempC = /*@__PURE__*/new Vector3();\n\n\tconst _morphA = /*@__PURE__*/new Vector3();\n\n\tconst _morphB = /*@__PURE__*/new Vector3();\n\n\tconst _morphC = /*@__PURE__*/new Vector3();\n\n\tconst _uvA$1 = /*@__PURE__*/new Vector2();\n\n\tconst _uvB$1 = /*@__PURE__*/new Vector2();\n\n\tconst _uvC$1 = /*@__PURE__*/new Vector2();\n\n\tconst _intersectionPoint = /*@__PURE__*/new Vector3();\n\n\tconst _intersectionPointWorld = /*@__PURE__*/new Vector3();\n\n\tclass Mesh extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Mesh';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\n\t\t\tif (source.morphTargetInfluences !== undefined) {\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\t\t\t}\n\n\t\t\tif (source.morphTargetDictionary !== undefined) {\n\t\t\t\tthis.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst material = this.material;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tif (material === undefined) return; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$3.applyMatrix4(matrixWorld);\n\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //\n\n\t\t\t_inverseMatrix$2.copy(matrixWorld).invert();\n\n\t\t\t_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2); // Check boundingBox before continuing\n\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tif (_ray$2.intersectsBox(geometry.boundingBox) === false) return;\n\t\t\t}\n\n\t\t\tlet intersection;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tconst uv = geometry.attributes.uv;\n\t\t\t\tconst uv2 = geometry.attributes.uv2;\n\t\t\t\tconst groups = geometry.groups;\n\t\t\t\tconst drawRange = geometry.drawRange;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\t// indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tconst start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tconst end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (let j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tconst a = index.getX(j);\n\t\t\t\t\t\t\t\tconst b = index.getX(j + 1);\n\t\t\t\t\t\t\t\tconst c = index.getX(j + 2);\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (let i = start, il = end; i < il; i += 3) {\n\t\t\t\t\t\t\tconst a = index.getX(i);\n\t\t\t\t\t\t\tconst b = index.getX(i + 1);\n\t\t\t\t\t\t\tconst c = index.getX(i + 2);\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (position !== undefined) {\n\t\t\t\t\t// non-indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tconst start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tconst end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (let j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\t\t\tconst c = j + 2;\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\t\tconst end = Math.min(position.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (let i = start, il = end; i < il; i += 3) {\n\t\t\t\t\t\t\tconst a = i;\n\t\t\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\t\t\tconst c = i + 2;\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t}\n\n\tMesh.prototype.isMesh = true;\n\n\tfunction checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n\t\tlet intersect;\n\n\t\tif (material.side === BackSide) {\n\t\t\tintersect = ray.intersectTriangle(pC, pB, pA, true, point);\n\t\t} else {\n\t\t\tintersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n\t\t}\n\n\t\tif (intersect === null) return null;\n\n\t\t_intersectionPointWorld.copy(point);\n\n\t\t_intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n\t\tconst distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n\t\tif (distance < raycaster.near || distance > raycaster.far) return null;\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\t}\n\n\tfunction checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n\t\t_vA$1.fromBufferAttribute(position, a);\n\n\t\t_vB$1.fromBufferAttribute(position, b);\n\n\t\t_vC$1.fromBufferAttribute(position, c);\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif (material.morphTargets && morphPosition && morphInfluences) {\n\t\t\t_morphA.set(0, 0, 0);\n\n\t\t\t_morphB.set(0, 0, 0);\n\n\t\t\t_morphC.set(0, 0, 0);\n\n\t\t\tfor (let i = 0, il = morphPosition.length; i < il; i++) {\n\t\t\t\tconst influence = morphInfluences[i];\n\t\t\t\tconst morphAttribute = morphPosition[i];\n\t\t\t\tif (influence === 0) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute(morphAttribute, a);\n\n\t\t\t\t_tempB.fromBufferAttribute(morphAttribute, b);\n\n\t\t\t\t_tempC.fromBufferAttribute(morphAttribute, c);\n\n\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t_morphA.addScaledVector(_tempA, influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB, influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC, influence);\n\t\t\t\t} else {\n\t\t\t\t\t_morphA.addScaledVector(_tempA.sub(_vA$1), influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB.sub(_vB$1), influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC.sub(_vC$1), influence);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_vA$1.add(_morphA);\n\n\t\t\t_vB$1.add(_morphB);\n\n\t\t\t_vC$1.add(_morphC);\n\t\t}\n\n\t\tif (object.isSkinnedMesh) {\n\t\t\tobject.boneTransform(a, _vA$1);\n\t\t\tobject.boneTransform(b, _vB$1);\n\t\t\tobject.boneTransform(c, _vC$1);\n\t\t}\n\n\t\tconst intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);\n\n\t\tif (intersection) {\n\t\t\tif (uv) {\n\t\t\t\t_uvA$1.fromBufferAttribute(uv, a);\n\n\t\t\t\t_uvB$1.fromBufferAttribute(uv, b);\n\n\t\t\t\t_uvC$1.fromBufferAttribute(uv, c);\n\n\t\t\t\tintersection.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n\t\t\t}\n\n\t\t\tif (uv2) {\n\t\t\t\t_uvA$1.fromBufferAttribute(uv2, a);\n\n\t\t\t\t_uvB$1.fromBufferAttribute(uv2, b);\n\n\t\t\t\t_uvC$1.fromBufferAttribute(uv2, c);\n\n\t\t\t\tintersection.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n\t\t\t}\n\n\t\t\tconst face = {\n\t\t\t\ta: a,\n\t\t\t\tb: b,\n\t\t\t\tc: c,\n\t\t\t\tnormal: new Vector3(),\n\t\t\t\tmaterialIndex: 0\n\t\t\t};\n\t\t\tTriangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);\n\t\t\tintersection.face = face;\n\t\t}\n\n\t\treturn intersection;\n\t}\n\n\tclass BoxGeometry extends BufferGeometry {\n\t\tconstructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'BoxGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\t\t\tconst scope = this; // segments\n\n\t\t\twidthSegments = Math.floor(widthSegments);\n\t\t\theightSegments = Math.floor(heightSegments);\n\t\t\tdepthSegments = Math.floor(depthSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet numberOfVertices = 0;\n\t\t\tlet groupStart = 0; // build each side of the box geometry\n\n\t\t\tbuildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n\t\t\tbuildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n\t\t\tbuildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n\t\t\tbuildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n\t\t\t\tconst segmentWidth = width / gridX;\n\t\t\t\tconst segmentHeight = height / gridY;\n\t\t\t\tconst widthHalf = width / 2;\n\t\t\t\tconst heightHalf = height / 2;\n\t\t\t\tconst depthHalf = depth / 2;\n\t\t\t\tconst gridX1 = gridX + 1;\n\t\t\t\tconst gridY1 = gridY + 1;\n\t\t\t\tlet vertexCounter = 0;\n\t\t\t\tlet groupCount = 0;\n\t\t\t\tconst vector = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\t\tfor (let iy = 0; iy < gridY1; iy++) {\n\t\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor (let ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\t\tconst x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = x * udir;\n\t\t\t\t\t\tvector[v] = y * vdir;\n\t\t\t\t\t\tvector[w] = depthHalf; // now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push(vector.x, vector.y, vector.z); // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = 0;\n\t\t\t\t\t\tvector[v] = 0;\n\t\t\t\t\t\tvector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push(vector.x, vector.y, vector.z); // uvs\n\n\t\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\t\tuvs.push(1 - iy / gridY); // counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\t\t\t\t\t}\n\t\t\t\t} // indices\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\n\t\t\t\tfor (let iy = 0; iy < gridY; iy++) {\n\t\t\t\t\tfor (let ix = 0; ix < gridX; ix++) {\n\t\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * (iy + 1);\n\t\t\t\t\t\tconst c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n\t\t\t\t\t\tconst d = numberOfVertices + (ix + 1) + gridX1 * iy; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount; // update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Uniform Utilities\n\t */\n\tfunction cloneUniforms(src) {\n\t\tconst dst = {};\n\n\t\tfor (const u in src) {\n\t\t\tdst[u] = {};\n\n\t\t\tfor (const p in src[u]) {\n\t\t\t\tconst property = src[u][p];\n\n\t\t\t\tif (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {\n\t\t\t\t\tdst[u][p] = property.clone();\n\t\t\t\t} else if (Array.isArray(property)) {\n\t\t\t\t\tdst[u][p] = property.slice();\n\t\t\t\t} else {\n\t\t\t\t\tdst[u][p] = property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\tfunction mergeUniforms(uniforms) {\n\t\tconst merged = {};\n\n\t\tfor (let u = 0; u < uniforms.length; u++) {\n\t\t\tconst tmp = cloneUniforms(uniforms[u]);\n\n\t\t\tfor (const p in tmp) {\n\t\t\t\tmerged[p] = tmp[p];\n\t\t\t}\n\t\t}\n\n\t\treturn merged;\n\t} // Legacy\n\n\tconst UniformsUtils = {\n\t\tclone: cloneUniforms,\n\t\tmerge: mergeUniforms\n\t};\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * parameters = {\n\t *\tdefines: { \"label\" : \"value\" },\n\t *\tuniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *\tfragmentShader: <string>,\n\t *\tvertexShader: <string>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tlights: <bool>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tclass ShaderMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShaderMaterial';\n\t\t\tthis.defines = {};\n\t\t\tthis.uniforms = {};\n\t\t\tthis.vertexShader = default_vertex;\n\t\t\tthis.fragmentShader = default_fragment;\n\t\t\tthis.linewidth = 1;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false; // set to use scene fog\n\n\t\t\tthis.lights = false; // set to use scene lights\n\n\t\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\t\tthis.morphTargets = false; // set to use morph targets\n\n\t\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\t\tthis.extensions = {\n\t\t\t\tderivatives: false,\n\t\t\t\t// set to use derivatives\n\t\t\t\tfragDepth: false,\n\t\t\t\t// set to use fragment depth values\n\t\t\t\tdrawBuffers: false,\n\t\t\t\t// set to use draw buffers\n\t\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\n\t\t\t}; // When rendered geometry doesn't include these attributes but the material does,\n\t\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\n\t\t\tthis.defaultAttributeValues = {\n\t\t\t\t'color': [1, 1, 1],\n\t\t\t\t'uv': [0, 0],\n\t\t\t\t'uv2': [0, 0]\n\t\t\t};\n\t\t\tthis.index0AttributeName = undefined;\n\t\t\tthis.uniformsNeedUpdate = false;\n\t\t\tthis.glslVersion = null;\n\n\t\t\tif (parameters !== undefined) {\n\t\t\t\tif (parameters.attributes !== undefined) {\n\t\t\t\t\tconsole.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n\t\t\t\t}\n\n\t\t\t\tthis.setValues(parameters);\n\t\t\t}\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.fragmentShader = source.fragmentShader;\n\t\t\tthis.vertexShader = source.vertexShader;\n\t\t\tthis.uniforms = cloneUniforms(source.uniforms);\n\t\t\tthis.defines = Object.assign({}, source.defines);\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.lights = source.lights;\n\t\t\tthis.clipping = source.clipping;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.extensions = Object.assign({}, source.extensions);\n\t\t\tthis.glslVersion = source.glslVersion;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.glslVersion = this.glslVersion;\n\t\t\tdata.uniforms = {};\n\n\t\t\tfor (const name in this.uniforms) {\n\t\t\t\tconst uniform = this.uniforms[name];\n\t\t\t\tconst value = uniform.value;\n\n\t\t\t\tif (value && value.isTexture) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 't',\n\t\t\t\t\t\tvalue: value.toJSON(meta).uuid\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isColor) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'c',\n\t\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector2) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v2',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector3) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v3',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector4) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v4',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isMatrix3) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'm3',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isMatrix4) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'm4',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Object.keys(this.defines).length > 0) data.defines = this.defines;\n\t\t\tdata.vertexShader = this.vertexShader;\n\t\t\tdata.fragmentShader = this.fragmentShader;\n\t\t\tconst extensions = {};\n\n\t\t\tfor (const key in this.extensions) {\n\t\t\t\tif (this.extensions[key] === true) extensions[key] = true;\n\t\t\t}\n\n\t\t\tif (Object.keys(extensions).length > 0) data.extensions = extensions;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tclass Camera extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Camera';\n\t\t\tthis.matrixWorldInverse = new Matrix4();\n\t\t\tthis.projectionMatrix = new Matrix4();\n\t\t\tthis.projectionMatrixInverse = new Matrix4();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.matrixWorldInverse.copy(source.matrixWorldInverse);\n\t\t\tthis.projectionMatrix.copy(source.projectionMatrix);\n\t\t\tthis.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Camera: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tconst e = this.matrixWorld.elements;\n\t\t\treturn target.set(-e[8], -e[9], -e[10]).normalize();\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t}\n\n\t\tupdateWorldMatrix(updateParents, updateChildren) {\n\t\t\tsuper.updateWorldMatrix(updateParents, updateChildren);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tCamera.prototype.isCamera = true;\n\n\tclass PerspectiveCamera extends Camera {\n\t\tconstructor(fov = 50, aspect = 1, near = 0.1, far = 2000) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PerspectiveCamera';\n\t\t\tthis.fov = fov;\n\t\t\tthis.zoom = 1;\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.focus = 10;\n\t\t\tthis.aspect = aspect;\n\t\t\tthis.view = null;\n\t\t\tthis.filmGauge = 35; // width of the film (default in millimeters)\n\n\t\t\tthis.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\n\n\t\tsetFocalLength(focalLength) {\n\t\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\t\tthis.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\n\n\t\tgetFocalLength() {\n\t\t\tconst vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\t}\n\n\t\tgetEffectiveFOV() {\n\t\t\treturn RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);\n\t\t}\n\n\t\tgetFilmWidth() {\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min(this.aspect, 1);\n\t\t}\n\n\t\tgetFilmHeight() {\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max(this.aspect, 1);\n\t\t}\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *\t +---+---+---+\n\t\t *\t | A | B | C |\n\t\t *\t +---+---+---+\n\t\t *\t | D | E | F |\n\t\t *\t +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *\t const w = 1920;\n\t\t *\t const h = 1080;\n\t\t *\t const fullWidth = w * 3;\n\t\t *\t const fullHeight = h * 2;\n\t\t *\n\t\t *\t --A--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *\t --B--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *\t --C--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *\t --D--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *\t --E--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *\t --F--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *\t Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\n\n\t\tsetViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tclearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tupdateProjectionMatrix() {\n\t\t\tconst near = this.near;\n\t\t\tlet top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;\n\t\t\tlet height = 2 * top;\n\t\t\tlet width = this.aspect * height;\n\t\t\tlet left = -0.5 * width;\n\t\t\tconst view = this.view;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\t\t\t\tfullHeight = view.fullHeight;\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\t\t\t}\n\n\t\t\tconst skew = this.filmOffset;\n\t\t\tif (skew !== 0) left += near * skew / this.getFilmWidth();\n\t\t\tthis.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\t\t\tdata.object.aspect = this.aspect;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tPerspectiveCamera.prototype.isPerspectiveCamera = true;\n\n\tconst fov = 90,\n\t\t\t\taspect = 1;\n\n\tclass CubeCamera extends Object3D {\n\t\tconstructor(near, far, renderTarget) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubeCamera';\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget !== true) {\n\t\t\t\tconsole.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.renderTarget = renderTarget;\n\t\t\tconst cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPX.layers = this.layers;\n\t\t\tcameraPX.up.set(0, -1, 0);\n\t\t\tcameraPX.lookAt(new Vector3(1, 0, 0));\n\t\t\tthis.add(cameraPX);\n\t\t\tconst cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNX.layers = this.layers;\n\t\t\tcameraNX.up.set(0, -1, 0);\n\t\t\tcameraNX.lookAt(new Vector3(-1, 0, 0));\n\t\t\tthis.add(cameraNX);\n\t\t\tconst cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPY.layers = this.layers;\n\t\t\tcameraPY.up.set(0, 0, 1);\n\t\t\tcameraPY.lookAt(new Vector3(0, 1, 0));\n\t\t\tthis.add(cameraPY);\n\t\t\tconst cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNY.layers = this.layers;\n\t\t\tcameraNY.up.set(0, 0, -1);\n\t\t\tcameraNY.lookAt(new Vector3(0, -1, 0));\n\t\t\tthis.add(cameraNY);\n\t\t\tconst cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPZ.layers = this.layers;\n\t\t\tcameraPZ.up.set(0, -1, 0);\n\t\t\tcameraPZ.lookAt(new Vector3(0, 0, 1));\n\t\t\tthis.add(cameraPZ);\n\t\t\tconst cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNZ.layers = this.layers;\n\t\t\tcameraNZ.up.set(0, -1, 0);\n\t\t\tcameraNZ.lookAt(new Vector3(0, 0, -1));\n\t\t\tthis.add(cameraNZ);\n\t\t}\n\n\t\tupdate(renderer, scene) {\n\t\t\tif (this.parent === null) this.updateMatrixWorld();\n\t\t\tconst renderTarget = this.renderTarget;\n\t\t\tconst [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;\n\t\t\tconst currentXrEnabled = renderer.xr.enabled;\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\trenderer.xr.enabled = false;\n\t\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\t\t\trenderer.setRenderTarget(renderTarget, 0);\n\t\t\trenderer.render(scene, cameraPX);\n\t\t\trenderer.setRenderTarget(renderTarget, 1);\n\t\t\trenderer.render(scene, cameraNX);\n\t\t\trenderer.setRenderTarget(renderTarget, 2);\n\t\t\trenderer.render(scene, cameraPY);\n\t\t\trenderer.setRenderTarget(renderTarget, 3);\n\t\t\trenderer.render(scene, cameraNY);\n\t\t\trenderer.setRenderTarget(renderTarget, 4);\n\t\t\trenderer.render(scene, cameraPZ);\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\t\trenderer.setRenderTarget(renderTarget, 5);\n\t\t\trenderer.render(scene, cameraNZ);\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t}\n\n\t}\n\n\tclass CubeTexture extends Texture {\n\t\tconstructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\t\timages = images !== undefined ? images : [];\n\t\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\t\tformat = format !== undefined ? format : RGBFormat;\n\t\t\tsuper(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding); // Why CubeTexture._needsFlipEnvMap is necessary:\n\t\t\t//\n\t\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\t\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t\t// and the flag _needsFlipEnvMap controls this conversion. The flip is not required (and thus _needsFlipEnvMap is set to false)\n\t\t\t// when using WebGLCubeRenderTarget.texture as a cube texture.\n\n\t\t\tthis._needsFlipEnvMap = true;\n\t\t\tthis.flipY = false;\n\t\t}\n\n\t\tget images() {\n\t\t\treturn this.image;\n\t\t}\n\n\t\tset images(value) {\n\t\t\tthis.image = value;\n\t\t}\n\n\t}\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\t\tconstructor(size, options, dummy) {\n\t\t\tif (Number.isInteger(options)) {\n\t\t\t\tconsole.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');\n\t\t\t\toptions = dummy;\n\t\t\t}\n\n\t\t\tsuper(size, size, options);\n\t\t\toptions = options || {};\n\t\t\tthis.texture = new CubeTexture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\tthis.texture._needsFlipEnvMap = false;\n\t\t}\n\n\t\tfromEquirectangularTexture(renderer, texture) {\n\t\t\tthis.texture.type = texture.type;\n\t\t\tthis.texture.format = RGBAFormat; // see #18859\n\n\t\t\tthis.texture.encoding = texture.encoding;\n\t\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\t\tthis.texture.minFilter = texture.minFilter;\n\t\t\tthis.texture.magFilter = texture.magFilter;\n\t\t\tconst shader = {\n\t\t\t\tuniforms: {\n\t\t\t\t\ttEquirect: {\n\t\t\t\t\t\tvalue: null\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tvertexShader:\n\t\t\t\t/* glsl */\n\t\t\t\t`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\tfragmentShader:\n\t\t\t\t/* glsl */\n\t\t\t\t`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t\t};\n\t\t\tconst geometry = new BoxGeometry(5, 5, 5);\n\t\t\tconst material = new ShaderMaterial({\n\t\t\t\tname: 'CubemapFromEquirect',\n\t\t\t\tuniforms: cloneUniforms(shader.uniforms),\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\t\tside: BackSide,\n\t\t\t\tblending: NoBlending\n\t\t\t});\n\t\t\tmaterial.uniforms.tEquirect.value = texture;\n\t\t\tconst mesh = new Mesh(geometry, material);\n\t\t\tconst currentMinFilter = texture.minFilter; // Avoid blurred poles\n\n\t\t\tif (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n\t\t\tconst camera = new CubeCamera(1, 10, this);\n\t\t\tcamera.update(renderer, mesh);\n\t\t\ttexture.minFilter = currentMinFilter;\n\t\t\tmesh.geometry.dispose();\n\t\t\tmesh.material.dispose();\n\t\t\treturn this;\n\t\t}\n\n\t\tclear(renderer, color, depth, stencil) {\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\trenderer.setRenderTarget(this, i);\n\t\t\t\trenderer.clear(color, depth, stencil);\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t}\n\n\t}\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tconst _sphere$2 = /*@__PURE__*/new Sphere();\n\n\tconst _vector$7 = /*@__PURE__*/new Vector3();\n\n\tclass Frustum {\n\t\tconstructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {\n\t\t\tthis.planes = [p0, p1, p2, p3, p4, p5];\n\t\t}\n\n\t\tset(p0, p1, p2, p3, p4, p5) {\n\t\t\tconst planes = this.planes;\n\t\t\tplanes[0].copy(p0);\n\t\t\tplanes[1].copy(p1);\n\t\t\tplanes[2].copy(p2);\n\t\t\tplanes[3].copy(p3);\n\t\t\tplanes[4].copy(p4);\n\t\t\tplanes[5].copy(p5);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(frustum) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tplanes[i].copy(frustum.planes[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromProjectionMatrix(m) {\n\t\t\tconst planes = this.planes;\n\t\t\tconst me = m.elements;\n\t\t\tconst me0 = me[0],\n\t\t\t\t\t\tme1 = me[1],\n\t\t\t\t\t\tme2 = me[2],\n\t\t\t\t\t\tme3 = me[3];\n\t\t\tconst me4 = me[4],\n\t\t\t\t\t\tme5 = me[5],\n\t\t\t\t\t\tme6 = me[6],\n\t\t\t\t\t\tme7 = me[7];\n\t\t\tconst me8 = me[8],\n\t\t\t\t\t\tme9 = me[9],\n\t\t\t\t\t\tme10 = me[10],\n\t\t\t\t\t\tme11 = me[11];\n\t\t\tconst me12 = me[12],\n\t\t\t\t\t\tme13 = me[13],\n\t\t\t\t\t\tme14 = me[14],\n\t\t\t\t\t\tme15 = me[15];\n\t\t\tplanes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n\t\t\tplanes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n\t\t\tplanes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n\t\t\tplanes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n\t\t\tplanes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n\t\t\tplanes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n\t\t\treturn this;\n\t\t}\n\n\t\tintersectsObject(object) {\n\t\t\tconst geometry = object.geometry;\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$2);\n\t\t}\n\n\t\tintersectsSprite(sprite) {\n\t\t\t_sphere$2.center.set(0, 0, 0);\n\n\t\t\t_sphere$2.radius = 0.7071067811865476;\n\n\t\t\t_sphere$2.applyMatrix4(sprite.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$2);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\tconst planes = this.planes;\n\t\t\tconst center = sphere.center;\n\t\t\tconst negRadius = -sphere.radius;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst distance = planes[i].distanceToPoint(center);\n\n\t\t\t\tif (distance < negRadius) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst plane = planes[i]; // corner at max distance\n\n\t\t\t\t_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif (plane.distanceToPoint(_vector$7) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tif (planes[i].distanceToPoint(point) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tfunction WebGLAnimation() {\n\t\tlet context = null;\n\t\tlet isAnimating = false;\n\t\tlet animationLoop = null;\n\t\tlet requestId = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tanimationLoop(time, frame);\n\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t}\n\n\t\treturn {\n\t\t\tstart: function () {\n\t\t\t\tif (isAnimating === true) return;\n\t\t\t\tif (animationLoop === null) return;\n\t\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t\t\tisAnimating = true;\n\t\t\t},\n\t\t\tstop: function () {\n\t\t\t\tcontext.cancelAnimationFrame(requestId);\n\t\t\t\tisAnimating = false;\n\t\t\t},\n\t\t\tsetAnimationLoop: function (callback) {\n\t\t\t\tanimationLoop = callback;\n\t\t\t},\n\t\t\tsetContext: function (value) {\n\t\t\t\tcontext = value;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLAttributes(gl, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst buffers = new WeakMap();\n\n\t\tfunction createBuffer(attribute, bufferType) {\n\t\t\tconst array = attribute.array;\n\t\t\tconst usage = attribute.usage;\n\t\t\tconst buffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\t\t\tgl.bufferData(bufferType, array, usage);\n\t\t\tattribute.onUploadCallback();\n\t\t\tlet type = gl.FLOAT;\n\n\t\t\tif (array instanceof Float32Array) {\n\t\t\t\ttype = gl.FLOAT;\n\t\t\t} else if (array instanceof Float64Array) {\n\t\t\t\tconsole.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\n\t\t\t} else if (array instanceof Uint16Array) {\n\t\t\t\tif (attribute.isFloat16BufferAttribute) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\ttype = gl.HALF_FLOAT;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\t\t\t\t}\n\t\t\t} else if (array instanceof Int16Array) {\n\t\t\t\ttype = gl.SHORT;\n\t\t\t} else if (array instanceof Uint32Array) {\n\t\t\t\ttype = gl.UNSIGNED_INT;\n\t\t\t} else if (array instanceof Int32Array) {\n\t\t\t\ttype = gl.INT;\n\t\t\t} else if (array instanceof Int8Array) {\n\t\t\t\ttype = gl.BYTE;\n\t\t\t} else if (array instanceof Uint8Array) {\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\t\t\t} else if (array instanceof Uint8ClampedArray) {\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\t\t}\n\n\t\tfunction updateBuffer(buffer, attribute, bufferType) {\n\t\t\tconst array = attribute.array;\n\t\t\tconst updateRange = attribute.updateRange;\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\n\t\t\tif (updateRange.count === -1) {\n\t\t\t\t// Not using update ranges\n\t\t\t\tgl.bufferSubData(bufferType, 0, array);\n\t\t\t} else {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = -1; // reset range\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction get(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\treturn buffers.get(attribute);\n\t\t}\n\n\t\tfunction remove(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tconst data = buffers.get(attribute);\n\n\t\t\tif (data) {\n\t\t\t\tgl.deleteBuffer(data.buffer);\n\t\t\t\tbuffers.delete(attribute);\n\t\t\t}\n\t\t}\n\n\t\tfunction update(attribute, bufferType) {\n\t\t\tif (attribute.isGLBufferAttribute) {\n\t\t\t\tconst cached = buffers.get(attribute);\n\n\t\t\t\tif (!cached || cached.version < attribute.version) {\n\t\t\t\t\tbuffers.set(attribute, {\n\t\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\t\tversion: attribute.version\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tconst data = buffers.get(attribute);\n\n\t\t\tif (data === undefined) {\n\t\t\t\tbuffers.set(attribute, createBuffer(attribute, bufferType));\n\t\t\t} else if (data.version < attribute.version) {\n\t\t\t\tupdateBuffer(data.buffer, attribute, bufferType);\n\t\t\t\tdata.version = attribute.version;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tclass PlaneGeometry extends BufferGeometry {\n\t\tconstructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PlaneGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\t\t\tconst width_half = width / 2;\n\t\t\tconst height_half = height / 2;\n\t\t\tconst gridX = Math.floor(widthSegments);\n\t\t\tconst gridY = Math.floor(heightSegments);\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\t\t\tconst segment_width = width / gridX;\n\t\t\tconst segment_height = height / gridY; //\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\n\t\t\tfor (let iy = 0; iy < gridY1; iy++) {\n\t\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\t\tfor (let ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\tconst x = ix * segment_width - width_half;\n\t\t\t\t\tvertices.push(x, -y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\tuvs.push(1 - iy / gridY);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let iy = 0; iy < gridY; iy++) {\n\t\t\t\tfor (let ix = 0; ix < gridX; ix++) {\n\t\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\t\tconst b = ix + gridX1 * (iy + 1);\n\t\t\t\t\tconst c = ix + 1 + gridX1 * (iy + 1);\n\t\t\t\t\tconst d = ix + 1 + gridX1 * iy;\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = - mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), rawDiffuseColor, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), rawDiffuseColor, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularRoughness;\\n\\tvec3 specularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(\t\t0, 1,\t\t0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(\t1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,\t1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,\t1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSNMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition.xyz / vWorldPosition.w;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n\\tfloat ior = ( 1.0 + 0.4 * reflectivity ) / ( 1.0 - 0.4 * reflectivity );\\n\\tvec3 f0 = vec3( pow( ior - 1.0, 2.0 ) / pow( ior + 1.0, 2.0 ) );\\n\\tvec3 f90 = vec3( 1.0 );\\n\\tvec3 f_transmission = totalTransmission * getIBLVolumeRefraction(\\n\\t\\tnormal, v, viewDir, roughnessFactor, diffuseColor.rgb, f0, f90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationColor, attenuationDistance);\\n\\tdiffuseColor.rgb = mix( diffuseColor.rgb, f_transmission, totalTransmission );\\n#endif\";\n\n\tvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec4 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay(vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix) {\\n\\t\\tvec3 refractionVector = refract(-v, normalize(n), 1.0 / ior);\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length(vec3(modelMatrix[0].xyz));\\n\\t\\tmodelScale.y = length(vec3(modelMatrix[1].xyz));\\n\\t\\tmodelScale.z = length(vec3(modelMatrix[2].xyz));\\n\\t\\treturn normalize(refractionVector) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness(float roughness, float ior) {\\n\\t\\treturn roughness * clamp(ior * 2.0 - 2.0, 0.0, 1.0);\\n\\t}\\n\\tvec3 getTransmissionSample(vec2 fragCoord, float roughness, float ior) {\\n\\t\\tfloat framebufferLod = log2(transmissionSamplerSize.x) * applyIorToRoughness(roughness, ior);\\n\\t\\treturn texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod).rgb;\\n\\t}\\n\\tvec3 applyVolumeAttenuation(vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance) {\\n\\t\\tif (attenuationDistance == 0.0) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log(attenuationColor) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp(-attenuationCoefficient * transmissionDistance);\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec3 getIBLVolumeRefraction(vec3 n, vec3 v, vec3 viewDir, float perceptualRoughness, vec3 baseColor, vec3 f0, vec3 f90,\\n\\t\\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness, vec3 attenuationColor, float attenuationDistance) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay(n, v, thickness, ior, modelMatrix);\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4(refractedRayExit, 1.0);\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec3 transmittedLight = getTransmissionSample(refractionCoords, perceptualRoughness, ior);\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation(transmittedLight, length(transmissionRay), attenuationColor, attenuationDistance);\\n\\t\\tfloat NdotV = saturate(dot(n, viewDir));\\n\\t\\tvec2 brdf = integrateSpecularBRDF(NdotV, perceptualRoughness);\\n\\t\\tvec3 specularColor = f0 * brdf.x + f90 * brdf.y;\\n\\t\\treturn (1.0 - specularColor) * attenuatedColor * baseColor;\\n\\t}\\n#endif\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform vec3 attenuationColor;\\n\\tuniform float attenuationDistance;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <transmission_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#ifdef USE_TRANSMISSION\\n\\t\\tfloat totalTransmission = transmission;\\n\\t\\tfloat thicknessFactor = thickness;\\n\\t#endif\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\tvec3 rawDiffuseColor = diffuseColor.rgb;\\n\\t#include <transmission_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec4 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition;\\n#endif\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tconst ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\ttransmission_fragment: transmission_fragment,\n\t\ttransmission_pars_fragment: transmission_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tconst UniformsLib = {\n\t\tcommon: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\tuv2Transform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tspecularmap: {\n\t\t\tspecularMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tenvmap: {\n\t\t\tenvMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tflipEnvMap: {\n\t\t\t\tvalue: -1\n\t\t\t},\n\t\t\treflectivity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\trefractionRatio: {\n\t\t\t\tvalue: 0.98\n\t\t\t},\n\t\t\tmaxMipLevel: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\taomap: {\n\t\t\taoMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\taoMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tlightmap: {\n\t\t\tlightMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tlightMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\temissivemap: {\n\t\t\temissiveMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tbumpmap: {\n\t\t\tbumpMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tbumpScale: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tnormalmap: {\n\t\t\tnormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tnormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t}\n\t\t},\n\t\tdisplacementmap: {\n\t\t\tdisplacementMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tdisplacementScale: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tdisplacementBias: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\troughnessmap: {\n\t\t\troughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tmetalnessmap: {\n\t\t\tmetalnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tgradientmap: {\n\t\t\tgradientMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tfog: {\n\t\t\tfogDensity: {\n\t\t\t\tvalue: 0.00025\n\t\t\t},\n\t\t\tfogNear: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tfogFar: {\n\t\t\t\tvalue: 2000\n\t\t\t},\n\t\t\tfogColor: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t}\n\t\t},\n\t\tlights: {\n\t\t\tambientLightColor: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tlightProbe: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tcolor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tdistance: {},\n\t\t\t\t\tconeCos: {},\n\t\t\t\t\tpenumbraCos: {},\n\t\t\t\t\tdecay: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdecay: {},\n\t\t\t\t\tdistance: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {},\n\t\t\t\t\tshadowCameraNear: {},\n\t\t\t\t\tshadowCameraFar: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\themisphereLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tskyColor: {},\n\t\t\t\t\tgroundColor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\twidth: {},\n\t\t\t\t\theight: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tltc_1: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tltc_2: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tpoints: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t},\n\t\tsprite: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tcenter: {\n\t\t\t\tvalue: new Vector2(0.5, 0.5)\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tvalue: 0.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t}\n\t};\n\n\tconst ShaderLib = {\n\t\tbasic: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\t},\n\t\tlambert: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\t},\n\t\tphong: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\tspecular: {\n\t\t\t\t\tvalue: new Color(0x111111)\n\t\t\t\t},\n\t\t\t\tshininess: {\n\t\t\t\t\tvalue: 30\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\t},\n\t\tstandard: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\troughness: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t},\n\t\t\t\tmetalness: {\n\t\t\t\t\tvalue: 0.0\n\t\t\t\t},\n\t\t\t\tenvMapIntensity: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t} // temporary\n\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\t},\n\t\ttoon: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\t\t},\n\t\tmatcap: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {\n\t\t\t\tmatcap: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\t\t},\n\t\tpoints: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\t\t},\n\t\tdashed: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {\n\t\t\t\tscale: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tdashSize: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\ttotalSize: {\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\t},\n\t\tdepth: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\t\t},\n\t\tnormal: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\t\t},\n\t\tsprite: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\t\t},\n\t\tbackground: {\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t},\n\t\t\t\tt2D: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\t\tcube: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.envmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\t\t},\n\t\tequirect: {\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\t\t},\n\t\tdistanceRGBA: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {\n\t\t\t\treferencePosition: {\n\t\t\t\t\tvalue: new Vector3()\n\t\t\t\t},\n\t\t\t\tnearDistance: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tfarDistance: {\n\t\t\t\t\tvalue: 1000\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\t},\n\t\tshadow: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {\n\t\t\t\tcolor: {\n\t\t\t\t\tvalue: new Color(0x00000)\n\t\t\t\t},\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\t\t}\n\t};\n\tShaderLib.physical = {\n\t\tuniforms: mergeUniforms([ShaderLib.standard.uniforms, {\n\t\t\tclearcoat: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatRoughness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatRoughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatNormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t},\n\t\t\tclearcoatNormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tsheen: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t},\n\t\t\ttransmission: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\ttransmissionMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\ttransmissionSamplerSize: {\n\t\t\t\tvalue: new Vector2()\n\t\t\t},\n\t\t\ttransmissionSamplerMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tthickness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tthicknessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tattenuationDistance: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tattenuationColor: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t}\n\t\t}]),\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t};\n\n\tfunction WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\n\t\tconst clearColor = new Color(0x000000);\n\t\tlet clearAlpha = 0;\n\t\tlet planeMesh;\n\t\tlet boxMesh;\n\t\tlet currentBackground = null;\n\t\tlet currentBackgroundVersion = 0;\n\t\tlet currentTonemapping = null;\n\n\t\tfunction render(renderList, scene) {\n\t\t\tlet forceClear = false;\n\t\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\t\tif (background && background.isTexture) {\n\t\t\t\tbackground = cubemaps.get(background);\n\t\t\t} // Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\n\t\t\tconst xr = renderer.xr;\n\t\t\tconst session = xr.getSession && xr.getSession();\n\n\t\t\tif (session && session.environmentBlendMode === 'additive') {\n\t\t\t\tbackground = null;\n\t\t\t}\n\n\t\t\tif (background === null) {\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t} else if (background && background.isColor) {\n\t\t\t\tsetClear(background, 1);\n\t\t\t\tforceClear = true;\n\t\t\t}\n\n\t\t\tif (renderer.autoClear || forceClear) {\n\t\t\t\trenderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\t}\n\n\t\t\tif (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {\n\t\t\t\tif (boxMesh === undefined) {\n\t\t\t\t\tboxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.cube.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('normal');\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('uv');\n\n\t\t\t\t\tboxMesh.onBeforeRender = function (renderer, scene, camera) {\n\t\t\t\t\t\tthis.matrixWorld.copyPosition(camera.matrixWorld);\n\t\t\t\t\t}; // enable code injection for non-built-in material\n\n\n\t\t\t\t\tObject.defineProperty(boxMesh.material, 'envMap', {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(boxMesh);\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n\t\t\t} else if (background && background.isTexture) {\n\t\t\t\tif (planeMesh === undefined) {\n\t\t\t\t\tplaneMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.background.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n\t\t\t\t\tObject.defineProperty(planeMesh.material, 'map', {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(planeMesh);\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif (background.matrixAutoUpdate === true) {\n\t\t\t\t\tbackground.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction setClear(color, alpha) {\n\t\t\tstate.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n\t\t}\n\n\t\treturn {\n\t\t\tgetClearColor: function () {\n\t\t\t\treturn clearColor;\n\t\t\t},\n\t\t\tsetClearColor: function (color, alpha = 1) {\n\t\t\t\tclearColor.set(color);\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\t\t\t\treturn clearAlpha;\n\t\t\t},\n\t\t\tsetClearAlpha: function (alpha) {\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\trender: render\n\t\t};\n\t}\n\n\tfunction WebGLBindingStates(gl, extensions, attributes, capabilities) {\n\t\tconst maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\t\tconst extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');\n\t\tconst vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\t\tconst bindingStates = {};\n\t\tconst defaultState = createBindingState(null);\n\t\tlet currentState = defaultState;\n\n\t\tfunction setup(object, material, program, geometry, index) {\n\t\t\tlet updateBuffers = false;\n\n\t\t\tif (vaoAvailable) {\n\t\t\t\tconst state = getBindingState(geometry, program, material);\n\n\t\t\t\tif (currentState !== state) {\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject(currentState.object);\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate(geometry, index);\n\t\t\t\tif (updateBuffers) saveCache(geometry, index);\n\t\t\t} else {\n\t\t\t\tconst wireframe = material.wireframe === true;\n\n\t\t\t\tif (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\t\t\t\t\tupdateBuffers = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh === true) {\n\t\t\t\tupdateBuffers = true;\n\t\t\t}\n\n\t\t\tif (index !== null) {\n\t\t\t\tattributes.update(index, gl.ELEMENT_ARRAY_BUFFER);\n\t\t\t}\n\n\t\t\tif (updateBuffers) {\n\t\t\t\tsetupVertexAttributes(object, material, program, geometry);\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\t\t\tif (capabilities.isWebGL2) return gl.createVertexArray();\n\t\t\treturn extension.createVertexArrayOES();\n\t\t}\n\n\t\tfunction bindVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.bindVertexArray(vao);\n\t\t\treturn extension.bindVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction deleteVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.deleteVertexArray(vao);\n\t\t\treturn extension.deleteVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction getBindingState(geometry, program, material) {\n\t\t\tconst wireframe = material.wireframe === true;\n\t\t\tlet programMap = bindingStates[geometry.id];\n\n\t\t\tif (programMap === undefined) {\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[geometry.id] = programMap;\n\t\t\t}\n\n\t\t\tlet stateMap = programMap[program.id];\n\n\t\t\tif (stateMap === undefined) {\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[program.id] = stateMap;\n\t\t\t}\n\n\t\t\tlet state = stateMap[wireframe];\n\n\t\t\tif (state === undefined) {\n\t\t\t\tstate = createBindingState(createVertexArrayObject());\n\t\t\t\tstateMap[wireframe] = state;\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\tfunction createBindingState(vao) {\n\t\t\tconst newAttributes = [];\n\t\t\tconst enabledAttributes = [];\n\t\t\tconst attributeDivisors = [];\n\n\t\t\tfor (let i = 0; i < maxVertexAttributes; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\tattributeDivisors[i] = 0;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {},\n\t\t\t\tindex: null\n\t\t\t};\n\t\t}\n\n\t\tfunction needsUpdate(geometry, index) {\n\t\t\tconst cachedAttributes = currentState.attributes;\n\t\t\tconst geometryAttributes = geometry.attributes;\n\t\t\tlet attributesNum = 0;\n\n\t\t\tfor (const key in geometryAttributes) {\n\t\t\t\tconst cachedAttribute = cachedAttributes[key];\n\t\t\t\tconst geometryAttribute = geometryAttributes[key];\n\t\t\t\tif (cachedAttribute === undefined) return true;\n\t\t\t\tif (cachedAttribute.attribute !== geometryAttribute) return true;\n\t\t\t\tif (cachedAttribute.data !== geometryAttribute.data) return true;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tif (currentState.attributesNum !== attributesNum) return true;\n\t\t\tif (currentState.index !== index) return true;\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction saveCache(geometry, index) {\n\t\t\tconst cache = {};\n\t\t\tconst attributes = geometry.attributes;\n\t\t\tlet attributesNum = 0;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tconst data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif (attribute.data) {\n\t\t\t\t\tdata.data = attribute.data;\n\t\t\t\t}\n\n\t\t\t\tcache[key] = data;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\t\t\tcurrentState.attributesNum = attributesNum;\n\t\t\tcurrentState.index = index;\n\t\t}\n\n\t\tfunction initAttributes() {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\n\t\t\tfor (let i = 0, il = newAttributes.length; i < il; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\tfunction enableAttribute(attribute) {\n\t\t\tenableAttributeAndDivisor(attribute, 0);\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor(attribute, meshPerAttribute) {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\t\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\t\tconst attributeDivisors = currentState.attributeDivisors;\n\t\t\tnewAttributes[attribute] = 1;\n\n\t\t\tif (enabledAttributes[attribute] === 0) {\n\t\t\t\tgl.enableVertexAttribArray(attribute);\n\t\t\t\tenabledAttributes[attribute] = 1;\n\t\t\t}\n\n\t\t\tif (attributeDivisors[attribute] !== meshPerAttribute) {\n\t\t\t\tconst extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\n\t\t\t\textension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);\n\t\t\t\tattributeDivisors[attribute] = meshPerAttribute;\n\t\t\t}\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\t\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor (let i = 0, il = enabledAttributes.length; i < il; i++) {\n\t\t\t\tif (enabledAttributes[i] !== newAttributes[i]) {\n\t\t\t\t\tgl.disableVertexAttribArray(i);\n\t\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction vertexAttribPointer(index, size, type, normalized, stride, offset) {\n\t\t\tif (capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT)) {\n\t\t\t\tgl.vertexAttribIPointer(index, size, type, stride, offset);\n\t\t\t} else {\n\t\t\t\tgl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\t}\n\t\t}\n\n\t\tfunction setupVertexAttributes(object, material, program, geometry) {\n\t\t\tif (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {\n\t\t\t\tif (extensions.get('ANGLE_instanced_arrays') === null) return;\n\t\t\t}\n\n\t\t\tinitAttributes();\n\t\t\tconst geometryAttributes = geometry.attributes;\n\t\t\tconst programAttributes = program.getAttributes();\n\t\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor (const name in programAttributes) {\n\t\t\t\tconst programAttribute = programAttributes[name];\n\n\t\t\t\tif (programAttribute >= 0) {\n\t\t\t\t\tconst geometryAttribute = geometryAttributes[name];\n\n\t\t\t\t\tif (geometryAttribute !== undefined) {\n\t\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\t\t\t\t\t\tconst attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif (geometryAttribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif (data && data.isInstancedInterleavedBuffer) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, data.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (geometryAttribute.isInstancedBufferAttribute) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, 0, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (name === 'instanceMatrix') {\n\t\t\t\t\t\tconst attribute = attributes.get(object.instanceMatrix); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 0, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 1, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 2, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 3, 1);\n\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 0, 4, type, false, 64, 0);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 1, 4, type, false, 64, 16);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 2, 4, type, false, 64, 32);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 3, 4, type, false, 64, 48);\n\t\t\t\t\t} else if (name === 'instanceColor') {\n\t\t\t\t\t\tconst attribute = attributes.get(object.instanceColor); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, 1);\n\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute, 3, type, false, 12, 0);\n\t\t\t\t\t} else if (materialDefaultAttributeValues !== undefined) {\n\t\t\t\t\t\tconst value = materialDefaultAttributeValues[name];\n\n\t\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\t\tswitch (value.length) {\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv(programAttribute, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\treset();\n\n\t\t\tfor (const geometryId in bindingStates) {\n\t\t\t\tconst programMap = bindingStates[geometryId];\n\n\t\t\t\tfor (const programId in programMap) {\n\t\t\t\t\tconst stateMap = programMap[programId];\n\n\t\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[programId];\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[geometryId];\n\t\t\t}\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry(geometry) {\n\t\t\tif (bindingStates[geometry.id] === undefined) return;\n\t\t\tconst programMap = bindingStates[geometry.id];\n\n\t\t\tfor (const programId in programMap) {\n\t\t\t\tconst stateMap = programMap[programId];\n\n\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[programId];\n\t\t\t}\n\n\t\t\tdelete bindingStates[geometry.id];\n\t\t}\n\n\t\tfunction releaseStatesOfProgram(program) {\n\t\t\tfor (const geometryId in bindingStates) {\n\t\t\t\tconst programMap = bindingStates[geometryId];\n\t\t\t\tif (programMap[program.id] === undefined) continue;\n\t\t\t\tconst stateMap = programMap[program.id];\n\n\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[program.id];\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\tresetDefaultState();\n\t\t\tif (currentState === defaultState) return;\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject(currentState.object);\n\t\t} // for backward-compatilibity\n\n\n\t\tfunction resetDefaultState() {\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\t\t};\n\t}\n\n\tfunction WebGLBufferRenderer(gl, extensions, info, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tlet mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawArrays(mode, start, count);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tlet extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, start, count, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLCapabilities(gl, extensions, parameters) {\n\t\tlet maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\t\t\tif (maxAnisotropy !== undefined) return maxAnisotropy;\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tconst extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tmaxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n\t\t\t} else {\n\t\t\t\tmaxAnisotropy = 0;\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\t\t}\n\n\t\tfunction getMaxPrecision(precision) {\n\t\t\tif (precision === 'highp') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n\t\t\t\t\treturn 'highp';\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\t\t\t}\n\n\t\t\tif (precision === 'mediump') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n\t\t\t\t\treturn 'mediump';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\t\t}\n\t\t/* eslint-disable no-undef */\n\n\n\t\tconst isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;\n\t\t/* eslint-enable no-undef */\n\n\t\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tconst maxPrecision = getMaxPrecision(precision);\n\n\t\tif (maxPrecision !== precision) {\n\t\t\tconsole.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n\t\t\tprecision = maxPrecision;\n\t\t}\n\n\t\tconst drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');\n\t\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\t\tconst maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\t\tconst maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n\t\tconst maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\t\tconst maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n\t\tconst maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\t\tconst maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n\t\tconst maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n\t\tconst maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n\t\tconst vertexTextures = maxVertexTextures > 0;\n\t\tconst floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');\n\t\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\tconst maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;\n\t\treturn {\n\t\t\tisWebGL2: isWebGL2,\n\t\t\tdrawBuffers: drawBuffers,\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\t\t\tmaxSamples: maxSamples\n\t\t};\n\t}\n\n\tfunction WebGLClipping(properties) {\n\t\tconst scope = this;\n\t\tlet globalState = null,\n\t\t\t\tnumGlobalPlanes = 0,\n\t\t\t\tlocalClippingEnabled = false,\n\t\t\t\trenderingShadows = false;\n\t\tconst plane = new Plane(),\n\t\t\t\t\tviewNormalMatrix = new Matrix3(),\n\t\t\t\t\tuniform = {\n\t\t\tvalue: null,\n\t\t\tneedsUpdate: false\n\t\t};\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function (planes, enableLocalClipping, camera) {\n\t\t\tconst enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 || localClippingEnabled;\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\t\t\tglobalState = projectPlanes(planes, camera, 0);\n\t\t\tnumGlobalPlanes = planes.length;\n\t\t\treturn enabled;\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes(null);\n\t\t};\n\n\t\tthis.endShadows = function () {\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\t\t};\n\n\t\tthis.setState = function (material, camera, useCache) {\n\t\t\tconst planes = material.clippingPlanes,\n\t\t\t\t\t\tclipIntersection = material.clipIntersection,\n\t\t\t\t\t\tclipShadows = material.clipShadows;\n\t\t\tconst materialProperties = properties.get(material);\n\n\t\t\tif (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n\t\t\t\t// there's no local clipping\n\t\t\t\tif (renderingShadows) {\n\t\t\t\t\t// there's no global clipping\n\t\t\t\t\tprojectPlanes(null);\n\t\t\t\t} else {\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\t\t\tlGlobal = nGlobal * 4;\n\t\t\t\tlet dstArray = materialProperties.clippingState || null;\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes(planes, camera, lGlobal, useCache);\n\n\t\t\t\tfor (let i = 0; i !== lGlobal; ++i) {\n\t\t\t\t\tdstArray[i] = globalState[i];\n\t\t\t\t}\n\n\t\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\t\t\t}\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\t\t\tif (uniform.value !== globalState) {\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t}\n\n\t\tfunction projectPlanes(planes, camera, dstOffset, skipTransform) {\n\t\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\t\tlet dstArray = null;\n\n\t\t\tif (nPlanes !== 0) {\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif (skipTransform !== true || dstArray === null) {\n\t\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix(viewMatrix);\n\n\t\t\t\t\tif (dstArray === null || dstArray.length < flatSize) {\n\t\t\t\t\t\tdstArray = new Float32Array(flatSize);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n\t\t\t\t\t\tplane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n\t\t\t\t\t\tplane.normal.toArray(dstArray, i4);\n\t\t\t\t\t\tdstArray[i4 + 3] = plane.constant;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t\treturn dstArray;\n\t\t}\n\t}\n\n\tfunction WebGLCubeMaps(renderer) {\n\t\tlet cubemaps = new WeakMap();\n\n\t\tfunction mapTextureMapping(texture, mapping) {\n\t\t\tif (mapping === EquirectangularReflectionMapping) {\n\t\t\t\ttexture.mapping = CubeReflectionMapping;\n\t\t\t} else if (mapping === EquirectangularRefractionMapping) {\n\t\t\t\ttexture.mapping = CubeRefractionMapping;\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction get(texture) {\n\t\t\tif (texture && texture.isTexture) {\n\t\t\t\tconst mapping = texture.mapping;\n\n\t\t\t\tif (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n\t\t\t\t\tif (cubemaps.has(texture)) {\n\t\t\t\t\t\tconst cubemap = cubemaps.get(texture).texture;\n\t\t\t\t\t\treturn mapTextureMapping(cubemap, texture.mapping);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif (image && image.height > 0) {\n\t\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget(image.height / 2);\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture(renderer, texture);\n\t\t\t\t\t\t\tcubemaps.set(texture, renderTarget);\n\t\t\t\t\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\t\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\t\t\t\treturn mapTextureMapping(renderTarget.texture, texture.mapping);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tconst cubemap = cubemaps.get(texture);\n\n\t\t\tif (cubemap !== undefined) {\n\t\t\t\tcubemaps.delete(texture);\n\t\t\t\tcubemap.dispose();\n\t\t\t}\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tcubemaps = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction WebGLExtensions(gl) {\n\t\tconst extensions = {};\n\n\t\tfunction getExtension(name) {\n\t\t\tif (extensions[name] !== undefined) {\n\t\t\t\treturn extensions[name];\n\t\t\t}\n\n\t\t\tlet extension;\n\n\t\t\tswitch (name) {\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension(name);\n\t\t\t}\n\n\t\t\textensions[name] = extension;\n\t\t\treturn extension;\n\t\t}\n\n\t\treturn {\n\t\t\thas: function (name) {\n\t\t\t\treturn getExtension(name) !== null;\n\t\t\t},\n\t\t\tinit: function (capabilities) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\tgetExtension('EXT_color_buffer_float');\n\t\t\t\t} else {\n\t\t\t\t\tgetExtension('WEBGL_depth_texture');\n\t\t\t\t\tgetExtension('OES_texture_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float_linear');\n\t\t\t\t\tgetExtension('OES_standard_derivatives');\n\t\t\t\t\tgetExtension('OES_element_index_uint');\n\t\t\t\t\tgetExtension('OES_vertex_array_object');\n\t\t\t\t\tgetExtension('ANGLE_instanced_arrays');\n\t\t\t\t}\n\n\t\t\t\tgetExtension('OES_texture_float_linear');\n\t\t\t\tgetExtension('EXT_color_buffer_half_float');\n\t\t\t},\n\t\t\tget: function (name) {\n\t\t\t\tconst extension = getExtension(name);\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n\t\t\t\t}\n\n\t\t\t\treturn extension;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLGeometries(gl, attributes, info, bindingStates) {\n\t\tconst geometries = {};\n\t\tconst wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose(event) {\n\t\t\tconst geometry = event.target;\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\tattributes.remove(geometry.index);\n\t\t\t}\n\n\t\t\tfor (const name in geometry.attributes) {\n\t\t\t\tattributes.remove(geometry.attributes[name]);\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener('dispose', onGeometryDispose);\n\t\t\tdelete geometries[geometry.id];\n\t\t\tconst attribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (attribute) {\n\t\t\t\tattributes.remove(attribute);\n\t\t\t\twireframeAttributes.delete(geometry);\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry(geometry);\n\n\t\t\tif (geometry.isInstancedBufferGeometry === true) {\n\t\t\t\tdelete geometry._maxInstanceCount;\n\t\t\t} //\n\n\n\t\t\tinfo.memory.geometries--;\n\t\t}\n\n\t\tfunction get(object, geometry) {\n\t\t\tif (geometries[geometry.id] === true) return geometry;\n\t\t\tgeometry.addEventListener('dispose', onGeometryDispose);\n\t\t\tgeometries[geometry.id] = true;\n\t\t\tinfo.memory.geometries++;\n\t\t\treturn geometry;\n\t\t}\n\n\t\tfunction update(geometry) {\n\t\t\tconst geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor (const name in geometryAttributes) {\n\t\t\t\tattributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);\n\t\t\t} // morph targets\n\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst array = morphAttributes[name];\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tattributes.update(array[i], gl.ARRAY_BUFFER);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateWireframeAttribute(geometry) {\n\t\t\tconst indices = [];\n\t\t\tconst geometryIndex = geometry.index;\n\t\t\tconst geometryPosition = geometry.attributes.position;\n\t\t\tlet version = 0;\n\n\t\t\tif (geometryIndex !== null) {\n\t\t\t\tconst array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\t\tconst a = array[i + 0];\n\t\t\t\t\tconst b = array[i + 1];\n\t\t\t\t\tconst c = array[i + 2];\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {\n\t\t\t\t\tconst a = i + 0;\n\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\tconst c = i + 2;\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n\t\t\tattribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\n\t\t\t//\n\n\t\t\tconst previousAttribute = wireframeAttributes.get(geometry);\n\t\t\tif (previousAttribute) attributes.remove(previousAttribute); //\n\n\t\t\twireframeAttributes.set(geometry, attribute);\n\t\t}\n\n\t\tfunction getWireframeAttribute(geometry) {\n\t\t\tconst currentAttribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (currentAttribute) {\n\t\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\t\tif (geometryIndex !== null) {\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\t\t\t\t\tif (currentAttribute.version < geometryIndex.version) {\n\t\t\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get(geometry);\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tupdate: update,\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\t\t};\n\t}\n\n\tfunction WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tlet mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tlet type, bytesPerElement;\n\n\t\tfunction setIndex(value) {\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawElements(mode, count, type, start * bytesPerElement);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tlet extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, count, type, start * bytesPerElement, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLInfo(gl) {\n\t\tconst memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\t\tconst render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update(count, mode, instanceCount) {\n\t\t\trender.calls++;\n\n\t\t\tswitch (mode) {\n\t\t\t\tcase gl.TRIANGLES:\n\t\t\t\t\trender.triangles += instanceCount * (count / 3);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINES:\n\t\t\t\t\trender.lines += instanceCount * (count / 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_STRIP:\n\t\t\t\t\trender.lines += instanceCount * (count - 1);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_LOOP:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.POINTS:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error('THREE.WebGLInfo: Unknown draw mode:', mode);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\trender.frame++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction numericalSort(a, b) {\n\t\treturn a[0] - b[0];\n\t}\n\n\tfunction absNumericalSort(a, b) {\n\t\treturn Math.abs(b[1]) - Math.abs(a[1]);\n\t}\n\n\tfunction WebGLMorphtargets(gl) {\n\t\tconst influencesList = {};\n\t\tconst morphInfluences = new Float32Array(8);\n\t\tconst workInfluences = [];\n\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tworkInfluences[i] = [i, 0];\n\t\t}\n\n\t\tfunction update(object, geometry, material, program) {\n\t\t\tconst objectInfluences = object.morphTargetInfluences; // When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tconst length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\t\t\tlet influences = influencesList[geometry.id];\n\n\t\t\tif (influences === undefined) {\n\t\t\t\t// initialise list\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tinfluences[i] = [i, 0];\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[geometry.id] = influences;\n\t\t\t} // Collect influences\n\n\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tconst influence = influences[i];\n\t\t\t\tinfluence[0] = i;\n\t\t\t\tinfluence[1] = objectInfluences[i];\n\t\t\t}\n\n\t\t\tinfluences.sort(absNumericalSort);\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tif (i < length && influences[i][1]) {\n\t\t\t\t\tworkInfluences[i][0] = influences[i][0];\n\t\t\t\t\tworkInfluences[i][1] = influences[i][1];\n\t\t\t\t} else {\n\t\t\t\t\tworkInfluences[i][0] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[i][1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tworkInfluences.sort(numericalSort);\n\t\t\tconst morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tconst morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tconst influence = workInfluences[i];\n\t\t\t\tconst index = influence[0];\n\t\t\t\tconst value = influence[1];\n\n\t\t\t\tif (index !== Number.MAX_SAFE_INTEGER && value) {\n\t\t\t\t\tif (morphTargets && geometry.getAttribute('morphTarget' + i) !== morphTargets[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphTarget' + i, morphTargets[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.getAttribute('morphNormal' + i) !== morphNormals[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphNormal' + i, morphNormals[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[i] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t} else {\n\t\t\t\t\tif (morphTargets && geometry.hasAttribute('morphTarget' + i) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphTarget' + i);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.hasAttribute('morphNormal' + i) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphNormal' + i);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[i] = 0;\n\t\t\t\t}\n\t\t\t} // GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\n\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction WebGLObjects(gl, geometries, attributes, info) {\n\t\tlet updateMap = new WeakMap();\n\n\t\tfunction update(object) {\n\t\t\tconst frame = info.render.frame;\n\t\t\tconst geometry = object.geometry;\n\t\t\tconst buffergeometry = geometries.get(object, geometry); // Update once per frame\n\n\t\t\tif (updateMap.get(buffergeometry) !== frame) {\n\t\t\t\tgeometries.update(buffergeometry);\n\t\t\t\tupdateMap.set(buffergeometry, frame);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\tif (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {\n\t\t\t\t\tobject.addEventListener('dispose', onInstancedMeshDispose);\n\t\t\t\t}\n\n\t\t\t\tattributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);\n\n\t\t\t\tif (object.instanceColor !== null) {\n\t\t\t\t\tattributes.update(object.instanceColor, gl.ARRAY_BUFFER);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tupdateMap = new WeakMap();\n\t\t}\n\n\t\tfunction onInstancedMeshDispose(event) {\n\t\t\tconst instancedMesh = event.target;\n\t\t\tinstancedMesh.removeEventListener('dispose', onInstancedMeshDispose);\n\t\t\tattributes.remove(instancedMesh.instanceMatrix);\n\t\t\tif (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tclass DataTexture2DArray extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, depth = 1) {\n\t\t\tsuper(null);\n\t\t\tthis.image = {\n\t\t\t\tdata,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdepth\n\t\t\t};\n\t\t\tthis.magFilter = NearestFilter;\n\t\t\tthis.minFilter = NearestFilter;\n\t\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\tclass DataTexture3D extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, depth = 1) {\n\t\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t\t// Users can still set in DataTexture3D directly.\n\t\t\t//\n\t\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t\t// \ttexture.anisotropy = 16;\n\t\t\t//\n\t\t\t// See #14839\n\t\t\tsuper(null);\n\t\t\tthis.image = {\n\t\t\t\tdata,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdepth\n\t\t\t};\n\t\t\tthis.magFilter = NearestFilter;\n\t\t\tthis.minFilter = NearestFilter;\n\t\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *\t\tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with\tname 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\tconst emptyTexture = new Texture();\n\tconst emptyTexture2dArray = new DataTexture2DArray();\n\tconst emptyTexture3d = new DataTexture3D();\n\tconst emptyCubeTexture = new CubeTexture(); // --- Utilities ---\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tconst arrayCacheF32 = [];\n\tconst arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms\n\n\tconst mat4array = new Float32Array(16);\n\tconst mat3array = new Float32Array(9);\n\tconst mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices\n\n\tfunction flatten(array, nBlocks, blockSize) {\n\t\tconst firstElem = array[0];\n\t\tif (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tconst n = nBlocks * blockSize;\n\t\tlet r = arrayCacheF32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Float32Array(n);\n\t\t\tarrayCacheF32[n] = r;\n\t\t}\n\n\t\tif (nBlocks !== 0) {\n\t\t\tfirstElem.toArray(r, 0);\n\n\t\t\tfor (let i = 1, offset = 0; i !== nBlocks; ++i) {\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[i].toArray(r, offset);\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tfunction arraysEqual(a, b) {\n\t\tif (a.length !== b.length) return false;\n\n\t\tfor (let i = 0, l = a.length; i < l; i++) {\n\t\t\tif (a[i] !== b[i]) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction copyArray(a, b) {\n\t\tfor (let i = 0, l = b.length; i < l; i++) {\n\t\t\ta[i] = b[i];\n\t\t}\n\t} // Texture unit allocation\n\n\n\tfunction allocTexUnits(textures, n) {\n\t\tlet r = arrayCacheI32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Int32Array(n);\n\t\t\tarrayCacheI32[n] = r;\n\t\t}\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\tr[i] = textures.allocateTextureUnit();\n\t\t}\n\n\t\treturn r;\n\t} // --- Setters ---\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\t// Single scalar\n\n\n\tfunction setValueV1f(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1f(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single float vector (from flat array or THREE.VectorN)\n\n\n\tfunction setValueV2f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y) {\n\t\t\t\tgl.uniform2f(this.addr, v.x, v.y);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform2fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV3f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n\t\t\t\tgl.uniform3f(this.addr, v.x, v.y, v.z);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t}\n\t\t} else if (v.r !== undefined) {\n\t\t\tif (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n\t\t\t\tgl.uniform3f(this.addr, v.r, v.g, v.b);\n\t\t\t\tcache[0] = v.r;\n\t\t\t\tcache[1] = v.g;\n\t\t\t\tcache[2] = v.b;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform3fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV4f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n\t\t\t\tgl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t\tcache[3] = v.w;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform4fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t} // Single matrix (from flat array or THREE.MatrixN)\n\n\n\tfunction setValueM2(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix2fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat2array.set(elements);\n\t\t\tgl.uniformMatrix2fv(this.addr, false, mat2array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM3(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix3fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat3array.set(elements);\n\t\t\tgl.uniformMatrix3fv(this.addr, false, mat3array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM4(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix4fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat4array.set(elements);\n\t\t\tgl.uniformMatrix4fv(this.addr, false, mat4array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t} // Single integer / boolean\n\n\n\tfunction setValueV1i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1i(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single integer / boolean vector (from flat array)\n\n\n\tfunction setValueV2i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // Single unsigned integer\n\n\n\tfunction setValueV1ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1ui(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single unsigned integer vector (from flat array)\n\n\n\tfunction setValueV2ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // Single texture (2D / Cube)\n\n\n\tfunction setValueT1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTexture2D(v || emptyTexture, unit);\n\t}\n\n\tfunction setValueT3D1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture3D(v || emptyTexture3d, unit);\n\t}\n\n\tfunction setValueT6(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTextureCube(v || emptyCubeTexture, unit);\n\t}\n\n\tfunction setValueT2DArray1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture2DArray(v || emptyTexture2dArray, unit);\n\t} // Helper to pick the right setter for the singular case\n\n\n\tfunction getSingularSetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1f;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2f;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3f;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4f;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1i;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2i;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3i;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4i;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1ui;\n\t\t\t// UINT\n\n\t\t\tcase 0x8dc6:\n\t\t\t\treturn setValueV2ui;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8dc7:\n\t\t\t\treturn setValueV3ui;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8dc8:\n\t\t\t\treturn setValueV4ui;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\n\t\t\tcase 0x8dd3:\n\t\t\t\t// UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dc4:\n\t\t\t\t// SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\t\t}\n\t} // Array of scalars\n\n\n\tfunction setValueV1fArray(gl, v) {\n\t\tgl.uniform1fv(this.addr, v);\n\t} // Array of vectors (from flat array or array of THREE.VectorN)\n\n\n\tfunction setValueV2fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 2);\n\t\tgl.uniform2fv(this.addr, data);\n\t}\n\n\tfunction setValueV3fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 3);\n\t\tgl.uniform3fv(this.addr, data);\n\t}\n\n\tfunction setValueV4fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 4);\n\t\tgl.uniform4fv(this.addr, data);\n\t} // Array of matrices (from flat array or array of THREE.MatrixN)\n\n\n\tfunction setValueM2Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 4);\n\t\tgl.uniformMatrix2fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM3Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 9);\n\t\tgl.uniformMatrix3fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM4Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 16);\n\t\tgl.uniformMatrix4fv(this.addr, false, data);\n\t} // Array of integer / boolean\n\n\n\tfunction setValueV1iArray(gl, v) {\n\t\tgl.uniform1iv(this.addr, v);\n\t} // Array of integer / boolean vectors (from flat array)\n\n\n\tfunction setValueV2iArray(gl, v) {\n\t\tgl.uniform2iv(this.addr, v);\n\t}\n\n\tfunction setValueV3iArray(gl, v) {\n\t\tgl.uniform3iv(this.addr, v);\n\t}\n\n\tfunction setValueV4iArray(gl, v) {\n\t\tgl.uniform4iv(this.addr, v);\n\t} // Array of unsigned integer\n\n\n\tfunction setValueV1uiArray(gl, v) {\n\t\tgl.uniform1uiv(this.addr, v);\n\t} // Array of unsigned integer vectors (from flat array)\n\n\n\tfunction setValueV2uiArray(gl, v) {\n\t\tgl.uniform2uiv(this.addr, v);\n\t}\n\n\tfunction setValueV3uiArray(gl, v) {\n\t\tgl.uniform3uiv(this.addr, v);\n\t}\n\n\tfunction setValueV4uiArray(gl, v) {\n\t\tgl.uniform4uiv(this.addr, v);\n\t} // Array of textures (2D / Cube)\n\n\n\tfunction setValueT1Array(gl, v, textures) {\n\t\tconst n = v.length;\n\t\tconst units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTexture2D(v[i] || emptyTexture, units[i]);\n\t\t}\n\t}\n\n\tfunction setValueT6Array(gl, v, textures) {\n\t\tconst n = v.length;\n\t\tconst units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);\n\t\t}\n\t} // Helper to pick the right setter for a pure (bottom-level) array\n\n\n\tfunction getPureArraySetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1fArray;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2fArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3fArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4fArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2Array;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3Array;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4Array;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1iArray;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2iArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3iArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4iArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1uiArray;\n\t\t\t// UINT\n\n\t\t\tcase 0x8dc6:\n\t\t\t\treturn setValueV2uiArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8dc7:\n\t\t\t\treturn setValueV3uiArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8dc8:\n\t\t\t\treturn setValueV4uiArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\t\t}\n\t} // --- Uniform Classes ---\n\n\n\tfunction SingleUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tfunction PureArrayUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function (data) {\n\t\tconst cache = this.cache;\n\n\t\tif (data instanceof Float32Array && cache.length !== data.length) {\n\t\t\tthis.cache = new Float32Array(data.length);\n\t\t}\n\n\t\tcopyArray(cache, data);\n\t};\n\n\tfunction StructuredUniform(id) {\n\t\tthis.id = id;\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t}\n\n\tStructuredUniform.prototype.setValue = function (gl, value, textures) {\n\t\tconst seq = this.seq;\n\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i];\n\t\t\tu.setValue(gl, value[u.id], textures);\n\t\t}\n\t}; // --- Top-level ---\n\t// Parser - builds up the property tree from the path strings\n\n\n\tconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g; // extracts\n\t// \t- the identifier (member name or array index)\n\t//\t- followed by an optional right bracket (found when array index)\n\t//\t- followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform(container, uniformObject) {\n\t\tcontainer.seq.push(uniformObject);\n\t\tcontainer.map[uniformObject.id] = uniformObject;\n\t}\n\n\tfunction parseUniform(activeInfo, addr, container) {\n\t\tconst path = activeInfo.name,\n\t\t\t\t\tpathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile (true) {\n\t\t\tconst match = RePathPart.exec(path),\n\t\t\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\t\t\tlet id = match[1];\n\t\t\tconst idIsIndex = match[2] === ']',\n\t\t\t\t\t\tsubscript = match[3];\n\t\t\tif (idIsIndex) id = id | 0; // convert to integer\n\n\t\t\tif (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\t\t\taddUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\t\t\t\tconst map = container.map;\n\t\t\t\tlet next = map[id];\n\n\t\t\t\tif (next === undefined) {\n\t\t\t\t\tnext = new StructuredUniform(id);\n\t\t\t\t\taddUniform(container, next);\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\t\t\t}\n\t\t}\n\t} // Root Container\n\n\n\tfunction WebGLUniforms(gl, program) {\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t\tconst n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n\t\tfor (let i = 0; i < n; ++i) {\n\t\t\tconst info = gl.getActiveUniform(program, i),\n\t\t\t\t\t\taddr = gl.getUniformLocation(program, info.name);\n\t\t\tparseUniform(info, addr, this);\n\t\t}\n\t}\n\n\tWebGLUniforms.prototype.setValue = function (gl, name, value, textures) {\n\t\tconst u = this.map[name];\n\t\tif (u !== undefined) u.setValue(gl, value, textures);\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function (gl, object, name) {\n\t\tconst v = object[name];\n\t\tif (v !== undefined) this.setValue(gl, name, v);\n\t}; // Static interface\n\n\n\tWebGLUniforms.upload = function (gl, seq, values, textures) {\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i],\n\t\t\t\t\t\tv = values[u.id];\n\n\t\t\tif (v.needsUpdate !== false) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue(gl, v.value, textures);\n\t\t\t}\n\t\t}\n\t};\n\n\tWebGLUniforms.seqWithValue = function (seq, values) {\n\t\tconst r = [];\n\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i];\n\t\t\tif (u.id in values) r.push(u);\n\t\t}\n\n\t\treturn r;\n\t};\n\n\tfunction WebGLShader(gl, type, string) {\n\t\tconst shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, string);\n\t\tgl.compileShader(shader);\n\t\treturn shader;\n\t}\n\n\tlet programIdCount = 0;\n\n\tfunction addLineNumbers(string) {\n\t\tconst lines = string.split('\\n');\n\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tlines[i] = i + 1 + ': ' + lines[i];\n\t\t}\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tfunction getEncodingComponents(encoding) {\n\t\tswitch (encoding) {\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn ['Linear', '( value )'];\n\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn ['sRGB', '( value )'];\n\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn ['RGBE', '( value )'];\n\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn ['RGBM', '( value, 7.0 )'];\n\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn ['RGBM', '( value, 16.0 )'];\n\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn ['RGBD', '( value, 256.0 )'];\n\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn ['LogLuv', '( value )'];\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);\n\t\t\t\treturn ['Linear', '( value )'];\n\t\t}\n\t}\n\n\tfunction getShaderErrors(gl, shader, type) {\n\t\tconst status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\t\tconst log = gl.getShaderInfoLog(shader).trim();\n\t\tif (status && log === '') return ''; // --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tconst source = gl.getShaderSource(shader);\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers(source);\n\t}\n\n\tfunction getTexelDecodingFunction(functionName, encoding) {\n\t\tconst components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';\n\t}\n\n\tfunction getTexelEncodingFunction(functionName, encoding) {\n\t\tconst components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';\n\t}\n\n\tfunction getToneMappingFunction(functionName, toneMapping) {\n\t\tlet toneMappingName;\n\n\t\tswitch (toneMapping) {\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\t}\n\n\tfunction generateExtensions(parameters) {\n\t\tconst chunks = [parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission > 0.0) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n\t\treturn chunks.filter(filterEmptyLine).join('\\n');\n\t}\n\n\tfunction generateDefines(defines) {\n\t\tconst chunks = [];\n\n\t\tfor (const name in defines) {\n\t\t\tconst value = defines[name];\n\t\t\tif (value === false) continue;\n\t\t\tchunks.push('#define ' + name + ' ' + value);\n\t\t}\n\n\t\treturn chunks.join('\\n');\n\t}\n\n\tfunction fetchAttributeLocations(gl, program) {\n\t\tconst attributes = {};\n\t\tconst n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst info = gl.getActiveAttrib(program, i);\n\t\t\tconst name = info.name; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[name] = gl.getAttribLocation(program, name);\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tfunction filterEmptyLine(string) {\n\t\treturn string !== '';\n\t}\n\n\tfunction replaceLightNums(string, parameters) {\n\t\treturn string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\n\t}\n\n\tfunction replaceClippingPlaneNums(string, parameters) {\n\t\treturn string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);\n\t} // Resolve Includes\n\n\n\tconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes(string) {\n\t\treturn string.replace(includePattern, includeReplacer);\n\t}\n\n\tfunction includeReplacer(match, include) {\n\t\tconst string = ShaderChunk[include];\n\n\t\tif (string === undefined) {\n\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t\t}\n\n\t\treturn resolveIncludes(string);\n\t} // Unroll Loops\n\n\n\tconst deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops(string) {\n\t\treturn string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);\n\t}\n\n\tfunction deprecatedLoopReplacer(match, start, end, snippet) {\n\t\tconsole.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');\n\t\treturn loopReplacer(match, start, end, snippet);\n\t}\n\n\tfunction loopReplacer(match, start, end, snippet) {\n\t\tlet string = '';\n\n\t\tfor (let i = parseInt(start); i < parseInt(end); i++) {\n\t\t\tstring += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\n\t\t}\n\n\t\treturn string;\n\t} //\n\n\n\tfunction generatePrecision(parameters) {\n\t\tlet precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\t\tif (parameters.precision === 'highp') {\n\t\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\t\t} else if (parameters.precision === 'mediump') {\n\t\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\t\t} else if (parameters.precision === 'lowp') {\n\t\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\t\t}\n\n\t\treturn precisionstring;\n\t}\n\n\tfunction generateShadowMapTypeDefine(parameters) {\n\t\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif (parameters.shadowMapType === PCFShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\t} else if (parameters.shadowMapType === PCFSoftShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\t} else if (parameters.shadowMapType === VSMShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapTypeDefine(parameters) {\n\t\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapModeDefine(parameters) {\n\t\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapModeDefine;\n\t}\n\n\tfunction generateEnvMapBlendingDefine(parameters) {\n\t\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.combine) {\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\t}\n\n\tfunction WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\n\t\tconst gl = renderer.getContext();\n\t\tconst defines = parameters.defines;\n\t\tlet vertexShader = parameters.vertexShader;\n\t\tlet fragmentShader = parameters.fragmentShader;\n\t\tconst shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\n\t\tconst envMapTypeDefine = generateEnvMapTypeDefine(parameters);\n\t\tconst envMapModeDefine = generateEnvMapModeDefine(parameters);\n\t\tconst envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\n\t\tconst gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n\t\tconst customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);\n\t\tconst customDefines = generateDefines(defines);\n\t\tconst program = gl.createProgram();\n\t\tlet prefixVertex, prefixFragment;\n\t\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\t\tif (parameters.isRawShaderMaterial) {\n\t\t\tprefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixVertex.length > 0) {\n\t\t\t\tprefixVertex += '\\n';\n\t\t\t}\n\n\t\t\tprefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixFragment.length > 0) {\n\t\t\t\tprefixFragment += '\\n';\n\t\t\t}\n\t\t} else {\n\t\t\tprefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '\tattribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '\tattribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '\tattribute vec4 tangent;', '#endif', '#if defined( USE_COLOR_ALPHA )', '\tattribute vec4 color;', '#elif defined( USE_COLOR )', '\tattribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t\tprefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + (parameters.alphaTest % 1 ? '' : '.0') : '', // add '.0' if integer\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\tparameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '', getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t}\n\n\t\tvertexShader = resolveIncludes(vertexShader);\n\t\tvertexShader = replaceLightNums(vertexShader, parameters);\n\t\tvertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n\t\tfragmentShader = resolveIncludes(fragmentShader);\n\t\tfragmentShader = replaceLightNums(fragmentShader, parameters);\n\t\tfragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n\t\tvertexShader = unrollLoops(vertexShader);\n\t\tfragmentShader = unrollLoops(fragmentShader);\n\n\t\tif (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {\n\t\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\t\t\tversionString = '#version 300 es\\n';\n\t\t\tprefixVertex = ['#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') + '\\n' + prefixVertex;\n\t\t\tprefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\\n') + '\\n' + prefixFragment;\n\t\t}\n\n\t\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\t\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tconst glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);\n\t\tconst glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);\n\t\tgl.attachShader(program, glVertexShader);\n\t\tgl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n\t\tif (parameters.index0AttributeName !== undefined) {\n\t\t\tgl.bindAttribLocation(program, 0, parameters.index0AttributeName);\n\t\t} else if (parameters.morphTargets === true) {\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation(program, 0, 'position');\n\t\t}\n\n\t\tgl.linkProgram(program); // check for link errors\n\n\t\tif (renderer.debug.checkShaderErrors) {\n\t\t\tconst programLog = gl.getProgramInfoLog(program).trim();\n\t\t\tconst vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n\t\t\tconst fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n\t\t\tlet runnable = true;\n\t\t\tlet haveDiagnostics = true;\n\n\t\t\tif (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n\t\t\t\trunnable = false;\n\t\t\t\tconst vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\n\t\t\t\tconst fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\n\t\t\t\tconsole.error('THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors);\n\t\t\t} else if (programLog !== '') {\n\t\t\t\tconsole.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);\n\t\t\t} else if (vertexLog === '' || fragmentLog === '') {\n\t\t\t\thaveDiagnostics = false;\n\t\t\t}\n\n\t\t\tif (haveDiagnostics) {\n\t\t\t\tthis.diagnostics = {\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tprogramLog: programLog,\n\t\t\t\t\tvertexShader: {\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\t\t\t\t\t},\n\t\t\t\t\tfragmentShader: {\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} // Clean up\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\n\t\tgl.deleteShader(glVertexShader);\n\t\tgl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n\t\tlet cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\t\t\tif (cachedUniforms === undefined) {\n\t\t\t\tcachedUniforms = new WebGLUniforms(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\t\t}; // set up caching for attribute locations\n\n\n\t\tlet cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\t\t\tif (cachedAttributes === undefined) {\n\t\t\t\tcachedAttributes = fetchAttributeLocations(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\t\t}; // free resource\n\n\n\t\tthis.destroy = function () {\n\t\t\tbindingStates.releaseStatesOfProgram(this);\n\t\t\tgl.deleteProgram(program);\n\t\t\tthis.program = undefined;\n\t\t}; //\n\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\treturn this;\n\t}\n\n\tfunction WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {\n\t\tconst programs = [];\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tconst floatVertexTextures = capabilities.floatVertexTextures;\n\t\tconst maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tconst vertexTextures = capabilities.vertexTextures;\n\t\tlet precision = capabilities.precision;\n\t\tconst shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\t\tconst parameterNames = ['precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor', 'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV', 'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap', 'objectSpaceNormalMap', 'tangentSpaceNormalMap', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap', 'displacementMap', 'specularMap', 'roughnessMap', 'metalnessMap', 'gradientMap', 'alphaMap', 'combine', 'vertexColors', 'vertexAlphas', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2', 'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning', 'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'premultipliedAlpha', 'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights', 'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows', 'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights', 'alphaTest', 'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'sheen', 'transmission', 'transmissionMap', 'thicknessMap'];\n\n\t\tfunction getMaxBones(object) {\n\t\t\tconst skeleton = object.skeleton;\n\t\t\tconst bones = skeleton.bones;\n\n\t\t\tif (floatVertexTextures) {\n\t\t\t\treturn 1024;\n\t\t\t} else {\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//\t- leave some extra space for other uniforms\n\t\t\t\t//\t- limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//\t\t(up to 54 should be safe)\n\t\t\t\tconst nVertexUniforms = maxVertexUniforms;\n\t\t\t\tconst nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n\t\t\t\tconst maxBones = Math.min(nVertexMatrices, bones.length);\n\n\t\t\t\tif (maxBones < bones.length) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\t\t\t}\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap(map) {\n\t\t\tlet encoding;\n\n\t\t\tif (map && map.isTexture) {\n\t\t\t\tencoding = map.encoding;\n\t\t\t} else if (map && map.isWebGLRenderTarget) {\n\t\t\t\tconsole.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\tencoding = map.texture.encoding;\n\t\t\t} else {\n\t\t\t\tencoding = LinearEncoding;\n\t\t\t}\n\n\t\t\treturn encoding;\n\t\t}\n\n\t\tfunction getParameters(material, lights, shadows, scene, object) {\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst envMap = cubemaps.get(material.envMap || environment);\n\t\t\tconst shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tconst maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n\t\t\tif (material.precision !== null) {\n\t\t\t\tprecision = capabilities.getMaxPrecision(material.precision);\n\n\t\t\t\tif (precision !== material.precision) {\n\t\t\t\t\tconsole.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet vertexShader, fragmentShader;\n\n\t\t\tif (shaderID) {\n\t\t\t\tconst shader = ShaderLib[shaderID];\n\t\t\t\tvertexShader = shader.vertexShader;\n\t\t\t\tfragmentShader = shader.fragmentShader;\n\t\t\t} else {\n\t\t\t\tvertexShader = material.vertexShader;\n\t\t\t\tfragmentShader = material.fragmentShader;\n\t\t\t}\n\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\tconst parameters = {\n\t\t\t\tisWebGL2: isWebGL2,\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: material.type,\n\t\t\t\tvertexShader: vertexShader,\n\t\t\t\tfragmentShader: fragmentShader,\n\t\t\t\tdefines: material.defines,\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\t\tglslVersion: material.glslVersion,\n\t\t\t\tprecision: precision,\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n\t\t\t\tmap: !!material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap(material.map),\n\t\t\t\tmatcap: !!material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap(material.matcap),\n\t\t\t\tenvMap: !!envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap(envMap),\n\t\t\t\tenvMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n\t\t\t\tlightMap: !!material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n\t\t\t\taoMap: !!material.aoMap,\n\t\t\t\temissiveMap: !!material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n\t\t\t\tbumpMap: !!material.bumpMap,\n\t\t\t\tnormalMap: !!material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !!material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !!material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !!material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !!material.displacementMap,\n\t\t\t\troughnessMap: !!material.roughnessMap,\n\t\t\t\tmetalnessMap: !!material.metalnessMap,\n\t\t\t\tspecularMap: !!material.specularMap,\n\t\t\t\talphaMap: !!material.alphaMap,\n\t\t\t\tgradientMap: !!material.gradientMap,\n\t\t\t\tsheen: !!material.sheen,\n\t\t\t\ttransmission: !!material.transmission,\n\t\t\t\ttransmissionMap: !!material.transmissionMap,\n\t\t\t\tthicknessMap: !!material.thicknessMap,\n\t\t\t\tcombine: material.combine,\n\t\t\t\tvertexTangents: material.normalMap && material.vertexTangents,\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexAlphas: material.vertexColors === true && object.geometry && object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,\n\t\t\t\tvertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmission || !!material.transmissionMap || !!material.thicknessMap,\n\t\t\t\tuvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmission || !!material.transmissionMap || !!material.thicknessMap) && !!material.displacementMap,\n\t\t\t\tfog: !!fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: fog && fog.isFogExp2,\n\t\t\t\tflatShading: !!material.flatShading,\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\t\tskinning: object.isSkinnedMesh === true && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\t\tnumClipIntersection: clipping.numIntersection,\n\t\t\t\tdithering: material.dithering,\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\t\t\t\tdepthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\t\t\t};\n\t\t\treturn parameters;\n\t\t}\n\n\t\tfunction getProgramCacheKey(parameters) {\n\t\t\tconst array = [];\n\n\t\t\tif (parameters.shaderID) {\n\t\t\t\tarray.push(parameters.shaderID);\n\t\t\t} else {\n\t\t\t\tarray.push(parameters.fragmentShader);\n\t\t\t\tarray.push(parameters.vertexShader);\n\t\t\t}\n\n\t\t\tif (parameters.defines !== undefined) {\n\t\t\t\tfor (const name in parameters.defines) {\n\t\t\t\t\tarray.push(name);\n\t\t\t\t\tarray.push(parameters.defines[name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parameters.isRawShaderMaterial === false) {\n\t\t\t\tfor (let i = 0; i < parameterNames.length; i++) {\n\t\t\t\t\tarray.push(parameters[parameterNames[i]]);\n\t\t\t\t}\n\n\t\t\t\tarray.push(renderer.outputEncoding);\n\t\t\t\tarray.push(renderer.gammaFactor);\n\t\t\t}\n\n\t\t\tarray.push(parameters.customProgramCacheKey);\n\t\t\treturn array.join();\n\t\t}\n\n\t\tfunction getUniforms(material) {\n\t\t\tconst shaderID = shaderIDs[material.type];\n\t\t\tlet uniforms;\n\n\t\t\tif (shaderID) {\n\t\t\t\tconst shader = ShaderLib[shaderID];\n\t\t\t\tuniforms = UniformsUtils.clone(shader.uniforms);\n\t\t\t} else {\n\t\t\t\tuniforms = material.uniforms;\n\t\t\t}\n\n\t\t\treturn uniforms;\n\t\t}\n\n\t\tfunction acquireProgram(parameters, cacheKey) {\n\t\t\tlet program; // Check if code has been already compiled\n\n\t\t\tfor (let p = 0, pl = programs.length; p < pl; p++) {\n\t\t\t\tconst preexistingProgram = programs[p];\n\n\t\t\t\tif (preexistingProgram.cacheKey === cacheKey) {\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++program.usedTimes;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (program === undefined) {\n\t\t\t\tprogram = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n\t\t\t\tprograms.push(program);\n\t\t\t}\n\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction releaseProgram(program) {\n\t\t\tif (--program.usedTimes === 0) {\n\t\t\t\t// Remove from unordered set\n\t\t\t\tconst i = programs.indexOf(program);\n\t\t\t\tprograms[i] = programs[programs.length - 1];\n\t\t\t\tprograms.pop(); // Free WebGL resources\n\n\t\t\t\tprogram.destroy();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tgetUniforms: getUniforms,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\t}\n\n\tfunction WebGLProperties() {\n\t\tlet properties = new WeakMap();\n\n\t\tfunction get(object) {\n\t\t\tlet map = properties.get(object);\n\n\t\t\tif (map === undefined) {\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set(object, map);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}\n\n\t\tfunction remove(object) {\n\t\t\tproperties.delete(object);\n\t\t}\n\n\t\tfunction update(object, key, value) {\n\t\t\tproperties.get(object)[key] = value;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tproperties = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction painterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.program !== b.program) {\n\t\t\treturn a.program.id - b.program.id;\n\t\t} else if (a.material.id !== b.material.id) {\n\t\t\treturn a.material.id - b.material.id;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn a.z - b.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction reversePainterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn b.z - a.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction WebGLRenderList(properties) {\n\t\tconst renderItems = [];\n\t\tlet renderItemsIndex = 0;\n\t\tconst opaque = [];\n\t\tconst transmissive = [];\n\t\tconst transparent = [];\n\t\tconst defaultProgram = {\n\t\t\tid: -1\n\t\t};\n\n\t\tfunction init() {\n\t\t\trenderItemsIndex = 0;\n\t\t\topaque.length = 0;\n\t\t\ttransmissive.length = 0;\n\t\t\ttransparent.length = 0;\n\t\t}\n\n\t\tfunction getNextRenderItem(object, geometry, material, groupOrder, z, group) {\n\t\t\tlet renderItem = renderItems[renderItemsIndex];\n\t\t\tconst materialProperties = properties.get(material);\n\n\t\t\tif (renderItem === undefined) {\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\t\t\t\trenderItems[renderItemsIndex] = renderItem;\n\t\t\t} else {\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\t\t\t}\n\n\t\t\trenderItemsIndex++;\n\t\t\treturn renderItem;\n\t\t}\n\n\t\tfunction push(object, geometry, material, groupOrder, z, group) {\n\t\t\tconst renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\ttransmissive.push(renderItem);\n\t\t\t} else if (material.transparent === true) {\n\t\t\t\ttransparent.push(renderItem);\n\t\t\t} else {\n\t\t\t\topaque.push(renderItem);\n\t\t\t}\n\t\t}\n\n\t\tfunction unshift(object, geometry, material, groupOrder, z, group) {\n\t\t\tconst renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\ttransmissive.unshift(renderItem);\n\t\t\t} else if (material.transparent === true) {\n\t\t\t\ttransparent.unshift(renderItem);\n\t\t\t} else {\n\t\t\t\topaque.unshift(renderItem);\n\t\t\t}\n\t\t}\n\n\t\tfunction sort(customOpaqueSort, customTransparentSort) {\n\t\t\tif (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\n\t\t\tif (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);\n\t\t\tif (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);\n\t\t}\n\n\t\tfunction finish() {\n\t\t\t// Clear references from inactive renderItems in the list\n\t\t\tfor (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {\n\t\t\t\tconst renderItem = renderItems[i];\n\t\t\t\tif (renderItem.id === null) break;\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransmissive: transmissive,\n\t\t\ttransparent: transparent,\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\t\t\tsort: sort\n\t\t};\n\t}\n\n\tfunction WebGLRenderLists(properties) {\n\t\tlet lists = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth) {\n\t\t\tlet list;\n\n\t\t\tif (lists.has(scene) === false) {\n\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\tlists.set(scene, [list]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= lists.get(scene).length) {\n\t\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\t\tlists.get(scene).push(list);\n\t\t\t\t} else {\n\t\t\t\t\tlist = lists.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tlists = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction UniformsCache() {\n\t\tconst lights = {};\n\t\treturn {\n\t\t\tget: function (light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tlet uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction ShadowUniformsCache() {\n\t\tconst lights = {};\n\t\treturn {\n\t\t\tget: function (light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tlet uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tlet nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst(lightA, lightB) {\n\t\treturn (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n\t}\n\n\tfunction WebGLLights(extensions, capabilities) {\n\t\tconst cache = new UniformsCache();\n\t\tconst shadowCache = ShadowUniformsCache();\n\t\tconst state = {\n\t\t\tversion: 0,\n\t\t\thash: {\n\t\t\t\tdirectionalLength: -1,\n\t\t\t\tpointLength: -1,\n\t\t\t\tspotLength: -1,\n\t\t\t\trectAreaLength: -1,\n\t\t\t\themiLength: -1,\n\t\t\t\tnumDirectionalShadows: -1,\n\t\t\t\tnumPointShadows: -1,\n\t\t\t\tnumSpotShadows: -1\n\t\t\t},\n\t\t\tambient: [0, 0, 0],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\trectAreaLTC1: null,\n\t\t\trectAreaLTC2: null,\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\t\t};\n\n\t\tfor (let i = 0; i < 9; i++) state.probe.push(new Vector3());\n\n\t\tconst vector3 = new Vector3();\n\t\tconst matrix4 = new Matrix4();\n\t\tconst matrix42 = new Matrix4();\n\n\t\tfunction setup(lights) {\n\t\t\tlet r = 0,\n\t\t\t\t\tg = 0,\n\t\t\t\t\tb = 0;\n\n\t\t\tfor (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);\n\n\t\t\tlet directionalLength = 0;\n\t\t\tlet pointLength = 0;\n\t\t\tlet spotLength = 0;\n\t\t\tlet rectAreaLength = 0;\n\t\t\tlet hemiLength = 0;\n\t\t\tlet numDirectionalShadows = 0;\n\t\t\tlet numPointShadows = 0;\n\t\t\tlet numSpotShadows = 0;\n\t\t\tlights.sort(shadowCastingLightsFirst);\n\n\t\t\tfor (let i = 0, l = lights.length; i < l; i++) {\n\t\t\t\tconst light = lights[i];\n\t\t\t\tconst color = light.color;\n\t\t\t\tconst intensity = light.intensity;\n\t\t\t\tconst distance = light.distance;\n\t\t\t\tconst shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n\t\t\t\tif (light.isAmbientLight) {\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\t\t\t\t} else if (light.isLightProbe) {\n\t\t\t\t\tfor (let j = 0; j < 9; j++) {\n\t\t\t\t\t\tstate.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n\t\t\t\t\t}\n\t\t\t\t} else if (light.isDirectionalLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.directionalShadow[directionalLength] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[directionalLength] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumDirectionalShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[directionalLength] = uniforms;\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.color.copy(color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.distance = distance;\n\t\t\t\t\tuniforms.coneCos = Math.cos(light.angle);\n\t\t\t\t\tuniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.spotShadow[spotLength] = shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[spotLength] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[spotLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumSpotShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[spotLength] = uniforms;\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tconst uniforms = cache.get(light); // (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\n\t\t\t\t\tuniforms.color.copy(color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\t\t\t\t\tuniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\t\t\t\t\tstate.rectArea[rectAreaLength] = uniforms;\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\t\t\t\t\t\tstate.pointShadow[pointLength] = shadowUniforms;\n\t\t\t\t\t\tstate.pointShadowMap[pointLength] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[pointLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumPointShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[pointLength] = uniforms;\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.skyColor.copy(light.color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n\t\t\t\t\tstate.hemi[hemiLength] = uniforms;\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rectAreaLength > 0) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t// WebGL 2\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t} else {\n\t\t\t\t\t// WebGL 1\n\t\t\t\t\tif (extensions.has('OES_texture_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t\t} else if (extensions.has('OES_texture_half_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.ambient[0] = r;\n\t\t\tstate.ambient[1] = g;\n\t\t\tstate.ambient[2] = b;\n\t\t\tconst hash = state.hash;\n\n\t\t\tif (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\t\tstate.version = nextVersion++;\n\t\t\t}\n\t\t}\n\n\t\tfunction setupView(lights, camera) {\n\t\t\tlet directionalLength = 0;\n\t\t\tlet pointLength = 0;\n\t\t\tlet spotLength = 0;\n\t\t\tlet rectAreaLength = 0;\n\t\t\tlet hemiLength = 0;\n\t\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tfor (let i = 0, l = lights.length; i < l; i++) {\n\t\t\t\tconst light = lights[i];\n\n\t\t\t\tif (light.isDirectionalLight) {\n\t\t\t\t\tconst uniforms = state.directional[directionalLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tconst uniforms = state.spot[spotLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix);\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tconst uniforms = state.rectArea[rectAreaLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy(light.matrixWorld);\n\t\t\t\t\tmatrix4.premultiply(viewMatrix);\n\t\t\t\t\tmatrix42.extractRotation(matrix4);\n\t\t\t\t\tuniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\t\t\t\t\tuniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4(matrix42);\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4(matrix42);\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tconst uniforms = state.point[pointLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix);\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tconst uniforms = state.hemi[hemiLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tuniforms.direction.normalize();\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tsetupView: setupView,\n\t\t\tstate: state\n\t\t};\n\t}\n\n\tfunction WebGLRenderState(extensions, capabilities) {\n\t\tconst lights = new WebGLLights(extensions, capabilities);\n\t\tconst lightsArray = [];\n\t\tconst shadowsArray = [];\n\n\t\tfunction init() {\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\t\t}\n\n\t\tfunction pushLight(light) {\n\t\t\tlightsArray.push(light);\n\t\t}\n\n\t\tfunction pushShadow(shadowLight) {\n\t\t\tshadowsArray.push(shadowLight);\n\t\t}\n\n\t\tfunction setupLights() {\n\t\t\tlights.setup(lightsArray);\n\t\t}\n\n\t\tfunction setupLightsView(camera) {\n\t\t\tlights.setupView(lightsArray, camera);\n\t\t}\n\n\t\tconst state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\t\t\tlights: lights\n\t\t};\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\t\t\tsetupLightsView: setupLightsView,\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\t}\n\n\tfunction WebGLRenderStates(extensions, capabilities) {\n\t\tlet renderStates = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth = 0) {\n\t\t\tlet renderState;\n\n\t\t\tif (renderStates.has(scene) === false) {\n\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\trenderStates.set(scene, [renderState]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= renderStates.get(scene).length) {\n\t\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\t\trenderStates.get(scene).push(renderState);\n\t\t\t\t} else {\n\t\t\t\t\trenderState = renderStates.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn renderState;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\trenderStates = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\t/**\n\t * parameters = {\n\t *\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t * }\n\t */\n\n\tclass MeshDepthMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshDepthMaterial';\n\t\t\tthis.depthPacking = BasicDepthPacking;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.depthPacking = source.depthPacking;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\n\t *\treferencePosition: <float>,\n\t *\tnearDistance: <float>,\n\t *\tfarDistance: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tclass MeshDistanceMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshDistanceMaterial';\n\t\t\tthis.referencePosition = new Vector3();\n\t\t\tthis.nearDistance = 1;\n\t\t\tthis.farDistance = 1000;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.fog = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.referencePosition.copy(source.referencePosition);\n\t\t\tthis.nearDistance = source.nearDistance;\n\t\t\tthis.farDistance = source.farDistance;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\\n\\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean * HALF_SAMPLE_RATE;\\n\\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\tfunction WebGLShadowMap(_renderer, _objects, _capabilities) {\n\t\tlet _frustum = new Frustum();\n\n\t\tconst _shadowMapSize = new Vector2(),\n\t\t\t\t\t_viewportSize = new Vector2(),\n\t\t\t\t\t_viewport = new Vector4(),\n\t\t\t\t\t_depthMaterials = [],\n\t\t\t\t\t_distanceMaterials = [],\n\t\t\t\t\t_materialCache = {},\n\t\t\t\t\t_maxTextureSize = _capabilities.maxTextureSize;\n\n\t\tconst shadowSide = {\n\t\t\t0: BackSide,\n\t\t\t1: FrontSide,\n\t\t\t2: DoubleSide\n\t\t};\n\t\tconst shadowMaterialVertical = new ShaderMaterial({\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\tresolution: {\n\t\t\t\t\tvalue: new Vector2()\n\t\t\t\t},\n\t\t\t\tradius: {\n\t\t\t\t\tvalue: 4.0\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: vsm_vert,\n\t\t\tfragmentShader: vsm_frag\n\t\t});\n\t\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\t\tconst fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));\n\t\tconst fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\n\t\tconst scope = this;\n\t\tthis.enabled = false;\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function (lights, scene, camera) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (scope.autoUpdate === false && scope.needsUpdate === false) return;\n\t\t\tif (lights.length === 0) return;\n\n\t\t\tconst currentRenderTarget = _renderer.getRenderTarget();\n\n\t\t\tconst activeCubeFace = _renderer.getActiveCubeFace();\n\n\t\t\tconst activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tconst _state = _renderer.state; // Set GL state for depth map.\n\n\t\t\t_state.setBlending(NoBlending);\n\n\t\t\t_state.buffers.color.setClear(1, 1, 1, 1);\n\n\t\t\t_state.buffers.depth.setTest(true);\n\n\t\t\t_state.setScissorTest(false); // render depth map\n\n\n\t\t\tfor (let i = 0, il = lights.length; i < il; i++) {\n\t\t\t\tconst light = lights[i];\n\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\tif (shadow === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\n\n\t\t\t\t_shadowMapSize.copy(shadow.mapSize);\n\n\t\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply(shadowFrameExtents);\n\n\t\t\t\t_viewportSize.copy(shadow.mapSize);\n\n\t\t\t\tif (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {\n\t\t\t\t\tif (_shadowMapSize.x > _maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_shadowMapSize.y > _maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tconst pars = {\n\t\t\t\t\t\tminFilter: LinearFilter,\n\t\t\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null) {\n\t\t\t\t\tconst pars = {\n\t\t\t\t\t\tminFilter: NearestFilter,\n\t\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor (let vp = 0; vp < viewportCount; vp++) {\n\t\t\t\t\tconst viewport = shadow.getViewport(vp);\n\n\t\t\t\t\t_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);\n\n\t\t\t\t\t_state.viewport(_viewport);\n\n\t\t\t\t\tshadow.updateMatrices(light, vp);\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\t\t\t\t\trenderObject(scene, camera, shadow.camera, light, this.type);\n\t\t\t\t} // do blur pass for VSM\n\n\n\t\t\t\tif (!shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tVSMPass(shadow, camera);\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\n\t\t};\n\n\t\tfunction VSMPass(shadow, camera) {\n\t\t\tconst geometry = _objects.update(fullScreenMesh); // vertical pass\n\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.mapPass);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass\n\n\n\t\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);\n\t\t}\n\n\t\tfunction getDepthMaterialVariant(useMorphing) {\n\t\t\tconst index = useMorphing << 0;\n\t\t\tlet material = _depthMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDepthMaterial({\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\t\t\t\t\tmorphTargets: useMorphing\n\t\t\t\t});\n\t\t\t\t_depthMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant(useMorphing) {\n\t\t\tconst index = useMorphing << 0;\n\t\t\tlet material = _distanceMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDistanceMaterial({\n\t\t\t\t\tmorphTargets: useMorphing\n\t\t\t\t});\n\t\t\t\t_distanceMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {\n\t\t\tlet result = null;\n\t\t\tlet getMaterialVariant = getDepthMaterialVariant;\n\t\t\tlet customMaterial = object.customDepthMaterial;\n\n\t\t\tif (light.isPointLight === true) {\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\t\t}\n\n\t\t\tif (customMaterial === undefined) {\n\t\t\t\tlet useMorphing = false;\n\n\t\t\t\tif (material.morphTargets === true) {\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\t\t\t}\n\n\t\t\t\tresult = getMaterialVariant(useMorphing);\n\t\t\t} else {\n\t\t\t\tresult = customMaterial;\n\t\t\t}\n\n\t\t\tif (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\t\t\t\tconst keyA = result.uuid,\n\t\t\t\t\t\t\tkeyB = material.uuid;\n\t\t\t\tlet materialsForVariant = _materialCache[keyA];\n\n\t\t\t\tif (materialsForVariant === undefined) {\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[keyA] = materialsForVariant;\n\t\t\t\t}\n\n\t\t\t\tlet cachedMaterial = materialsForVariant[keyB];\n\n\t\t\t\tif (cachedMaterial === undefined) {\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[keyB] = cachedMaterial;\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif (type === VSMShadowMap) {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : material.side;\n\t\t\t} else {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\n\t\t\t\tresult.referencePosition.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction renderObject(object, camera, shadowCamera, light, type) {\n\t\t\tif (object.visible === false) return;\n\t\t\tconst visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible && (object.isMesh || object.isLine || object.isPoints)) {\n\t\t\t\tif ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n\t\t\t\t\tconst geometry = _objects.update(object);\n\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor (let k = 0, kl = groups.length; k < kl; k++) {\n\t\t\t\t\t\t\tconst group = groups[k];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\tconst depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\trenderObject(children[i], camera, shadowCamera, light, type);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction WebGLState(gl, extensions, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\t\t\tlet locked = false;\n\t\t\tconst color = new Vector4();\n\t\t\tlet currentColorMask = null;\n\t\t\tconst currentColorClear = new Vector4(0, 0, 0, 0);\n\t\t\treturn {\n\t\t\t\tsetMask: function (colorMask) {\n\t\t\t\t\tif (currentColorMask !== colorMask && !locked) {\n\t\t\t\t\t\tgl.colorMask(colorMask, colorMask, colorMask, colorMask);\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (r, g, b, a, premultipliedAlpha) {\n\t\t\t\t\tif (premultipliedAlpha === true) {\n\t\t\t\t\t\tr *= a;\n\t\t\t\t\t\tg *= a;\n\t\t\t\t\t\tb *= a;\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set(r, g, b, a);\n\n\t\t\t\t\tif (currentColorClear.equals(color) === false) {\n\t\t\t\t\t\tgl.clearColor(r, g, b, a);\n\t\t\t\t\t\tcurrentColorClear.copy(color);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set(-1, 0, 0, 0); // set to invalid state\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\t\t\tlet locked = false;\n\t\t\tlet currentDepthMask = null;\n\t\t\tlet currentDepthFunc = null;\n\t\t\tlet currentDepthClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function (depthTest) {\n\t\t\t\t\tif (depthTest) {\n\t\t\t\t\t\tenable(gl.DEPTH_TEST);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdisable(gl.DEPTH_TEST);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function (depthMask) {\n\t\t\t\t\tif (currentDepthMask !== depthMask && !locked) {\n\t\t\t\t\t\tgl.depthMask(depthMask);\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function (depthFunc) {\n\t\t\t\t\tif (currentDepthFunc !== depthFunc) {\n\t\t\t\t\t\tif (depthFunc) {\n\t\t\t\t\t\t\tswitch (depthFunc) {\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.NEVER);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.ALWAYS);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LESS);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.EQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.GEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.GREATER);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.NOTEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (depth) {\n\t\t\t\t\tif (currentDepthClear !== depth) {\n\t\t\t\t\t\tgl.clearDepth(depth);\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\t\t\tlet locked = false;\n\t\t\tlet currentStencilMask = null;\n\t\t\tlet currentStencilFunc = null;\n\t\t\tlet currentStencilRef = null;\n\t\t\tlet currentStencilFuncMask = null;\n\t\t\tlet currentStencilFail = null;\n\t\t\tlet currentStencilZFail = null;\n\t\t\tlet currentStencilZPass = null;\n\t\t\tlet currentStencilClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function (stencilTest) {\n\t\t\t\t\tif (!locked) {\n\t\t\t\t\t\tif (stencilTest) {\n\t\t\t\t\t\t\tenable(gl.STENCIL_TEST);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisable(gl.STENCIL_TEST);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function (stencilMask) {\n\t\t\t\t\tif (currentStencilMask !== stencilMask && !locked) {\n\t\t\t\t\t\tgl.stencilMask(stencilMask);\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function (stencilFunc, stencilRef, stencilMask) {\n\t\t\t\t\tif (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n\t\t\t\t\t\tgl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetOp: function (stencilFail, stencilZFail, stencilZPass) {\n\t\t\t\t\tif (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n\t\t\t\t\t\tgl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (stencil) {\n\t\t\t\t\tif (currentStencilClear !== stencil) {\n\t\t\t\t\t\tgl.clearStencil(stencil);\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t} //\n\n\n\t\tconst colorBuffer = new ColorBuffer();\n\t\tconst depthBuffer = new DepthBuffer();\n\t\tconst stencilBuffer = new StencilBuffer();\n\t\tlet enabledCapabilities = {};\n\t\tlet xrFramebuffer = null;\n\t\tlet currentBoundFramebuffers = {};\n\t\tlet currentProgram = null;\n\t\tlet currentBlendingEnabled = false;\n\t\tlet currentBlending = null;\n\t\tlet currentBlendEquation = null;\n\t\tlet currentBlendSrc = null;\n\t\tlet currentBlendDst = null;\n\t\tlet currentBlendEquationAlpha = null;\n\t\tlet currentBlendSrcAlpha = null;\n\t\tlet currentBlendDstAlpha = null;\n\t\tlet currentPremultipledAlpha = false;\n\t\tlet currentFlipSided = null;\n\t\tlet currentCullFace = null;\n\t\tlet currentLineWidth = null;\n\t\tlet currentPolygonOffsetFactor = null;\n\t\tlet currentPolygonOffsetUnits = null;\n\t\tconst maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n\t\tlet lineWidthAvailable = false;\n\t\tlet version = 0;\n\t\tconst glVersion = gl.getParameter(gl.VERSION);\n\n\t\tif (glVersion.indexOf('WebGL') !== -1) {\n\t\t\tversion = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 1.0;\n\t\t} else if (glVersion.indexOf('OpenGL ES') !== -1) {\n\t\t\tversion = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 2.0;\n\t\t}\n\n\t\tlet currentTextureSlot = null;\n\t\tlet currentBoundTextures = {};\n\t\tconst scissorParam = gl.getParameter(gl.SCISSOR_BOX);\n\t\tconst viewportParam = gl.getParameter(gl.VIEWPORT);\n\t\tconst currentScissor = new Vector4().fromArray(scissorParam);\n\t\tconst currentViewport = new Vector4().fromArray(viewportParam);\n\n\t\tfunction createTexture(type, target, count) {\n\t\t\tconst data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n\t\t\tconst texture = gl.createTexture();\n\t\t\tgl.bindTexture(type, texture);\n\t\t\tgl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\tgl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tgl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tconst emptyTextures = {};\n\t\temptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);\n\t\temptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); // init\n\n\t\tcolorBuffer.setClear(0, 0, 0, 1);\n\t\tdepthBuffer.setClear(1);\n\t\tstencilBuffer.setClear(0);\n\t\tenable(gl.DEPTH_TEST);\n\t\tdepthBuffer.setFunc(LessEqualDepth);\n\t\tsetFlipSided(false);\n\t\tsetCullFace(CullFaceBack);\n\t\tenable(gl.CULL_FACE);\n\t\tsetBlending(NoBlending); //\n\n\t\tfunction enable(id) {\n\t\t\tif (enabledCapabilities[id] !== true) {\n\t\t\t\tgl.enable(id);\n\t\t\t\tenabledCapabilities[id] = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction disable(id) {\n\t\t\tif (enabledCapabilities[id] !== false) {\n\t\t\t\tgl.disable(id);\n\t\t\t\tenabledCapabilities[id] = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindXRFramebuffer(framebuffer) {\n\t\t\tif (framebuffer !== xrFramebuffer) {\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\t\t\t\txrFramebuffer = framebuffer;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindFramebuffer(target, framebuffer) {\n\t\t\tif (framebuffer === null && xrFramebuffer !== null) framebuffer = xrFramebuffer; // use active XR framebuffer if available\n\n\t\t\tif (currentBoundFramebuffers[target] !== framebuffer) {\n\t\t\t\tgl.bindFramebuffer(target, framebuffer);\n\t\t\t\tcurrentBoundFramebuffers[target] = framebuffer;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\n\t\t\t\t\tif (target === gl.DRAW_FRAMEBUFFER) {\n\t\t\t\t\t\tcurrentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (target === gl.FRAMEBUFFER) {\n\t\t\t\t\t\tcurrentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction useProgram(program) {\n\t\t\tif (currentProgram !== program) {\n\t\t\t\tgl.useProgram(program);\n\t\t\t\tcurrentProgram = program;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tconst equationToGL = {\n\t\t\t[AddEquation]: gl.FUNC_ADD,\n\t\t\t[SubtractEquation]: gl.FUNC_SUBTRACT,\n\t\t\t[ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT\n\t\t};\n\n\t\tif (isWebGL2) {\n\t\t\tequationToGL[MinEquation] = gl.MIN;\n\t\t\tequationToGL[MaxEquation] = gl.MAX;\n\t\t} else {\n\t\t\tconst extension = extensions.get('EXT_blend_minmax');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tequationToGL[MinEquation] = extension.MIN_EXT;\n\t\t\t\tequationToGL[MaxEquation] = extension.MAX_EXT;\n\t\t\t}\n\t\t}\n\n\t\tconst factorToGL = {\n\t\t\t[ZeroFactor]: gl.ZERO,\n\t\t\t[OneFactor]: gl.ONE,\n\t\t\t[SrcColorFactor]: gl.SRC_COLOR,\n\t\t\t[SrcAlphaFactor]: gl.SRC_ALPHA,\n\t\t\t[SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,\n\t\t\t[DstColorFactor]: gl.DST_COLOR,\n\t\t\t[DstAlphaFactor]: gl.DST_ALPHA,\n\t\t\t[OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,\n\t\t\t[OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,\n\t\t\t[OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,\n\t\t\t[OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA\n\t\t};\n\n\t\tfunction setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n\t\t\tif (blending === NoBlending) {\n\t\t\t\tif (currentBlendingEnabled === true) {\n\t\t\t\t\tdisable(gl.BLEND);\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentBlendingEnabled === false) {\n\t\t\t\tenable(gl.BLEND);\n\t\t\t\tcurrentBlendingEnabled = true;\n\t\t\t}\n\n\t\t\tif (blending !== CustomBlending) {\n\t\t\t\tif (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n\t\t\t\t\tif (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n\t\t\t\t\t\tgl.blendEquation(gl.FUNC_ADD);\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (premultipliedAlpha) {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ONE, gl.ONE);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t} // custom blending\n\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n\t\t\t\tgl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\t\t}\n\n\t\t\tif (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n\t\t\t\tgl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\t\t}\n\n\t\tfunction setMaterial(material, frontFaceCW) {\n\t\t\tmaterial.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);\n\t\t\tlet flipSided = material.side === BackSide;\n\t\t\tif (frontFaceCW) flipSided = !flipSided;\n\t\t\tsetFlipSided(flipSided);\n\t\t\tmaterial.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n\t\t\tdepthBuffer.setFunc(material.depthFunc);\n\t\t\tdepthBuffer.setTest(material.depthTest);\n\t\t\tdepthBuffer.setMask(material.depthWrite);\n\t\t\tcolorBuffer.setMask(material.colorWrite);\n\t\t\tconst stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest(stencilWrite);\n\n\t\t\tif (stencilWrite) {\n\t\t\t\tstencilBuffer.setMask(material.stencilWriteMask);\n\t\t\t\tstencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n\t\t\t\tstencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n\t\t\t}\n\n\t\t\tsetPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n\t\t\tmaterial.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\t\t} //\n\n\n\t\tfunction setFlipSided(flipSided) {\n\t\t\tif (currentFlipSided !== flipSided) {\n\t\t\t\tif (flipSided) {\n\t\t\t\t\tgl.frontFace(gl.CW);\n\t\t\t\t} else {\n\t\t\t\t\tgl.frontFace(gl.CCW);\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\t\t\t}\n\t\t}\n\n\t\tfunction setCullFace(cullFace) {\n\t\t\tif (cullFace !== CullFaceNone) {\n\t\t\t\tenable(gl.CULL_FACE);\n\n\t\t\t\tif (cullFace !== currentCullFace) {\n\t\t\t\t\tif (cullFace === CullFaceBack) {\n\t\t\t\t\t\tgl.cullFace(gl.BACK);\n\t\t\t\t\t} else if (cullFace === CullFaceFront) {\n\t\t\t\t\t\tgl.cullFace(gl.FRONT);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgl.cullFace(gl.FRONT_AND_BACK);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(gl.CULL_FACE);\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\t\t}\n\n\t\tfunction setLineWidth(width) {\n\t\t\tif (width !== currentLineWidth) {\n\t\t\t\tif (lineWidthAvailable) gl.lineWidth(width);\n\t\t\t\tcurrentLineWidth = width;\n\t\t\t}\n\t\t}\n\n\t\tfunction setPolygonOffset(polygonOffset, factor, units) {\n\t\t\tif (polygonOffset) {\n\t\t\t\tenable(gl.POLYGON_OFFSET_FILL);\n\n\t\t\t\tif (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n\t\t\t\t\tgl.polygonOffset(factor, units);\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(gl.POLYGON_OFFSET_FILL);\n\t\t\t}\n\t\t}\n\n\t\tfunction setScissorTest(scissorTest) {\n\t\t\tif (scissorTest) {\n\t\t\t\tenable(gl.SCISSOR_TEST);\n\t\t\t} else {\n\t\t\t\tdisable(gl.SCISSOR_TEST);\n\t\t\t}\n\t\t} // texture\n\n\n\t\tfunction activeTexture(webglSlot) {\n\t\t\tif (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\tif (currentTextureSlot !== webglSlot) {\n\t\t\t\tgl.activeTexture(webglSlot);\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindTexture(webglType, webglTexture) {\n\t\t\tif (currentTextureSlot === null) {\n\t\t\t\tactiveTexture();\n\t\t\t}\n\n\t\t\tlet boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture === undefined) {\n\t\t\t\tboundTexture = {\n\t\t\t\t\ttype: undefined,\n\t\t\t\t\ttexture: undefined\n\t\t\t\t};\n\t\t\t\tcurrentBoundTextures[currentTextureSlot] = boundTexture;\n\t\t\t}\n\n\t\t\tif (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n\t\t\t\tgl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\t\t\t}\n\t\t}\n\n\t\tfunction unbindTexture() {\n\t\t\tconst boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture !== undefined && boundTexture.type !== undefined) {\n\t\t\t\tgl.bindTexture(boundTexture.type, null);\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\t\t\t}\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.compressedTexImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage3D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage3D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction scissor(scissor) {\n\t\t\tif (currentScissor.equals(scissor) === false) {\n\t\t\t\tgl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n\t\t\t\tcurrentScissor.copy(scissor);\n\t\t\t}\n\t\t}\n\n\t\tfunction viewport(viewport) {\n\t\t\tif (currentViewport.equals(viewport) === false) {\n\t\t\t\tgl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n\t\t\t\tcurrentViewport.copy(viewport);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction reset() {\n\t\t\t// reset state\n\t\t\tgl.disable(gl.BLEND);\n\t\t\tgl.disable(gl.CULL_FACE);\n\t\t\tgl.disable(gl.DEPTH_TEST);\n\t\t\tgl.disable(gl.POLYGON_OFFSET_FILL);\n\t\t\tgl.disable(gl.SCISSOR_TEST);\n\t\t\tgl.disable(gl.STENCIL_TEST);\n\t\t\tgl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\t\t\tgl.blendEquation(gl.FUNC_ADD);\n\t\t\tgl.blendFunc(gl.ONE, gl.ZERO);\n\t\t\tgl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);\n\t\t\tgl.colorMask(true, true, true, true);\n\t\t\tgl.clearColor(0, 0, 0, 0);\n\t\t\tgl.depthMask(true);\n\t\t\tgl.depthFunc(gl.LESS);\n\t\t\tgl.clearDepth(1);\n\t\t\tgl.stencilMask(0xffffffff);\n\t\t\tgl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);\n\t\t\tgl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n\t\t\tgl.clearStencil(0);\n\t\t\tgl.cullFace(gl.BACK);\n\t\t\tgl.frontFace(gl.CCW);\n\t\t\tgl.polygonOffset(0, 0);\n\t\t\tgl.activeTexture(gl.TEXTURE0);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\t\t\tif (isWebGL2 === true) {\n\t\t\t\tgl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n\t\t\t\tgl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n\t\t\t}\n\n\t\t\tgl.useProgram(null);\n\t\t\tgl.lineWidth(1);\n\t\t\tgl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals\n\n\t\t\tenabledCapabilities = {};\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\t\t\txrFramebuffer = null;\n\t\t\tcurrentBoundFramebuffers = {};\n\t\t\tcurrentProgram = null;\n\t\t\tcurrentBlendingEnabled = false;\n\t\t\tcurrentBlending = null;\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\t\t\tcurrentPremultipledAlpha = false;\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\t\t\tcurrentLineWidth = null;\n\t\t\tcurrentPolygonOffsetFactor = null;\n\t\t\tcurrentPolygonOffsetUnits = null;\n\t\t\tcurrentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tcurrentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\t\t}\n\n\t\treturn {\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tbindFramebuffer: bindFramebuffer,\n\t\t\tbindXRFramebuffer: bindXRFramebuffer,\n\t\t\tuseProgram: useProgram,\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\t\t\tsetScissorTest: setScissorTest,\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\t\t\treset: reset\n\t\t};\n\t}\n\n\tfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst maxTextures = capabilities.maxTextures;\n\t\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\t\tconst maxTextureSize = capabilities.maxTextureSize;\n\t\tconst maxSamples = capabilities.maxSamples;\n\n\t\tconst _videoTextures = new WeakMap();\n\n\t\tlet _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n\t\tlet useOffscreenCanvas = false;\n\n\t\ttry {\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n\t\t} catch (err) {// Ignore any errors\n\t\t}\n\n\t\tfunction createCanvas(width, height) {\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\t\t\treturn useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t}\n\n\t\tfunction resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n\t\t\tlet scale = 1; // handle case if texture exceeds max size\n\n\t\t\tif (image.width > maxSize || image.height > maxSize) {\n\t\t\t\tscale = maxSize / Math.max(image.width, image.height);\n\t\t\t} // only perform resize if necessary\n\n\n\t\t\tif (scale < 1 || needsPowerOfTwo === true) {\n\t\t\t\t// only perform resize for certain image types\n\t\t\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t\t\tconst floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n\t\t\t\t\tconst width = floor(scale * image.width);\n\t\t\t\t\tconst height = floor(scale * image.height);\n\t\t\t\t\tif (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n\t\t\t\t\tconst canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t\tconst context = canvas.getContext('2d');\n\t\t\t\t\tcontext.drawImage(image, 0, 0, width, height);\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n\t\t\t\t\treturn canvas;\n\t\t\t\t} else {\n\t\t\t\t\tif ('data' in image) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn image;\n\t\t}\n\n\t\tfunction isPowerOfTwo$1(image) {\n\t\t\treturn isPowerOfTwo(image.width) && isPowerOfTwo(image.height);\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo(texture) {\n\t\t\tif (isWebGL2) return false;\n\t\t\treturn texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps(texture, supportsMips) {\n\t\t\treturn texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction generateMipmap(target, texture, width, height) {\n\t\t\t_gl.generateMipmap(target);\n\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\ttextureProperties.__maxMipLevel = Math.log2(Math.max(width, height));\n\t\t}\n\n\t\tfunction getInternalFormat(internalFormatName, glFormat, glType) {\n\t\t\tif (isWebGL2 === false) return glFormat;\n\n\t\t\tif (internalFormatName !== null) {\n\t\t\t\tif (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n\t\t\t}\n\n\t\t\tlet internalFormat = glFormat;\n\n\t\t\tif (glFormat === _gl.RED) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.R32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\n\t\t\t}\n\n\t\t\tif (glFormat === _gl.RGB) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.RGB32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGB16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8;\n\t\t\t}\n\n\t\t\tif (glFormat === _gl.RGBA) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGBA8;\n\t\t\t}\n\n\t\t\tif (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {\n\t\t\t\textensions.get('EXT_color_buffer_float');\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\t\t} // Fallback filters for non-power-of-2 textures\n\n\n\t\tfunction filterFallback(f) {\n\t\t\tif (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n\t\t\t\treturn _gl.NEAREST;\n\t\t\t}\n\n\t\t\treturn _gl.LINEAR;\n\t\t} //\n\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tdeallocateTexture(texture);\n\n\t\t\tif (texture.isVideoTexture) {\n\t\t\t\t_videoTextures.delete(texture);\n\t\t\t}\n\n\t\t\tinfo.memory.textures--;\n\t\t}\n\n\t\tfunction onRenderTargetDispose(event) {\n\t\t\tconst renderTarget = event.target;\n\t\t\trenderTarget.removeEventListener('dispose', onRenderTargetDispose);\n\t\t\tdeallocateRenderTarget(renderTarget);\n\t\t} //\n\n\n\t\tfunction deallocateTexture(texture) {\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (textureProperties.__webglInit === undefined) return;\n\n\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\tproperties.remove(texture);\n\t\t}\n\n\t\tfunction deallocateRenderTarget(renderTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (!renderTarget) return;\n\n\t\t\tif (textureProperties.__webglTexture !== undefined) {\n\t\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\t\tinfo.memory.textures--;\n\t\t\t}\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\trenderTarget.depthTexture.dispose();\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n\t\t\t\tif (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\tif (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n\t\t\t\tif (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLMultipleRenderTargets) {\n\t\t\t\tfor (let i = 0, il = texture.length; i < il; i++) {\n\t\t\t\t\tconst attachmentProperties = properties.get(texture[i]);\n\n\t\t\t\t\tif (attachmentProperties.__webglTexture) {\n\t\t\t\t\t\t_gl.deleteTexture(attachmentProperties.__webglTexture);\n\n\t\t\t\t\t\tinfo.memory.textures--;\n\t\t\t\t\t}\n\n\t\t\t\t\tproperties.remove(texture[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tproperties.remove(texture);\n\t\t\tproperties.remove(renderTarget);\n\t\t} //\n\n\n\t\tlet textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\t\t\ttextureUnits = 0;\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\t\t\tconst textureUnit = textureUnits;\n\n\t\t\tif (textureUnit >= maxTextures) {\n\t\t\t\tconsole.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\t\t\treturn textureUnit;\n\t\t} //\n\n\n\t\tfunction setTexture2D(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (texture.isVideoTexture) updateVideoTexture(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tconst image = texture.image;\n\n\t\t\t\tif (image === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n\t\t\t\t} else if (image.complete === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n\t\t\t\t} else {\n\t\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture2DArray(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture3D(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTextureCube(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadCubeTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\t\t}\n\n\t\tconst wrappingToGL = {\n\t\t\t[RepeatWrapping]: _gl.REPEAT,\n\t\t\t[ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,\n\t\t\t[MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT\n\t\t};\n\t\tconst filterToGL = {\n\t\t\t[NearestFilter]: _gl.NEAREST,\n\t\t\t[NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,\n\t\t\t[NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,\n\t\t\t[LinearFilter]: _gl.LINEAR,\n\t\t\t[LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,\n\t\t\t[LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR\n\t\t};\n\n\t\tfunction setTextureParameters(textureType, texture, supportsMips) {\n\t\t\tif (supportsMips) {\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n\n\t\t\t\tif (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n\t\t\t} else {\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n\t\t\t\tif (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);\n\t\t\t\t}\n\n\t\t\t\tif (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n\n\t\t\t\tif (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tconst extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tif (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n\n\t\t\t\tif (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only\n\n\t\t\t\tif (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n\t\t\t\t\t_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n\t\t\t\t\tproperties.get(texture).__currentAnisotropy = texture.anisotropy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction initTexture(textureProperties, texture) {\n\t\t\tif (textureProperties.__webglInit === undefined) {\n\t\t\t\ttextureProperties.__webglInit = true;\n\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\t\t}\n\n\t\tfunction uploadTexture(textureProperties, texture, slot) {\n\t\t\tlet textureType = _gl.TEXTURE_2D;\n\t\t\tif (texture.isDataTexture2DArray) textureType = _gl.TEXTURE_2D_ARRAY;\n\t\t\tif (texture.isDataTexture3D) textureType = _gl.TEXTURE_3D;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(textureType, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n\t\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;\n\t\t\tconst image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n\t\t\tconst supportsMips = isPowerOfTwo$1(image) || isWebGL2,\n\t\t\t\t\t\tglFormat = utils.convert(texture.format);\n\t\t\tlet glType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(textureType, texture, supportsMips);\n\t\t\tlet mipmap;\n\t\t\tconst mipmaps = texture.mipmaps;\n\n\t\t\tif (texture.isDepthTexture) {\n\t\t\t\t// populate depth texture with dummy data\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\t\t\t\t} else if (texture.type === UnsignedIntType) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\t\t\t\t\t} else if (texture.type === UnsignedInt248Type) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tconsole.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} // validation checks for WebGL 1\n\n\n\t\t\t\tif (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n\t\t\t\t\tif (texture.type !== UnsignedInt248Type) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n\t\t\t} else if (texture.isDataTexture) {\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t} else if (texture.isCompressedTexture) {\n\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\tmipmap = mipmaps[i];\n\n\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\tstate.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else if (texture.isDataTexture2DArray) {\n\t\t\t\tstate.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else if (texture.isDataTexture3D) {\n\t\t\t\tstate.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else {\n\t\t\t\t// regular Texture (image, video, canvas)\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tgenerateMipmap(textureType, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t}\n\n\t\tfunction uploadCubeTexture(textureProperties, texture, slot) {\n\t\t\tif (texture.image.length !== 6) return;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n\t\t\tconst isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n\t\t\tconst isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n\t\t\tconst cubeImage = [];\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tif (!isCompressed && !isDataTexture) {\n\t\t\t\t\tcubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n\t\t\t\t} else {\n\t\t\t\t\tcubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst image = cubeImage[0],\n\t\t\t\t\t\tsupportsMips = isPowerOfTwo$1(image) || isWebGL2,\n\t\t\t\t\t\tglFormat = utils.convert(texture.format),\n\t\t\t\t\t\tglType = utils.convert(texture.type),\n\t\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\t\t\tlet mipmaps;\n\n\t\t\tif (isCompressed) {\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tmipmaps = cubeImage[i].mipmaps;\n\n\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\n\t\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else {\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tif (isDataTexture) {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n\n\t\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[i].image;\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);\n\n\t\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap(_gl.TEXTURE_CUBE_MAP, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t} // Render targets\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\n\n\t\tfunction setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {\n\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\tconst glType = utils.convert(texture.type);\n\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\tif (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\tstate.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);\n\t\t\t} else {\n\t\t\t\tstate.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n\t\tfunction setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n\t\t\tif (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n\t\t\t\tlet glInternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif (depthTexture && depthTexture.isDepthTexture) {\n\t\t\t\t\t\tif (depthTexture.type === FloatType) {\n\t\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\t\t\t\t\t} else if (depthTexture.type === UnsignedIntType) {\n\t\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n\t\t\t} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n\t\t\t} else {\n\t\t\t\t// Use the first texture for MRT so far\n\t\t\t\tconst texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[0] : renderTarget.texture;\n\t\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\t\tconst glType = utils.convert(texture.type);\n\t\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\t\t} // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n\t\tfunction setupDepthTexture(framebuffer, renderTarget) {\n\t\t\tconst isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n\t\t\tif (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\tif (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\t\t} // upload an empty depth texture with framebuffer size\n\n\n\t\t\tif (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D(renderTarget.depthTexture, 0);\n\n\t\t\tconst webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n\t\t\tif (renderTarget.depthTexture.format === DepthFormat) {\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n\t\t\t} else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown depthTexture format');\n\t\t\t}\n\t\t} // Setup GL resources for a non-texture depth buffer\n\n\n\t\tfunction setupDepthRenderbuffer(renderTarget) {\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\tif (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\t\t\tsetupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n\t\t\t} else {\n\t\t\t\tif (isCube) {\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t} // Set up GL resources for the render target\n\n\n\t\tfunction setupRenderTarget(renderTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\trenderTarget.addEventListener('dispose', onRenderTargetDispose);\n\n\t\t\tif (renderTarget.isWebGLMultipleRenderTargets !== true) {\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\ttextureProperties.__version = texture.version;\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\t\t\tconst isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;\n\t\t\tconst isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n\t\t\tconst isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\n\t\t\tconst supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif (isWebGL2 && texture.format === RGBFormat && (texture.type === FloatType || texture.type === HalfFloatType)) {\n\t\t\t\ttexture.format = RGBAFormat;\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');\n\t\t\t} // Setup framebuffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif (isMultipleRenderTargets) {\n\t\t\t\t\tif (capabilities.drawBuffers) {\n\t\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\t\t\tconst attachmentProperties = properties.get(textures[i]);\n\n\t\t\t\t\t\t\tif (attachmentProperties.__webglTexture === undefined) {\n\t\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\t\t\t\t\t\t\t\tinfo.memory.textures++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');\n\t\t\t\t\t}\n\t\t\t\t} else if (isMultisample) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\t\t\t\tconst glType = utils.convert(texture.type);\n\t\t\t\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\n\t\t\t\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Setup color buffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n\t\t\t\t}\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_CUBE_MAP, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\n\t\t\t} else if (isMultipleRenderTargets) {\n\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\tconst attachment = textures[i];\n\t\t\t\t\tconst attachmentProperties = properties.get(attachment);\n\t\t\t\t\tstate.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);\n\t\t\t\t\tsetTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);\n\n\t\t\t\t\tif (textureNeedsGenerateMipmaps(attachment, supportsMips)) {\n\t\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_2D, attachment, renderTarget.width, renderTarget.height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_2D, null);\n\t\t\t} else {\n\t\t\t\tlet glTextureType = _gl.TEXTURE_2D;\n\n\t\t\t\tif (isRenderTarget3D) {\n\t\t\t\t\t// Render targets containing layers, i.e: Texture 3D and 2d arrays\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\tconst isTexture3D = texture.isDataTexture3D;\n\t\t\t\t\t\tglTextureType = isTexture3D ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(glTextureType, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(glTextureType, texture, supportsMips);\n\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_2D, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_2D, null);\n\t\t\t} // Setup depth and stencil buffers\n\n\n\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\tsetupDepthRenderbuffer(renderTarget);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap(renderTarget) {\n\t\t\tconst supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];\n\n\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\tconst texture = textures[i];\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\n\t\t\t\t\tconst webglTexture = properties.get(texture).__webglTexture;\n\n\t\t\t\t\tstate.bindTexture(target, webglTexture);\n\t\t\t\t\tgenerateMipmap(target, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t\tstate.bindTexture(target, null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget(renderTarget) {\n\t\t\tif (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tconst width = renderTarget.width;\n\t\t\t\t\tconst height = renderTarget.height;\n\t\t\t\t\tlet mask = _gl.COLOR_BUFFER_BIT;\n\t\t\t\t\tif (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\n\t\t\t\t\tif (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\n\t\t\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\t\t\tstate.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\t\tstate.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\t_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\n\n\t\t\t\t\tstate.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);\n\t\t\t\t\tstate.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction getRenderTargetSamples(renderTarget) {\n\t\t\treturn isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n\t\t}\n\n\t\tfunction updateVideoTexture(texture) {\n\t\t\tconst frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n\t\t\tif (_videoTextures.get(texture) !== frame) {\n\t\t\t\t_videoTextures.set(texture, frame);\n\n\t\t\t\ttexture.update();\n\t\t\t}\n\t\t} // backwards compatibility\n\n\n\t\tlet warnedTexture2D = false;\n\t\tlet warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D(texture, slot) {\n\t\t\tif (texture && texture.isWebGLRenderTarget) {\n\t\t\t\tif (warnedTexture2D === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTexture2D = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTexture2D(texture, slot);\n\t\t}\n\n\t\tfunction safeSetTextureCube(texture, slot) {\n\t\t\tif (texture && texture.isWebGLCubeRenderTarget) {\n\t\t\t\tif (warnedTextureCube === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTextureCube = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTextureCube(texture, slot);\n\t\t} //\n\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\t}\n\n\tfunction WebGLUtils(gl, extensions, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert(p) {\n\t\t\tlet extension;\n\t\t\tif (p === UnsignedByteType) return gl.UNSIGNED_BYTE;\n\t\t\tif (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\tif (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\tif (p === UnsignedShort565Type) return gl.UNSIGNED_SHORT_5_6_5;\n\t\t\tif (p === ByteType) return gl.BYTE;\n\t\t\tif (p === ShortType) return gl.SHORT;\n\t\t\tif (p === UnsignedShortType) return gl.UNSIGNED_SHORT;\n\t\t\tif (p === IntType) return gl.INT;\n\t\t\tif (p === UnsignedIntType) return gl.UNSIGNED_INT;\n\t\t\tif (p === FloatType) return gl.FLOAT;\n\n\t\t\tif (p === HalfFloatType) {\n\t\t\t\tif (isWebGL2) return gl.HALF_FLOAT;\n\t\t\t\textension = extensions.get('OES_texture_half_float');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === AlphaFormat) return gl.ALPHA;\n\t\t\tif (p === RGBFormat) return gl.RGB;\n\t\t\tif (p === RGBAFormat) return gl.RGBA;\n\t\t\tif (p === LuminanceFormat) return gl.LUMINANCE;\n\t\t\tif (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;\n\t\t\tif (p === DepthFormat) return gl.DEPTH_COMPONENT;\n\t\t\tif (p === DepthStencilFormat) return gl.DEPTH_STENCIL;\n\t\t\tif (p === RedFormat) return gl.RED; // WebGL2 formats.\n\n\t\t\tif (p === RedIntegerFormat) return gl.RED_INTEGER;\n\t\t\tif (p === RGFormat) return gl.RG;\n\t\t\tif (p === RGIntegerFormat) return gl.RG_INTEGER;\n\t\t\tif (p === RGBIntegerFormat) return gl.RGB_INTEGER;\n\t\t\tif (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;\n\n\t\t\tif (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc1');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\t\tif (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_astc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_BPTC_Format) {\n\t\t\t\textension = extensions.get('EXT_texture_compression_bptc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === UnsignedInt248Type) {\n\t\t\t\tif (isWebGL2) return gl.UNSIGNED_INT_24_8;\n\t\t\t\textension = extensions.get('WEBGL_depth_texture');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tconvert: convert\n\t\t};\n\t}\n\n\tclass ArrayCamera extends PerspectiveCamera {\n\t\tconstructor(array = []) {\n\t\t\tsuper();\n\t\t\tthis.cameras = array;\n\t\t}\n\n\t}\n\n\tArrayCamera.prototype.isArrayCamera = true;\n\n\tclass Group extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Group';\n\t\t}\n\n\t}\n\n\tGroup.prototype.isGroup = true;\n\n\tconst _moveEvent = {\n\t\ttype: 'move'\n\t};\n\n\tclass WebXRController {\n\t\tconstructor() {\n\t\t\tthis._targetRay = null;\n\t\t\tthis._grip = null;\n\t\t\tthis._hand = null;\n\t\t}\n\n\t\tgetHandSpace() {\n\t\t\tif (this._hand === null) {\n\t\t\t\tthis._hand = new Group();\n\t\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\t\tthis._hand.visible = false;\n\t\t\t\tthis._hand.joints = {};\n\t\t\t\tthis._hand.inputState = {\n\t\t\t\t\tpinching: false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn this._hand;\n\t\t}\n\n\t\tgetTargetRaySpace() {\n\t\t\tif (this._targetRay === null) {\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\t\t}\n\n\t\tgetGripSpace() {\n\t\t\tif (this._grip === null) {\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\t\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\t\tthis._grip.angularVelocity = new Vector3();\n\t\t\t}\n\n\t\t\treturn this._grip;\n\t\t}\n\n\t\tdispatchEvent(event) {\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.dispatchEvent(event);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tdisconnect(inputSource) {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'disconnected',\n\t\t\t\tdata: inputSource\n\t\t\t});\n\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.visible = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tupdate(inputSource, frame, referenceSpace) {\n\t\t\tlet inputPose = null;\n\t\t\tlet gripPose = null;\n\t\t\tlet handPose = null;\n\t\t\tconst targetRay = this._targetRay;\n\t\t\tconst grip = this._grip;\n\t\t\tconst hand = this._hand;\n\n\t\t\tif (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n\t\t\t\tif (targetRay !== null) {\n\t\t\t\t\tinputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n\t\t\t\t\tif (inputPose !== null) {\n\t\t\t\t\t\ttargetRay.matrix.fromArray(inputPose.transform.matrix);\n\t\t\t\t\t\ttargetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n\n\t\t\t\t\t\tif (inputPose.linearVelocity) {\n\t\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\t\ttargetRay.linearVelocity.copy(inputPose.linearVelocity);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inputPose.angularVelocity) {\n\t\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\t\ttargetRay.angularVelocity.copy(inputPose.angularVelocity);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.dispatchEvent(_moveEvent);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hand && inputSource.hand) {\n\t\t\t\t\thandPose = true;\n\n\t\t\t\t\tfor (const inputjoint of inputSource.hand.values()) {\n\t\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\t\tconst jointPose = frame.getJointPose(inputjoint, referenceSpace);\n\n\t\t\t\t\t\tif (hand.joints[inputjoint.jointName] === undefined) {\n\t\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\t\tconst joint = new Group();\n\t\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\t\t\tjoint.visible = false;\n\t\t\t\t\t\t\thand.joints[inputjoint.jointName] = joint; // ??\n\n\t\t\t\t\t\t\thand.add(joint);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst joint = hand.joints[inputjoint.jointName];\n\n\t\t\t\t\t\tif (jointPose !== null) {\n\t\t\t\t\t\t\tjoint.matrix.fromArray(jointPose.transform.matrix);\n\t\t\t\t\t\t\tjoint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n\t\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjoint.visible = jointPose !== null;\n\t\t\t\t\t} // Custom events\n\t\t\t\t\t// Check pinchz\n\n\n\t\t\t\t\tconst indexTip = hand.joints['index-finger-tip'];\n\t\t\t\t\tconst thumbTip = hand.joints['thumb-tip'];\n\t\t\t\t\tconst distance = indexTip.position.distanceTo(thumbTip.position);\n\t\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\t\tif (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n\t\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n\t\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (grip !== null && inputSource.gripSpace) {\n\t\t\t\t\t\tgripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n\t\t\t\t\t\tif (gripPose !== null) {\n\t\t\t\t\t\t\tgrip.matrix.fromArray(gripPose.transform.matrix);\n\t\t\t\t\t\t\tgrip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n\n\t\t\t\t\t\t\tif (gripPose.linearVelocity) {\n\t\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\t\tgrip.linearVelocity.copy(gripPose.linearVelocity);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (gripPose.angularVelocity) {\n\t\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\t\tgrip.angularVelocity.copy(gripPose.angularVelocity);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetRay !== null) {\n\t\t\t\ttargetRay.visible = inputPose !== null;\n\t\t\t}\n\n\t\t\tif (grip !== null) {\n\t\t\t\tgrip.visible = gripPose !== null;\n\t\t\t}\n\n\t\t\tif (hand !== null) {\n\t\t\t\thand.visible = handPose !== null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass WebXRManager extends EventDispatcher {\n\t\tconstructor(renderer, gl) {\n\t\t\tsuper();\n\t\t\tconst scope = this;\n\t\t\tconst state = renderer.state;\n\t\t\tlet session = null;\n\t\t\tlet framebufferScaleFactor = 1.0;\n\t\t\tlet referenceSpace = null;\n\t\t\tlet referenceSpaceType = 'local-floor';\n\t\t\tlet pose = null;\n\t\t\tconst controllers = [];\n\t\t\tconst inputSourcesMap = new Map(); //\n\n\t\t\tconst cameraL = new PerspectiveCamera();\n\t\t\tcameraL.layers.enable(1);\n\t\t\tcameraL.viewport = new Vector4();\n\t\t\tconst cameraR = new PerspectiveCamera();\n\t\t\tcameraR.layers.enable(2);\n\t\t\tcameraR.viewport = new Vector4();\n\t\t\tconst cameras = [cameraL, cameraR];\n\t\t\tconst cameraVR = new ArrayCamera();\n\t\t\tcameraVR.layers.enable(1);\n\t\t\tcameraVR.layers.enable(2);\n\t\t\tlet _currentDepthNear = null;\n\t\t\tlet _currentDepthFar = null; //\n\n\t\t\tthis.cameraAutoUpdate = true;\n\t\t\tthis.enabled = false;\n\t\t\tthis.isPresenting = false;\n\n\t\t\tthis.getController = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getTargetRaySpace();\n\t\t\t};\n\n\t\t\tthis.getControllerGrip = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getGripSpace();\n\t\t\t};\n\n\t\t\tthis.getHand = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getHandSpace();\n\t\t\t}; //\n\n\n\t\t\tfunction onSessionEvent(event) {\n\t\t\t\tconst controller = inputSourcesMap.get(event.inputSource);\n\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\ttype: event.type,\n\t\t\t\t\t\tdata: event.inputSource\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction onSessionEnd() {\n\t\t\t\tinputSourcesMap.forEach(function (controller, inputSource) {\n\t\t\t\t\tcontroller.disconnect(inputSource);\n\t\t\t\t});\n\t\t\t\tinputSourcesMap.clear();\n\t\t\t\t_currentDepthNear = null;\n\t\t\t\t_currentDepthFar = null; // restore framebuffer/rendering state\n\n\t\t\t\tstate.bindXRFramebuffer(null);\n\t\t\t\trenderer.setRenderTarget(renderer.getRenderTarget()); //\n\n\t\t\t\tanimation.stop();\n\t\t\t\tscope.isPresenting = false;\n\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\ttype: 'sessionend'\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.setFramebufferScaleFactor = function (value) {\n\t\t\t\tframebufferScaleFactor = value;\n\n\t\t\t\tif (scope.isPresenting === true) {\n\t\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.setReferenceSpaceType = function (value) {\n\t\t\t\treferenceSpaceType = value;\n\n\t\t\t\tif (scope.isPresenting === true) {\n\t\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.getReferenceSpace = function () {\n\t\t\t\treturn referenceSpace;\n\t\t\t};\n\n\t\t\tthis.getSession = function () {\n\t\t\t\treturn session;\n\t\t\t};\n\n\t\t\tthis.setSession = async function (value) {\n\t\t\t\tsession = value;\n\n\t\t\t\tif (session !== null) {\n\t\t\t\t\tsession.addEventListener('select', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('selectstart', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('selectend', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeeze', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeezestart', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeezeend', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('end', onSessionEnd);\n\t\t\t\t\tsession.addEventListener('inputsourceschange', onInputSourcesChange);\n\t\t\t\t\tconst attributes = gl.getContextAttributes();\n\n\t\t\t\t\tif (attributes.xrCompatible !== true) {\n\t\t\t\t\t\tawait gl.makeXRCompatible();\n\t\t\t\t\t}\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t}; // eslint-disable-next-line no-undef\n\n\t\t\t\t\tconst baseLayer = new XRWebGLLayer(session, gl, layerInit);\n\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\tbaseLayer: baseLayer\n\t\t\t\t\t});\n\t\t\t\t\treferenceSpace = await session.requestReferenceSpace(referenceSpaceType);\n\t\t\t\t\tanimation.setContext(session);\n\t\t\t\t\tanimation.start();\n\t\t\t\t\tscope.isPresenting = true;\n\t\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\t\ttype: 'sessionstart'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfunction onInputSourcesChange(event) {\n\t\t\t\tconst inputSources = session.inputSources; // Assign inputSources to available controllers\n\n\t\t\t\tfor (let i = 0; i < controllers.length; i++) {\n\t\t\t\t\tinputSourcesMap.set(inputSources[i], controllers[i]);\n\t\t\t\t} // Notify disconnected\n\n\n\t\t\t\tfor (let i = 0; i < event.removed.length; i++) {\n\t\t\t\t\tconst inputSource = event.removed[i];\n\t\t\t\t\tconst controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\t\tif (controller) {\n\t\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'disconnected',\n\t\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t\t});\n\t\t\t\t\t\tinputSourcesMap.delete(inputSource);\n\t\t\t\t\t}\n\t\t\t\t} // Notify connected\n\n\n\t\t\t\tfor (let i = 0; i < event.added.length; i++) {\n\t\t\t\t\tconst inputSource = event.added[i];\n\t\t\t\t\tconst controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\t\tif (controller) {\n\t\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'connected',\n\t\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tconst cameraLPos = new Vector3();\n\t\t\tconst cameraRPos = new Vector3();\n\t\t\t/**\n\t\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t\t * the cameras' projection and world matrices have already been set.\n\t\t\t * And that near and far planes are identical for both cameras.\n\t\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t\t */\n\n\t\t\tfunction setProjectionFromUnion(camera, cameraL, cameraR) {\n\t\t\t\tcameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n\t\t\t\tcameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n\t\t\t\tconst ipd = cameraLPos.distanceTo(cameraRPos);\n\t\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\t\tconst projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n\t\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t\t// Use the left camera for these values.\n\n\t\t\t\tconst near = projL[14] / (projL[10] - 1);\n\t\t\t\tconst far = projL[14] / (projL[10] + 1);\n\t\t\t\tconst topFov = (projL[9] + 1) / projL[5];\n\t\t\t\tconst bottomFov = (projL[9] - 1) / projL[5];\n\t\t\t\tconst leftFov = (projL[8] - 1) / projL[0];\n\t\t\t\tconst rightFov = (projR[8] + 1) / projR[0];\n\t\t\t\tconst left = near * leftFov;\n\t\t\t\tconst right = near * rightFov; // Calculate the new camera's position offset from the\n\t\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\n\t\t\t\tconst zOffset = ipd / (-leftFov + rightFov);\n\t\t\t\tconst xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n\t\t\t\tcameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tcamera.translateX(xOffset);\n\t\t\t\tcamera.translateZ(zOffset);\n\t\t\t\tcamera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale\n\t\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t\t// although must now be relative to the new union camera.\n\n\t\t\t\tconst near2 = near + zOffset;\n\t\t\t\tconst far2 = far + zOffset;\n\t\t\t\tconst left2 = left - xOffset;\n\t\t\t\tconst right2 = right + (ipd - xOffset);\n\t\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\t\t\t\tcamera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n\t\t\t}\n\n\t\t\tfunction updateCamera(camera, parent) {\n\t\t\t\tif (parent === null) {\n\t\t\t\t\tcamera.matrixWorld.copy(camera.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tcamera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n\t\t\t\t}\n\n\t\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert();\n\t\t\t}\n\n\t\t\tthis.updateCamera = function (camera) {\n\t\t\t\tif (session === null) return;\n\t\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\t\tif (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n\t\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t\t});\n\t\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t\t_currentDepthFar = cameraVR.far;\n\t\t\t\t}\n\n\t\t\t\tconst parent = camera.parent;\n\t\t\t\tconst cameras = cameraVR.cameras;\n\t\t\t\tupdateCamera(cameraVR, parent);\n\n\t\t\t\tfor (let i = 0; i < cameras.length; i++) {\n\t\t\t\t\tupdateCamera(cameras[i], parent);\n\t\t\t\t} // update camera and its children\n\n\n\t\t\t\tcamera.matrixWorld.copy(cameraVR.matrixWorld);\n\t\t\t\tcamera.matrix.copy(cameraVR.matrix);\n\t\t\t\tcamera.matrix.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tconst children = camera.children;\n\n\t\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateMatrixWorld(true);\n\t\t\t\t} // update projection matrix for proper view frustum culling\n\n\n\t\t\t\tif (cameras.length === 2) {\n\t\t\t\t\tsetProjectionFromUnion(cameraVR, cameraL, cameraR);\n\t\t\t\t} else {\n\t\t\t\t\t// assume single camera setup (AR)\n\t\t\t\t\tcameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.getCamera = function () {\n\t\t\t\treturn cameraVR;\n\t\t\t}; // Animation Loop\n\n\n\t\t\tlet onAnimationFrameCallback = null;\n\n\t\t\tfunction onAnimationFrame(time, frame) {\n\t\t\t\tpose = frame.getViewerPose(referenceSpace);\n\n\t\t\t\tif (pose !== null) {\n\t\t\t\t\tconst views = pose.views;\n\t\t\t\t\tconst baseLayer = session.renderState.baseLayer;\n\t\t\t\t\tstate.bindXRFramebuffer(baseLayer.framebuffer);\n\t\t\t\t\tlet cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\t\tif (views.length !== cameraVR.cameras.length) {\n\t\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\t\tcameraVRNeedsUpdate = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0; i < views.length; i++) {\n\t\t\t\t\t\tconst view = views[i];\n\t\t\t\t\t\tconst viewport = baseLayer.getViewport(view);\n\t\t\t\t\t\tconst camera = cameras[i];\n\t\t\t\t\t\tcamera.matrix.fromArray(view.transform.matrix);\n\t\t\t\t\t\tcamera.projectionMatrix.fromArray(view.projectionMatrix);\n\t\t\t\t\t\tcamera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\tcameraVR.matrix.copy(camera.matrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (cameraVRNeedsUpdate === true) {\n\t\t\t\t\t\t\tcameraVR.cameras.push(camera);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tconst inputSources = session.inputSources;\n\n\t\t\t\tfor (let i = 0; i < controllers.length; i++) {\n\t\t\t\t\tconst controller = controllers[i];\n\t\t\t\t\tconst inputSource = inputSources[i];\n\t\t\t\t\tcontroller.update(inputSource, frame, referenceSpace);\n\t\t\t\t}\n\n\t\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n\t\t\t}\n\n\t\t\tconst animation = new WebGLAnimation();\n\t\t\tanimation.setAnimationLoop(onAnimationFrame);\n\n\t\t\tthis.setAnimationLoop = function (callback) {\n\t\t\t\tonAnimationFrameCallback = callback;\n\t\t\t};\n\n\t\t\tthis.dispose = function () {};\n\t\t}\n\n\t}\n\n\tfunction WebGLMaterials(properties) {\n\t\tfunction refreshFogUniforms(uniforms, fog) {\n\t\t\tuniforms.fogColor.value.copy(fog.color);\n\n\t\t\tif (fog.isFog) {\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\t\t\t} else if (fog.isFogExp2) {\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {\n\t\t\tif (material.isMeshBasicMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t} else if (material.isMeshLambertMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsLambert(uniforms, material);\n\t\t\t} else if (material.isMeshToonMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsToon(uniforms, material);\n\t\t\t} else if (material.isMeshPhongMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsPhong(uniforms, material);\n\t\t\t} else if (material.isMeshStandardMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\n\t\t\t\tif (material.isMeshPhysicalMaterial) {\n\t\t\t\t\trefreshUniformsPhysical(uniforms, material, transmissionRenderTarget);\n\t\t\t\t} else {\n\t\t\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isMeshMatcapMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsMatcap(uniforms, material);\n\t\t\t} else if (material.isMeshDepthMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDepth(uniforms, material);\n\t\t\t} else if (material.isMeshDistanceMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDistance(uniforms, material);\n\t\t\t} else if (material.isMeshNormalMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsNormal(uniforms, material);\n\t\t\t} else if (material.isLineBasicMaterial) {\n\t\t\t\trefreshUniformsLine(uniforms, material);\n\n\t\t\t\tif (material.isLineDashedMaterial) {\n\t\t\t\t\trefreshUniformsDash(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isPointsMaterial) {\n\t\t\t\trefreshUniformsPoints(uniforms, material, pixelRatio, height);\n\t\t\t} else if (material.isSpriteMaterial) {\n\t\t\t\trefreshUniformsSprites(uniforms, material);\n\t\t\t} else if (material.isShadowMaterial) {\n\t\t\t\tuniforms.color.value.copy(material.color);\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\t} else if (material.isShaderMaterial) {\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsCommon(uniforms, material) {\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif (material.color) {\n\t\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\t}\n\n\t\t\tif (material.emissive) {\n\t\t\t\tuniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n\t\t\t}\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.specularMap) {\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t}\n\n\t\t\tconst envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\tuniforms.envMap.value = envMap;\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tconst maxMipLevel = properties.get(envMap).__maxMipLevel;\n\n\t\t\t\tif (maxMipLevel !== undefined) {\n\t\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.lightMap) {\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. displacementMap map\n\t\t\t// 4. normal map\n\t\t\t// 5. bump map\n\t\t\t// 6. roughnessMap map\n\t\t\t// 7. metalnessMap map\n\t\t\t// 8. alphaMap map\n\t\t\t// 9. emissiveMap map\n\t\t\t// 10. clearcoat map\n\t\t\t// 11. clearcoat normal map\n\t\t\t// 12. clearcoat roughnessMap map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.specularMap) {\n\t\t\t\tuvScaleMap = material.specularMap;\n\t\t\t} else if (material.displacementMap) {\n\t\t\t\tuvScaleMap = material.displacementMap;\n\t\t\t} else if (material.normalMap) {\n\t\t\t\tuvScaleMap = material.normalMap;\n\t\t\t} else if (material.bumpMap) {\n\t\t\t\tuvScaleMap = material.bumpMap;\n\t\t\t} else if (material.roughnessMap) {\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\t\t\t} else if (material.metalnessMap) {\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t} else if (material.emissiveMap) {\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\t\t\t} else if (material.clearcoatMap) {\n\t\t\t\tuvScaleMap = material.clearcoatMap;\n\t\t\t} else if (material.clearcoatNormalMap) {\n\t\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\t\t\t} else if (material.clearcoatRoughnessMap) {\n\t\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uvScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t} // uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\n\t\t\tlet uv2ScaleMap;\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\t\t\t} else if (material.lightMap) {\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\t\t\t}\n\n\t\t\tif (uv2ScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uv2ScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uv2ScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLine(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t}\n\n\t\tfunction refreshUniformsDash(uniforms, material) {\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\t\t}\n\n\t\tfunction refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsSprites(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLambert(uniforms, material) {\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhong(uniforms, material) {\n\t\t\tuniforms.specular.value.copy(material.specular);\n\t\t\tuniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsToon(uniforms, material) {\n\t\t\tif (material.gradientMap) {\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsStandard(uniforms, material) {\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif (material.roughnessMap) {\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\t\t}\n\n\t\t\tif (material.metalnessMap) {\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tconst envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {\n\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif (material.sheen) uniforms.sheen.value.copy(material.sheen);\n\n\t\t\tif (material.clearcoatMap) {\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatRoughnessMap) {\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatNormalMap) {\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif (material.side === BackSide) {\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\n\t\t\tif (material.transmissionMap) {\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\t\t\t}\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\t\tuniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);\n\t\t\t}\n\n\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\tif (material.thicknessMap) {\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\t\t\t}\n\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\tuniforms.attenuationColor.value.copy(material.attenuationColor);\n\t\t}\n\n\t\tfunction refreshUniformsMatcap(uniforms, material) {\n\t\t\tif (material.matcap) {\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDepth(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDistance(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy(material.referencePosition);\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\t\t}\n\n\t\tfunction refreshUniformsNormal(uniforms, material) {\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\t}\n\n\tfunction createCanvasElement() {\n\t\tconst canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\tcanvas.style.display = 'block';\n\t\treturn canvas;\n\t}\n\n\tfunction WebGLRenderer(parameters) {\n\t\tparameters = parameters || {};\n\n\t\tconst _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\t\t\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tlet currentRenderList = null;\n\t\tlet currentRenderState = null; // render() can be called from within a callback triggered by another render.\n\t\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\t\tconst renderListStack = [];\n\t\tconst renderStateStack = []; // public properties\n\n\t\tthis.domElement = _canvas; // Debug configuration container\n\n\t\tthis.debug = {\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t}; // clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true; // scene graph\n\n\t\tthis.sortObjects = true; // user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false; // physically based shading\n\n\t\tthis.gammaFactor = 2.0; // for backwards compatibility\n\n\t\tthis.outputEncoding = LinearEncoding; // physical lights\n\n\t\tthis.physicallyCorrectLights = false; // tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0; // internal properties\n\n\t\tconst _this = this;\n\n\t\tlet _isContextLost = false; // internal state cache\n\n\t\tlet _currentActiveCubeFace = 0;\n\t\tlet _currentActiveMipmapLevel = 0;\n\t\tlet _currentRenderTarget = null;\n\n\t\tlet _currentMaterialId = -1;\n\n\t\tlet _currentCamera = null;\n\n\t\tconst _currentViewport = new Vector4();\n\n\t\tconst _currentScissor = new Vector4();\n\n\t\tlet _currentScissorTest = null; //\n\n\t\tlet _width = _canvas.width;\n\t\tlet _height = _canvas.height;\n\t\tlet _pixelRatio = 1;\n\t\tlet _opaqueSort = null;\n\t\tlet _transparentSort = null;\n\n\t\tconst _viewport = new Vector4(0, 0, _width, _height);\n\n\t\tconst _scissor = new Vector4(0, 0, _width, _height);\n\n\t\tlet _scissorTest = false; //\n\n\t\tconst _currentDrawBuffers = []; // frustum\n\n\t\tconst _frustum = new Frustum(); // clipping\n\n\n\t\tlet _clippingEnabled = false;\n\t\tlet _localClippingEnabled = false; // transmission\n\n\t\tlet _transmissionRenderTarget = null; // camera matrices cache\n\n\t\tconst _projScreenMatrix = new Matrix4();\n\n\t\tconst _vector3 = new Vector3();\n\n\t\tconst _emptyScene = {\n\t\t\tbackground: null,\n\t\t\tfog: null,\n\t\t\tenvironment: null,\n\t\t\toverrideMaterial: null,\n\t\t\tisScene: true\n\t\t};\n\n\t\tfunction getTargetPixelRatio() {\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\t} // initialize\n\n\n\t\tlet _gl = _context;\n\n\t\tfunction getContext(contextNames, contextAttributes) {\n\t\t\tfor (let i = 0; i < contextNames.length; i++) {\n\t\t\t\tconst contextName = contextNames[i];\n\n\t\t\t\tconst context = _canvas.getContext(contextName, contextAttributes);\n\n\t\t\t\tif (context !== null) return context;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tconst contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t}; // event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\tif (_gl === null) {\n\t\t\t\tconst contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\n\n\t\t\t\tif (_this.isWebGL1Renderer === true) {\n\t\t\t\t\tcontextNames.shift();\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext(contextNames, contextAttributes);\n\n\t\t\t\tif (_gl === null) {\n\t\t\t\t\tif (getContext(contextNames)) {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context with your selected attributes.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n\t\t\tif (_gl.getShaderPrecisionFormat === undefined) {\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'rangeMin': 1,\n\t\t\t\t\t\t'rangeMax': 1,\n\t\t\t\t\t\t'precision': 1\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('THREE.WebGLRenderer: ' + error.message);\n\t\t\tthrow error;\n\t\t}\n\n\t\tlet extensions, capabilities, state, info;\n\t\tlet properties, textures, cubemaps, attributes, geometries, objects;\n\t\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\t\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\t\tlet utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\t\t\textensions = new WebGLExtensions(_gl);\n\t\t\tcapabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\t\t\textensions.init(capabilities);\n\t\t\tutils = new WebGLUtils(_gl, extensions, capabilities);\n\t\t\tstate = new WebGLState(_gl, extensions, capabilities);\n\t\t\t_currentDrawBuffers[0] = _gl.BACK;\n\t\t\tinfo = new WebGLInfo(_gl);\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n\t\t\tcubemaps = new WebGLCubeMaps(_this);\n\t\t\tattributes = new WebGLAttributes(_gl, capabilities);\n\t\t\tbindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\n\t\t\tgeometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n\t\t\tobjects = new WebGLObjects(_gl, geometries, attributes, info);\n\t\t\tmorphtargets = new WebGLMorphtargets(_gl);\n\t\t\tclipping = new WebGLClipping(properties);\n\t\t\tprogramCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);\n\t\t\tmaterials = new WebGLMaterials(properties);\n\t\t\trenderLists = new WebGLRenderLists(properties);\n\t\t\trenderStates = new WebGLRenderStates(extensions, capabilities);\n\t\t\tbackground = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\n\t\t\tshadowMap = new WebGLShadowMap(_this, objects, capabilities);\n\t\t\tbufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tinfo.programs = programCache.programs;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.shadowMap = shadowMap;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\t\t}\n\n\t\tinitGLContext(); // xr\n\n\t\tconst xr = new WebXRManager(_this, _gl);\n\t\tthis.xr = xr; // API\n\n\t\tthis.getContext = function () {\n\t\t\treturn _gl;\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\t\t\treturn _gl.getContextAttributes();\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\t\t\tconst extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.loseContext();\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\t\t\tconst extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.restoreContext();\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\t\t\treturn _pixelRatio;\n\t\t};\n\n\t\tthis.setPixelRatio = function (value) {\n\t\t\tif (value === undefined) return;\n\t\t\t_pixelRatio = value;\n\t\t\tthis.setSize(_width, _height, false);\n\t\t};\n\n\t\tthis.getSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width, _height);\n\t\t};\n\n\t\tthis.setSize = function (width, height, updateStyle) {\n\t\t\tif (xr.isPresenting) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_canvas.width = Math.floor(width * _pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * _pixelRatio);\n\n\t\t\tif (updateStyle !== false) {\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\t\t}\n\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function (width, height, pixelRatio) {\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_pixelRatio = pixelRatio;\n\t\t\t_canvas.width = Math.floor(width * pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * pixelRatio);\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getCurrentViewport = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');\n\t\t\t\ttarget = new Vector4();\n\t\t\t}\n\n\t\t\treturn target.copy(_currentViewport);\n\t\t};\n\n\t\tthis.getViewport = function (target) {\n\t\t\treturn target.copy(_viewport);\n\t\t};\n\n\t\tthis.setViewport = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_viewport.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_viewport.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissor = function (target) {\n\t\t\treturn target.copy(_scissor);\n\t\t};\n\n\t\tthis.setScissor = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_scissor.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_scissor.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\t\t\treturn _scissorTest;\n\t\t};\n\n\t\tthis.setScissorTest = function (boolean) {\n\t\t\tstate.setScissorTest(_scissorTest = boolean);\n\t\t};\n\n\t\tthis.setOpaqueSort = function (method) {\n\t\t\t_opaqueSort = method;\n\t\t};\n\n\t\tthis.setTransparentSort = function (method) {\n\t\t\t_transparentSort = method;\n\t\t}; // Clearing\n\n\n\t\tthis.getClearColor = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getClearColor() now requires a Color as an argument');\n\t\t\t\ttarget = new Color();\n\t\t\t}\n\n\t\t\treturn target.copy(background.getClearColor());\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\t\t\tbackground.setClearColor.apply(background, arguments);\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\t\t\treturn background.getClearAlpha();\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\t\t\tbackground.setClearAlpha.apply(background, arguments);\n\t\t};\n\n\t\tthis.clear = function (color, depth, stencil) {\n\t\t\tlet bits = 0;\n\t\t\tif (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\tif (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t_gl.clear(bits);\n\t\t};\n\n\t\tthis.clearColor = function () {\n\t\t\tthis.clear(true, false, false);\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\t\t\tthis.clear(false, true, false);\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\t\t\tthis.clear(false, false, true);\n\t\t}; //\n\n\n\t\tthis.dispose = function () {\n\t\t\t_canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\txr.dispose();\n\t\t\txr.removeEventListener('sessionstart', onXRSessionStart);\n\t\t\txr.removeEventListener('sessionend', onXRSessionEnd);\n\n\t\t\tif (_transmissionRenderTarget) {\n\t\t\t\t_transmissionRenderTarget.dispose();\n\n\t\t\t\t_transmissionRenderTarget = null;\n\t\t\t}\n\n\t\t\tanimation.stop();\n\t\t}; // Events\n\n\n\t\tfunction onContextLost(event) {\n\t\t\tevent.preventDefault();\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Lost.');\n\t\t\t_isContextLost = true;\n\t\t}\n\n\t\tfunction onContextRestore()\n\t\t/* event */\n\t\t{\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Restored.');\n\t\t\t_isContextLost = false;\n\t\t\tconst infoAutoReset = info.autoReset;\n\t\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\t\tconst shadowMapType = shadowMap.type;\n\t\t\tinitGLContext();\n\t\t\tinfo.autoReset = infoAutoReset;\n\t\t\tshadowMap.enabled = shadowMapEnabled;\n\t\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\t\tshadowMap.type = shadowMapType;\n\t\t}\n\n\t\tfunction onMaterialDispose(event) {\n\t\t\tconst material = event.target;\n\t\t\tmaterial.removeEventListener('dispose', onMaterialDispose);\n\t\t\tdeallocateMaterial(material);\n\t\t} // Buffer deallocation\n\n\n\t\tfunction deallocateMaterial(material) {\n\t\t\treleaseMaterialProgramReferences(material);\n\t\t\tproperties.remove(material);\n\t\t}\n\n\t\tfunction releaseMaterialProgramReferences(material) {\n\t\t\tconst programs = properties.get(material).programs;\n\n\t\t\tif (programs !== undefined) {\n\t\t\t\tprograms.forEach(function (program) {\n\t\t\t\t\tprogramCache.releaseProgram(program);\n\t\t\t\t});\n\t\t\t}\n\t\t} // Buffer rendering\n\n\n\t\tfunction renderObjectImmediate(object, program) {\n\t\t\tobject.render(function (object) {\n\t\t\t\t_this.renderBufferImmediate(object, program);\n\t\t\t});\n\t\t}\n\n\t\tthis.renderBufferImmediate = function (object, program) {\n\t\t\tbindingStates.initAttributes();\n\t\t\tconst buffers = properties.get(object);\n\t\t\tif (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n\t\t\tif (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n\t\t\tif (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n\t\t\tif (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n\t\t\tconst programAttributes = program.getAttributes();\n\n\t\t\tif (object.hasPositions) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.position);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.position, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasNormals) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.normal);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.normal, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasUvs) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.uv);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.uv, 2, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasColors) {\n\t\t\t\t_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);\n\n\t\t\t\t_gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.color);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.color, 3, _gl.FLOAT, false, 0, 0);\n\t\t\t}\n\n\t\t\tbindingStates.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays(_gl.TRIANGLES, 0, object.count);\n\n\t\t\tobject.count = 0;\n\t\t};\n\n\t\tthis.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n\t\t\tif (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tconst frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n\t\t\tconst program = setProgram(camera, scene, material, object);\n\t\t\tstate.setMaterial(material, frontFaceCW); //\n\n\t\t\tlet index = geometry.index;\n\t\t\tconst position = geometry.attributes.position; //\n\n\t\t\tif (index === null) {\n\t\t\t\tif (position === undefined || position.count === 0) return;\n\t\t\t} else if (index.count === 0) {\n\t\t\t\treturn;\n\t\t\t} //\n\n\n\t\t\tlet rangeFactor = 1;\n\n\t\t\tif (material.wireframe === true) {\n\t\t\t\tindex = geometries.getWireframeAttribute(geometry);\n\t\t\t\trangeFactor = 2;\n\t\t\t}\n\n\t\t\tif (material.morphTargets || material.morphNormals) {\n\t\t\t\tmorphtargets.update(object, geometry, material, program);\n\t\t\t}\n\n\t\t\tbindingStates.setup(object, material, program, geometry, index);\n\t\t\tlet attribute;\n\t\t\tlet renderer = bufferRenderer;\n\n\t\t\tif (index !== null) {\n\t\t\t\tattribute = attributes.get(index);\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex(attribute);\n\t\t\t} //\n\n\n\t\t\tconst dataCount = index !== null ? index.count : position.count;\n\t\t\tconst rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tconst rangeCount = geometry.drawRange.count * rangeFactor;\n\t\t\tconst groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tconst groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\t\tconst drawStart = Math.max(rangeStart, groupStart);\n\t\t\tconst drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n\t\t\tconst drawCount = Math.max(0, drawEnd - drawStart + 1);\n\t\t\tif (drawCount === 0) return; //\n\n\t\t\tif (object.isMesh) {\n\t\t\t\tif (material.wireframe === true) {\n\t\t\t\t\tstate.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n\t\t\t\t\trenderer.setMode(_gl.LINES);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(_gl.TRIANGLES);\n\t\t\t\t}\n\t\t\t} else if (object.isLine) {\n\t\t\t\tlet lineWidth = material.linewidth;\n\t\t\t\tif (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth(lineWidth * getTargetPixelRatio());\n\n\t\t\t\tif (object.isLineSegments) {\n\t\t\t\t\trenderer.setMode(_gl.LINES);\n\t\t\t\t} else if (object.isLineLoop) {\n\t\t\t\t\trenderer.setMode(_gl.LINE_LOOP);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(_gl.LINE_STRIP);\n\t\t\t\t}\n\t\t\t} else if (object.isPoints) {\n\t\t\t\trenderer.setMode(_gl.POINTS);\n\t\t\t} else if (object.isSprite) {\n\t\t\t\trenderer.setMode(_gl.TRIANGLES);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, object.count);\n\t\t\t} else if (geometry.isInstancedBufferGeometry) {\n\t\t\t\tconst instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, instanceCount);\n\t\t\t} else {\n\t\t\t\trenderer.render(drawStart, drawCount);\n\t\t\t}\n\t\t}; // Compile\n\n\n\t\tthis.compile = function (scene, camera) {\n\t\t\tcurrentRenderState = renderStates.get(scene);\n\t\t\tcurrentRenderState.init();\n\t\t\tscene.traverseVisible(function (object) {\n\t\t\t\tif (object.isLight && object.layers.test(camera.layers)) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tscene.traverse(function (object) {\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif (material) {\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0; i < material.length; i++) {\n\t\t\t\t\t\t\tconst material2 = material[i];\n\t\t\t\t\t\t\tgetProgram(material2, scene, object);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetProgram(material, scene, object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}; // Animation Loop\n\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time) {\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time);\n\t\t}\n\n\t\tfunction onXRSessionStart() {\n\t\t\tanimation.stop();\n\t\t}\n\n\t\tfunction onXRSessionEnd() {\n\t\t\tanimation.start();\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\t\tif (typeof window !== 'undefined') animation.setContext(window);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop(callback);\n\t\t\tcallback === null ? animation.stop() : animation.start();\n\t\t};\n\n\t\txr.addEventListener('sessionstart', onXRSessionStart);\n\t\txr.addEventListener('sessionend', onXRSessionEnd); // Rendering\n\n\t\tthis.render = function (scene, camera) {\n\t\t\tif (camera !== undefined && camera.isCamera !== true) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_isContextLost === true) return; // update scene graph\n\n\t\t\tif (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n\t\t\tif (camera.parent === null) camera.updateMatrixWorld();\n\n\t\t\tif (xr.enabled === true && xr.isPresenting === true) {\n\t\t\t\tif (xr.cameraAutoUpdate === true) xr.updateCamera(camera);\n\t\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);\n\t\t\tcurrentRenderState = renderStates.get(scene, renderStateStack.length);\n\t\t\tcurrentRenderState.init();\n\t\t\trenderStateStack.push(currentRenderState);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\t_frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n\t\t\tcurrentRenderList = renderLists.get(scene, renderListStack.length);\n\t\t\tcurrentRenderList.init();\n\t\t\trenderListStack.push(currentRenderList);\n\t\t\tprojectObject(scene, camera, 0, _this.sortObjects);\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif (_this.sortObjects === true) {\n\t\t\t\tcurrentRenderList.sort(_opaqueSort, _transparentSort);\n\t\t\t} //\n\n\n\t\t\tif (_clippingEnabled === true) clipping.beginShadows();\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tshadowMap.render(shadowsArray, scene, camera);\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tcurrentRenderState.setupLightsView(camera);\n\t\t\tif (_clippingEnabled === true) clipping.endShadows(); //\n\n\t\t\tif (this.info.autoReset === true) this.info.reset(); //\n\n\t\t\tbackground.render(currentRenderList, scene); // render scene\n\n\t\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\t\t\tconst transparentObjects = currentRenderList.transparent;\n\t\t\tif (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n\t\t\tif (transmissiveObjects.length > 0) renderTransmissiveObjects(opaqueObjects, transmissiveObjects, scene, camera);\n\t\t\tif (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); //\n\n\t\t\tif (_currentRenderTarget !== null) {\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\t\t\ttextures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget(_currentRenderTarget);\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onAfterRender(_this, scene, camera); // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest(true);\n\t\t\tstate.buffers.depth.setMask(true);\n\t\t\tstate.buffers.color.setMask(true);\n\t\t\tstate.setPolygonOffset(false); // _gl.finish();\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = -1;\n\t\t\t_currentCamera = null;\n\t\t\trenderStateStack.pop();\n\n\t\t\tif (renderStateStack.length > 0) {\n\t\t\t\tcurrentRenderState = renderStateStack[renderStateStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderState = null;\n\t\t\t}\n\n\t\t\trenderListStack.pop();\n\n\t\t\tif (renderListStack.length > 0) {\n\t\t\t\tcurrentRenderList = renderListStack[renderListStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderList = null;\n\t\t\t}\n\t\t};\n\n\t\tfunction projectObject(object, camera, groupOrder, sortObjects) {\n\t\t\tif (object.visible === false) return;\n\t\t\tconst visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible) {\n\t\t\t\tif (object.isGroup) {\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\t\t\t\t} else if (object.isLOD) {\n\t\t\t\t\tif (object.autoUpdate === true) object.update(camera);\n\t\t\t\t} else if (object.isLight) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isSprite) {\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update(object);\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isImmediateRenderObject) {\n\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);\n\t\t\t\t} else if (object.isMesh || object.isLine || object.isPoints) {\n\t\t\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\t\t\t// update skeleton only once in a frame\n\t\t\t\t\t\tif (object.skeleton.frame !== info.render.frame) {\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsObject(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update(object);\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tprojectObject(children[i], camera, groupOrder, sortObjects);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderTransmissiveObjects(opaqueObjects, transmissiveObjects, scene, camera) {\n\t\t\tif (_transmissionRenderTarget === null) {\n\t\t\t\t_transmissionRenderTarget = new WebGLRenderTarget(1024, 1024, {\n\t\t\t\t\tgenerateMipmaps: true,\n\t\t\t\t\tminFilter: LinearMipmapLinearFilter,\n\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\twrapS: ClampToEdgeWrapping,\n\t\t\t\t\twrapT: ClampToEdgeWrapping\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst currentRenderTarget = _this.getRenderTarget();\n\n\t\t\t_this.setRenderTarget(_transmissionRenderTarget);\n\n\t\t\t_this.clear();\n\n\t\t\trenderObjects(opaqueObjects, scene, camera);\n\t\t\ttextures.updateRenderTargetMipmap(_transmissionRenderTarget);\n\n\t\t\t_this.setRenderTarget(currentRenderTarget);\n\n\t\t\trenderObjects(transmissiveObjects, scene, camera);\n\t\t}\n\n\t\tfunction renderObjects(renderList, scene, camera) {\n\t\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor (let i = 0, l = renderList.length; i < l; i++) {\n\t\t\t\tconst renderItem = renderList[i];\n\t\t\t\tconst object = renderItem.object;\n\t\t\t\tconst geometry = renderItem.geometry;\n\t\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tconst group = renderItem.group;\n\n\t\t\t\tif (camera.isArrayCamera) {\n\t\t\t\t\tconst cameras = camera.cameras;\n\n\t\t\t\t\tfor (let j = 0, jl = cameras.length; j < jl; j++) {\n\t\t\t\t\t\tconst camera2 = cameras[j];\n\n\t\t\t\t\t\tif (object.layers.test(camera2.layers)) {\n\t\t\t\t\t\t\tstate.viewport(_currentViewport.copy(camera2.viewport));\n\t\t\t\t\t\t\tcurrentRenderState.setupLightsView(camera2);\n\t\t\t\t\t\t\trenderObject(object, scene, camera2, geometry, material, group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trenderObject(object, scene, camera, geometry, material, group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObject(object, scene, camera, geometry, material, group) {\n\t\t\tobject.onBeforeRender(_this, scene, camera, geometry, material, group);\n\t\t\tobject.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\t\t\tobject.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n\t\t\tif (object.isImmediateRenderObject) {\n\t\t\t\tconst program = setProgram(camera, scene, material, object);\n\t\t\t\tstate.setMaterial(material);\n\t\t\t\tbindingStates.reset();\n\t\t\t\trenderObjectImmediate(object, program);\n\t\t\t} else {\n\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\t\t\t}\n\n\t\t\tobject.onAfterRender(_this, scene, camera, geometry, material, group);\n\t\t}\n\n\t\tfunction getProgram(material, scene, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tconst lights = currentRenderState.state.lights;\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tconst lightsStateVersion = lights.state.version;\n\t\t\tconst parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n\t\t\tconst programCacheKey = programCache.getProgramCacheKey(parameters);\n\t\t\tlet programs = materialProperties.programs; // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment);\n\n\t\t\tif (programs === undefined) {\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener('dispose', onMaterialDispose);\n\t\t\t\tprograms = new Map();\n\t\t\t\tmaterialProperties.programs = programs;\n\t\t\t}\n\n\t\t\tlet program = programs.get(programCacheKey);\n\n\t\t\tif (program !== undefined) {\n\t\t\t\t// early out if program and light state is identical\n\t\t\t\tif (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {\n\t\t\t\t\tupdateCommonMaterialProperties(material, parameters);\n\t\t\t\t\treturn program;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparameters.uniforms = programCache.getUniforms(material);\n\t\t\t\tmaterial.onBuild(parameters, _this);\n\t\t\t\tmaterial.onBeforeCompile(parameters, _this);\n\t\t\t\tprogram = programCache.acquireProgram(parameters, programCacheKey);\n\t\t\t\tprograms.set(programCacheKey, program);\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t}\n\n\t\t\tconst uniforms = materialProperties.uniforms;\n\n\t\t\tif (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\t\t\t}\n\n\t\t\tupdateCommonMaterialProperties(material, parameters); // store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights(material);\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t// wire up the material to this renderer's lighting state\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n\t\t\t}\n\n\t\t\tconst progUniforms = program.getUniforms();\n\t\t\tconst uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n\t\t\tmaterialProperties.currentProgram = program;\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction updateCommonMaterialProperties(material, parameters) {\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\t\tmaterialProperties.instancing = parameters.instancing;\n\t\t\tmaterialProperties.skinning = parameters.skinning;\n\t\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\t}\n\n\t\tfunction setProgram(camera, scene, material, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\t\tconst envMap = cubemaps.get(material.envMap || environment);\n\t\t\tconst vertexAlphas = material.vertexColors === true && object.geometry && object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4;\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tconst lights = currentRenderState.state.lights;\n\n\t\t\tif (_clippingEnabled === true) {\n\t\t\t\tif (_localClippingEnabled === true || camera !== _currentCamera) {\n\t\t\t\t\tconst useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\n\t\t\t\t\tclipping.setState(material, camera, useCache);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tlet needsProgramChange = false;\n\n\t\t\tif (material.version === materialProperties.__version) {\n\t\t\t\tif (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.outputEncoding !== encoding) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (object.isInstancedMesh && materialProperties.instancing === false) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (!object.isInstancedMesh && materialProperties.instancing === true) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (object.isSkinnedMesh && materialProperties.skinning === false) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (!object.isSkinnedMesh && materialProperties.skinning === true) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.envMap !== envMap) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (material.fog && materialProperties.fog !== fog) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.vertexAlphas !== vertexAlphas) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tneedsProgramChange = true;\n\t\t\t\tmaterialProperties.__version = material.version;\n\t\t\t} //\n\n\n\t\t\tlet program = materialProperties.currentProgram;\n\n\t\t\tif (needsProgramChange === true) {\n\t\t\t\tprogram = getProgram(material, scene, object);\n\t\t\t}\n\n\t\t\tlet refreshProgram = false;\n\t\t\tlet refreshMaterial = false;\n\t\t\tlet refreshLights = false;\n\t\t\tconst p_uniforms = program.getUniforms(),\n\t\t\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif (state.useProgram(program.program)) {\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\t\t\t}\n\n\t\t\tif (material.id !== _currentMaterialId) {\n\t\t\t\t_currentMaterialId = material.id;\n\t\t\t\trefreshMaterial = true;\n\t\t\t}\n\n\t\t\tif (refreshProgram || _currentCamera !== camera) {\n\t\t\t\tp_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n\t\t\t\tif (capabilities.logarithmicDepthBuffer) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n\t\t\t\t}\n\n\t\t\t\tif (_currentCamera !== camera) {\n\t\t\t\t\t_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true; // set to true on material change\n\n\t\t\t\t\trefreshLights = true; // remains set until update done\n\t\t\t\t} // load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\n\t\t\t\tif (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n\t\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif (uCamPos !== undefined) {\n\t\t\t\t\t\tuCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n\t\t\t\t}\n\t\t\t} // skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\n\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrix');\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n\t\t\t\tconst skeleton = object.skeleton;\n\n\t\t\t\tif (skeleton) {\n\t\t\t\t\tif (capabilities.floatVertexTextures) {\n\t\t\t\t\t\tif (skeleton.boneTexture === null) skeleton.computeBoneTexture();\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n\t\t\t}\n\n\t\t\tif (refreshMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n\n\t\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t\t// the current material requires lighting info\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n\t\t\t\t} // refresh uniforms common to several materials\n\n\n\t\t\t\tif (fog && material.fog) {\n\t\t\t\t\tmaterials.refreshFogUniforms(m_uniforms, fog);\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t}\n\n\t\t\tif (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (material.isSpriteMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'center', object.center);\n\t\t\t} // common matrices\n\n\n\t\t\tp_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n\t\t\treturn program;\n\t\t} // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n\t\tfunction markUniformsLightsNeedsUpdate(uniforms, value) {\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\t}\n\n\t\tfunction materialNeedsLights(material) {\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n\t\t}\n\n\t\tthis.getActiveCubeFace = function () {\n\t\t\treturn _currentActiveCubeFace;\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\t\t\treturn _currentActiveMipmapLevel;\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\t\t\treturn _currentRenderTarget;\n\t\t};\n\n\t\tthis.setRenderTarget = function (renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n\t\t\t\ttextures.setupRenderTarget(renderTarget);\n\t\t\t}\n\n\t\t\tlet framebuffer = null;\n\t\t\tlet isCube = false;\n\t\t\tlet isRenderTarget3D = false;\n\n\t\t\tif (renderTarget) {\n\t\t\t\tconst texture = renderTarget.texture;\n\n\t\t\t\tif (texture.isDataTexture3D || texture.isDataTexture2DArray) {\n\t\t\t\t\tisRenderTarget3D = true;\n\t\t\t\t}\n\n\t\t\t\tconst __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\t\tframebuffer = __webglFramebuffer[activeCubeFace];\n\t\t\t\t\tisCube = true;\n\t\t\t\t} else if (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\t\tframebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n\t\t\t\t} else {\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy(renderTarget.viewport);\n\n\t\t\t\t_currentScissor.copy(renderTarget.scissor);\n\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\t\t} else {\n\t\t\t\t_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissorTest = _scissorTest;\n\t\t\t}\n\n\t\t\tconst framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\tif (framebufferBound && capabilities.drawBuffers) {\n\t\t\t\tlet needsUpdate = false;\n\n\t\t\t\tif (renderTarget) {\n\t\t\t\t\tif (renderTarget.isWebGLMultipleRenderTargets) {\n\t\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\t\tif (_currentDrawBuffers.length !== textures.length || _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0) {\n\t\t\t\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\t\t\t\t_currentDrawBuffers[i] = _gl.COLOR_ATTACHMENT0 + i;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_currentDrawBuffers.length = textures.length;\n\t\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0) {\n\t\t\t\t\t\t\t_currentDrawBuffers[0] = _gl.COLOR_ATTACHMENT0;\n\t\t\t\t\t\t\t_currentDrawBuffers.length = 1;\n\t\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== _gl.BACK) {\n\t\t\t\t\t\t_currentDrawBuffers[0] = _gl.BACK;\n\t\t\t\t\t\t_currentDrawBuffers.length = 1;\n\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (needsUpdate) {\n\t\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t\t_gl.drawBuffers(_currentDrawBuffers);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(_currentDrawBuffers);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport);\n\t\t\tstate.scissor(_currentScissor);\n\t\t\tstate.setScissorTest(_currentScissorTest);\n\n\t\t\tif (isCube) {\n\t\t\t\tconst textureProperties = properties.get(renderTarget.texture);\n\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n\t\t\t} else if (isRenderTarget3D) {\n\t\t\t\tconst textureProperties = properties.get(renderTarget.texture);\n\t\t\t\tconst layer = activeCubeFace || 0;\n\n\t\t\t\t_gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);\n\t\t\t}\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n\t\t\tif (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n\t\t\t\tframebuffer = framebuffer[activeCubeFaceIndex];\n\t\t\t}\n\n\t\t\tif (framebuffer) {\n\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\t\tif (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));\n\n\t\t\t\t\tif (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t!halfFloatSupportedByExt) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\t\t\t\t\tif (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n\t\t\t\t\t\t\t_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\t// restore framebuffer of current render target if necessary\n\t\t\t\t\tconst framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;\n\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function (position, texture, level = 0) {\n\t\t\tconst levelScale = Math.pow(2, -level);\n\t\t\tconst width = Math.floor(texture.image.width * levelScale);\n\t\t\tconst height = Math.floor(texture.image.height * levelScale);\n\t\t\tlet glFormat = utils.convert(texture.format);\n\n\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1120100\n\t\t\t\tif (glFormat === _gl.RGB) glFormat = _gl.RGB8;\n\t\t\t\tif (glFormat === _gl.RGBA) glFormat = _gl.RGBA8;\n\t\t\t}\n\n\t\t\ttextures.setTexture2D(texture, 0);\n\n\t\t\t_gl.copyTexImage2D(_gl.TEXTURE_2D, level, glFormat, position.x, position.y, width, height, 0);\n\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture = function (position, srcTexture, dstTexture, level = 0) {\n\t\t\tconst width = srcTexture.image.width;\n\t\t\tconst height = srcTexture.image.height;\n\t\t\tconst glFormat = utils.convert(dstTexture.format);\n\t\t\tconst glType = utils.convert(dstTexture.type);\n\t\t\ttextures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n\t\t\tif (srcTexture.isDataTexture) {\n\t\t\t\t_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n\t\t\t} else {\n\t\t\t\tif (srcTexture.isCompressedTexture) {\n\t\t\t\t\t_gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);\n\t\t\t\t}\n\t\t\t} // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture, level = 0) {\n\t\t\tif (_this.isWebGL1Renderer) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdata\n\t\t\t} = srcTexture.image;\n\t\t\tconst glFormat = utils.convert(dstTexture.format);\n\t\t\tconst glType = utils.convert(dstTexture.type);\n\t\t\tlet glTarget;\n\n\t\t\tif (dstTexture.isDataTexture3D) {\n\t\t\t\ttextures.setTexture3D(dstTexture, 0);\n\t\t\t\tglTarget = _gl.TEXTURE_3D;\n\t\t\t} else if (dstTexture.isDataTexture2DArray) {\n\t\t\t\ttextures.setTexture2DArray(dstTexture, 0);\n\t\t\t\tglTarget = _gl.TEXTURE_2D_ARRAY;\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n\t\t\tconst unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);\n\n\t\t\tconst unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);\n\n\t\t\tconst unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);\n\n\t\t\tconst unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);\n\n\t\t\tconst unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, width);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, height);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);\n\n\t\t\t_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, sourceBox.max.x - sourceBox.min.x + 1, sourceBox.max.y - sourceBox.min.y + 1, sourceBox.max.z - sourceBox.min.z + 1, glFormat, glType, data);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages); // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.initTexture = function (texture) {\n\t\t\ttextures.setTexture2D(texture, 0);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.resetState = function () {\n\t\t\t_currentActiveCubeFace = 0;\n\t\t\t_currentActiveMipmapLevel = 0;\n\t\t\t_currentRenderTarget = null;\n\t\t\tstate.reset();\n\t\t\tbindingStates.reset();\n\t\t};\n\n\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\tdetail: this\n\t\t\t})); // eslint-disable-line no-undef\n\n\t\t}\n\t}\n\n\tclass WebGL1Renderer extends WebGLRenderer {}\n\n\tWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\n\tclass FogExp2 {\n\t\tconstructor(color, density = 0.00025) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.density = density;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new FogExp2(this.color, this.density);\n\t\t}\n\n\t\ttoJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\t\t}\n\n\t}\n\n\tFogExp2.prototype.isFogExp2 = true;\n\n\tclass Fog {\n\t\tconstructor(color, near = 1, far = 1000) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Fog(this.color, this.near, this.far);\n\t\t}\n\n\t\ttoJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\t\t}\n\n\t}\n\n\tFog.prototype.isFog = true;\n\n\tclass Scene extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Scene';\n\t\t\tthis.background = null;\n\t\t\tthis.environment = null;\n\t\t\tthis.fog = null;\n\t\t\tthis.overrideMaterial = null;\n\t\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\t\tdetail: this\n\t\t\t\t})); // eslint-disable-line no-undef\n\n\t\t\t}\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tif (source.background !== null) this.background = source.background.clone();\n\t\t\tif (source.environment !== null) this.environment = source.environment.clone();\n\t\t\tif (source.fog !== null) this.fog = source.fog.clone();\n\t\t\tif (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tif (this.background !== null) data.object.background = this.background.toJSON(meta);\n\t\t\tif (this.environment !== null) data.object.environment = this.environment.toJSON(meta);\n\t\t\tif (this.fog !== null) data.object.fog = this.fog.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tScene.prototype.isScene = true;\n\n\tclass InterleavedBuffer {\n\t\tconstructor(array, stride) {\n\t\t\tthis.array = array;\n\t\t\tthis.stride = stride;\n\t\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\t\t\tthis.usage = StaticDrawUsage;\n\t\t\tthis.updateRange = {\n\t\t\t\toffset: 0,\n\t\t\t\tcount: -1\n\t\t\t};\n\t\t\tthis.version = 0;\n\t\t\tthis.uuid = generateUUID();\n\t\t}\n\n\t\tonUploadCallback() {}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor (let i = 0, l = this.stride; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(value, offset = 0) {\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t}\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n\t\t\t}\n\n\t\t\tconst array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n\t\t\tconst ib = new this.constructor(array, this.stride);\n\t\t\tib.setUsage(this.usage);\n\t\t\treturn ib;\n\t\t}\n\n\t\tonUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t} // generate UUID for array buffer if necessary\n\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));\n\t\t\t} //\n\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\t\t}\n\n\t}\n\n\tInterleavedBuffer.prototype.isInterleavedBuffer = true;\n\n\tconst _vector$6 = /*@__PURE__*/new Vector3();\n\n\tclass InterleavedBufferAttribute {\n\t\tconstructor(interleavedBuffer, itemSize, offset, normalized) {\n\t\t\tthis.name = '';\n\t\t\tthis.data = interleavedBuffer;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.offset = offset;\n\t\t\tthis.normalized = normalized === true;\n\t\t}\n\n\t\tget count() {\n\t\t\treturn this.data.count;\n\t\t}\n\n\t\tget array() {\n\t\t\treturn this.data.array;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tthis.data.needsUpdate = value;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tfor (let i = 0, l = this.data.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(index, x) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset] = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(index, y) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(index, z) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetW(index, w) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetX(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset];\n\t\t}\n\n\t\tgetY(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 1];\n\t\t}\n\n\t\tgetZ(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 2];\n\t\t}\n\n\t\tgetW(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 3];\n\t\t}\n\n\t\tsetXY(index, x, y) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZ(index, x, y, z) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZW(index, x, y, z, w) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\tthis.data.array[index + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0; i < this.count; i++) {\n\t\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (let j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n\t\t\t} else {\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0; i < this.count; i++) {\n\t\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (let j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t} // deinterleave data and save it as an ordinary buffer attribute for now\n\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// save as true interlaved attribtue\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t}\n\n\tInterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\trotation: <float>,\n\t *\tsizeAttenuation: <bool>\n\t * }\n\t */\n\n\tclass SpriteMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SpriteMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.rotation = 0;\n\t\t\tthis.sizeAttenuation = true;\n\t\t\tthis.transparent = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tlet _geometry;\n\n\tconst _intersectPoint = /*@__PURE__*/new Vector3();\n\n\tconst _worldScale = /*@__PURE__*/new Vector3();\n\n\tconst _mvPosition = /*@__PURE__*/new Vector3();\n\n\tconst _alignedPosition = /*@__PURE__*/new Vector2();\n\n\tconst _rotatedPosition = /*@__PURE__*/new Vector2();\n\n\tconst _viewWorldMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _vA = /*@__PURE__*/new Vector3();\n\n\tconst _vB = /*@__PURE__*/new Vector3();\n\n\tconst _vC = /*@__PURE__*/new Vector3();\n\n\tconst _uvA = /*@__PURE__*/new Vector2();\n\n\tconst _uvB = /*@__PURE__*/new Vector2();\n\n\tconst _uvC = /*@__PURE__*/new Vector2();\n\n\tclass Sprite extends Object3D {\n\t\tconstructor(material) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Sprite';\n\n\t\t\tif (_geometry === undefined) {\n\t\t\t\t_geometry = new BufferGeometry();\n\t\t\t\tconst float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n\t\t\t\tconst interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n\t\t\t\t_geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n\t\t\t\t_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n\t\t\t\t_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n\t\t\t}\n\n\t\t\tthis.geometry = _geometry;\n\t\t\tthis.material = material !== undefined ? material : new SpriteMaterial();\n\t\t\tthis.center = new Vector2(0.5, 0.5);\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tif (raycaster.camera === null) {\n\t\t\t\tconsole.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale(this.matrixWorld);\n\n\t\t\t_viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n\t\t\tthis.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n\t\t\t_mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n\t\t\tif (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n\t\t\t\t_worldScale.multiplyScalar(-_mvPosition.z);\n\t\t\t}\n\n\t\t\tconst rotation = this.material.rotation;\n\t\t\tlet sin, cos;\n\n\t\t\tif (rotation !== 0) {\n\t\t\t\tcos = Math.cos(rotation);\n\t\t\t\tsin = Math.sin(rotation);\n\t\t\t}\n\n\t\t\tconst center = this.center;\n\t\t\ttransformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t_uvA.set(0, 0);\n\n\t\t\t_uvB.set(1, 0);\n\n\t\t\t_uvC.set(1, 1); // check first triangle\n\n\n\t\t\tlet intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);\n\n\t\t\tif (intersect === null) {\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t\t_uvB.set(0, 1);\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);\n\n\t\t\t\tif (intersect === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\t\t\t});\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tif (source.center !== undefined) this.center.copy(source.center);\n\t\t\tthis.material = source.material;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSprite.prototype.isSprite = true;\n\n\tfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n\t\tif (sin !== undefined) {\n\t\t\t_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n\t\t\t_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n\t\t} else {\n\t\t\t_rotatedPosition.copy(_alignedPosition);\n\t\t}\n\n\t\tvertexPosition.copy(mvPosition);\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y; // transform to world space\n\n\t\tvertexPosition.applyMatrix4(_viewWorldMatrix);\n\t}\n\n\tconst _v1$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$1 = /*@__PURE__*/new Vector3();\n\n\tclass LOD extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis._currentLevel = 0;\n\t\t\tthis.type = 'LOD';\n\t\t\tObject.defineProperties(this, {\n\t\t\t\tlevels: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: []\n\t\t\t\t},\n\t\t\t\tisLOD: {\n\t\t\t\t\tvalue: true\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.autoUpdate = true;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source, false);\n\t\t\tconst levels = source.levels;\n\n\t\t\tfor (let i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tconst level = levels[i];\n\t\t\t\tthis.addLevel(level.object.clone(), level.distance);\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\treturn this;\n\t\t}\n\n\t\taddLevel(object, distance = 0) {\n\t\t\tdistance = Math.abs(distance);\n\t\t\tconst levels = this.levels;\n\t\t\tlet l;\n\n\t\t\tfor (l = 0; l < levels.length; l++) {\n\t\t\t\tif (distance < levels[l].distance) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlevels.splice(l, 0, {\n\t\t\t\tdistance: distance,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetCurrentLevel() {\n\t\t\treturn this._currentLevel;\n\t\t}\n\n\t\tgetObjectForDistance(distance) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\tlet i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance < levels[i].distance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn levels[i - 1].object;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\t_v1$2.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(_v1$2);\n\t\t\t\tthis.getObjectForDistance(distance).raycast(raycaster, intersects);\n\t\t\t}\n\t\t}\n\n\t\tupdate(camera) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 1) {\n\t\t\t\t_v1$2.setFromMatrixPosition(camera.matrixWorld);\n\n\t\t\t\t_v2$1.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tconst distance = _v1$2.distanceTo(_v2$1) / camera.zoom;\n\t\t\t\tlevels[0].object.visible = true;\n\t\t\t\tlet i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance >= levels[i].distance) {\n\t\t\t\t\t\tlevels[i - 1].object.visible = false;\n\t\t\t\t\t\tlevels[i].object.visible = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tlevels[i].object.visible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tif (this.autoUpdate === false) data.object.autoUpdate = false;\n\t\t\tdata.object.levels = [];\n\t\t\tconst levels = this.levels;\n\n\t\t\tfor (let i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tconst level = levels[i];\n\t\t\t\tdata.object.levels.push({\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tconst _basePosition = /*@__PURE__*/new Vector3();\n\n\tconst _skinIndex = /*@__PURE__*/new Vector4();\n\n\tconst _skinWeight = /*@__PURE__*/new Vector4();\n\n\tconst _vector$5 = /*@__PURE__*/new Vector3();\n\n\tconst _matrix = /*@__PURE__*/new Matrix4();\n\n\tclass SkinnedMesh extends Mesh {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'SkinnedMesh';\n\t\t\tthis.bindMode = 'attached';\n\t\t\tthis.bindMatrix = new Matrix4();\n\t\t\tthis.bindMatrixInverse = new Matrix4();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy(source.bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(source.bindMatrixInverse);\n\t\t\tthis.skeleton = source.skeleton;\n\t\t\treturn this;\n\t\t}\n\n\t\tbind(skeleton, bindMatrix) {\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif (bindMatrix === undefined) {\n\t\t\t\tthis.updateMatrixWorld(true);\n\t\t\t\tthis.skeleton.calculateInverses();\n\t\t\t\tbindMatrix = this.matrixWorld;\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy(bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(bindMatrix).invert();\n\t\t}\n\n\t\tpose() {\n\t\t\tthis.skeleton.pose();\n\t\t}\n\n\t\tnormalizeSkinWeights() {\n\t\t\tconst vector = new Vector4();\n\t\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor (let i = 0, l = skinWeight.count; i < l; i++) {\n\t\t\t\tvector.x = skinWeight.getX(i);\n\t\t\t\tvector.y = skinWeight.getY(i);\n\t\t\t\tvector.z = skinWeight.getZ(i);\n\t\t\t\tvector.w = skinWeight.getW(i);\n\t\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif (scale !== Infinity) {\n\t\t\t\t\tvector.multiplyScalar(scale);\n\t\t\t\t} else {\n\t\t\t\t\tvector.set(1, 0, 0, 0); // do something reasonable\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n\t\t\t}\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\n\t\t\tif (this.bindMode === 'attached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.matrixWorld).invert();\n\t\t\t} else if (this.bindMode === 'detached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.bindMatrix).invert();\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n\t\t\t}\n\t\t}\n\n\t\tboneTransform(index, target) {\n\t\t\tconst skeleton = this.skeleton;\n\t\t\tconst geometry = this.geometry;\n\n\t\t\t_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n\n\t\t\t_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n\n\t\t\t_basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);\n\n\t\t\ttarget.set(0, 0, 0);\n\n\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\tconst weight = _skinWeight.getComponent(i);\n\n\t\t\t\tif (weight !== 0) {\n\t\t\t\t\tconst boneIndex = _skinIndex.getComponent(i);\n\n\t\t\t\t\t_matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n\n\t\t\t\t\ttarget.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn target.applyMatrix4(this.bindMatrixInverse);\n\t\t}\n\n\t}\n\n\tSkinnedMesh.prototype.isSkinnedMesh = true;\n\n\tclass Bone extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Bone';\n\t\t}\n\n\t}\n\n\tBone.prototype.isBone = true;\n\n\tclass DataTexture extends Texture {\n\t\tconstructor(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.image = {\n\t\t\t\tdata: data || null,\n\t\t\t\twidth: width || 1,\n\t\t\t\theight: height || 1\n\t\t\t};\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\tconst _offsetMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _identityMatrix = /*@__PURE__*/new Matrix4();\n\n\tclass Skeleton {\n\t\tconstructor(bones = [], boneInverses = []) {\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.bones = bones.slice(0);\n\t\t\tthis.boneInverses = boneInverses;\n\t\t\tthis.boneMatrices = null;\n\t\t\tthis.boneTexture = null;\n\t\t\tthis.boneTextureSize = 0;\n\t\t\tthis.frame = -1;\n\t\t\tthis.init();\n\t\t}\n\n\t\tinit() {\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\t\t\tthis.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary\n\n\t\t\tif (boneInverses.length === 0) {\n\t\t\t\tthis.calculateInverses();\n\t\t\t} else {\n\t\t\t\t// handle special case\n\t\t\t\tif (bones.length !== boneInverses.length) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n\t\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\t\t\tthis.boneInverses.push(new Matrix4());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcalculateInverses() {\n\t\t\tthis.boneInverses.length = 0;\n\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst inverse = new Matrix4();\n\n\t\t\t\tif (this.bones[i]) {\n\t\t\t\t\tinverse.copy(this.bones[i].matrixWorld).invert();\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push(inverse);\n\t\t\t}\n\t\t}\n\n\t\tpose() {\n\t\t\t// recover the bind-time world matrices\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tbone.matrixWorld.copy(this.boneInverses[i]).invert();\n\t\t\t\t}\n\t\t\t} // compute the local matrices, positions, rotations and scales\n\n\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t\tbone.matrix.copy(bone.parent.matrixWorld).invert();\n\t\t\t\t\t\tbone.matrix.multiply(bone.matrixWorld);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbone.matrix.copy(bone.matrixWorld);\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\t\t\tconst boneMatrices = this.boneMatrices;\n\t\t\tconst boneTexture = this.boneTexture; // flatten bone matrices to array\n\n\t\t\tfor (let i = 0, il = bones.length; i < il; i++) {\n\t\t\t\t// compute the offset between the current and the original transform\n\t\t\t\tconst matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n\n\t\t\t\t_offsetMatrix.toArray(boneMatrices, i * 16);\n\t\t\t}\n\n\t\t\tif (boneTexture !== null) {\n\t\t\t\tboneTexture.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Skeleton(this.bones, this.boneInverses);\n\t\t}\n\n\t\tcomputeBoneTexture() {\n\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t//\t\t\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t//\twith\t8x8\tpixel texture max\t 16 bones * 4 pixels =\t(8 * 8)\n\t\t\t//\t\t\t 16x16 pixel texture max\t 64 bones * 4 pixels = (16 * 16)\n\t\t\t//\t\t\t 32x32 pixel texture max\t256 bones * 4 pixels = (32 * 32)\n\t\t\t//\t\t\t 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\t\tlet size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix\n\n\t\t\tsize = ceilPowerOfTwo(size);\n\t\t\tsize = Math.max(size, 4);\n\t\t\tconst boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n\t\t\tboneMatrices.set(this.boneMatrices); // copy current values\n\n\t\t\tconst boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n\t\t\tthis.boneMatrices = boneMatrices;\n\t\t\tthis.boneTexture = boneTexture;\n\t\t\tthis.boneTextureSize = size;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetBoneByName(name) {\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone.name === name) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tdispose() {\n\t\t\tif (this.boneTexture !== null) {\n\t\t\t\tthis.boneTexture.dispose();\n\t\t\t\tthis.boneTexture = null;\n\t\t\t}\n\t\t}\n\n\t\tfromJSON(json, bones) {\n\t\t\tthis.uuid = json.uuid;\n\n\t\t\tfor (let i = 0, l = json.bones.length; i < l; i++) {\n\t\t\t\tconst uuid = json.bones[i];\n\t\t\t\tlet bone = bones[uuid];\n\n\t\t\t\tif (bone === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push(bone);\n\t\t\t\tthis.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n\t\t\t}\n\n\t\t\tthis.init();\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Skeleton',\n\t\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t\t},\n\t\t\t\tbones: [],\n\t\t\t\tboneInverses: []\n\t\t\t};\n\t\t\tdata.uuid = this.uuid;\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\n\t\t\tfor (let i = 0, l = bones.length; i < l; i++) {\n\t\t\t\tconst bone = bones[i];\n\t\t\t\tdata.bones.push(bone.uuid);\n\t\t\t\tconst boneInverse = boneInverses[i];\n\t\t\t\tdata.boneInverses.push(boneInverse.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tconst _instanceLocalMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _instanceWorldMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _instanceIntersects = [];\n\n\tconst _mesh = /*@__PURE__*/new Mesh();\n\n\tclass InstancedMesh extends Mesh {\n\t\tconstructor(geometry, material, count) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);\n\t\t\tthis.instanceColor = null;\n\t\t\tthis.count = count;\n\t\t\tthis.frustumCulled = false;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.instanceMatrix.copy(source.instanceMatrix);\n\t\t\tif (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\n\t\t\tthis.count = source.count;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetColorAt(index, color) {\n\t\t\tcolor.fromArray(this.instanceColor.array, index * 3);\n\t\t}\n\n\t\tgetMatrixAt(index, matrix) {\n\t\t\tmatrix.fromArray(this.instanceMatrix.array, index * 16);\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst raycastTimes = this.count;\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\t\t\tif (_mesh.material === undefined) return;\n\n\t\t\tfor (let instanceId = 0; instanceId < raycastTimes; instanceId++) {\n\t\t\t\t// calculate the world matrix for each instance\n\t\t\t\tthis.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n\t\t\t\tfor (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n\t\t\t\t\tconst intersect = _instanceIntersects[i];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push(intersect);\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\t\t\t}\n\t\t}\n\n\t\tsetColorAt(index, color) {\n\t\t\tif (this.instanceColor === null) {\n\t\t\t\tthis.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);\n\t\t\t}\n\n\t\t\tcolor.toArray(this.instanceColor.array, index * 3);\n\t\t}\n\n\t\tsetMatrixAt(index, matrix) {\n\t\t\tmatrix.toArray(this.instanceMatrix.array, index * 16);\n\t\t}\n\n\t\tupdateMorphTargets() {}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tInstancedMesh.prototype.isInstancedMesh = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\tlinecap: \"round\",\n\t *\tlinejoin: \"round\"\n\t * }\n\t */\n\n\tclass LineBasicMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineBasicMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.linewidth = 1;\n\t\t\tthis.linecap = 'round';\n\t\t\tthis.linejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.linewidth = source.linewidth;\n\t\t\tthis.linecap = source.linecap;\n\t\t\tthis.linejoin = source.linejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tconst _start$1 = /*@__PURE__*/new Vector3();\n\n\tconst _end$1 = /*@__PURE__*/new Vector3();\n\n\tconst _inverseMatrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _ray$1 = /*@__PURE__*/new Ray();\n\n\tconst _sphere$1 = /*@__PURE__*/new Sphere();\n\n\tclass Line extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Line';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\tcomputeLineDistances() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\t\tconst lineDistances = [0];\n\n\t\t\t\t\tfor (let i = 1, l = positionAttribute.count; i < l; i++) {\n\t\t\t\t\t\t_start$1.fromBufferAttribute(positionAttribute, i - 1);\n\n\t\t\t\t\t\t_end$1.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\tlineDistances[i] = lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i] += _start$1.distanceTo(_end$1);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst threshold = raycaster.params.Line.threshold;\n\t\t\tconst drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$1.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$1.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$1.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$1) === false) return; //\n\n\t\t\t_inverseMatrix$1.copy(matrixWorld).invert();\n\n\t\t\t_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n\n\t\t\tconst localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tconst localThresholdSq = localThreshold * localThreshold;\n\t\t\tconst vStart = new Vector3();\n\t\t\tconst vEnd = new Vector3();\n\t\t\tconst interSegment = new Vector3();\n\t\t\tconst interRay = new Vector3();\n\t\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end - 1; i < l; i += step) {\n\t\t\t\t\t\tconst a = index.getX(i);\n\t\t\t\t\t\tconst b = index.getX(i + 1);\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, a);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, b);\n\n\t\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end - 1; i < l; i += step) {\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, i);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tLine.prototype.isLine = true;\n\n\tconst _start = /*@__PURE__*/new Vector3();\n\n\tconst _end = /*@__PURE__*/new Vector3();\n\n\tclass LineSegments extends Line {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'LineSegments';\n\t\t}\n\n\t\tcomputeLineDistances() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\t\tconst lineDistances = [];\n\n\t\t\t\t\tfor (let i = 0, l = positionAttribute.count; i < l; i += 2) {\n\t\t\t\t\t\t_start.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\t_end.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tlineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineSegments.prototype.isLineSegments = true;\n\n\tclass LineLoop extends Line {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'LineLoop';\n\t\t}\n\n\t}\n\n\tLineLoop.prototype.isLineLoop = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tsize: <float>,\n\t *\tsizeAttenuation: <bool>\n\t *\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tclass PointsMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PointsMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.size = 1;\n\t\t\tthis.sizeAttenuation = true;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.size = source.size;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tconst _inverseMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _ray = /*@__PURE__*/new Ray();\n\n\tconst _sphere = /*@__PURE__*/new Sphere();\n\n\tconst _position$2 = /*@__PURE__*/new Vector3();\n\n\tclass Points extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new PointsMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Points';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst threshold = raycaster.params.Points.threshold;\n\t\t\tconst drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy(geometry.boundingSphere);\n\n\t\t\t_sphere.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n\t\t\t_inverseMatrix.copy(matrixWorld).invert();\n\n\t\t\t_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);\n\n\t\t\tconst localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, il = end; i < il; i++) {\n\t\t\t\t\t\tconst a = index.getX(i);\n\n\t\t\t\t\t\t_position$2.fromBufferAttribute(positionAttribute, a);\n\n\t\t\t\t\t\ttestPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end; i < l; i++) {\n\t\t\t\t\t\t_position$2.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\ttestPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tPoints.prototype.isPoints = true;\n\n\tfunction testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n\t\tconst rayPointDistanceSq = _ray.distanceSqToPoint(point);\n\n\t\tif (rayPointDistanceSq < localThresholdSq) {\n\t\t\tconst intersectPoint = new Vector3();\n\n\t\t\t_ray.closestPointToPoint(point, intersectPoint);\n\n\t\t\tintersectPoint.applyMatrix4(matrixWorld);\n\t\t\tconst distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt(rayPointDistanceSq),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t}\n\t}\n\n\tclass VideoTexture extends Texture {\n\t\tconstructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tsuper(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.format = format !== undefined ? format : RGBFormat;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tconst scope = this;\n\n\t\t\tfunction updateVideo() {\n\t\t\t\tscope.needsUpdate = true;\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\n\t\t\tif ('requestVideoFrameCallback' in video) {\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.image).copy(this);\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst video = this.image;\n\t\t\tconst hasVideoFrameCallback = ('requestVideoFrameCallback' in video);\n\n\t\t\tif (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tVideoTexture.prototype.isVideoTexture = true;\n\n\tclass CompressedTexture extends Texture {\n\t\tconstructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.mipmaps = mipmaps; // no flipping for cube textures\n\t\t\t// (also flipping doesn't work for compressed textures )\n\n\t\t\tthis.flipY = false; // can't generate mipmaps for compressed textures\n\t\t\t// mips must be embedded in DDS files\n\n\t\t\tthis.generateMipmaps = false;\n\t\t}\n\n\t}\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\tclass CanvasTexture extends Texture {\n\t\tconstructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tsuper(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\tclass DepthTexture extends Texture {\n\t\tconstructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {\n\t\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\t\tif (format !== DepthFormat && format !== DepthStencilFormat) {\n\t\t\t\tthrow new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n\t\t\t}\n\n\t\t\tif (type === undefined && format === DepthFormat) type = UnsignedShortType;\n\t\t\tif (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\tthis.flipY = false;\n\t\t\tthis.generateMipmaps = false;\n\t\t}\n\n\t}\n\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\tclass CircleGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CircleGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tsegments = Math.max(3, segments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // center point\n\n\t\t\tvertices.push(0, 0, 0);\n\t\t\tnormals.push(0, 0, 1);\n\t\t\tuvs.push(0.5, 0.5);\n\n\t\t\tfor (let s = 0, i = 3; s <= segments; s++, i += 3) {\n\t\t\t\tconst segment = thetaStart + s / segments * thetaLength; // vertex\n\n\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\tnormals.push(0, 0, 1); // uvs\n\n\t\t\t\tuv.x = (vertices[i] / radius + 1) / 2;\n\t\t\t\tuv.y = (vertices[i + 1] / radius + 1) / 2;\n\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t} // indices\n\n\n\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\tindices.push(i, i + 1, 0);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass CylinderGeometry extends BufferGeometry {\n\t\tconstructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CylinderGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tconst scope = this;\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\theightSegments = Math.floor(heightSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet index = 0;\n\t\t\tconst indexArray = [];\n\t\t\tconst halfHeight = height / 2;\n\t\t\tlet groupStart = 0; // generate geometry\n\n\t\t\tgenerateTorso();\n\n\t\t\tif (openEnded === false) {\n\t\t\t\tif (radiusTop > 0) generateCap(true);\n\t\t\t\tif (radiusBottom > 0) generateCap(false);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction generateTorso() {\n\t\t\t\tconst normal = new Vector3();\n\t\t\t\tconst vertex = new Vector3();\n\t\t\t\tlet groupCount = 0; // this will be used to calculate the normal\n\n\t\t\t\tconst slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n\t\t\t\tfor (let y = 0; y <= heightSegments; y++) {\n\t\t\t\t\tconst indexRow = [];\n\t\t\t\t\tconst v = y / heightSegments; // calculate the radius of the current row\n\n\t\t\t\t\tconst radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n\t\t\t\t\tfor (let x = 0; x <= radialSegments; x++) {\n\t\t\t\t\t\tconst u = x / radialSegments;\n\t\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\t\t\t\t\t\tconst sinTheta = Math.sin(theta);\n\t\t\t\t\t\tconst cosTheta = Math.cos(theta); // vertex\n\n\t\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\t\tvertex.y = -v * height + halfHeight;\n\t\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\t\tnormal.set(sinTheta, slope, cosTheta).normalize();\n\t\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\t\tuvs.push(u, 1 - v); // save index of vertex in respective row\n\n\t\t\t\t\t\tindexRow.push(index++);\n\t\t\t\t\t} // now save vertices of the row in our index array\n\n\n\t\t\t\t\tindexArray.push(indexRow);\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (let x = 0; x < radialSegments; x++) {\n\t\t\t\t\tfor (let y = 0; y < heightSegments; y++) {\n\t\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\t\tconst a = indexArray[y][x];\n\t\t\t\t\t\tconst b = indexArray[y + 1][x];\n\t\t\t\t\t\tconst c = indexArray[y + 1][x + 1];\n\t\t\t\t\t\tconst d = indexArray[y][x + 1]; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // update group counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\tfunction generateCap(top) {\n\t\t\t\t// save the index of the first center vertex\n\t\t\t\tconst centerIndexStart = index;\n\t\t\t\tconst uv = new Vector2();\n\t\t\t\tconst vertex = new Vector3();\n\t\t\t\tlet groupCount = 0;\n\t\t\t\tconst radius = top === true ? radiusTop : radiusBottom;\n\t\t\t\tconst sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.\n\t\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\t\tfor (let x = 1; x <= radialSegments; x++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertices.push(0, halfHeight * sign, 0); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuvs.push(0.5, 0.5); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // save the index of the last center vertex\n\n\n\t\t\t\tconst centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n\t\t\t\tfor (let x = 0; x <= radialSegments; x++) {\n\t\t\t\t\tconst u = x / radialSegments;\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\t\t\t\t\tconst cosTheta = Math.cos(theta);\n\t\t\t\t\tconst sinTheta = Math.sin(theta); // vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuv.x = cosTheta * 0.5 + 0.5;\n\t\t\t\t\tuv.y = sinTheta * 0.5 * sign + 0.5;\n\t\t\t\t\tuvs.push(uv.x, uv.y); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (let x = 0; x < radialSegments; x++) {\n\t\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\t\tif (top === true) {\n\t\t\t\t\t\t// face top\n\t\t\t\t\t\tindices.push(i, i + 1, c);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// face bottom\n\t\t\t\t\t\tindices.push(i + 1, i, c);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass ConeGeometry extends CylinderGeometry {\n\t\tconstructor(radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n\t\t\tthis.type = 'ConeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t}\n\n\t}\n\n\tclass PolyhedronGeometry extends BufferGeometry {\n\t\tconstructor(vertices, indices, radius = 1, detail = 0) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PolyhedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t}; // default buffer data\n\n\t\t\tconst vertexBuffer = [];\n\t\t\tconst uvBuffer = []; // the subdivision creates the vertex buffer data\n\n\t\t\tsubdivide(detail); // all vertices should lie on a conceptual sphere with a given radius\n\n\t\t\tapplyRadius(radius); // finally, create the uv data\n\n\t\t\tgenerateUVs(); // build non-indexed geometry\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n\n\t\t\tif (detail === 0) {\n\t\t\t\tthis.computeVertexNormals(); // flat normals\n\t\t\t} else {\n\t\t\t\tthis.normalizeNormals(); // smooth normals\n\t\t\t} // helper functions\n\n\n\t\t\tfunction subdivide(detail) {\n\t\t\t\tconst a = new Vector3();\n\t\t\t\tconst b = new Vector3();\n\t\t\t\tconst c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\t\tfor (let i = 0; i < indices.length; i += 3) {\n\t\t\t\t\t// get the vertices of the face\n\t\t\t\t\tgetVertexByIndex(indices[i + 0], a);\n\t\t\t\t\tgetVertexByIndex(indices[i + 1], b);\n\t\t\t\t\tgetVertexByIndex(indices[i + 2], c); // perform subdivision\n\n\t\t\t\t\tsubdivideFace(a, b, c, detail);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction subdivideFace(a, b, c, detail) {\n\t\t\t\tconst cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\t\tconst v = []; // construct all of the vertices for this subdivision\n\n\t\t\t\tfor (let i = 0; i <= cols; i++) {\n\t\t\t\t\tv[i] = [];\n\t\t\t\t\tconst aj = a.clone().lerp(c, i / cols);\n\t\t\t\t\tconst bj = b.clone().lerp(c, i / cols);\n\t\t\t\t\tconst rows = cols - i;\n\n\t\t\t\t\tfor (let j = 0; j <= rows; j++) {\n\t\t\t\t\t\tif (j === 0 && i === cols) {\n\t\t\t\t\t\t\tv[i][j] = aj;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv[i][j] = aj.clone().lerp(bj, j / rows);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // construct all of the faces\n\n\n\t\t\t\tfor (let i = 0; i < cols; i++) {\n\t\t\t\t\tfor (let j = 0; j < 2 * (cols - i) - 1; j++) {\n\t\t\t\t\t\tconst k = Math.floor(j / 2);\n\n\t\t\t\t\t\tif (j % 2 === 0) {\n\t\t\t\t\t\t\tpushVertex(v[i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k]);\n\t\t\t\t\t\t\tpushVertex(v[i][k]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpushVertex(v[i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction applyRadius(radius) {\n\t\t\t\tconst vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\t\tfor (let i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvertex.normalize().multiplyScalar(radius);\n\t\t\t\t\tvertexBuffer[i + 0] = vertex.x;\n\t\t\t\t\tvertexBuffer[i + 1] = vertex.y;\n\t\t\t\t\tvertexBuffer[i + 2] = vertex.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tconst vertex = new Vector3();\n\n\t\t\t\tfor (let i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tconst u = azimuth(vertex) / 2 / Math.PI + 0.5;\n\t\t\t\t\tconst v = inclination(vertex) / Math.PI + 0.5;\n\t\t\t\t\tuvBuffer.push(u, 1 - v);\n\t\t\t\t}\n\n\t\t\t\tcorrectUVs();\n\t\t\t\tcorrectSeam();\n\t\t\t}\n\n\t\t\tfunction correctSeam() {\n\t\t\t\t// handle case when face straddles the seam, see #3269\n\t\t\t\tfor (let i = 0; i < uvBuffer.length; i += 6) {\n\t\t\t\t\t// uv data of a single face\n\t\t\t\t\tconst x0 = uvBuffer[i + 0];\n\t\t\t\t\tconst x1 = uvBuffer[i + 2];\n\t\t\t\t\tconst x2 = uvBuffer[i + 4];\n\t\t\t\t\tconst max = Math.max(x0, x1, x2);\n\t\t\t\t\tconst min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary\n\n\t\t\t\t\tif (max > 0.9 && min < 0.1) {\n\t\t\t\t\t\tif (x0 < 0.2) uvBuffer[i + 0] += 1;\n\t\t\t\t\t\tif (x1 < 0.2) uvBuffer[i + 2] += 1;\n\t\t\t\t\t\tif (x2 < 0.2) uvBuffer[i + 4] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction pushVertex(vertex) {\n\t\t\t\tvertexBuffer.push(vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\n\t\t\tfunction getVertexByIndex(index, vertex) {\n\t\t\t\tconst stride = index * 3;\n\t\t\t\tvertex.x = vertices[stride + 0];\n\t\t\t\tvertex.y = vertices[stride + 1];\n\t\t\t\tvertex.z = vertices[stride + 2];\n\t\t\t}\n\n\t\t\tfunction correctUVs() {\n\t\t\t\tconst a = new Vector3();\n\t\t\t\tconst b = new Vector3();\n\t\t\t\tconst c = new Vector3();\n\t\t\t\tconst centroid = new Vector3();\n\t\t\t\tconst uvA = new Vector2();\n\t\t\t\tconst uvB = new Vector2();\n\t\t\t\tconst uvC = new Vector2();\n\n\t\t\t\tfor (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n\t\t\t\t\ta.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n\t\t\t\t\tb.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n\t\t\t\t\tc.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n\t\t\t\t\tuvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n\t\t\t\t\tuvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n\t\t\t\t\tuvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n\t\t\t\t\tcentroid.copy(a).add(b).add(c).divideScalar(3);\n\t\t\t\t\tconst azi = azimuth(centroid);\n\t\t\t\t\tcorrectUV(uvA, j + 0, a, azi);\n\t\t\t\t\tcorrectUV(uvB, j + 2, b, azi);\n\t\t\t\t\tcorrectUV(uvC, j + 4, c, azi);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction correctUV(uv, stride, vector, azimuth) {\n\t\t\t\tif (azimuth < 0 && uv.x === 1) {\n\t\t\t\t\tuvBuffer[stride] = uv.x - 1;\n\t\t\t\t}\n\n\t\t\t\tif (vector.x === 0 && vector.z === 0) {\n\t\t\t\t\tuvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n\t\t\t\t}\n\t\t\t} // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n\t\t\tfunction azimuth(vector) {\n\t\t\t\treturn Math.atan2(vector.z, -vector.x);\n\t\t\t} // Angle above the XZ plane.\n\n\n\t\t\tfunction inclination(vector) {\n\t\t\t\treturn Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass DodecahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst t = (1 + Math.sqrt(5)) / 2;\n\t\t\tconst r = 1 / t;\n\t\t\tconst vertices = [// (±1, ±1, ±1)\n\t\t\t-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n\t\t\t0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n\t\t\t-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n\t\t\t-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n\t\t\tconst indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'DodecahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\tconst _v0 = new Vector3();\n\n\tconst _v1$1 = new Vector3();\n\n\tconst _normal = new Vector3();\n\n\tconst _triangle = new Triangle();\n\n\tclass EdgesGeometry extends BufferGeometry {\n\t\tconstructor(geometry, thresholdAngle) {\n\t\t\tsuper();\n\t\t\tthis.type = 'EdgesGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tthresholdAngle: thresholdAngle\n\t\t\t};\n\t\t\tthresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow(10, precisionPoints);\n\t\t\tconst thresholdDot = Math.cos(DEG2RAD * thresholdAngle);\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute('position');\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\t\t\tconst indexArr = [0, 0, 0];\n\t\t\tconst vertKeys = ['a', 'b', 'c'];\n\t\t\tconst hashes = new Array(3);\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\n\t\t\tfor (let i = 0; i < indexCount; i += 3) {\n\t\t\t\tif (indexAttr) {\n\t\t\t\t\tindexArr[0] = indexAttr.getX(i);\n\t\t\t\t\tindexArr[1] = indexAttr.getX(i + 1);\n\t\t\t\t\tindexArr[2] = indexAttr.getX(i + 2);\n\t\t\t\t} else {\n\t\t\t\t\tindexArr[0] = i;\n\t\t\t\t\tindexArr[1] = i + 1;\n\t\t\t\t\tindexArr[2] = i + 2;\n\t\t\t\t}\n\n\t\t\t\tconst {\n\t\t\t\t\ta,\n\t\t\t\t\tb,\n\t\t\t\t\tc\n\t\t\t\t} = _triangle;\n\t\t\t\ta.fromBufferAttribute(positionAttr, indexArr[0]);\n\t\t\t\tb.fromBufferAttribute(positionAttr, indexArr[1]);\n\t\t\t\tc.fromBufferAttribute(positionAttr, indexArr[2]);\n\n\t\t\t\t_triangle.getNormal(_normal); // create hashes for the edge from the vertices\n\n\n\t\t\t\thashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;\n\t\t\t\thashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;\n\t\t\t\thashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`; // skip degenerate triangles\n\n\t\t\t\tif (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} // iterate over every edge\n\n\n\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = (j + 1) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[j];\n\t\t\t\t\tconst vecHash1 = hashes[jNext];\n\t\t\t\t\tconst v0 = _triangle[vertKeys[j]];\n\t\t\t\t\tconst v1 = _triangle[vertKeys[jNext]];\n\t\t\t\t\tconst hash = `${vecHash0}_${vecHash1}`;\n\t\t\t\t\tconst reverseHash = `${vecHash1}_${vecHash0}`;\n\n\t\t\t\t\tif (reverseHash in edgeData && edgeData[reverseHash]) {\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n\t\t\t\t\t\t\tvertices.push(v0.x, v0.y, v0.z);\n\t\t\t\t\t\t\tvertices.push(v1.x, v1.y, v1.z);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[reverseHash] = null;\n\t\t\t\t\t} else if (!(hash in edgeData)) {\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[hash] = {\n\t\t\t\t\t\t\tindex0: indexArr[j],\n\t\t\t\t\t\t\tindex1: indexArr[jNext],\n\t\t\t\t\t\t\tnormal: _normal.clone()\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // iterate over all remaining, unmatched edges and add them to the vertex array\n\n\n\t\t\tfor (const key in edgeData) {\n\t\t\t\tif (edgeData[key]) {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tindex0,\n\t\t\t\t\t\tindex1\n\t\t\t\t\t} = edgeData[key];\n\n\t\t\t\t\t_v0.fromBufferAttribute(positionAttr, index0);\n\n\t\t\t\t\t_v1$1.fromBufferAttribute(positionAttr, index1);\n\n\t\t\t\t\tvertices.push(_v0.x, _v0.y, _v0.z);\n\t\t\t\t\tvertices.push(_v1$1.x, _v1$1.y, _v1$1.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t}\n\n\t}\n\n\t/**\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\tconst Earcut = {\n\t\ttriangulate: function (data, holeIndices, dim) {\n\t\t\tdim = dim || 2;\n\t\t\tconst hasHoles = holeIndices && holeIndices.length;\n\t\t\tconst outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\t\t\tlet outerNode = linkedList(data, 0, outerLen, dim, true);\n\t\t\tconst triangles = [];\n\t\t\tif (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\t\t\tlet minX, minY, maxX, maxY, x, y, invSize;\n\t\t\tif (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\t\tif (data.length > 80 * dim) {\n\t\t\t\tminX = maxX = data[0];\n\t\t\t\tminY = maxY = data[1];\n\n\t\t\t\tfor (let i = dim; i < outerLen; i += dim) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t\ty = data[i + 1];\n\t\t\t\t\tif (x < minX) minX = x;\n\t\t\t\t\tif (y < minY) minY = y;\n\t\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\t} // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n\t\t\t\tinvSize = Math.max(maxX - minX, maxY - minY);\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\t\t\t}\n\n\t\t\tearcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\t\t\treturn triangles;\n\t\t}\n\t}; // create a circular doubly linked list from polygon points in the specified winding order\n\n\tfunction linkedList(data, start, end, dim, clockwise) {\n\t\tlet i, last;\n\n\t\tif (clockwise === signedArea(data, start, end, dim) > 0) {\n\t\t\tfor (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n\t\t} else {\n\t\t\tfor (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n\t\t}\n\n\t\tif (last && equals(last, last.next)) {\n\t\t\tremoveNode(last);\n\t\t\tlast = last.next;\n\t\t}\n\n\t\treturn last;\n\t} // eliminate colinear or duplicate points\n\n\n\tfunction filterPoints(start, end) {\n\t\tif (!start) return start;\n\t\tif (!end) end = start;\n\t\tlet p = start,\n\t\t\t\tagain;\n\n\t\tdo {\n\t\t\tagain = false;\n\n\t\t\tif (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n\t\t\t\tremoveNode(p);\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif (p === p.next) break;\n\t\t\t\tagain = true;\n\t\t\t} else {\n\t\t\t\tp = p.next;\n\t\t\t}\n\t\t} while (again || p !== end);\n\n\t\treturn end;\n\t} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\n\tfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n\t\tif (!ear) return; // interlink polygon nodes in z-order\n\n\t\tif (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\t\tlet stop = ear,\n\t\t\t\tprev,\n\t\t\t\tnext; // iterate through ears, slicing them one by one\n\n\t\twhile (ear.prev !== ear.next) {\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push(prev.i / dim);\n\t\t\t\ttriangles.push(ear.i / dim);\n\t\t\t\ttriangles.push(next.i / dim);\n\t\t\t\tremoveNode(ear); // skipping the next vertex leads to less sliver triangles\n\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n\t\t\tif (ear === stop) {\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif (!pass) {\n\t\t\t\t\tearcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n\t\t\t\t} else if (pass === 1) {\n\t\t\t\t\tear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n\t\t\t\t\tearcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n\t\t\t\t} else if (pass === 2) {\n\t\t\t\t\tsplitEarcut(ear, triangles, dim, minX, minY, invSize);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\n\tfunction isEar(ear) {\n\t\tconst a = ear.prev,\n\t\t\t\t\tb = ear,\n\t\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// now make sure we don't have other points inside the potential ear\n\n\t\tlet p = ear.next.next;\n\n\t\twhile (p !== ear.prev) {\n\t\t\tif (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.next;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction isEarHashed(ear, minX, minY, invSize) {\n\t\tconst a = ear.prev,\n\t\t\t\t\tb = ear,\n\t\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// triangle bbox; min & max are calculated like this for speed\n\n\t\tconst minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n\t\t\t\t\tminTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n\t\t\t\t\tmaxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n\t\t\t\t\tmaxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n\t\tconst minZ = zOrder(minTX, minTY, minX, minY, invSize),\n\t\t\t\t\tmaxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\t\tlet p = ear.prevZ,\n\t\t\t\tn = ear.nextZ; // look for points inside the triangle in both directions\n\n\t\twhile (p && p.z >= minZ && n && n.z <= maxZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t} // look for remaining points in decreasing z-order\n\n\n\t\twhile (p && p.z >= minZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t} // look for remaining points in increasing z-order\n\n\n\t\twhile (n && n.z <= maxZ) {\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t}\n\n\t\treturn true;\n\t} // go through all polygon nodes and cure small local self-intersections\n\n\n\tfunction cureLocalIntersections(start, triangles, dim) {\n\t\tlet p = start;\n\n\t\tdo {\n\t\t\tconst a = p.prev,\n\t\t\t\t\t\tb = p.next.next;\n\n\t\t\tif (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\t\t\t\ttriangles.push(a.i / dim);\n\t\t\t\ttriangles.push(p.i / dim);\n\t\t\t\ttriangles.push(b.i / dim); // remove two nodes involved\n\n\t\t\t\tremoveNode(p);\n\t\t\t\tremoveNode(p.next);\n\t\t\t\tp = start = b;\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn filterPoints(p);\n\t} // try splitting polygon into two and triangulate them independently\n\n\n\tfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tlet a = start;\n\n\t\tdo {\n\t\t\tlet b = a.next.next;\n\n\t\t\twhile (b !== a.prev) {\n\t\t\t\tif (a.i !== b.i && isValidDiagonal(a, b)) {\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tlet c = splitPolygon(a, b); // filter colinear points around the cuts\n\n\t\t\t\t\ta = filterPoints(a, a.next);\n\t\t\t\t\tc = filterPoints(c, c.next); // run earcut on each half\n\n\t\t\t\t\tearcutLinked(a, triangles, dim, minX, minY, invSize);\n\t\t\t\t\tearcutLinked(c, triangles, dim, minX, minY, invSize);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\t\t\t}\n\n\t\t\ta = a.next;\n\t\t} while (a !== start);\n\t} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\n\tfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n\t\tconst queue = [];\n\t\tlet i, len, start, end, list;\n\n\t\tfor (i = 0, len = holeIndices.length; i < len; i++) {\n\t\t\tstart = holeIndices[i] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n\t\t\tlist = linkedList(data, start, end, dim, false);\n\t\t\tif (list === list.next) list.steiner = true;\n\t\t\tqueue.push(getLeftmost(list));\n\t\t}\n\n\t\tqueue.sort(compareX); // process holes from left to right\n\n\t\tfor (i = 0; i < queue.length; i++) {\n\t\t\teliminateHole(queue[i], outerNode);\n\t\t\touterNode = filterPoints(outerNode, outerNode.next);\n\t\t}\n\n\t\treturn outerNode;\n\t}\n\n\tfunction compareX(a, b) {\n\t\treturn a.x - b.x;\n\t} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\n\tfunction eliminateHole(hole, outerNode) {\n\t\touterNode = findHoleBridge(hole, outerNode);\n\n\t\tif (outerNode) {\n\t\t\tconst b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n\t\t\tfilterPoints(outerNode, outerNode.next);\n\t\t\tfilterPoints(b, b.next);\n\t\t}\n\t} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\n\tfunction findHoleBridge(hole, outerNode) {\n\t\tlet p = outerNode;\n\t\tconst hx = hole.x;\n\t\tconst hy = hole.y;\n\t\tlet qx = -Infinity,\n\t\t\t\tm; // find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\n\t\tdo {\n\t\t\tif (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n\t\t\t\tconst x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n\t\t\t\tif (x <= hx && x > qx) {\n\t\t\t\t\tqx = x;\n\n\t\t\t\t\tif (x === hx) {\n\t\t\t\t\t\tif (hy === p.y) return p;\n\t\t\t\t\t\tif (hy === p.next.y) return p.next;\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== outerNode);\n\n\t\tif (!m) return null;\n\t\tif (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tconst stop = m,\n\t\t\t\t\tmx = m.x,\n\t\t\t\t\tmy = m.y;\n\t\tlet tanMin = Infinity,\n\t\t\t\ttan;\n\t\tp = m;\n\n\t\tdo {\n\t\t\tif (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\t\t\t\ttan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n\t\t\t\tif (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== stop);\n\n\t\treturn m;\n\t} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\n\tfunction sectorContainsSector(m, p) {\n\t\treturn area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n\t} // interlink polygon nodes in z-order\n\n\n\tfunction indexCurve(start, minX, minY, invSize) {\n\t\tlet p = start;\n\n\t\tdo {\n\t\t\tif (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\t\tsortLinked(p);\n\t} // Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\n\tfunction sortLinked(list) {\n\t\tlet i,\n\t\t\t\tp,\n\t\t\t\tq,\n\t\t\t\te,\n\t\t\t\ttail,\n\t\t\t\tnumMerges,\n\t\t\t\tpSize,\n\t\t\t\tqSize,\n\t\t\t\tinSize = 1;\n\n\t\tdo {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile (p) {\n\t\t\t\tnumMerges++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\n\t\t\t\tfor (i = 0; i < inSize; i++) {\n\t\t\t\t\tpSize++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif (!q) break;\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile (pSize > 0 || qSize > 0 && q) {\n\t\t\t\t\tif (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tail) tail.nextZ = e;else list = e;\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\t\t} while (numMerges > 1);\n\n\t\treturn list;\n\t} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\n\tfunction zOrder(x, y, minX, minY, invSize) {\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * (x - minX) * invSize;\n\t\ty = 32767 * (y - minY) * invSize;\n\t\tx = (x | x << 8) & 0x00FF00FF;\n\t\tx = (x | x << 4) & 0x0F0F0F0F;\n\t\tx = (x | x << 2) & 0x33333333;\n\t\tx = (x | x << 1) & 0x55555555;\n\t\ty = (y | y << 8) & 0x00FF00FF;\n\t\ty = (y | y << 4) & 0x0F0F0F0F;\n\t\ty = (y | y << 2) & 0x33333333;\n\t\ty = (y | y << 1) & 0x55555555;\n\t\treturn x | y << 1;\n\t} // find the leftmost node of a polygon ring\n\n\n\tfunction getLeftmost(start) {\n\t\tlet p = start,\n\t\t\t\tleftmost = start;\n\n\t\tdo {\n\t\t\tif (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn leftmost;\n\t} // check if a point lies within a convex triangle\n\n\n\tfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n\t\treturn (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n\t} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\n\tfunction isValidDiagonal(a, b) {\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n\t\tlocallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n\t\tarea(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n\t\tequals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n\t} // signed area of a triangle\n\n\n\tfunction area(p, q, r) {\n\t\treturn (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n\t} // check if two points are equal\n\n\n\tfunction equals(p1, p2) {\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\t} // check if two segments intersect\n\n\n\tfunction intersects(p1, q1, p2, q2) {\n\t\tconst o1 = sign(area(p1, q1, p2));\n\t\tconst o2 = sign(area(p1, q1, q2));\n\t\tconst o3 = sign(area(p2, q2, p1));\n\t\tconst o4 = sign(area(p2, q2, q1));\n\t\tif (o1 !== o2 && o3 !== o4) return true; // general case\n\n\t\tif (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n\t\tif (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n\t\tif (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n\t\tif (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\t} // for collinear points p, q, r, check if point q lies on segment pr\n\n\n\tfunction onSegment(p, q, r) {\n\t\treturn q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n\t}\n\n\tfunction sign(num) {\n\t\treturn num > 0 ? 1 : num < 0 ? -1 : 0;\n\t} // check if a polygon diagonal intersects any polygon segments\n\n\n\tfunction intersectsPolygon(a, b) {\n\t\tlet p = a;\n\n\t\tdo {\n\t\t\tif (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn false;\n\t} // check if a polygon diagonal is locally inside the polygon\n\n\n\tfunction locallyInside(a, b) {\n\t\treturn area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n\t} // check if the middle point of a polygon diagonal is inside the polygon\n\n\n\tfunction middleInside(a, b) {\n\t\tlet p = a,\n\t\t\t\tinside = false;\n\t\tconst px = (a.x + b.x) / 2,\n\t\t\t\t\tpy = (a.y + b.y) / 2;\n\n\t\tdo {\n\t\t\tif (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn inside;\n\t} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\n\tfunction splitPolygon(a, b) {\n\t\tconst a2 = new Node(a.i, a.x, a.y),\n\t\t\t\t\tb2 = new Node(b.i, b.x, b.y),\n\t\t\t\t\tan = a.next,\n\t\t\t\t\tbp = b.prev;\n\t\ta.next = b;\n\t\tb.prev = a;\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\t\treturn b2;\n\t} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\n\tfunction insertNode(i, x, y, last) {\n\t\tconst p = new Node(i, x, y);\n\n\t\tif (!last) {\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\t\t} else {\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\t\t}\n\n\t\treturn p;\n\t}\n\n\tfunction removeNode(p) {\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\t\tif (p.prevZ) p.prevZ.nextZ = p.nextZ;\n\t\tif (p.nextZ) p.nextZ.prevZ = p.prevZ;\n\t}\n\n\tfunction Node(i, x, y) {\n\t\t// vertex index in coordinates array\n\t\tthis.i = i; // vertex coordinates\n\n\t\tthis.x = x;\n\t\tthis.y = y; // previous and next vertex nodes in a polygon ring\n\n\t\tthis.prev = null;\n\t\tthis.next = null; // z-order curve value\n\n\t\tthis.z = null; // previous and next nodes in z-order\n\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null; // indicates whether this is a steiner point\n\n\t\tthis.steiner = false;\n\t}\n\n\tfunction signedArea(data, start, end, dim) {\n\t\tlet sum = 0;\n\n\t\tfor (let i = start, j = end - dim; i < end; i += dim) {\n\t\t\tsum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n\t\t\tj = i;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\tclass ShapeUtils {\n\t\t// calculate area of the contour polygon\n\t\tstatic area(contour) {\n\t\t\tconst n = contour.length;\n\t\t\tlet a = 0.0;\n\n\t\t\tfor (let p = n - 1, q = 0; q < n; p = q++) {\n\t\t\t\ta += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\t\t}\n\n\t\tstatic isClockWise(pts) {\n\t\t\treturn ShapeUtils.area(pts) < 0;\n\t\t}\n\n\t\tstatic triangulateShape(contour, holes) {\n\t\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\n\t\t\tconst holeIndices = []; // array of hole indices\n\n\t\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts(contour);\n\t\t\taddContour(vertices, contour); //\n\n\t\t\tlet holeIndex = contour.length;\n\t\t\tholes.forEach(removeDupEndPts);\n\n\t\t\tfor (let i = 0; i < holes.length; i++) {\n\t\t\t\tholeIndices.push(holeIndex);\n\t\t\t\tholeIndex += holes[i].length;\n\t\t\t\taddContour(vertices, holes[i]);\n\t\t\t} //\n\n\n\t\t\tconst triangles = Earcut.triangulate(vertices, holeIndices); //\n\n\t\t\tfor (let i = 0; i < triangles.length; i += 3) {\n\t\t\t\tfaces.push(triangles.slice(i, i + 3));\n\t\t\t}\n\n\t\t\treturn faces;\n\t\t}\n\n\t}\n\n\tfunction removeDupEndPts(points) {\n\t\tconst l = points.length;\n\n\t\tif (l > 2 && points[l - 1].equals(points[0])) {\n\t\t\tpoints.pop();\n\t\t}\n\t}\n\n\tfunction addContour(vertices, contour) {\n\t\tfor (let i = 0; i < contour.length; i++) {\n\t\t\tvertices.push(contour[i].x);\n\t\t\tvertices.push(contour[i].y);\n\t\t}\n\t}\n\n\t/**\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *\tcurveSegments: <int>, // number of points on the curves\n\t *\tsteps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *\tdepth: <float>, // Depth to extrude the shape\n\t *\n\t *\tbevelEnabled: <bool>, // turn on bevel\n\t *\tbevelThickness: <float>, // how deep into the original shape bevel goes\n\t *\tbevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *\tbevelOffset: <float>, // how far from shape outline does bevel start\n\t *\tbevelSegments: <int>, // number of bevel layers\n\t *\n\t *\textrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *\tUVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\tclass ExtrudeGeometry extends BufferGeometry {\n\t\tconstructor(shapes, options) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ExtrudeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t\tshapes = Array.isArray(shapes) ? shapes : [shapes];\n\t\t\tconst scope = this;\n\t\t\tconst verticesArray = [];\n\t\t\tconst uvArray = [];\n\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\taddShape(shape);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n\t\t\tthis.computeVertexNormals(); // functions\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tconst placeholder = []; // options\n\n\t\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\t\tlet depth = options.depth !== undefined ? options.depth : 100;\n\t\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\t\t\tconst extrudePath = options.extrudePath;\n\t\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options\n\n\t\t\t\tif (options.amount !== undefined) {\n\t\t\t\t\tconsole.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');\n\t\t\t\t\tdepth = options.amount;\n\t\t\t\t} //\n\n\n\t\t\t\tlet extrudePts,\n\t\t\t\t\t\textrudeByPath = false;\n\t\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\t\tif (extrudePath) {\n\t\t\t\t\textrudePts = extrudePath.getSpacedPoints(steps);\n\t\t\t\t\textrudeByPath = true;\n\t\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\t\t\t\t// SETUP TNB variables\n\t\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\t\tsplineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\t\tbinormal = new Vector3();\n\t\t\t\t\tnormal = new Vector3();\n\t\t\t\t\tposition2 = new Vector3();\n\t\t\t\t} // Safeguards if bevels are not enabled\n\n\n\t\t\t\tif (!bevelEnabled) {\n\t\t\t\t\tbevelSegments = 0;\n\t\t\t\t\tbevelThickness = 0;\n\t\t\t\t\tbevelSize = 0;\n\t\t\t\t\tbevelOffset = 0;\n\t\t\t\t} // Variables initialization\n\n\n\t\t\t\tconst shapePoints = shape.extractPoints(curveSegments);\n\t\t\t\tlet vertices = shapePoints.shape;\n\t\t\t\tconst holes = shapePoints.holes;\n\t\t\t\tconst reverse = !ShapeUtils.isClockWise(vertices);\n\n\t\t\t\tif (reverse) {\n\t\t\t\t\tvertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\n\t\t\t\t\t\tif (ShapeUtils.isClockWise(ahole)) {\n\t\t\t\t\t\t\tholes[h] = ahole.reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst faces = ShapeUtils.triangulateShape(vertices, holes);\n\t\t\t\t/* Vertices */\n\n\t\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\tvertices = vertices.concat(ahole);\n\t\t\t\t}\n\n\t\t\t\tfunction scalePt2(pt, vec, size) {\n\t\t\t\t\tif (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n\t\t\t\t\treturn vec.clone().multiplyScalar(size).add(pt);\n\t\t\t\t}\n\n\t\t\t\tconst vlen = vertices.length,\n\t\t\t\t\t\t\tflen = faces.length; // Find directions for point movement\n\n\t\t\t\tfunction getBevelVec(inPt, inPrev, inNext) {\n\t\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t\t//\t shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t\t//\n\t\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t\t//\tadjacent edges of inPt at a distance of 1 unit on the left side.\n\t\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\t\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\t\t\t\t\tconst v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n\t\t\t\t\tconst collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n\t\t\t\t\tif (Math.abs(collinear0) > Number.EPSILON) {\n\t\t\t\t\t\t// not collinear\n\t\t\t\t\t\t// length of vectors for normalizing\n\t\t\t\t\t\tconst v_prev_len = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\tconst v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n\t\t\t\t\t\tconst ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n\t\t\t\t\t\tconst ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n\t\t\t\t\t\tconst ptNextShift_x = inNext.x - v_next_y / v_next_len;\n\t\t\t\t\t\tconst ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n\t\t\t\t\t\tconst sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n\t\t\t\t\t\tv_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n\t\t\t\t\t\tv_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t\t//\tbut prevent crazy spikes\n\n\t\t\t\t\t\tconst v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n\t\t\t\t\t\tif (v_trans_lensq <= 2) {\n\t\t\t\t\t\t\treturn new Vector2(v_trans_x, v_trans_y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_trans_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// handle special case of collinear edges\n\t\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\t\tif (v_prev_x > Number.EPSILON) {\n\t\t\t\t\t\t\tif (v_next_x > Number.EPSILON) {\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (v_prev_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\tif (v_next_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (direction_eq) {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\t\tv_trans_x = -v_prev_y;\n\t\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n\t\t\t\t}\n\n\t\t\t\tconst contourMovements = [];\n\n\t\t\t\tfor (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\t\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\t\tcontourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);\n\t\t\t\t}\n\n\t\t\t\tconst holesMovements = [];\n\t\t\t\tlet oneHoleMovements,\n\t\t\t\t\t\tverticesMovements = contourMovements.concat();\n\n\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\toneHoleMovements = [];\n\n\t\t\t\t\tfor (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n\t\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\n\t\t\t\t\t\toneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);\n\t\t\t\t\t}\n\n\t\t\t\t\tholesMovements.push(oneHoleMovements);\n\t\t\t\t\tverticesMovements = verticesMovements.concat(oneHoleMovements);\n\t\t\t\t} // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n\t\t\t\tfor (let b = 0; b < bevelSegments; b++) {\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos(t * Math.PI / 2);\n\t\t\t\t\tconst bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\t\t\t\t\tfor (let i = 0, il = contour.length; i < il; i++) {\n\t\t\t\t\t\tconst vert = scalePt2(contour[i], contourMovements[i], bs);\n\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\toneHoleMovements = holesMovements[h];\n\n\t\t\t\t\t\tfor (let i = 0, il = ahole.length; i < il; i++) {\n\t\t\t\t\t\t\tconst vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\t\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst bs = bevelSize + bevelOffset; // Back facing vertices\n\n\t\t\t\tfor (let i = 0; i < vlen; i++) {\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\tv(vert.x, vert.y, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\t\t\t\t\tnormal.copy(splineTube.normals[0]).multiplyScalar(vert.x);\n\t\t\t\t\t\tbinormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);\n\t\t\t\t\t\tposition2.copy(extrudePts[0]).add(normal).add(binormal);\n\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t}\n\t\t\t\t} // Add stepped vertices...\n\t\t\t\t// Including front facing vertices\n\n\n\t\t\t\tfor (let s = 1; s <= steps; s++) {\n\t\t\t\t\tfor (let i = 0; i < vlen; i++) {\n\t\t\t\t\t\tconst vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\tv(vert.x, vert.y, depth / steps * s);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\t\t\t\t\t\tnormal.copy(splineTube.normals[s]).multiplyScalar(vert.x);\n\t\t\t\t\t\t\tbinormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);\n\t\t\t\t\t\t\tposition2.copy(extrudePts[s]).add(normal).add(binormal);\n\t\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // Add bevel segments planes\n\t\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n\t\t\t\tfor (let b = bevelSegments - 1; b >= 0; b--) {\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos(t * Math.PI / 2);\n\t\t\t\t\tconst bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\t\t\t\t\tfor (let i = 0, il = contour.length; i < il; i++) {\n\t\t\t\t\t\tconst vert = scalePt2(contour[i], contourMovements[i], bs);\n\t\t\t\t\t\tv(vert.x, vert.y, depth + z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\toneHoleMovements = holesMovements[h];\n\n\t\t\t\t\t\tfor (let i = 0, il = ahole.length; i < il; i++) {\n\t\t\t\t\t\t\tconst vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\n\t\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\t\tv(vert.x, vert.y, depth + z);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tv(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* Faces */\n\t\t\t\t// Top and bottom faces\n\n\n\t\t\t\tbuildLidFaces(); // Sides faces\n\n\t\t\t\tbuildSideFaces(); /////\tInternal functions\n\n\t\t\t\tfunction buildLidFaces() {\n\t\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\t\tif (bevelEnabled) {\n\t\t\t\t\t\tlet layer = 0; // steps + 1\n\n\t\t\t\t\t\tlet offset = vlen * layer; // Bottom faces\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[2] + offset, face[1] + offset, face[0] + offset);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\t\toffset = vlen * layer; // Top faces\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[0] + offset, face[1] + offset, face[2] + offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Bottom faces\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[2], face[1], face[0]);\n\t\t\t\t\t\t} // Top faces\n\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 0);\n\t\t\t\t} // Create faces for the z-sides of the shape\n\n\n\t\t\t\tfunction buildSideFaces() {\n\t\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\t\tlet layeroffset = 0;\n\t\t\t\t\tsidewalls(contour, layeroffset);\n\t\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\tsidewalls(ahole, layeroffset); //, true\n\n\t\t\t\t\t\tlayeroffset += ahole.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 1);\n\t\t\t\t}\n\n\t\t\t\tfunction sidewalls(contour, layeroffset) {\n\t\t\t\t\tlet i = contour.length;\n\n\t\t\t\t\twhile (--i >= 0) {\n\t\t\t\t\t\tconst j = i;\n\t\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\t\tif (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\t\tfor (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {\n\t\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\t\tconst slen2 = vlen * (s + 1);\n\t\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\t\t\t\t\t\t\tf4(a, b, c, d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction v(x, y, z) {\n\t\t\t\t\tplaceholder.push(x);\n\t\t\t\t\tplaceholder.push(y);\n\t\t\t\t\tplaceholder.push(z);\n\t\t\t\t}\n\n\t\t\t\tfunction f3(a, b, c) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\t\tconst uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t}\n\n\t\t\t\tfunction f4(a, b, c, d) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\t\tconst uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t}\n\n\t\t\t\tfunction addVertex(index) {\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 0]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 1]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 2]);\n\t\t\t\t}\n\n\t\t\t\tfunction addUV(vector2) {\n\t\t\t\t\tuvArray.push(vector2.x);\n\t\t\t\t\tuvArray.push(vector2.y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tconst shapes = this.parameters.shapes;\n\t\t\tconst options = this.parameters.options;\n\t\t\treturn toJSON$1(shapes, options, data);\n\t\t}\n\n\t}\n\n\tconst WorldUVGenerator = {\n\t\tgenerateTopUV: function (geometry, vertices, indexA, indexB, indexC) {\n\t\t\tconst a_x = vertices[indexA * 3];\n\t\t\tconst a_y = vertices[indexA * 3 + 1];\n\t\t\tconst b_x = vertices[indexB * 3];\n\t\t\tconst b_y = vertices[indexB * 3 + 1];\n\t\t\tconst c_x = vertices[indexC * 3];\n\t\t\tconst c_y = vertices[indexC * 3 + 1];\n\t\t\treturn [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n\t\t},\n\t\tgenerateSideWallUV: function (geometry, vertices, indexA, indexB, indexC, indexD) {\n\t\t\tconst a_x = vertices[indexA * 3];\n\t\t\tconst a_y = vertices[indexA * 3 + 1];\n\t\t\tconst a_z = vertices[indexA * 3 + 2];\n\t\t\tconst b_x = vertices[indexB * 3];\n\t\t\tconst b_y = vertices[indexB * 3 + 1];\n\t\t\tconst b_z = vertices[indexB * 3 + 2];\n\t\t\tconst c_x = vertices[indexC * 3];\n\t\t\tconst c_y = vertices[indexC * 3 + 1];\n\t\t\tconst c_z = vertices[indexC * 3 + 2];\n\t\t\tconst d_x = vertices[indexD * 3];\n\t\t\tconst d_y = vertices[indexD * 3 + 1];\n\t\t\tconst d_z = vertices[indexD * 3 + 2];\n\n\t\t\tif (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {\n\t\t\t\treturn [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n\t\t\t} else {\n\t\t\t\treturn [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction toJSON$1(shapes, options, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\tif (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n\t\treturn data;\n\t}\n\n\tclass IcosahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst t = (1 + Math.sqrt(5)) / 2;\n\t\t\tconst vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n\t\t\tconst indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'IcosahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\tclass LatheGeometry extends BufferGeometry {\n\t\tconstructor(points, segments = 12, phiStart = 0, phiLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LatheGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\t\t\tsegments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\t\tphiLength = clamp(phiLength, 0, Math.PI * 2); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst inverseSegments = 1.0 / segments;\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // generate vertices and uvs\n\n\t\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\t\t\t\tconst sin = Math.sin(phi);\n\t\t\t\tconst cos = Math.cos(phi);\n\n\t\t\t\tfor (let j = 0; j <= points.length - 1; j++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = points[j].x * sin;\n\t\t\t\t\tvertex.y = points[j].y;\n\t\t\t\t\tvertex.z = points[j].x * cos;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // uv\n\n\t\t\t\t\tuv.x = i / segments;\n\t\t\t\t\tuv.y = j / (points.length - 1);\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t}\n\t\t\t} // indices\n\n\n\t\t\tfor (let i = 0; i < segments; i++) {\n\t\t\t\tfor (let j = 0; j < points.length - 1; j++) {\n\t\t\t\t\tconst base = j + i * points.length;\n\t\t\t\t\tconst a = base;\n\t\t\t\t\tconst b = base + points.length;\n\t\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\t\tconst d = base + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals\n\n\t\t\tthis.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n\t\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\t\tif (phiLength === Math.PI * 2) {\n\t\t\t\tconst normals = this.attributes.normal.array;\n\t\t\t\tconst n1 = new Vector3();\n\t\t\t\tconst n2 = new Vector3();\n\t\t\t\tconst n = new Vector3(); // this is the buffer offset for the last line of vertices\n\n\t\t\t\tconst base = segments * points.length * 3;\n\n\t\t\t\tfor (let i = 0, j = 0; i < points.length; i++, j += 3) {\n\t\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\t\tn1.x = normals[j + 0];\n\t\t\t\t\tn1.y = normals[j + 1];\n\t\t\t\t\tn1.z = normals[j + 2]; // select the normal of the vertex in the last line\n\n\t\t\t\t\tn2.x = normals[base + j + 0];\n\t\t\t\t\tn2.y = normals[base + j + 1];\n\t\t\t\t\tn2.z = normals[base + j + 2]; // average normals\n\n\t\t\t\t\tn.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n\t\t\t\t\tnormals[j + 0] = normals[base + j + 0] = n.x;\n\t\t\t\t\tnormals[j + 1] = normals[base + j + 1] = n.y;\n\t\t\t\t\tnormals[j + 2] = normals[base + j + 2] = n.z;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass OctahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n\t\t\tconst indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'OctahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\t/**\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\tclass ParametricGeometry extends BufferGeometry {\n\t\tconstructor(func, slices, stacks) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ParametricGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tfunc: func,\n\t\t\t\tslices: slices,\n\t\t\t\tstacks: stacks\n\t\t\t}; // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\t\t\tconst EPS = 0.00001;\n\t\t\tconst normal = new Vector3();\n\t\t\tconst p0 = new Vector3(),\n\t\t\t\t\t\tp1 = new Vector3();\n\t\t\tconst pu = new Vector3(),\n\t\t\t\t\t\tpv = new Vector3();\n\n\t\t\tif (func.length < 3) {\n\t\t\t\tconsole.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');\n\t\t\t} // generate vertices, normals and uvs\n\n\n\t\t\tconst sliceCount = slices + 1;\n\n\t\t\tfor (let i = 0; i <= stacks; i++) {\n\t\t\t\tconst v = i / stacks;\n\n\t\t\t\tfor (let j = 0; j <= slices; j++) {\n\t\t\t\t\tconst u = j / slices; // vertex\n\n\t\t\t\t\tfunc(u, v, p0);\n\t\t\t\t\tvertices.push(p0.x, p0.y, p0.z); // normal\n\t\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\t\tif (u - EPS >= 0) {\n\t\t\t\t\t\tfunc(u - EPS, v, p1);\n\t\t\t\t\t\tpu.subVectors(p0, p1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfunc(u + EPS, v, p1);\n\t\t\t\t\t\tpu.subVectors(p1, p0);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (v - EPS >= 0) {\n\t\t\t\t\t\tfunc(u, v - EPS, p1);\n\t\t\t\t\t\tpv.subVectors(p0, p1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfunc(u, v + EPS, p1);\n\t\t\t\t\t\tpv.subVectors(p1, p0);\n\t\t\t\t\t} // cross product of tangent vectors returns surface normal\n\n\n\t\t\t\t\tnormal.crossVectors(pu, pv).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u, v);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let i = 0; i < stacks; i++) {\n\t\t\t\tfor (let j = 0; j < slices; j++) {\n\t\t\t\t\tconst a = i * sliceCount + j;\n\t\t\t\t\tconst b = i * sliceCount + j + 1;\n\t\t\t\t\tconst c = (i + 1) * sliceCount + j + 1;\n\t\t\t\t\tconst d = (i + 1) * sliceCount + j; // faces one and two\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass RingGeometry extends BufferGeometry {\n\t\tconstructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'RingGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tthetaSegments = Math.max(3, thetaSegments);\n\t\t\tphiSegments = Math.max(1, phiSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // some helper variables\n\n\t\t\tlet radius = innerRadius;\n\t\t\tconst radiusStep = (outerRadius - innerRadius) / phiSegments;\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // generate vertices, normals and uvs\n\n\t\t\tfor (let j = 0; j <= phiSegments; j++) {\n\t\t\t\tfor (let i = 0; i <= thetaSegments; i++) {\n\t\t\t\t\t// values are generate from the inside of the ring to the outside\n\t\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n\t\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, 0, 1); // uv\n\n\t\t\t\t\tuv.x = (vertex.x / outerRadius + 1) / 2;\n\t\t\t\t\tuv.y = (vertex.y / outerRadius + 1) / 2;\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t} // increase the radius for next row of vertices\n\n\n\t\t\t\tradius += radiusStep;\n\t\t\t} // indices\n\n\n\t\t\tfor (let j = 0; j < phiSegments; j++) {\n\t\t\t\tconst thetaSegmentLevel = j * (thetaSegments + 1);\n\n\t\t\t\tfor (let i = 0; i < thetaSegments; i++) {\n\t\t\t\t\tconst segment = i + thetaSegmentLevel;\n\t\t\t\t\tconst a = segment;\n\t\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\t\tconst d = segment + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass ShapeGeometry extends BufferGeometry {\n\t\tconstructor(shapes, curveSegments = 12) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShapeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t}; // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet groupStart = 0;\n\t\t\tlet groupCount = 0; // allow single and array values for \"shapes\" parameter\n\n\t\t\tif (Array.isArray(shapes) === false) {\n\t\t\t\taddShape(shapes);\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\t\taddShape(shapes[i]);\n\t\t\t\t\tthis.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n\t\t\t\t\tgroupStart += groupCount;\n\t\t\t\t\tgroupCount = 0;\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\t\tconst points = shape.extractPoints(curveSegments);\n\t\t\t\tlet shapeVertices = points.shape;\n\t\t\t\tconst shapeHoles = points.holes; // check direction of vertices\n\n\t\t\t\tif (ShapeUtils.isClockWise(shapeVertices) === false) {\n\t\t\t\t\tshapeVertices = shapeVertices.reverse();\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0, l = shapeHoles.length; i < l; i++) {\n\t\t\t\t\tconst shapeHole = shapeHoles[i];\n\n\t\t\t\t\tif (ShapeUtils.isClockWise(shapeHole) === true) {\n\t\t\t\t\t\tshapeHoles[i] = shapeHole.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array\n\n\t\t\t\tfor (let i = 0, l = shapeHoles.length; i < l; i++) {\n\t\t\t\t\tconst shapeHole = shapeHoles[i];\n\t\t\t\t\tshapeVertices = shapeVertices.concat(shapeHole);\n\t\t\t\t} // vertices, normals, uvs\n\n\n\t\t\t\tfor (let i = 0, l = shapeVertices.length; i < l; i++) {\n\t\t\t\t\tconst vertex = shapeVertices[i];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(vertex.x, vertex.y); // world uvs\n\t\t\t\t} // incides\n\n\n\t\t\t\tfor (let i = 0, l = faces.length; i < l; i++) {\n\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\tconst a = face[0] + indexOffset;\n\t\t\t\t\tconst b = face[1] + indexOffset;\n\t\t\t\t\tconst c = face[2] + indexOffset;\n\t\t\t\t\tindices.push(a, b, c);\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tconst shapes = this.parameters.shapes;\n\t\t\treturn toJSON(shapes, data);\n\t\t}\n\n\t}\n\n\tfunction toJSON(shapes, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tclass SphereGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, widthSegments = 8, heightSegments = 6, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SphereGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\twidthSegments = Math.max(3, Math.floor(widthSegments));\n\t\t\theightSegments = Math.max(2, Math.floor(heightSegments));\n\t\t\tconst thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n\t\t\tlet index = 0;\n\t\t\tconst grid = [];\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3(); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // generate vertices, normals and uvs\n\n\t\t\tfor (let iy = 0; iy <= heightSegments; iy++) {\n\t\t\t\tconst verticesRow = [];\n\t\t\t\tconst v = iy / heightSegments; // special case for the poles\n\n\t\t\t\tlet uOffset = 0;\n\n\t\t\t\tif (iy == 0 && thetaStart == 0) {\n\t\t\t\t\tuOffset = 0.5 / widthSegments;\n\t\t\t\t} else if (iy == heightSegments && thetaEnd == Math.PI) {\n\t\t\t\t\tuOffset = -0.5 / widthSegments;\n\t\t\t\t}\n\n\t\t\t\tfor (let ix = 0; ix <= widthSegments; ix++) {\n\t\t\t\t\tconst u = ix / widthSegments; // vertex\n\n\t\t\t\t\tvertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormal.copy(vertex).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u + uOffset, 1 - v);\n\t\t\t\t\tverticesRow.push(index++);\n\t\t\t\t}\n\n\t\t\t\tgrid.push(verticesRow);\n\t\t\t} // indices\n\n\n\t\t\tfor (let iy = 0; iy < heightSegments; iy++) {\n\t\t\t\tfor (let ix = 0; ix < widthSegments; ix++) {\n\t\t\t\t\tconst a = grid[iy][ix + 1];\n\t\t\t\t\tconst b = grid[iy][ix];\n\t\t\t\t\tconst c = grid[iy + 1][ix];\n\t\t\t\t\tconst d = grid[iy + 1][ix + 1];\n\t\t\t\t\tif (iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n\t\t\t\t\tif (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass TetrahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n\t\t\tconst indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'TetrahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t}\n\n\t/**\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *\tfont: <THREE.Font>, // font\n\t *\n\t *\tsize: <float>, // size of the text\n\t *\theight: <float>, // thickness to extrude text\n\t *\tcurveSegments: <int>, // number of points on the curves\n\t *\n\t *\tbevelEnabled: <bool>, // turn on bevel\n\t *\tbevelThickness: <float>, // how deep into text bevel goes\n\t *\tbevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *\tbevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\tclass TextGeometry extends ExtrudeGeometry {\n\t\tconstructor(text, parameters = {}) {\n\t\t\tconst font = parameters.font;\n\n\t\t\tif (!(font && font.isFont)) {\n\t\t\t\tconsole.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n\t\t\t\treturn new BufferGeometry();\n\t\t\t}\n\n\t\t\tconst shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n\t\t\tif (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n\t\t\tif (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n\t\t\tif (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n\t\t\tsuper(shapes, parameters);\n\t\t\tthis.type = 'TextGeometry';\n\t\t}\n\n\t}\n\n\tclass TorusGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TorusGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\ttubularSegments = Math.floor(tubularSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst center = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\tfor (let i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2; // vertex\n\n\t\t\t\t\tvertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n\t\t\t\t\tvertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n\t\t\t\t\tvertex.z = tube * Math.sin(v);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tcenter.x = radius * Math.cos(u);\n\t\t\t\t\tcenter.y = radius * Math.sin(u);\n\t\t\t\t\tnormal.subVectors(vertex, center).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let j = 1; j <= radialSegments; j++) {\n\t\t\t\tfor (let i = 1; i <= tubularSegments; i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tconst a = (tubularSegments + 1) * j + i - 1;\n\t\t\t\t\tconst b = (tubularSegments + 1) * (j - 1) + i - 1;\n\t\t\t\t\tconst c = (tubularSegments + 1) * (j - 1) + i;\n\t\t\t\t\tconst d = (tubularSegments + 1) * j + i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t}\n\n\tclass TorusKnotGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TorusKnotGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\t\ttubularSegments = Math.floor(tubularSegments);\n\t\t\tradialSegments = Math.floor(radialSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\t\t\tconst P1 = new Vector3();\n\t\t\tconst P2 = new Vector3();\n\t\t\tconst B = new Vector3();\n\t\t\tconst T = new Vector3();\n\t\t\tconst N = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (let i = 0; i <= tubularSegments; ++i) {\n\t\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\t\t\tconst u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\t\tcalculatePositionOnCurve(u, p, q, radius, P1);\n\t\t\t\tcalculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n\t\t\t\tT.subVectors(P2, P1);\n\t\t\t\tN.addVectors(P2, P1);\n\t\t\t\tB.crossVectors(T, N);\n\t\t\t\tN.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n\t\t\t\tB.normalize();\n\t\t\t\tN.normalize();\n\n\t\t\t\tfor (let j = 0; j <= radialSegments; ++j) {\n\t\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tconst cx = -tube * Math.cos(v);\n\t\t\t\t\tconst cy = tube * Math.sin(v); // now calculate the final vertex position.\n\t\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\t\tvertex.x = P1.x + (cx * N.x + cy * B.x);\n\t\t\t\t\tvertex.y = P1.y + (cx * N.y + cy * B.y);\n\t\t\t\t\tvertex.z = P1.z + (cx * N.z + cy * B.z);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\t\tnormal.subVectors(vertex, P1).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let j = 1; j <= tubularSegments; j++) {\n\t\t\t\tfor (let i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tconst a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\tconst b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\tconst c = (radialSegments + 1) * j + i;\n\t\t\t\t\tconst d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve\n\n\t\t\tfunction calculatePositionOnCurve(u, p, q, radius, position) {\n\t\t\t\tconst cu = Math.cos(u);\n\t\t\t\tconst su = Math.sin(u);\n\t\t\t\tconst quOverP = q / p * u;\n\t\t\t\tconst cs = Math.cos(quOverP);\n\t\t\t\tposition.x = radius * (2 + cs) * 0.5 * cu;\n\t\t\t\tposition.y = radius * (2 + cs) * su * 0.5;\n\t\t\t\tposition.z = radius * Math.sin(quOverP) * 0.5;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass TubeGeometry extends BufferGeometry {\n\t\tconstructor(path, tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TubeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\t\tconst frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\n\n\t\t\tthis.tangents = frames.tangents;\n\t\t\tthis.normals = frames.normals;\n\t\t\tthis.binormals = frames.binormals; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\t\t\tconst uv = new Vector2();\n\t\t\tlet P = new Vector3(); // buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\t\t\tconst indices = []; // create buffer data\n\n\t\t\tgenerateBufferData(); // build geometry\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\n\n\t\t\tfunction generateBufferData() {\n\t\t\t\tfor (let i = 0; i < tubularSegments; i++) {\n\t\t\t\t\tgenerateSegment(i);\n\t\t\t\t} // if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t\t// at the regular position on the given path\n\t\t\t\t//\n\t\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\n\t\t\t\tgenerateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\n\t\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\t\tgenerateUVs(); // finally create faces\n\n\t\t\t\tgenerateIndices();\n\t\t\t}\n\n\t\t\tfunction generateSegment(i) {\n\t\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\t\t\t\tP = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\n\n\t\t\t\tconst N = frames.normals[i];\n\t\t\t\tconst B = frames.binormals[i]; // generate normals and vertices for the current segment\n\n\t\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tconst sin = Math.sin(v);\n\t\t\t\t\tconst cos = -Math.cos(v); // normal\n\n\t\t\t\t\tnormal.x = cos * N.x + sin * B.x;\n\t\t\t\t\tnormal.y = cos * N.y + sin * B.y;\n\t\t\t\t\tnormal.z = cos * N.z + sin * B.z;\n\t\t\t\t\tnormal.normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // vertex\n\n\t\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\t\tvertex.z = P.z + radius * normal.z;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateIndices() {\n\t\t\t\tfor (let j = 1; j <= tubularSegments; j++) {\n\t\t\t\t\tfor (let i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t\tconst a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\t\tconst b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\t\tconst c = (radialSegments + 1) * j + i;\n\t\t\t\t\t\tconst d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tfor (let i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.path = this.parameters.path.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tclass WireframeGeometry extends BufferGeometry {\n\t\tconstructor(geometry) {\n\t\t\tsuper();\n\t\t\tthis.type = 'WireframeGeometry';\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn;\n\t\t\t} // buffer\n\n\n\t\t\tconst vertices = []; // helper variables\n\n\t\t\tconst edge = [0, 0],\n\t\t\t\t\t\tedges = {};\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\t// indexed BufferGeometry\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif (groups.length === 0) {\n\t\t\t\t\tgroups = [{\n\t\t\t\t\t\tstart: 0,\n\t\t\t\t\t\tcount: indices.count,\n\t\t\t\t\t\tmaterialIndex: 0\n\t\t\t\t\t}];\n\t\t\t\t} // create a data structure that contains all eges without duplicates\n\n\n\t\t\t\tfor (let o = 0, ol = groups.length; o < ol; ++o) {\n\t\t\t\t\tconst group = groups[o];\n\t\t\t\t\tconst start = group.start;\n\t\t\t\t\tconst count = group.count;\n\n\t\t\t\t\tfor (let i = start, l = start + count; i < l; i += 3) {\n\t\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\t\tconst edge1 = indices.getX(i + j);\n\t\t\t\t\t\t\tconst edge2 = indices.getX(i + (j + 1) % 3);\n\t\t\t\t\t\t\tedge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\n\n\t\t\t\t\t\t\tedge[1] = Math.max(edge1, edge2);\n\t\t\t\t\t\t\tconst key = edge[0] + ',' + edge[1];\n\n\t\t\t\t\t\t\tif (edges[key] === undefined) {\n\t\t\t\t\t\t\t\tedges[key] = {\n\t\t\t\t\t\t\t\t\tindex1: edge[0],\n\t\t\t\t\t\t\t\t\tindex2: edge[1]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // generate vertices\n\n\n\t\t\t\tfor (const key in edges) {\n\t\t\t\t\tconst e = edges[key];\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index1);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index2);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// non-indexed BufferGeometry\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor (let i = 0, l = position.count / 3; i < l; i++) {\n\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute(position, index1);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t\tconst index2 = 3 * i + (j + 1) % 3;\n\t\t\t\t\t\tvertex.fromBufferAttribute(position, index2);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t}\n\n\t}\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeGeometry,\n\t\tWireframeGeometry: WireframeGeometry\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <THREE.Color>\n\t * }\n\t */\n\n\tclass ShadowMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShadowMaterial';\n\t\t\tthis.color = new Color(0x000000);\n\t\t\tthis.transparent = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tclass RawShaderMaterial extends ShaderMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper(parameters);\n\t\t\tthis.type = 'RawShaderMaterial';\n\t\t}\n\n\t}\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\troughness: <float>,\n\t *\tmetalness: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\troughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmetalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tenvMapIntensity: <float>\n\t *\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshStandardMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshStandardMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.roughness = 1.0;\n\t\t\tthis.metalness = 0.0;\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.roughnessMap = null;\n\t\t\tthis.metalnessMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.envMapIntensity = 1.0;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.vertexTangents = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': ''\n\t\t\t};\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.roughness = source.roughness;\n\t\t\tthis.metalness = source.metalness;\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.roughnessMap = source.roughnessMap;\n\t\t\tthis.metalnessMap = source.metalnessMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.envMapIntensity = source.envMapIntensity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexTangents = source.vertexTangents;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tclearcoat: <float>,\n\t *\tclearcoatMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatRoughness: <float>,\n\t *\tclearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatNormalScale: <Vector2>,\n\t *\tclearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *\treflectivity: <float>,\n\t *\tior: <float>,\n\t *\n\t *\tsheen: <Color>,\n\t *\n\t *\ttransmission: <float>,\n\t *\ttransmissionMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tthickness: <float>,\n\t *\tthicknessMap: new THREE.Texture( <Image> ),\n\t *\tattenuationDistance: <float>,\n\t *\tattenuationColor: <Color>\n\t * }\n\t */\n\n\tclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': '',\n\t\t\t\t'PHYSICAL': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshPhysicalMaterial';\n\t\t\tthis.clearcoat = 0.0;\n\t\t\tthis.clearcoatMap = null;\n\t\t\tthis.clearcoatRoughness = 0.0;\n\t\t\tthis.clearcoatRoughnessMap = null;\n\t\t\tthis.clearcoatNormalScale = new Vector2(1, 1);\n\t\t\tthis.clearcoatNormalMap = null;\n\t\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\t\tObject.defineProperty(this, 'ior', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);\n\t\t\t\t},\n\t\t\t\tset: function (ior) {\n\t\t\t\t\tthis.reflectivity = clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\t\tthis.transmission = 0.0;\n\t\t\tthis.transmissionMap = null;\n\t\t\tthis.thickness = 0.01;\n\t\t\tthis.thicknessMap = null;\n\t\t\tthis.attenuationDistance = 0.0;\n\t\t\tthis.attenuationColor = new Color(1, 1, 1);\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': '',\n\t\t\t\t'PHYSICAL': ''\n\t\t\t};\n\t\t\tthis.clearcoat = source.clearcoat;\n\t\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\t\tthis.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n\t\t\tthis.reflectivity = source.reflectivity;\n\n\t\t\tif (source.sheen) {\n\t\t\t\tthis.sheen = (this.sheen || new Color()).copy(source.sheen);\n\t\t\t} else {\n\t\t\t\tthis.sheen = null;\n\t\t\t}\n\n\t\t\tthis.transmission = source.transmission;\n\t\t\tthis.transmissionMap = source.transmissionMap;\n\t\t\tthis.thickness = source.thickness;\n\t\t\tthis.thicknessMap = source.thicknessMap;\n\t\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\t\tthis.attenuationColor.copy(source.attenuationColor);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tspecular: <hex>,\n\t *\tshininess: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.MultiplyOperation,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshPhongMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshPhongMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.specular = new Color(0x111111);\n\t\t\tthis.shininess = 30;\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.specular.copy(source.specular);\n\t\t\tthis.shininess = source.shininess;\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\tgradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tclass MeshToonMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'TOON': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshToonMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.gradientMap = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.gradientMap = source.gradientMap;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\topacity: <float>,\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshNormalMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshNormalMaterial';\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tclass MeshLambertMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshLambertMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmatcap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshMatcapMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshMatcapMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.matcap = null;\n\t\t\tthis.map = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.matcap = source.matcap;\n\t\t\tthis.map = source.map;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\n\t *\tscale: <float>,\n\t *\tdashSize: <float>,\n\t *\tgapSize: <float>\n\t * }\n\t */\n\n\tclass LineDashedMaterial extends LineBasicMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineDashedMaterial';\n\t\t\tthis.scale = 1;\n\t\t\tthis.dashSize = 3;\n\t\t\tthis.gapSize = 1;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.scale = source.scale;\n\t\t\tthis.dashSize = source.dashSize;\n\t\t\tthis.gapSize = source.gapSize;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\tconst AnimationUtils = {\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function (array, from, to) {\n\t\t\tif (AnimationUtils.isTypedArray(array)) {\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\n\t\t\t}\n\n\t\t\treturn array.slice(from, to);\n\t\t},\n\t\t// converts an array to a specific type\n\t\tconvertArray: function (array, type, forceClone) {\n\t\t\tif (!array || // let 'undefined' and 'null' pass\n\t\t\t!forceClone && array.constructor === type) return array;\n\n\t\t\tif (typeof type.BYTES_PER_ELEMENT === 'number') {\n\t\t\t\treturn new type(array); // create typed array\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call(array); // create Array\n\t\t},\n\t\tisTypedArray: function (object) {\n\t\t\treturn ArrayBuffer.isView(object) && !(object instanceof DataView);\n\t\t},\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function (times) {\n\t\t\tfunction compareTime(i, j) {\n\t\t\t\treturn times[i] - times[j];\n\t\t\t}\n\n\t\t\tconst n = times.length;\n\t\t\tconst result = new Array(n);\n\n\t\t\tfor (let i = 0; i !== n; ++i) result[i] = i;\n\n\t\t\tresult.sort(compareTime);\n\t\t\treturn result;\n\t\t},\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function (values, stride, order) {\n\t\t\tconst nValues = values.length;\n\t\t\tconst result = new values.constructor(nValues);\n\n\t\t\tfor (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n\t\t\t\tconst srcOffset = order[i] * stride;\n\n\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\tresult[dstOffset++] = values[srcOffset + j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function (jsonKeys, times, values, valuePropertyName) {\n\t\t\tlet i = 1,\n\t\t\t\t\tkey = jsonKeys[0];\n\n\t\t\twhile (key !== undefined && key[valuePropertyName] === undefined) {\n\t\t\t\tkey = jsonKeys[i++];\n\t\t\t}\n\n\t\t\tif (key === undefined) return; // no data\n\n\t\t\tlet value = key[valuePropertyName];\n\t\t\tif (value === undefined) return; // no data\n\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push.apply(values, value); // push all elements\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else if (value.toArray !== undefined) {\n\t\t\t\t// ...assume THREE.Math-ish\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalue.toArray(values, values.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t}\n\t\t},\n\t\tsubclip: function (sourceClip, name, startFrame, endFrame, fps = 30) {\n\t\t\tconst clip = sourceClip.clone();\n\t\t\tclip.name = name;\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tconst track = clip.tracks[i];\n\t\t\t\tconst valueSize = track.getValueSize();\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (let j = 0; j < track.times.length; ++j) {\n\t\t\t\t\tconst frame = track.times[j] * fps;\n\t\t\t\t\tif (frame < startFrame || frame >= endFrame) continue;\n\t\t\t\t\ttimes.push(track.times[j]);\n\n\t\t\t\t\tfor (let k = 0; k < valueSize; ++k) {\n\t\t\t\t\t\tvalues.push(track.values[j * valueSize + k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (times.length === 0) continue;\n\t\t\t\ttrack.times = AnimationUtils.convertArray(times, track.times.constructor);\n\t\t\t\ttrack.values = AnimationUtils.convertArray(values, track.values.constructor);\n\t\t\t\ttracks.push(track);\n\t\t\t}\n\n\t\t\tclip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tlet minStartTime = Infinity;\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tif (minStartTime > clip.tracks[i].times[0]) {\n\t\t\t\t\tminStartTime = clip.tracks[i].times[0];\n\t\t\t\t}\n\t\t\t} // shift all tracks such that clip begins at t=0\n\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tclip.tracks[i].shift(-1 * minStartTime);\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\t\t\treturn clip;\n\t\t},\n\t\tmakeClipAdditive: function (targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {\n\t\t\tif (fps <= 0) fps = 30;\n\t\t\tconst numTracks = referenceClip.tracks.length;\n\t\t\tconst referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame\n\n\t\t\tfor (let i = 0; i < numTracks; ++i) {\n\t\t\t\tconst referenceTrack = referenceClip.tracks[i];\n\t\t\t\tconst referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric\n\n\t\t\t\tif (referenceTrackType === 'bool' || referenceTrackType === 'string') continue; // Find the track in the target clip whose name and type matches the reference track\n\n\t\t\t\tconst targetTrack = targetClip.tracks.find(function (track) {\n\t\t\t\t\treturn track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n\t\t\t\t});\n\t\t\t\tif (targetTrack === undefined) continue;\n\t\t\t\tlet referenceOffset = 0;\n\t\t\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\t\tif (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\treferenceOffset = referenceValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tlet targetOffset = 0;\n\t\t\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\t\t\tif (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\ttargetOffset = targetValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tlet referenceValue; // Find the value to subtract out of the track\n\n\t\t\t\tif (referenceTime <= referenceTrack.times[0]) {\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else if (referenceTime >= referenceTrack.times[lastIndex]) {\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else {\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\tinterpolant.evaluate(referenceTime);\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);\n\t\t\t\t} // Conjugate the quaternion\n\n\n\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\tconst referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray(referenceValue);\n\t\t\t\t} // Subtract the reference value from all of the track values\n\n\n\t\t\t\tconst numTimes = targetTrack.times.length;\n\n\t\t\t\tfor (let j = 0; j < numTimes; ++j) {\n\t\t\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types\n\n\t\t\t\t\t\tfor (let k = 0; k < valueEnd; ++k) {\n\t\t\t\t\t\t\ttargetTrack.values[valueStart + k] -= referenceValue[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\t\t\treturn targetClip;\n\t\t}\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t */\n\tclass Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tthis.parameterPositions = parameterPositions;\n\t\t\tthis._cachedIndex = 0;\n\t\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n\t\t\tthis.sampleValues = sampleValues;\n\t\t\tthis.valueSize = sampleSize;\n\t\t\tthis.settings = null;\n\t\t\tthis.DefaultSettings_ = {};\n\t\t}\n\n\t\tevaluate(t) {\n\t\t\tconst pp = this.parameterPositions;\n\t\t\tlet i1 = this._cachedIndex,\n\t\t\t\t\tt1 = pp[i1],\n\t\t\t\t\tt0 = pp[i1 - 1];\n\n\t\t\tvalidate_interval: {\n\t\t\t\tseek: {\n\t\t\t\t\tlet right;\n\n\t\t\t\t\tlinear_scan: {\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if (!(t < t1)) {\n\t\t\t\t\t\t\tfor (let giveUpAt = i1 + 2;;) {\n\t\t\t\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\t\t\t\tif (t < t0) break forward_scan; // after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t, t0);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[++i1];\n\n\t\t\t\t\t\t\t\tif (t < t1) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the right side of the index\n\n\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} //- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n\t\t\t\t\t\tif (!(t >= t0)) {\n\t\t\t\t\t\t\t// looping?\n\t\t\t\t\t\t\tconst t1global = pp[1];\n\n\t\t\t\t\t\t\tif (t < t1global) {\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\n\t\t\t\t\t\t\t\tt0 = t1global;\n\t\t\t\t\t\t\t} // linear reverse scan\n\n\n\t\t\t\t\t\t\tfor (let giveUpAt = i1 - 2;;) {\n\t\t\t\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\t\t\t\t// before start\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[--i1 - 1];\n\n\t\t\t\t\t\t\t\tif (t >= t0) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the left side of the index\n\n\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} // the interval is valid\n\n\n\t\t\t\t\t\tbreak validate_interval;\n\t\t\t\t\t} // linear scan\n\t\t\t\t\t// binary search\n\n\n\t\t\t\t\twhile (i1 < right) {\n\t\t\t\t\t\tconst mid = i1 + right >>> 1;\n\n\t\t\t\t\t\tif (t < pp[mid]) {\n\t\t\t\t\t\t\tright = mid;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti1 = mid + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[i1];\n\t\t\t\t\tt0 = pp[i1 - 1]; // check boundary cases, again\n\n\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t0, t);\n\t\t\t\t\t}\n\t\t\t\t} // seek\n\n\n\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\tthis.intervalChanged_(i1, t0, t1);\n\t\t\t} // validate_interval\n\n\n\t\t\treturn this.interpolate_(i1, t0, t, t1);\n\t\t}\n\n\t\tgetSettings_() {\n\t\t\treturn this.settings || this.DefaultSettings_;\n\t\t}\n\n\t\tcopySampleValue_(index) {\n\t\t\t// copies a sample value to the result buffer\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = index * stride;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} // Template methods for derived classes:\n\n\n\t\tinterpolate_()\n\t\t/* i1, t0, t, t1 */\n\t\t{\n\t\t\tthrow new Error('call to abstract method'); // implementations shall return this.resultBuffer\n\t\t}\n\n\t\tintervalChanged_()\n\t\t/* i1, t0, t1 */\n\t\t{// empty\n\t\t}\n\n\t} // ALIAS DEFINITIONS\n\n\n\tInterpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;\n\tInterpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t */\n\n\tclass CubicInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t\tthis._weightPrev = -0;\n\t\t\tthis._offsetPrev = -0;\n\t\t\tthis._weightNext = -0;\n\t\t\tthis._offsetNext = -0;\n\t\t\tthis.DefaultSettings_ = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\t\t}\n\n\t\tintervalChanged_(i1, t0, t1) {\n\t\t\tconst pp = this.parameterPositions;\n\t\t\tlet iPrev = i1 - 2,\n\t\t\t\t\tiNext = i1 + 1,\n\t\t\t\t\ttPrev = pp[iPrev],\n\t\t\t\t\ttNext = pp[iNext];\n\n\t\t\tif (tPrev === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingStart) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tNext === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingEnd) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[1] - pp[0];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst halfDt = (t1 - t0) * 0.5,\n\t\t\t\t\t\tstride = this.valueSize;\n\t\t\tthis._weightPrev = halfDt / (t0 - tPrev);\n\t\t\tthis._weightNext = halfDt / (tNext - t1);\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\to1 = i1 * stride,\n\t\t\t\t\t\to0 = o1 - stride,\n\t\t\t\t\t\toP = this._offsetPrev,\n\t\t\t\t\t\toN = this._offsetNext,\n\t\t\t\t\t\twP = this._weightPrev,\n\t\t\t\t\t\twN = this._weightNext,\n\t\t\t\t\t\tp = (t - t0) / (t1 - t0),\n\t\t\t\t\t\tpp = p * p,\n\t\t\t\t\t\tppp = pp * p; // evaluate polynomials\n\n\t\t\tconst sP = -wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tconst s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n\t\t\tconst s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n\t\t\tconst sN = wN * ppp - wN * pp; // combine data linearly\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\tclass LinearInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset1 = i1 * stride,\n\t\t\t\t\t\toffset0 = offset1 - stride,\n\t\t\t\t\t\tweight1 = (t - t0) / (t1 - t0),\n\t\t\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t */\n\n\tclass DiscreteInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1\n\t\t/*, t0, t, t1 */\n\t\t) {\n\t\t\treturn this.copySampleValue_(i1 - 1);\n\t\t}\n\n\t}\n\n\tclass KeyframeTrack {\n\t\tconstructor(name, times, values, interpolation) {\n\t\t\tif (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n\t\t\tif (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n\t\t\tthis.name = name;\n\t\t\tthis.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n\t\t\tthis.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n\t\t\tthis.setInterpolation(interpolation || this.DefaultInterpolation);\n\t\t} // Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\n\t\tstatic toJSON(track) {\n\t\t\tconst trackType = track.constructor;\n\t\t\tlet json; // derived classes can define a static toJSON method\n\n\t\t\tif (trackType.toJSON !== this.toJSON) {\n\t\t\t\tjson = trackType.toJSON(track);\n\t\t\t} else {\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray(track.times, Array),\n\t\t\t\t\t'values': AnimationUtils.convertArray(track.values, Array)\n\t\t\t\t};\n\t\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\t\tif (interpolation !== track.DefaultInterpolation) {\n\t\t\t\t\tjson.interpolation = interpolation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\t\t}\n\n\t\tInterpolantFactoryMethodDiscrete(result) {\n\t\t\treturn new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tInterpolantFactoryMethodLinear(result) {\n\t\t\treturn new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tInterpolantFactoryMethodSmooth(result) {\n\t\t\treturn new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tsetInterpolation(interpolation) {\n\t\t\tlet factoryMethod;\n\n\t\t\tswitch (interpolation) {\n\t\t\t\tcase InterpolateDiscrete:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (factoryMethod === undefined) {\n\t\t\t\tconst message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\t\tif (this.createInterpolant === undefined) {\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif (interpolation !== this.DefaultInterpolation) {\n\t\t\t\t\t\tthis.setInterpolation(this.DefaultInterpolation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(message); // fatal, in this case\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconsole.warn('THREE.KeyframeTrack:', message);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetInterpolation() {\n\t\t\tswitch (this.createInterpolant) {\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\t\t\t\treturn InterpolateSmooth;\n\t\t\t}\n\t\t}\n\n\t\tgetValueSize() {\n\t\t\treturn this.values.length / this.times.length;\n\t\t} // move all keyframes either forwards or backwards in time\n\n\n\t\tshift(timeOffset) {\n\t\t\tif (timeOffset !== 0.0) {\n\t\t\t\tconst times = this.times;\n\n\t\t\t\tfor (let i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] += timeOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\n\n\t\tscale(timeScale) {\n\t\t\tif (timeScale !== 1.0) {\n\t\t\t\tconst times = this.times;\n\n\t\t\t\tfor (let i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] *= timeScale;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\n\n\t\ttrim(startTime, endTime) {\n\t\t\tconst times = this.times,\n\t\t\t\t\t\tnKeys = times.length;\n\t\t\tlet from = 0,\n\t\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile (from !== nKeys && times[from] < startTime) {\n\t\t\t\t++from;\n\t\t\t}\n\n\t\t\twhile (to !== -1 && times[to] > endTime) {\n\t\t\t\t--to;\n\t\t\t}\n\n\t\t\t++to; // inclusive -> exclusive bound\n\n\t\t\tif (from !== 0 || to !== nKeys) {\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif (from >= to) {\n\t\t\t\t\tto = Math.max(to, 1);\n\t\t\t\t\tfrom = to - 1;\n\t\t\t\t}\n\n\t\t\t\tconst stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, from, to);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\n\n\t\tvalidate() {\n\t\t\tlet valid = true;\n\t\t\tconst valueSize = this.getValueSize();\n\n\t\t\tif (valueSize - Math.floor(valueSize) !== 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tconst times = this.times,\n\t\t\t\t\t\tvalues = this.values,\n\t\t\t\t\t\tnKeys = times.length;\n\n\t\t\tif (nKeys === 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Track is empty.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tlet prevTime = null;\n\n\t\t\tfor (let i = 0; i !== nKeys; i++) {\n\t\t\t\tconst currTime = times[i];\n\n\t\t\t\tif (typeof currTime === 'number' && isNaN(currTime)) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (prevTime !== null && prevTime > currTime) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\t\t\t}\n\n\t\t\tif (values !== undefined) {\n\t\t\t\tif (AnimationUtils.isTypedArray(values)) {\n\t\t\t\t\tfor (let i = 0, n = values.length; i !== n; ++i) {\n\t\t\t\t\t\tconst value = values[i];\n\n\t\t\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t} // removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\n\n\t\toptimize() {\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tconst times = AnimationUtils.arraySlice(this.times),\n\t\t\t\t\t\tvalues = AnimationUtils.arraySlice(this.values),\n\t\t\t\t\t\tstride = this.getValueSize(),\n\t\t\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\t\t\t\t\tlastIndex = times.length - 1;\n\t\t\tlet writeIndex = 1;\n\n\t\t\tfor (let i = 1; i < lastIndex; ++i) {\n\t\t\t\tlet keep = false;\n\t\t\t\tconst time = times[i];\n\t\t\t\tconst timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif (time !== timeNext && (i !== 1 || time !== times[0])) {\n\t\t\t\t\tif (!smoothInterpolation) {\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tconst value = values[offset + j];\n\n\t\t\t\t\t\t\tif (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t}\n\t\t\t\t} // in-place compaction\n\n\n\t\t\t\tif (keep) {\n\t\t\t\t\tif (i !== writeIndex) {\n\t\t\t\t\t\ttimes[writeIndex] = times[i];\n\t\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tvalues[writeOffset + j] = values[readOffset + j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t++writeIndex;\n\t\t\t\t}\n\t\t\t} // flush last keyframe (compaction looks ahead)\n\n\n\t\t\tif (lastIndex > 0) {\n\t\t\t\ttimes[writeIndex] = times[lastIndex];\n\n\t\t\t\tfor (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {\n\t\t\t\t\tvalues[writeOffset + j] = values[readOffset + j];\n\t\t\t\t}\n\n\t\t\t\t++writeIndex;\n\t\t\t}\n\n\t\t\tif (writeIndex !== times.length) {\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n\t\t\t} else {\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\tconst times = AnimationUtils.arraySlice(this.times, 0);\n\t\t\tconst values = AnimationUtils.arraySlice(this.values, 0);\n\t\t\tconst TypedKeyframeTrack = this.constructor;\n\t\t\tconst track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.\n\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\t\t\treturn track;\n\t\t}\n\n\t}\n\n\tKeyframeTrack.prototype.TimeBufferType = Float32Array;\n\tKeyframeTrack.prototype.ValueBufferType = Float32Array;\n\tKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n\t/**\n\t * A Track of Boolean keyframe values.\n\t */\n\n\tclass BooleanKeyframeTrack extends KeyframeTrack {}\n\n\tBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n\tBooleanKeyframeTrack.prototype.ValueBufferType = Array;\n\tBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined; // Note: Actually this track could have a optimized / compressed\n\n\t/**\n\t * A Track of keyframe values that represent color.\n\t */\n\n\tclass ColorKeyframeTrack extends KeyframeTrack {}\n\n\tColorKeyframeTrack.prototype.ValueTypeName = 'color'; // ValueBufferType is inherited\n\n\t/**\n\t * A Track of numeric keyframe values.\n\t */\n\n\tclass NumberKeyframeTrack extends KeyframeTrack {}\n\n\tNumberKeyframeTrack.prototype.ValueTypeName = 'number'; // ValueBufferType is inherited\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t */\n\n\tclass QuaternionLinearInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\talpha = (t - t0) / (t1 - t0);\n\t\t\tlet offset = i1 * stride;\n\n\t\t\tfor (let end = offset + stride; offset !== end; offset += 4) {\n\t\t\t\tQuaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\t/**\n\t * A Track of quaternion keyframe values.\n\t */\n\n\tclass QuaternionKeyframeTrack extends KeyframeTrack {\n\t\tInterpolantFactoryMethodLinear(result) {\n\t\t\treturn new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited\n\n\tQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\tQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track that interpolates Strings\n\t */\n\n\tclass StringKeyframeTrack extends KeyframeTrack {}\n\n\tStringKeyframeTrack.prototype.ValueTypeName = 'string';\n\tStringKeyframeTrack.prototype.ValueBufferType = Array;\n\tStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track of vectored keyframe values.\n\t */\n\n\tclass VectorKeyframeTrack extends KeyframeTrack {}\n\n\tVectorKeyframeTrack.prototype.ValueTypeName = 'vector'; // ValueBufferType is inherited\n\n\tclass AnimationClip {\n\t\tconstructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {\n\t\t\tthis.name = name;\n\t\t\tthis.tracks = tracks;\n\t\t\tthis.duration = duration;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tthis.uuid = generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n\t\t\tif (this.duration < 0) {\n\t\t\t\tthis.resetDuration();\n\t\t\t}\n\t\t}\n\n\t\tstatic parse(json) {\n\t\t\tconst tracks = [],\n\t\t\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\t\t\tframeTime = 1.0 / (json.fps || 1.0);\n\n\t\t\tfor (let i = 0, n = jsonTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n\t\t\t}\n\n\t\t\tconst clip = new this(json.name, json.duration, tracks, json.blendMode);\n\t\t\tclip.uuid = json.uuid;\n\t\t\treturn clip;\n\t\t}\n\n\t\tstatic toJSON(clip) {\n\t\t\tconst tracks = [],\n\t\t\t\t\t\tclipTracks = clip.tracks;\n\t\t\tconst json = {\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\t\t\t};\n\n\t\t\tfor (let i = 0, n = clipTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n\t\t\t}\n\n\t\t\treturn json;\n\t\t}\n\n\t\tstatic CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n\t\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < numMorphTargets; i++) {\n\t\t\t\tlet times = [];\n\t\t\t\tlet values = [];\n\t\t\t\ttimes.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n\t\t\t\tvalues.push(0, 1, 0);\n\t\t\t\tconst order = AnimationUtils.getKeyframeOrder(times);\n\t\t\t\ttimes = AnimationUtils.sortedArray(times, 1, order);\n\t\t\t\tvalues = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\n\t\t\t\tif (!noLoop && times[0] === 0) {\n\t\t\t\t\ttimes.push(numMorphTargets);\n\t\t\t\t\tvalues.push(values[0]);\n\t\t\t\t}\n\n\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n\t\t\t}\n\n\t\t\treturn new this(name, -1, tracks);\n\t\t}\n\n\t\tstatic findByName(objectOrClipArray, name) {\n\t\t\tlet clipArray = objectOrClipArray;\n\n\t\t\tif (!Array.isArray(objectOrClipArray)) {\n\t\t\t\tconst o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < clipArray.length; i++) {\n\t\t\t\tif (clipArray[i].name === name) {\n\t\t\t\t\treturn clipArray[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tstatic CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n\t\t\tconst animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n\t\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\n\t\t\tfor (let i = 0, il = morphTargets.length; i < il; i++) {\n\t\t\t\tconst morphTarget = morphTargets[i];\n\t\t\t\tconst parts = morphTarget.name.match(pattern);\n\n\t\t\t\tif (parts && parts.length > 1) {\n\t\t\t\t\tconst name = parts[1];\n\t\t\t\t\tlet animationMorphTargets = animationToMorphTargets[name];\n\n\t\t\t\t\tif (!animationMorphTargets) {\n\t\t\t\t\t\tanimationToMorphTargets[name] = animationMorphTargets = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push(morphTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst clips = [];\n\n\t\t\tfor (const name in animationToMorphTargets) {\n\t\t\t\tclips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));\n\t\t\t}\n\n\t\t\treturn clips;\n\t\t} // parse the animation.hierarchy format\n\n\n\t\tstatic parseAnimation(animation, bones) {\n\t\t\tif (!animation) {\n\t\t\t\tconsole.error('THREE.AnimationClip: No animation in JSONLoader data.');\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif (animationKeys.length !== 0) {\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\t\t\t\t\tAnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n\t\t\t\t\tif (times.length !== 0) {\n\t\t\t\t\t\tdestTracks.push(new trackType(trackName, times, values));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst tracks = [];\n\t\t\tconst clipName = animation.name || 'default';\n\t\t\tconst fps = animation.fps || 30;\n\t\t\tconst blendMode = animation.blendMode; // automatic length determination in AnimationClip.\n\n\t\t\tlet duration = animation.length || -1;\n\t\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor (let h = 0; h < hierarchyTracks.length; h++) {\n\t\t\t\tconst animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n\t\t\t\tif (!animationKeys || animationKeys.length === 0) continue; // process morph targets\n\n\t\t\t\tif (animationKeys[0].morphTargets) {\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tconst morphTargetNames = {};\n\t\t\t\t\tlet k;\n\n\t\t\t\t\tfor (k = 0; k < animationKeys.length; k++) {\n\t\t\t\t\t\tif (animationKeys[k].morphTargets) {\n\t\t\t\t\t\t\tfor (let m = 0; m < animationKeys[k].morphTargets.length; m++) {\n\t\t\t\t\t\t\t\tmorphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} // create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\n\n\t\t\t\t\tfor (const morphTargetName in morphTargetNames) {\n\t\t\t\t\t\tconst times = [];\n\t\t\t\t\t\tconst values = [];\n\n\t\t\t\t\t\tfor (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {\n\t\t\t\t\t\t\tconst animationKey = animationKeys[k];\n\t\t\t\t\t\t\ttimes.push(animationKey.time);\n\t\t\t\t\t\t\tvalues.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * (fps || 1.0);\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\t\t\t\t\tconst boneName = '.bones[' + bones[h].name + ']';\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n\t\t\t\t\taddNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tracks.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst clip = new this(clipName, duration, tracks, blendMode);\n\t\t\treturn clip;\n\t\t}\n\n\t\tresetDuration() {\n\t\t\tconst tracks = this.tracks;\n\t\t\tlet duration = 0;\n\n\t\t\tfor (let i = 0, n = tracks.length; i !== n; ++i) {\n\t\t\t\tconst track = this.tracks[i];\n\t\t\t\tduration = Math.max(duration, track.times[track.times.length - 1]);\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\t\t\treturn this;\n\t\t}\n\n\t\ttrim() {\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].trim(0, this.duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidate() {\n\t\t\tlet valid = true;\n\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tvalid = valid && this.tracks[i].validate();\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t}\n\n\t\toptimize() {\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].optimize();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\ttracks.push(this.tracks[i].clone());\n\t\t\t}\n\n\t\t\treturn new this.constructor(this.name, this.duration, tracks, this.blendMode);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn this.constructor.toJSON(this);\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName(typeName) {\n\t\tswitch (typeName.toLowerCase()) {\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\t\t\t\treturn StringKeyframeTrack;\n\t\t}\n\n\t\tthrow new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n\t}\n\n\tfunction parseKeyframeTrack(json) {\n\t\tif (json.type === undefined) {\n\t\t\tthrow new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n\t\t}\n\n\t\tconst trackType = getTrackTypeForValueTypeName(json.type);\n\n\t\tif (json.times === undefined) {\n\t\t\tconst times = [],\n\t\t\t\t\t\tvalues = [];\n\t\t\tAnimationUtils.flattenJSON(json.keys, times, values, 'value');\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\t\t} // derived classes can define a static parse method\n\n\n\t\tif (trackType.parse !== undefined) {\n\t\t\treturn trackType.parse(json);\n\t\t} else {\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType(json.name, json.times, json.values, json.interpolation);\n\t\t}\n\t}\n\n\tconst Cache = {\n\t\tenabled: false,\n\t\tfiles: {},\n\t\tadd: function (key, file) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[key] = file;\n\t\t},\n\t\tget: function (key) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[key];\n\t\t},\n\t\tremove: function (key) {\n\t\t\tdelete this.files[key];\n\t\t},\n\t\tclear: function () {\n\t\t\tthis.files = {};\n\t\t}\n\t};\n\n\tclass LoadingManager {\n\t\tconstructor(onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tlet isLoading = false;\n\t\t\tlet itemsLoaded = 0;\n\t\t\tlet itemsTotal = 0;\n\t\t\tlet urlModifier = undefined;\n\t\t\tconst handlers = []; // Refer to #5689 for the reason why we don't set .onStart\n\t\t\t// in the constructor\n\n\t\t\tthis.onStart = undefined;\n\t\t\tthis.onLoad = onLoad;\n\t\t\tthis.onProgress = onProgress;\n\t\t\tthis.onError = onError;\n\n\t\t\tthis.itemStart = function (url) {\n\t\t\t\titemsTotal++;\n\n\t\t\t\tif (isLoading === false) {\n\t\t\t\t\tif (scope.onStart !== undefined) {\n\t\t\t\t\t\tscope.onStart(url, itemsLoaded, itemsTotal);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tisLoading = true;\n\t\t\t};\n\n\t\t\tthis.itemEnd = function (url) {\n\t\t\t\titemsLoaded++;\n\n\t\t\t\tif (scope.onProgress !== undefined) {\n\t\t\t\t\tscope.onProgress(url, itemsLoaded, itemsTotal);\n\t\t\t\t}\n\n\t\t\t\tif (itemsLoaded === itemsTotal) {\n\t\t\t\t\tisLoading = false;\n\n\t\t\t\t\tif (scope.onLoad !== undefined) {\n\t\t\t\t\t\tscope.onLoad();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.itemError = function (url) {\n\t\t\t\tif (scope.onError !== undefined) {\n\t\t\t\t\tscope.onError(url);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.resolveURL = function (url) {\n\t\t\t\tif (urlModifier) {\n\t\t\t\t\treturn urlModifier(url);\n\t\t\t\t}\n\n\t\t\t\treturn url;\n\t\t\t};\n\n\t\t\tthis.setURLModifier = function (transform) {\n\t\t\t\turlModifier = transform;\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.addHandler = function (regex, loader) {\n\t\t\t\thandlers.push(regex, loader);\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.removeHandler = function (regex) {\n\t\t\t\tconst index = handlers.indexOf(regex);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\thandlers.splice(index, 2);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.getHandler = function (file) {\n\t\t\t\tfor (let i = 0, l = handlers.length; i < l; i += 2) {\n\t\t\t\t\tconst regex = handlers[i];\n\t\t\t\t\tconst loader = handlers[i + 1];\n\t\t\t\t\tif (regex.global) regex.lastIndex = 0; // see #17920\n\n\t\t\t\t\tif (regex.test(file)) {\n\t\t\t\t\t\treturn loader;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t};\n\t\t}\n\n\t}\n\n\tconst DefaultLoadingManager = new LoadingManager();\n\n\tclass Loader {\n\t\tconstructor(manager) {\n\t\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\t\t\tthis.crossOrigin = 'anonymous';\n\t\t\tthis.withCredentials = false;\n\t\t\tthis.path = '';\n\t\t\tthis.resourcePath = '';\n\t\t\tthis.requestHeader = {};\n\t\t}\n\n\t\tload()\n\t\t/* url, onLoad, onProgress, onError */\n\t\t{}\n\n\t\tloadAsync(url, onProgress) {\n\t\t\tconst scope = this;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tscope.load(url, resolve, onProgress, reject);\n\t\t\t});\n\t\t}\n\n\t\tparse()\n\t\t/* data */\n\t\t{}\n\n\t\tsetCrossOrigin(crossOrigin) {\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetWithCredentials(value) {\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetPath(path) {\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetResourcePath(resourcePath) {\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRequestHeader(requestHeader) {\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tconst loading = {};\n\n\tclass FileLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t} // Check if request is duplicate\n\n\n\t\t\tif (loading[url] !== undefined) {\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} // Check for data: URI\n\n\n\t\t\tconst dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tconst dataUriRegexResult = url.match(dataUriRegex);\n\t\t\tlet request; // Safari can not handle Data URIs through XMLHttpRequest so process manually\n\n\t\t\tif (dataUriRegexResult) {\n\t\t\t\tconst mimeType = dataUriRegexResult[1];\n\t\t\t\tconst isBase64 = !!dataUriRegexResult[2];\n\t\t\t\tlet data = dataUriRegexResult[3];\n\t\t\t\tdata = decodeURIComponent(data);\n\t\t\t\tif (isBase64) data = atob(data);\n\n\t\t\t\ttry {\n\t\t\t\t\tlet response;\n\t\t\t\t\tconst responseType = (this.responseType || '').toLowerCase();\n\n\t\t\t\t\tswitch (responseType) {\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\t\t\t\t\t\t\tconst view = new Uint8Array(data.length);\n\n\t\t\t\t\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\t\t\t\t\tview[i] = data.charCodeAt(i);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (responseType === 'blob') {\n\t\t\t\t\t\t\t\tresponse = new Blob([view.buffer], {\n\t\t\t\t\t\t\t\t\ttype: mimeType\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString(data, mimeType);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = JSON.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 'text' or other\n\t\t\t\t\t\t\tresponse = data;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onLoad) onLoad(response);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onError) onError(error);\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Initialise array for duplicate requests\n\t\t\t\tloading[url] = [];\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\trequest = new XMLHttpRequest();\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.addEventListener('load', function (event) {\n\t\t\t\t\tconst response = this.response;\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tif (this.status === 200 || this.status === 0) {\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\t\t\t\t\tif (this.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.'); // Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\n\t\t\t\t\t\tCache.add(url, response);\n\n\t\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\t\tif (callback.onLoad) callback.onLoad(response);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('progress', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onProgress) callback.onProgress(event);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('error', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('abort', function (event) {\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\tif (this.responseType !== undefined) request.responseType = this.responseType;\n\t\t\t\tif (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;\n\t\t\t\tif (request.overrideMimeType) request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');\n\n\t\t\t\tfor (const header in this.requestHeader) {\n\t\t\t\t\trequest.setRequestHeader(header, this.requestHeader[header]);\n\t\t\t\t}\n\n\t\t\t\trequest.send(null);\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\treturn request;\n\t\t}\n\n\t\tsetResponseType(value) {\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMimeType(value) {\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AnimationLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst animations = [];\n\n\t\t\tfor (let i = 0; i < json.length; i++) {\n\t\t\t\tconst clip = AnimationClip.parse(json[i]);\n\t\t\t\tanimations.push(clip);\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\n\t}\n\n\t/**\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tclass CompressedTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst images = [];\n\t\t\tconst texture = new CompressedTexture();\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tlet loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(url[i], function (buffer) {\n\t\t\t\t\tconst texDatas = scope.parse(buffer, true);\n\t\t\t\t\timages[i] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\tif (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\tif (Array.isArray(url)) {\n\t\t\t\tfor (let i = 0, il = url.length; i < il; ++i) {\n\t\t\t\t\tloadTexture(i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\t\t\t\tloader.load(url, function (buffer) {\n\t\t\t\t\tconst texDatas = scope.parse(buffer, true);\n\n\t\t\t\t\tif (texDatas.isCubemap) {\n\t\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor (let f = 0; f < faces; f++) {\n\t\t\t\t\t\t\timages[f] = {\n\t\t\t\t\t\t\t\tmipmaps: []\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tfor (let i = 0; i < texDatas.mipmapCount; i++) {\n\t\t\t\t\t\t\t\timages[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);\n\t\t\t\t\t\t\t\timages[f].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[f].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[f].height = texDatas.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (texDatas.mipmapCount === 1) {\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\tclass ImageLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tconst image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\n\n\t\t\tfunction onImageLoad() {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tCache.add(url, this);\n\t\t\t\tif (onLoad) onLoad(this);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\tfunction onImageError(event) {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tif (onError) onError(event);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\timage.addEventListener('load', onImageLoad, false);\n\t\t\timage.addEventListener('error', onImageError, false);\n\n\t\t\tif (url.substr(0, 5) !== 'data:') {\n\t\t\t\tif (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\timage.src = url;\n\t\t\treturn image;\n\t\t}\n\n\t}\n\n\tclass CubeTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(urls, onLoad, onProgress, onError) {\n\t\t\tconst texture = new CubeTexture();\n\t\t\tconst loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tlet loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(urls[i], function (image) {\n\t\t\t\t\ttexture.images[i] = image;\n\t\t\t\t\tloaded++;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, undefined, onError);\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < urls.length; ++i) {\n\t\t\t\tloadTexture(i);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\t/**\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tclass DataTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst texture = new DataTexture();\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\tconst texData = scope.parse(buffer);\n\t\t\t\tif (!texData) return;\n\n\t\t\t\tif (texData.image !== undefined) {\n\t\t\t\t\ttexture.image = texData.image;\n\t\t\t\t} else if (texData.data !== undefined) {\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif (texData.encoding !== undefined) {\n\t\t\t\t\ttexture.encoding = texData.encoding;\n\t\t\t\t}\n\n\t\t\t\tif (texData.flipY !== undefined) {\n\t\t\t\t\ttexture.flipY = texData.flipY;\n\t\t\t\t}\n\n\t\t\t\tif (texData.format !== undefined) {\n\t\t\t\t\ttexture.format = texData.format;\n\t\t\t\t}\n\n\t\t\t\tif (texData.type !== undefined) {\n\t\t\t\t\ttexture.type = texData.type;\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmaps !== undefined) {\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmapCount === 1) {\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t}\n\n\t\t\t\tif (texData.generateMipmaps !== undefined) {\n\t\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\tif (onLoad) onLoad(texture, texData);\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\tclass TextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst texture = new Texture();\n\t\t\tconst loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.load(url, function (image) {\n\t\t\t\ttexture.image = image; // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\n\t\t\t\tconst isJPEG = url.search(/\\.jpe?g($|\\?)/i) > 0 || url.search(/^data\\:image\\/jpeg/) === 0;\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif (onLoad !== undefined) {\n\t\t\t\t\tonLoad(texture);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\t/**\n\t * Extensible curve object.\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\tclass Curve {\n\t\tconstructor() {\n\t\t\tthis.type = 'Curve';\n\t\t\tthis.arcLengthDivisions = 200;\n\t\t} // Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\n\t\tgetPoint()\n\t\t/* t, optionalTarget */\n\t\t{\n\t\t\tconsole.warn('THREE.Curve: .getPoint() not implemented.');\n\t\t\treturn null;\n\t\t} // Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\tconst t = this.getUtoTmapping(u);\n\t\t\treturn this.getPoint(t, optionalTarget);\n\t\t} // Get sequence of points using getPoint( t )\n\n\n\t\tgetPoints(divisions = 5) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPoint(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t} // Get sequence of points using getPointAt( u )\n\n\n\t\tgetSpacedPoints(divisions = 5) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPointAt(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t} // Get total curve arc length\n\n\n\t\tgetLength() {\n\t\t\tconst lengths = this.getLengths();\n\t\t\treturn lengths[lengths.length - 1];\n\t\t} // Get list of cumulative segment lengths\n\n\n\t\tgetLengths(divisions = this.arcLengthDivisions) {\n\t\t\tif (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n\t\t\t\treturn this.cacheArcLengths;\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\t\t\tconst cache = [];\n\t\t\tlet current,\n\t\t\t\t\tlast = this.getPoint(0);\n\t\t\tlet sum = 0;\n\t\t\tcache.push(0);\n\n\t\t\tfor (let p = 1; p <= divisions; p++) {\n\t\t\t\tcurrent = this.getPoint(p / divisions);\n\t\t\t\tsum += current.distanceTo(last);\n\t\t\t\tcache.push(sum);\n\t\t\t\tlast = current;\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\t\t}\n\n\t\tupdateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\t\t} // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\n\t\tgetUtoTmapping(u, distance) {\n\t\t\tconst arcLengths = this.getLengths();\n\t\t\tlet i = 0;\n\t\t\tconst il = arcLengths.length;\n\t\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\t\tif (distance) {\n\t\t\t\ttargetArcLength = distance;\n\t\t\t} else {\n\t\t\t\ttargetArcLength = u * arcLengths[il - 1];\n\t\t\t} // binary search for the index with largest value smaller than target u distance\n\n\n\t\t\tlet low = 0,\n\t\t\t\t\thigh = il - 1,\n\t\t\t\t\tcomparison;\n\n\t\t\twhile (low <= high) {\n\t\t\t\ti = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[i] - targetArcLength;\n\n\t\t\t\tif (comparison < 0) {\n\t\t\t\t\tlow = i + 1;\n\t\t\t\t} else if (comparison > 0) {\n\t\t\t\t\thigh = i - 1;\n\t\t\t\t} else {\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif (arcLengths[i] === targetArcLength) {\n\t\t\t\treturn i / (il - 1);\n\t\t\t} // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n\t\t\tconst lengthBefore = arcLengths[i];\n\t\t\tconst lengthAfter = arcLengths[i + 1];\n\t\t\tconst segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n\t\t\tconst segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n\t\t\tconst t = (i + segmentFraction) / (il - 1);\n\t\t\treturn t;\n\t\t} // Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\n\t\tgetTangent(t, optionalTarget) {\n\t\t\tconst delta = 0.0001;\n\t\t\tlet t1 = t - delta;\n\t\t\tlet t2 = t + delta; // Capping in case of danger\n\n\t\t\tif (t1 < 0) t1 = 0;\n\t\t\tif (t2 > 1) t2 = 1;\n\t\t\tconst pt1 = this.getPoint(t1);\n\t\t\tconst pt2 = this.getPoint(t2);\n\t\t\tconst tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n\t\t\ttangent.copy(pt2).sub(pt1).normalize();\n\t\t\treturn tangent;\n\t\t}\n\n\t\tgetTangentAt(u, optionalTarget) {\n\t\t\tconst t = this.getUtoTmapping(u);\n\t\t\treturn this.getTangent(t, optionalTarget);\n\t\t}\n\n\t\tcomputeFrenetFrames(segments, closed) {\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t\t\tconst normal = new Vector3();\n\t\t\tconst tangents = [];\n\t\t\tconst normals = [];\n\t\t\tconst binormals = [];\n\t\t\tconst vec = new Vector3();\n\t\t\tconst mat = new Matrix4(); // compute the tangent vectors for each segment on the curve\n\n\t\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\t\tconst u = i / segments;\n\t\t\t\ttangents[i] = this.getTangentAt(u, new Vector3());\n\t\t\t\ttangents[i].normalize();\n\t\t\t} // select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\n\t\t\tnormals[0] = new Vector3();\n\t\t\tbinormals[0] = new Vector3();\n\t\t\tlet min = Number.MAX_VALUE;\n\t\t\tconst tx = Math.abs(tangents[0].x);\n\t\t\tconst ty = Math.abs(tangents[0].y);\n\t\t\tconst tz = Math.abs(tangents[0].z);\n\n\t\t\tif (tx <= min) {\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set(1, 0, 0);\n\t\t\t}\n\n\t\t\tif (ty <= min) {\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set(0, 1, 0);\n\t\t\t}\n\n\t\t\tif (tz <= min) {\n\t\t\t\tnormal.set(0, 0, 1);\n\t\t\t}\n\n\t\t\tvec.crossVectors(tangents[0], normal).normalize();\n\t\t\tnormals[0].crossVectors(tangents[0], vec);\n\t\t\tbinormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\tnormals[i] = normals[i - 1].clone();\n\t\t\t\tbinormals[i] = binormals[i - 1].clone();\n\t\t\t\tvec.crossVectors(tangents[i - 1], tangents[i]);\n\n\t\t\t\tif (vec.length() > Number.EPSILON) {\n\t\t\t\t\tvec.normalize();\n\t\t\t\t\tconst theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n\t\t\t\t}\n\n\t\t\t\tbinormals[i].crossVectors(tangents[i], normals[i]);\n\t\t\t} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n\t\t\tif (closed === true) {\n\t\t\t\tlet theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n\t\t\t\t\ttheta = -theta;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));\n\t\t\t\t\tbinormals[i].crossVectors(tangents[i], normals[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass EllipseCurve extends Curve {\n\t\tconstructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {\n\t\t\tsuper();\n\t\t\tthis.type = 'EllipseCurve';\n\t\t\tthis.aX = aX;\n\t\t\tthis.aY = aY;\n\t\t\tthis.xRadius = xRadius;\n\t\t\tthis.yRadius = yRadius;\n\t\t\tthis.aStartAngle = aStartAngle;\n\t\t\tthis.aEndAngle = aEndAngle;\n\t\t\tthis.aClockwise = aClockwise;\n\t\t\tthis.aRotation = aRotation;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget) {\n\t\t\tconst point = optionalTarget || new Vector2();\n\t\t\tconst twoPi = Math.PI * 2;\n\t\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\t\tconst samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n\t\t\twhile (deltaAngle < 0) deltaAngle += twoPi;\n\n\t\t\twhile (deltaAngle > twoPi) deltaAngle -= twoPi;\n\n\t\t\tif (deltaAngle < Number.EPSILON) {\n\t\t\t\tif (samePoints) {\n\t\t\t\t\tdeltaAngle = 0;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.aClockwise === true && !samePoints) {\n\t\t\t\tif (deltaAngle === twoPi) {\n\t\t\t\t\tdeltaAngle = -twoPi;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\t\tlet x = this.aX + this.xRadius * Math.cos(angle);\n\t\t\tlet y = this.aY + this.yRadius * Math.sin(angle);\n\n\t\t\tif (this.aRotation !== 0) {\n\t\t\t\tconst cos = Math.cos(this.aRotation);\n\t\t\t\tconst sin = Math.sin(this.aRotation);\n\t\t\t\tconst tx = x - this.aX;\n\t\t\t\tconst ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n\t\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\t\ty = tx * sin + ty * cos + this.aY;\n\t\t\t}\n\n\t\t\treturn point.set(x, y);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.aX = source.aX;\n\t\t\tthis.aY = source.aY;\n\t\t\tthis.xRadius = source.xRadius;\n\t\t\tthis.yRadius = source.yRadius;\n\t\t\tthis.aStartAngle = source.aStartAngle;\n\t\t\tthis.aEndAngle = source.aEndAngle;\n\t\t\tthis.aClockwise = source.aClockwise;\n\t\t\tthis.aRotation = source.aRotation;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.aX = this.aX;\n\t\t\tdata.aY = this.aY;\n\t\t\tdata.xRadius = this.xRadius;\n\t\t\tdata.yRadius = this.yRadius;\n\t\t\tdata.aStartAngle = this.aStartAngle;\n\t\t\tdata.aEndAngle = this.aEndAngle;\n\t\t\tdata.aClockwise = this.aClockwise;\n\t\t\tdata.aRotation = this.aRotation;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.aX = json.aX;\n\t\t\tthis.aY = json.aY;\n\t\t\tthis.xRadius = json.xRadius;\n\t\t\tthis.yRadius = json.yRadius;\n\t\t\tthis.aStartAngle = json.aStartAngle;\n\t\t\tthis.aEndAngle = json.aEndAngle;\n\t\t\tthis.aClockwise = json.aClockwise;\n\t\t\tthis.aRotation = json.aRotation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tclass ArcCurve extends EllipseCurve {\n\t\tconstructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tsuper(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\tthis.type = 'ArcCurve';\n\t\t}\n\n\t}\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\t\tlet c0 = 0,\n\t\t\t\tc1 = 0,\n\t\t\t\tc2 = 0,\n\t\t\t\tc3 = 0;\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *\t p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *\t p(0) = x0, p(1) = x1\n\t\t *\tand\n\t\t *\t p'(0) = t0, p'(1) = t1.\n\t\t */\n\n\t\tfunction init(x0, x1, t0, t1) {\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\t}\n\n\t\treturn {\n\t\t\tinitCatmullRom: function (x0, x1, x2, x3, tension) {\n\t\t\t\tinit(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n\t\t\t},\n\t\t\tinitNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tlet t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n\t\t\t\tlet t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\t\t\t\tinit(x1, x2, t1, t2);\n\t\t\t},\n\t\t\tcalc: function (t) {\n\t\t\t\tconst t2 = t * t;\n\t\t\t\tconst t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\t\t\t}\n\t\t};\n\t} //\n\n\n\tconst tmp = new Vector3();\n\tconst px = new CubicPoly(),\n\t\t\t\tpy = new CubicPoly(),\n\t\t\t\tpz = new CubicPoly();\n\n\tclass CatmullRomCurve3 extends Curve {\n\t\tconstructor(points = [], closed = false, curveType = 'centripetal', tension = 0.5) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CatmullRomCurve3';\n\t\t\tthis.points = points;\n\t\t\tthis.closed = closed;\n\t\t\tthis.curveType = curveType;\n\t\t\tthis.tension = tension;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst points = this.points;\n\t\t\tconst l = points.length;\n\t\t\tconst p = (l - (this.closed ? 0 : 1)) * t;\n\t\t\tlet intPoint = Math.floor(p);\n\t\t\tlet weight = p - intPoint;\n\n\t\t\tif (this.closed) {\n\t\t\t\tintPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n\t\t\t} else if (weight === 0 && intPoint === l - 1) {\n\t\t\t\tintPoint = l - 2;\n\t\t\t\tweight = 1;\n\t\t\t}\n\n\t\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\t\tif (this.closed || intPoint > 0) {\n\t\t\t\tp0 = points[(intPoint - 1) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate first point\n\t\t\t\ttmp.subVectors(points[0], points[1]).add(points[0]);\n\t\t\t\tp0 = tmp;\n\t\t\t}\n\n\t\t\tconst p1 = points[intPoint % l];\n\t\t\tconst p2 = points[(intPoint + 1) % l];\n\n\t\t\tif (this.closed || intPoint + 2 < l) {\n\t\t\t\tp3 = points[(intPoint + 2) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate last point\n\t\t\t\ttmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n\t\t\t\tp3 = tmp;\n\t\t\t}\n\n\t\t\tif (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\t\tlet dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n\t\t\t\tlet dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n\t\t\t\tlet dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n\t\t\t\tif (dt1 < 1e-4) dt1 = 1.0;\n\t\t\t\tif (dt0 < 1e-4) dt0 = dt1;\n\t\t\t\tif (dt2 < 1e-4) dt2 = dt1;\n\t\t\t\tpx.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n\t\t\t\tpy.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n\t\t\t\tpz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n\t\t\t} else if (this.curveType === 'catmullrom') {\n\t\t\t\tpx.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n\t\t\t\tpy.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n\t\t\t\tpz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n\t\t\t}\n\n\t\t\tpoint.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tconst point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\tthis.closed = source.closed;\n\t\t\tthis.curveType = source.curveType;\n\t\t\tthis.tension = source.tension;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.points = [];\n\n\t\t\tfor (let i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tconst point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\tdata.closed = this.closed;\n\t\t\tdata.curveType = this.curveType;\n\t\t\tdata.tension = this.tension;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tconst point = json.points[i];\n\t\t\t\tthis.points.push(new Vector3().fromArray(point));\n\t\t\t}\n\n\t\t\tthis.closed = json.closed;\n\t\t\tthis.curveType = json.curveType;\n\t\t\tthis.tension = json.tension;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\t/**\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\tfunction CatmullRom(t, p0, p1, p2, p3) {\n\t\tconst v0 = (p2 - p0) * 0.5;\n\t\tconst v1 = (p3 - p1) * 0.5;\n\t\tconst t2 = t * t;\n\t\tconst t3 = t * t2;\n\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t} //\n\n\n\tfunction QuadraticBezierP0(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn k * k * p;\n\t}\n\n\tfunction QuadraticBezierP1(t, p) {\n\t\treturn 2 * (1 - t) * t * p;\n\t}\n\n\tfunction QuadraticBezierP2(t, p) {\n\t\treturn t * t * p;\n\t}\n\n\tfunction QuadraticBezier(t, p0, p1, p2) {\n\t\treturn QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n\t} //\n\n\n\tfunction CubicBezierP0(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn k * k * k * p;\n\t}\n\n\tfunction CubicBezierP1(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\t}\n\n\tfunction CubicBezierP2(t, p) {\n\t\treturn 3 * (1 - t) * t * t * p;\n\t}\n\n\tfunction CubicBezierP3(t, p) {\n\t\treturn t * t * t * p;\n\t}\n\n\tfunction CubicBezier(t, p0, p1, p2, p3) {\n\t\treturn CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n\t}\n\n\tclass CubicBezierCurve extends Curve {\n\t\tconstructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubicBezierCurve';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tclass CubicBezierCurve3 extends Curve {\n\t\tconstructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubicBezierCurve3';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tclass LineCurve extends Curve {\n\t\tconstructor(v1 = new Vector2(), v2 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineCurve';\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t}\n\n\t\tgetTangent(t, optionalTarget) {\n\t\t\tconst tangent = optionalTarget || new Vector2();\n\t\t\ttangent.copy(this.v2).sub(this.v1).normalize();\n\t\t\treturn tangent;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tclass LineCurve3 extends Curve {\n\t\tconstructor(v1 = new Vector3(), v2 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineCurve3';\n\t\t\tthis.isLineCurve3 = true;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass QuadraticBezierCurve extends Curve {\n\t\tconstructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'QuadraticBezierCurve';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tclass QuadraticBezierCurve3 extends Curve {\n\t\tconstructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'QuadraticBezierCurve3';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tclass SplineCurve extends Curve {\n\t\tconstructor(points = []) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SplineCurve';\n\t\t\tthis.points = points;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst points = this.points;\n\t\t\tconst p = (points.length - 1) * t;\n\t\t\tconst intPoint = Math.floor(p);\n\t\t\tconst weight = p - intPoint;\n\t\t\tconst p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n\t\t\tconst p1 = points[intPoint];\n\t\t\tconst p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n\t\t\tconst p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\t\t\tpoint.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tconst point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.points = [];\n\n\t\t\tfor (let i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tconst point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tconst point = json.points[i];\n\t\t\t\tthis.points.push(new Vector2().fromArray(point));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *\tcurves, but retains the api of a curve\n\t **************************************************************/\n\n\tclass CurvePath extends Curve {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'CurvePath';\n\t\t\tthis.curves = [];\n\t\t\tthis.autoClose = false; // Automatically closes the path\n\t\t}\n\n\t\tadd(curve) {\n\t\t\tthis.curves.push(curve);\n\t\t}\n\n\t\tclosePath() {\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tconst startPoint = this.curves[0].getPoint(0);\n\t\t\tconst endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n\t\t\tif (!startPoint.equals(endPoint)) {\n\t\t\t\tthis.curves.push(new LineCurve(endPoint, startPoint));\n\t\t\t}\n\t\t} // To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\n\t\tgetPoint(t) {\n\t\t\tconst d = t * this.getLength();\n\t\t\tconst curveLengths = this.getCurveLengths();\n\t\t\tlet i = 0; // To think about boundaries points.\n\n\t\t\twhile (i < curveLengths.length) {\n\t\t\t\tif (curveLengths[i] >= d) {\n\t\t\t\t\tconst diff = curveLengths[i] - d;\n\t\t\t\t\tconst curve = this.curves[i];\n\t\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\t\t\t\treturn curve.getPointAt(u);\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn null; // loop where sum != 0, sum > d , sum+1 <d\n\t\t} // We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\n\t\tgetLength() {\n\t\t\tconst lens = this.getCurveLengths();\n\t\t\treturn lens[lens.length - 1];\n\t\t} // cacheLengths must be recalculated.\n\n\n\t\tupdateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\t\t} // Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\n\t\tgetCurveLengths() {\n\t\t\t// We use cache values if curves and cache array are same length\n\t\t\tif (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n\t\t\t\treturn this.cacheLengths;\n\t\t\t} // Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\n\t\t\tconst lengths = [];\n\t\t\tlet sums = 0;\n\n\t\t\tfor (let i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tsums += this.curves[i].getLength();\n\t\t\t\tlengths.push(sums);\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\t\t\treturn lengths;\n\t\t}\n\n\t\tgetSpacedPoints(divisions = 40) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let i = 0; i <= divisions; i++) {\n\t\t\t\tpoints.push(this.getPoint(i / divisions));\n\t\t\t}\n\n\t\t\tif (this.autoClose) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t}\n\n\t\tgetPoints(divisions = 12) {\n\t\t\tconst points = [];\n\t\t\tlet last;\n\n\t\t\tfor (let i = 0, curves = this.curves; i < curves.length; i++) {\n\t\t\t\tconst curve = curves[i];\n\t\t\t\tconst resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;\n\t\t\t\tconst pts = curve.getPoints(resolution);\n\n\t\t\t\tfor (let j = 0; j < pts.length; j++) {\n\t\t\t\t\tconst point = pts[j];\n\t\t\t\t\tif (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t\tlast = point;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.curves = [];\n\n\t\t\tfor (let i = 0, l = source.curves.length; i < l; i++) {\n\t\t\t\tconst curve = source.curves[i];\n\t\t\t\tthis.curves.push(curve.clone());\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor (let i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tconst curve = this.curves[i];\n\t\t\t\tdata.curves.push(curve.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor (let i = 0, l = json.curves.length; i < l; i++) {\n\t\t\t\tconst curve = json.curves[i];\n\t\t\t\tthis.curves.push(new Curves[curve.type]().fromJSON(curve));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Path extends CurvePath {\n\t\tconstructor(points) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Path';\n\t\t\tthis.currentPoint = new Vector2();\n\n\t\t\tif (points) {\n\t\t\t\tthis.setFromPoints(points);\n\t\t\t}\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.moveTo(points[0].x, points[0].y);\n\n\t\t\tfor (let i = 1, l = points.length; i < l; i++) {\n\t\t\t\tthis.lineTo(points[i].x, points[i].y);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tmoveTo(x, y) {\n\t\t\tthis.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\t\t}\n\n\t\tlineTo(x, y) {\n\t\t\tconst curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tquadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tconst curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tbezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tconst curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tsplineThru(pts\n\t\t/*Array of Vector*/\n\t\t) {\n\t\t\tconst npts = [this.currentPoint.clone()].concat(pts);\n\t\t\tconst curve = new SplineCurve(npts);\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.copy(pts[pts.length - 1]);\n\t\t\treturn this;\n\t\t}\n\n\t\tarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tconst x0 = this.currentPoint.x;\n\t\t\tconst y0 = this.currentPoint.y;\n\t\t\tthis.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t}\n\n\t\tabsarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t}\n\n\t\tellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tconst x0 = this.currentPoint.x;\n\t\t\tconst y0 = this.currentPoint.y;\n\t\t\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\t\t\treturn this;\n\t\t}\n\n\t\tabsellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tconst curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n\t\t\tif (this.curves.length > 0) {\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tconst firstPoint = curve.getPoint(0);\n\n\t\t\t\tif (!firstPoint.equals(this.currentPoint)) {\n\t\t\t\t\tthis.lineTo(firstPoint.x, firstPoint.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.curves.push(curve);\n\t\t\tconst lastPoint = curve.getPoint(1);\n\t\t\tthis.currentPoint.copy(lastPoint);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.currentPoint.copy(source.currentPoint);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.currentPoint.fromArray(json.currentPoint);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Shape extends Path {\n\t\tconstructor(points) {\n\t\t\tsuper(points);\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.type = 'Shape';\n\t\t\tthis.holes = [];\n\t\t}\n\n\t\tgetPointsHoles(divisions) {\n\t\t\tconst holesPts = [];\n\n\t\t\tfor (let i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tholesPts[i] = this.holes[i].getPoints(divisions);\n\t\t\t}\n\n\t\t\treturn holesPts;\n\t\t} // get points of shape and holes (keypoints based on segments parameter)\n\n\n\t\textractPoints(divisions) {\n\t\t\treturn {\n\t\t\t\tshape: this.getPoints(divisions),\n\t\t\t\tholes: this.getPointsHoles(divisions)\n\t\t\t};\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.holes = [];\n\n\t\t\tfor (let i = 0, l = source.holes.length; i < l; i++) {\n\t\t\t\tconst hole = source.holes[i];\n\t\t\t\tthis.holes.push(hole.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor (let i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tconst hole = this.holes[i];\n\t\t\t\tdata.holes.push(hole.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor (let i = 0, l = json.holes.length; i < l; i++) {\n\t\t\t\tconst hole = json.holes[i];\n\t\t\t\tthis.holes.push(new Path().fromJSON(hole));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Light extends Object3D {\n\t\tconstructor(color, intensity = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Light';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.intensity = intensity;\n\t\t}\n\n\t\tdispose() {// Empty here in base class; some subclasses override.\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.intensity = source.intensity;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\t\t\tif (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n\t\t\tif (this.distance !== undefined) data.object.distance = this.distance;\n\t\t\tif (this.angle !== undefined) data.object.angle = this.angle;\n\t\t\tif (this.decay !== undefined) data.object.decay = this.decay;\n\t\t\tif (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n\t\t\tif (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tLight.prototype.isLight = true;\n\n\tclass HemisphereLight extends Light {\n\t\tconstructor(skyColor, groundColor, intensity) {\n\t\t\tsuper(skyColor, intensity);\n\t\t\tthis.type = 'HemisphereLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.groundColor = new Color(groundColor);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.groundColor.copy(source.groundColor);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tHemisphereLight.prototype.isHemisphereLight = true;\n\n\tconst _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _lightPositionWorld$1 = /*@__PURE__*/new Vector3();\n\n\tconst _lookTarget$1 = /*@__PURE__*/new Vector3();\n\n\tclass LightShadow {\n\t\tconstructor(camera) {\n\t\t\tthis.camera = camera;\n\t\t\tthis.bias = 0;\n\t\t\tthis.normalBias = 0;\n\t\t\tthis.radius = 1;\n\t\t\tthis.mapSize = new Vector2(512, 512);\n\t\t\tthis.map = null;\n\t\t\tthis.mapPass = null;\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.autoUpdate = true;\n\t\t\tthis.needsUpdate = false;\n\t\t\tthis._frustum = new Frustum();\n\t\t\tthis._frameExtents = new Vector2(1, 1);\n\t\t\tthis._viewportCount = 1;\n\t\t\tthis._viewports = [new Vector4(0, 0, 1, 1)];\n\t\t}\n\n\t\tgetViewportCount() {\n\t\t\treturn this._viewportCount;\n\t\t}\n\n\t\tgetFrustum() {\n\t\t\treturn this._frustum;\n\t\t}\n\n\t\tupdateMatrices(light) {\n\t\t\tconst shadowCamera = this.camera;\n\t\t\tconst shadowMatrix = this.matrix;\n\n\t\t\t_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tshadowCamera.position.copy(_lightPositionWorld$1);\n\n\t\t\t_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);\n\n\t\t\tshadowCamera.lookAt(_lookTarget$1);\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix$1);\n\n\t\t\tshadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n\t\t\tshadowMatrix.multiply(shadowCamera.projectionMatrix);\n\t\t\tshadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n\t\t}\n\n\t\tgetViewport(viewportIndex) {\n\t\t\treturn this._viewports[viewportIndex];\n\t\t}\n\n\t\tgetFrameExtents() {\n\t\t\treturn this._frameExtents;\n\t\t}\n\n\t\tdispose() {\n\t\t\tif (this.map) {\n\t\t\t\tthis.map.dispose();\n\t\t\t}\n\n\t\t\tif (this.mapPass) {\n\t\t\t\tthis.mapPass.dispose();\n\t\t\t}\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.camera = source.camera.clone();\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\t\t\tthis.mapSize.copy(source.mapSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst object = {};\n\t\t\tif (this.bias !== 0) object.bias = this.bias;\n\t\t\tif (this.normalBias !== 0) object.normalBias = this.normalBias;\n\t\t\tif (this.radius !== 1) object.radius = this.radius;\n\t\t\tif (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n\t\t\tobject.camera = this.camera.toJSON(false).object;\n\t\t\tdelete object.camera.matrix;\n\t\t\treturn object;\n\t\t}\n\n\t}\n\n\tclass SpotLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new PerspectiveCamera(50, 1, 0.5, 500));\n\t\t\tthis.focus = 1;\n\t\t}\n\n\t\tupdateMatrices(light) {\n\t\t\tconst camera = this.camera;\n\t\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tconst far = light.distance || camera.far;\n\n\t\t\tif (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\tsuper.updateMatrices(light);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.focus = source.focus;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpotLightShadow.prototype.isSpotLightShadow = true;\n\n\tclass SpotLight extends Light {\n\t\tconstructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'SpotLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.target = new Object3D();\n\t\t\tthis.distance = distance;\n\t\t\tthis.angle = angle;\n\t\t\tthis.penumbra = penumbra;\n\t\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\tthis.shadow = new SpotLightShadow();\n\t\t}\n\n\t\tget power() {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / Math.PI;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpotLight.prototype.isSpotLight = true;\n\n\tconst _projScreenMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _lightPositionWorld = /*@__PURE__*/new Vector3();\n\n\tconst _lookTarget = /*@__PURE__*/new Vector3();\n\n\tclass PointLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new PerspectiveCamera(90, 1, 0.5, 500));\n\t\t\tthis._frameExtents = new Vector2(4, 2);\n\t\t\tthis._viewportCount = 6;\n\t\t\tthis._viewports = [// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//\txzXZ\n\t\t\t//\t y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\t\t\t// positive X\n\t\t\tnew Vector4(2, 1, 1, 1), // negative X\n\t\t\tnew Vector4(0, 1, 1, 1), // positive Z\n\t\t\tnew Vector4(3, 1, 1, 1), // negative Z\n\t\t\tnew Vector4(1, 1, 1, 1), // positive Y\n\t\t\tnew Vector4(3, 0, 1, 1), // negative Y\n\t\t\tnew Vector4(1, 0, 1, 1)];\n\t\t\tthis._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n\t\t\tthis._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n\t\t}\n\n\t\tupdateMatrices(light, viewportIndex = 0) {\n\t\t\tconst camera = this.camera;\n\t\t\tconst shadowMatrix = this.matrix;\n\t\t\tconst far = light.distance || camera.far;\n\n\t\t\tif (far !== camera.far) {\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tcamera.position.copy(_lightPositionWorld);\n\n\t\t\t_lookTarget.copy(camera.position);\n\n\t\t\t_lookTarget.add(this._cubeDirections[viewportIndex]);\n\n\t\t\tcamera.up.copy(this._cubeUps[viewportIndex]);\n\t\t\tcamera.lookAt(_lookTarget);\n\t\t\tcamera.updateMatrixWorld();\n\t\t\tshadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix);\n\t\t}\n\n\t}\n\n\tPointLightShadow.prototype.isPointLightShadow = true;\n\n\tclass PointLight extends Light {\n\t\tconstructor(color, intensity, distance = 0, decay = 1) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'PointLight';\n\t\t\tthis.distance = distance;\n\t\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\tthis.shadow = new PointLightShadow();\n\t\t}\n\n\t\tget power() {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * 4 * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / (4 * Math.PI);\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tPointLight.prototype.isPointLight = true;\n\n\tclass OrthographicCamera extends Camera {\n\t\tconstructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000) {\n\t\t\tsuper();\n\t\t\tthis.type = 'OrthographicCamera';\n\t\t\tthis.zoom = 1;\n\t\t\tthis.view = null;\n\t\t\tthis.left = left;\n\t\t\tthis.right = right;\n\t\t\tthis.top = top;\n\t\t\tthis.bottom = bottom;\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tclearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tupdateProjectionMatrix() {\n\t\t\tconst dx = (this.right - this.left) / (2 * this.zoom);\n\t\t\tconst dy = (this.top - this.bottom) / (2 * this.zoom);\n\t\t\tconst cx = (this.right + this.left) / 2;\n\t\t\tconst cy = (this.top + this.bottom) / 2;\n\t\t\tlet left = cx - dx;\n\t\t\tlet right = cx + dx;\n\t\t\tlet top = cy + dy;\n\t\t\tlet bottom = cy - dy;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tconst scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n\t\t\t\tconst scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tOrthographicCamera.prototype.isOrthographicCamera = true;\n\n\tclass DirectionalLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n\t\t}\n\n\t}\n\n\tDirectionalLightShadow.prototype.isDirectionalLightShadow = true;\n\n\tclass DirectionalLight extends Light {\n\t\tconstructor(color, intensity) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'DirectionalLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.target = new Object3D();\n\t\t\tthis.shadow = new DirectionalLightShadow();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tDirectionalLight.prototype.isDirectionalLight = true;\n\n\tclass AmbientLight extends Light {\n\t\tconstructor(color, intensity) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'AmbientLight';\n\t\t}\n\n\t}\n\n\tAmbientLight.prototype.isAmbientLight = true;\n\n\tclass RectAreaLight extends Light {\n\t\tconstructor(color, intensity, width = 10, height = 10) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'RectAreaLight';\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tRectAreaLight.prototype.isRectAreaLight = true;\n\n\t/**\n\t * Primary reference:\n\t *\t https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *\t https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\t// 3-band SH defined by 9 coefficients\n\n\tclass SphericalHarmonics3 {\n\t\tconstructor() {\n\t\t\tthis.coefficients = [];\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients.push(new Vector3());\n\t\t\t}\n\t\t}\n\n\t\tset(coefficients) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].copy(coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tzero() {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\n\n\t\tgetAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z;\n\t\t\tconst coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 0.488603 * y);\n\t\t\ttarget.addScaledVector(coeff[2], 0.488603 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 0.488603 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 1.092548 * (x * y));\n\t\t\ttarget.addScaledVector(coeff[5], 1.092548 * (y * z));\n\t\t\ttarget.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n\t\t\ttarget.addScaledVector(coeff[7], 1.092548 * (x * z));\n\t\t\ttarget.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n\t\t\treturn target;\n\t\t} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\n\n\t\tgetIrradianceAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z;\n\t\t\tconst coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\t\t\t// band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n\t\t\ttarget.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n\t\t\ttarget.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n\t\t\ttarget.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n\t\t\ttarget.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n\t\t\ttarget.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\t\t}\n\n\t\tadd(sh) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].add(sh.coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledSH(sh, s) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].addScaledVector(sh.coefficients[i], s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(s) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].multiplyScalar(s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tlerp(sh, alpha) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].lerp(sh.coefficients[i], alpha);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(sh) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tif (!this.coefficients[i].equals(sh.coefficients[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tcopy(sh) {\n\t\t\treturn this.set(sh.coefficients);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tconst coefficients = this.coefficients;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].fromArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst coefficients = this.coefficients;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].toArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn array;\n\t\t} // evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\n\n\t\tstatic getBasisAt(normal, shBasis) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z; // band 0\n\n\t\t\tshBasis[0] = 0.282095; // band 1\n\n\t\t\tshBasis[1] = 0.488603 * y;\n\t\t\tshBasis[2] = 0.488603 * z;\n\t\t\tshBasis[3] = 0.488603 * x; // band 2\n\n\t\t\tshBasis[4] = 1.092548 * x * y;\n\t\t\tshBasis[5] = 1.092548 * y * z;\n\t\t\tshBasis[6] = 0.315392 * (3 * z * z - 1);\n\t\t\tshBasis[7] = 1.092548 * x * z;\n\t\t\tshBasis[8] = 0.546274 * (x * x - y * y);\n\t\t}\n\n\t}\n\n\tSphericalHarmonics3.prototype.isSphericalHarmonics3 = true;\n\n\tclass LightProbe extends Light {\n\t\tconstructor(sh = new SphericalHarmonics3(), intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tthis.sh = sh;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.sh.copy(source.sh);\n\t\t\treturn this;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\n\t\t\tthis.sh.fromArray(json.sh);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.sh = this.sh.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tLightProbe.prototype.isLightProbe = true;\n\n\tclass MaterialLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t\tthis.textures = {};\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst textures = this.textures;\n\n\t\t\tfunction getTexture(name) {\n\t\t\t\tif (textures[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.MaterialLoader: Undefined texture', name);\n\t\t\t\t}\n\n\t\t\t\treturn textures[name];\n\t\t\t}\n\n\t\t\tconst material = new Materials[json.type]();\n\t\t\tif (json.uuid !== undefined) material.uuid = json.uuid;\n\t\t\tif (json.name !== undefined) material.name = json.name;\n\t\t\tif (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n\t\t\tif (json.roughness !== undefined) material.roughness = json.roughness;\n\t\t\tif (json.metalness !== undefined) material.metalness = json.metalness;\n\t\t\tif (json.sheen !== undefined) material.sheen = new Color().setHex(json.sheen);\n\t\t\tif (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n\t\t\tif (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n\t\t\tif (json.shininess !== undefined) material.shininess = json.shininess;\n\t\t\tif (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n\t\t\tif (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\t\tif (json.transmission !== undefined) material.transmission = json.transmission;\n\t\t\tif (json.thickness !== undefined) material.thickness = json.thickness;\n\t\t\tif (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;\n\t\t\tif (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);\n\t\t\tif (json.fog !== undefined) material.fog = json.fog;\n\t\t\tif (json.flatShading !== undefined) material.flatShading = json.flatShading;\n\t\t\tif (json.blending !== undefined) material.blending = json.blending;\n\t\t\tif (json.combine !== undefined) material.combine = json.combine;\n\t\t\tif (json.side !== undefined) material.side = json.side;\n\t\t\tif (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;\n\t\t\tif (json.opacity !== undefined) material.opacity = json.opacity;\n\t\t\tif (json.transparent !== undefined) material.transparent = json.transparent;\n\t\t\tif (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n\t\t\tif (json.depthTest !== undefined) material.depthTest = json.depthTest;\n\t\t\tif (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n\t\t\tif (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n\t\t\tif (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n\t\t\tif (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n\t\t\tif (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n\t\t\tif (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n\t\t\tif (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n\t\t\tif (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n\t\t\tif (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n\t\t\tif (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n\t\t\tif (json.wireframe !== undefined) material.wireframe = json.wireframe;\n\t\t\tif (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif (json.rotation !== undefined) material.rotation = json.rotation;\n\t\t\tif (json.linewidth !== 1) material.linewidth = json.linewidth;\n\t\t\tif (json.dashSize !== undefined) material.dashSize = json.dashSize;\n\t\t\tif (json.gapSize !== undefined) material.gapSize = json.gapSize;\n\t\t\tif (json.scale !== undefined) material.scale = json.scale;\n\t\t\tif (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n\t\t\tif (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\t\tif (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\t\t\tif (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;\n\t\t\tif (json.morphNormals !== undefined) material.morphNormals = json.morphNormals;\n\t\t\tif (json.dithering !== undefined) material.dithering = json.dithering;\n\t\t\tif (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;\n\t\t\tif (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;\n\t\t\tif (json.vertexTangents !== undefined) material.vertexTangents = json.vertexTangents;\n\t\t\tif (json.visible !== undefined) material.visible = json.visible;\n\t\t\tif (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n\t\t\tif (json.userData !== undefined) material.userData = json.userData;\n\n\t\t\tif (json.vertexColors !== undefined) {\n\t\t\t\tif (typeof json.vertexColors === 'number') {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors > 0 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\t\t\t\t}\n\t\t\t} // Shader Material\n\n\n\t\t\tif (json.uniforms !== undefined) {\n\t\t\t\tfor (const name in json.uniforms) {\n\t\t\t\t\tconst uniform = json.uniforms[name];\n\t\t\t\t\tmaterial.uniforms[name] = {};\n\n\t\t\t\t\tswitch (uniform.type) {\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = getTexture(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Color().setHex(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector2().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = uniform.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json.defines !== undefined) material.defines = json.defines;\n\t\t\tif (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n\t\t\tif (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n\t\t\tif (json.extensions !== undefined) {\n\t\t\t\tfor (const key in json.extensions) {\n\t\t\t\t\tmaterial.extensions[key] = json.extensions[key];\n\t\t\t\t}\n\t\t\t} // Deprecated\n\n\n\t\t\tif (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n\t\t\t// for PointsMaterial\n\n\t\t\tif (json.size !== undefined) material.size = json.size;\n\t\t\tif (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n\t\t\tif (json.map !== undefined) material.map = getTexture(json.map);\n\t\t\tif (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n\t\t\tif (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n\t\t\tif (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n\t\t\tif (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n\t\t\tif (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n\t\t\tif (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n\t\t\tif (json.normalScale !== undefined) {\n\t\t\t\tlet normalScale = json.normalScale;\n\n\t\t\t\tif (Array.isArray(normalScale) === false) {\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\t\t\t\tnormalScale = [normalScale, normalScale];\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray(normalScale);\n\t\t\t}\n\n\t\t\tif (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n\t\t\tif (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n\t\t\tif (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n\t\t\tif (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n\t\t\tif (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n\t\t\tif (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n\t\t\tif (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n\t\t\tif (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n\t\t\tif (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n\t\t\tif (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n\t\t\tif (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n\t\t\tif (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n\t\t\tif (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n\t\t\tif (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n\t\t\tif (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n\t\t\tif (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n\t\t\tif (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n\t\t\tif (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n\t\t\tif (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n\t\t\tif (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n\t\t\tif (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n\t\t\tif (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n\t\t\tif (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);\n\t\t\treturn material;\n\t\t}\n\n\t\tsetTextures(value) {\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass LoaderUtils {\n\t\tstatic decodeText(array) {\n\t\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\t\treturn new TextDecoder().decode(array);\n\t\t\t} // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\n\t\t\tlet s = '';\n\n\t\t\tfor (let i = 0, il = array.length; i < il; i++) {\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode(array[i]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// merges multi-byte utf-8 characters.\n\t\t\t\treturn decodeURIComponent(escape(s));\n\t\t\t} catch (e) {\n\t\t\t\t// see #16358\n\t\t\t\treturn s;\n\t\t\t}\n\t\t}\n\n\t\tstatic extractUrlBase(url) {\n\t\t\tconst index = url.lastIndexOf('/');\n\t\t\tif (index === -1) return './';\n\t\t\treturn url.substr(0, index + 1);\n\t\t}\n\n\t}\n\n\tclass InstancedBufferGeometry extends BufferGeometry {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'InstancedBufferGeometry';\n\t\t\tthis.instanceCount = Infinity;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.instanceCount = source.instanceCount;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON(this);\n\t\t\tdata.instanceCount = this.instanceCount;\n\t\t\tdata.isInstancedBufferGeometry = true;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tInstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\n\tclass InstancedBufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized, meshPerAttribute) {\n\t\t\tif (typeof normalized === 'number') {\n\t\t\t\tmeshPerAttribute = normalized;\n\t\t\t\tnormalized = false;\n\t\t\t\tconsole.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');\n\t\t\t}\n\n\t\t\tsuper(array, itemSize, normalized);\n\t\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\t\t\tdata.isInstancedBufferAttribute = true;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tInstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\n\tclass BufferGeometryLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst interleavedBufferMap = {};\n\t\t\tconst arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer(json, uuid) {\n\t\t\t\tif (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n\t\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tconst interleavedBuffer = interleavedBuffers[uuid];\n\t\t\t\tconst buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n\t\t\t\tconst array = getTypedArray(interleavedBuffer.type, buffer);\n\t\t\t\tconst ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\t\t\t\tinterleavedBufferMap[uuid] = ib;\n\t\t\t\treturn ib;\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer(json, uuid) {\n\t\t\t\tif (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n\t\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\t\tconst arrayBuffer = arrayBuffers[uuid];\n\t\t\t\tconst ab = new Uint32Array(arrayBuffer).buffer;\n\t\t\t\tarrayBufferMap[uuid] = ab;\n\t\t\t\treturn ab;\n\t\t\t}\n\n\t\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\t\t\tconst index = json.data.index;\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tconst typedArray = getTypedArray(index.type, index.array);\n\t\t\t\tgeometry.setIndex(new BufferAttribute(typedArray, 1));\n\t\t\t}\n\n\t\t\tconst attributes = json.data.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tlet bufferAttribute;\n\n\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t} else {\n\t\t\t\t\tconst typedArray = getTypedArray(attribute.type, attribute.array);\n\t\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t}\n\n\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\tif (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);\n\n\t\t\t\tif (attribute.updateRange !== undefined) {\n\t\t\t\t\tbufferAttribute.updateRange.offset = attribute.updateRange.offset;\n\t\t\t\t\tbufferAttribute.updateRange.count = attribute.updateRange.count;\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute(key, bufferAttribute);\n\t\t\t}\n\n\t\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\t\tif (morphAttributes) {\n\t\t\t\tfor (const key in morphAttributes) {\n\t\t\t\t\tconst attributeArray = morphAttributes[key];\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor (let i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\t\tconst attribute = attributeArray[i];\n\t\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst typedArray = getTypedArray(attribute.type, attribute.array);\n\t\t\t\t\t\t\tbufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\t\t\tarray.push(bufferAttribute);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[key] = array;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif (morphTargetsRelative) {\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\t\t\t}\n\n\t\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif (groups !== undefined) {\n\t\t\t\tfor (let i = 0, n = groups.length; i !== n; ++i) {\n\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\tgeometry.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\t\tif (boundingSphere !== undefined) {\n\t\t\t\tconst center = new Vector3();\n\n\t\t\t\tif (boundingSphere.center !== undefined) {\n\t\t\t\t\tcenter.fromArray(boundingSphere.center);\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n\t\t\t}\n\n\t\t\tif (json.name) geometry.name = json.name;\n\t\t\tif (json.userData) geometry.userData = json.userData;\n\t\t\treturn geometry;\n\t\t}\n\n\t}\n\n\tclass ObjectLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tlet json = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (onError !== undefined) onError(error);\n\t\t\t\t\tconsole.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst metadata = json.metadata;\n\n\t\t\t\tif (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n\t\t\t\t\tconsole.error('THREE.ObjectLoader: Can\\'t load ' + url);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscope.parse(json, onLoad);\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json, onLoad) {\n\t\t\tconst animations = this.parseAnimations(json.animations);\n\t\t\tconst shapes = this.parseShapes(json.shapes);\n\t\t\tconst geometries = this.parseGeometries(json.geometries, shapes);\n\t\t\tconst images = this.parseImages(json.images, function () {\n\t\t\t\tif (onLoad !== undefined) onLoad(object);\n\t\t\t});\n\t\t\tconst textures = this.parseTextures(json.textures, images);\n\t\t\tconst materials = this.parseMaterials(json.materials, textures);\n\t\t\tconst object = this.parseObject(json.object, geometries, materials, animations);\n\t\t\tconst skeletons = this.parseSkeletons(json.skeletons, object);\n\t\t\tthis.bindSkeletons(object, skeletons); //\n\n\t\t\tif (onLoad !== undefined) {\n\t\t\t\tlet hasImages = false;\n\n\t\t\t\tfor (const uuid in images) {\n\t\t\t\t\tif (images[uuid] instanceof HTMLImageElement) {\n\t\t\t\t\t\thasImages = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hasImages === false) onLoad(object);\n\t\t\t}\n\n\t\t\treturn object;\n\t\t}\n\n\t\tparseShapes(json) {\n\t\t\tconst shapes = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst shape = new Shape().fromJSON(json[i]);\n\t\t\t\t\tshapes[shape.uuid] = shape;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t}\n\n\t\tparseSkeletons(json, object) {\n\t\t\tconst skeletons = {};\n\t\t\tconst bones = {}; // generate bone lookup table\n\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isBone) bones[child.uuid] = child;\n\t\t\t}); // create skeletons\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst skeleton = new Skeleton().fromJSON(json[i], bones);\n\t\t\t\t\tskeletons[skeleton.uuid] = skeleton;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn skeletons;\n\t\t}\n\n\t\tparseGeometries(json, shapes) {\n\t\t\tconst geometries = {};\n\t\t\tlet geometryShapes;\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tlet geometry;\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tswitch (data.type) {\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.detail);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (let j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tconst shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.curveSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (let j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tconst shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif (extrudePath !== undefined) {\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.options);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\t\t\t\t\t\t\tconsole.error('THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) geometry.name = data.name;\n\t\t\t\t\tif (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;\n\t\t\t\t\tgeometries[data.uuid] = geometry;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn geometries;\n\t\t}\n\n\t\tparseMaterials(json, textures) {\n\t\t\tconst cache = {}; // MultiMaterial\n\n\t\t\tconst materials = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tconst loader = new MaterialLoader();\n\t\t\t\tloader.setTextures(textures);\n\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tif (data.type === 'MultiMaterial') {\n\t\t\t\t\t\t// Deprecated\n\t\t\t\t\t\tconst array = [];\n\n\t\t\t\t\t\tfor (let j = 0; j < data.materials.length; j++) {\n\t\t\t\t\t\t\tconst material = data.materials[j];\n\n\t\t\t\t\t\t\tif (cache[material.uuid] === undefined) {\n\t\t\t\t\t\t\t\tcache[material.uuid] = loader.parse(material);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push(cache[material.uuid]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = array;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (cache[data.uuid] === undefined) {\n\t\t\t\t\t\t\tcache[data.uuid] = loader.parse(data);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = cache[data.uuid];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn materials;\n\t\t}\n\n\t\tparseAnimations(json) {\n\t\t\tconst animations = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0; i < json.length; i++) {\n\t\t\t\t\tconst data = json[i];\n\t\t\t\t\tconst clip = AnimationClip.parse(data);\n\t\t\t\t\tanimations[clip.uuid] = clip;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\n\t\tparseImages(json, onLoad) {\n\t\t\tconst scope = this;\n\t\t\tconst images = {};\n\t\t\tlet loader;\n\n\t\t\tfunction loadImage(url) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\treturn loader.load(url, function () {\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, undefined, function () {\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction deserializeImage(image) {\n\t\t\t\tif (typeof image === 'string') {\n\t\t\t\t\tconst url = image;\n\t\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n\t\t\t\t\treturn loadImage(path);\n\t\t\t\t} else {\n\t\t\t\t\tif (image.data) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: getTypedArray(image.type, image.data),\n\t\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\t\theight: image.height\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json !== undefined && json.length > 0) {\n\t\t\t\tconst manager = new LoadingManager(onLoad);\n\t\t\t\tloader = new ImageLoader(manager);\n\t\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\n\t\t\t\tfor (let i = 0, il = json.length; i < il; i++) {\n\t\t\t\t\tconst image = json[i];\n\t\t\t\t\tconst url = image.url;\n\n\t\t\t\t\tif (Array.isArray(url)) {\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\t\t\t\t\t\timages[image.uuid] = [];\n\n\t\t\t\t\t\tfor (let j = 0, jl = url.length; j < jl; j++) {\n\t\t\t\t\t\t\tconst currentUrl = url[j];\n\t\t\t\t\t\t\tconst deserializedImage = deserializeImage(currentUrl);\n\n\t\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\t\tif (deserializedImage instanceof HTMLImageElement) {\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(deserializedImage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// load single image\n\t\t\t\t\t\tconst deserializedImage = deserializeImage(image.url);\n\n\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\timages[image.uuid] = deserializedImage;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn images;\n\t\t}\n\n\t\tparseTextures(json, images) {\n\t\t\tfunction parseConstant(value, type) {\n\t\t\t\tif (typeof value === 'number') return value;\n\t\t\t\tconsole.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n\t\t\t\treturn type[value];\n\t\t\t}\n\n\t\t\tconst textures = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tif (data.image === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (images[data.image] === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined image', data.image);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet texture;\n\t\t\t\t\tconst image = images[data.image];\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\ttexture = new CubeTexture(image);\n\t\t\t\t\t\tif (image.length === 6) texture.needsUpdate = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (image && image.data) {\n\t\t\t\t\t\t\ttexture = new DataTexture(image.data, image.width, image.height);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexture = new Texture(image);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (image) texture.needsUpdate = true; // textures can have undefined image data\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) texture.name = data.name;\n\t\t\t\t\tif (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n\t\t\t\t\tif (data.offset !== undefined) texture.offset.fromArray(data.offset);\n\t\t\t\t\tif (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n\t\t\t\t\tif (data.center !== undefined) texture.center.fromArray(data.center);\n\t\t\t\t\tif (data.rotation !== undefined) texture.rotation = data.rotation;\n\n\t\t\t\t\tif (data.wrap !== undefined) {\n\t\t\t\t\t\ttexture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n\t\t\t\t\t\ttexture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.format !== undefined) texture.format = data.format;\n\t\t\t\t\tif (data.type !== undefined) texture.type = data.type;\n\t\t\t\t\tif (data.encoding !== undefined) texture.encoding = data.encoding;\n\t\t\t\t\tif (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n\t\t\t\t\tif (data.flipY !== undefined) texture.flipY = data.flipY;\n\t\t\t\t\tif (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\t\tif (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\t\ttextures[data.uuid] = texture;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn textures;\n\t\t}\n\n\t\tparseObject(data, geometries, materials, animations) {\n\t\t\tlet object;\n\n\t\t\tfunction getGeometry(name) {\n\t\t\t\tif (geometries[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined geometry', name);\n\t\t\t\t}\n\n\t\t\t\treturn geometries[name];\n\t\t\t}\n\n\t\t\tfunction getMaterial(name) {\n\t\t\t\tif (name === undefined) return undefined;\n\n\t\t\t\tif (Array.isArray(name)) {\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor (let i = 0, l = name.length; i < l; i++) {\n\t\t\t\t\t\tconst uuid = name[i];\n\n\t\t\t\t\t\tif (materials[uuid] === undefined) {\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', uuid);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push(materials[uuid]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\t\t\t\t}\n\n\t\t\t\tif (materials[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', name);\n\t\t\t\t}\n\n\t\t\t\treturn materials[name];\n\t\t\t}\n\n\t\t\tlet geometry, material;\n\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'Scene':\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif (data.background !== undefined) {\n\t\t\t\t\t\tif (Number.isInteger(data.background)) {\n\t\t\t\t\t\t\tobject.background = new Color(data.background);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.fog !== undefined) {\n\t\t\t\t\t\tif (data.fog.type === 'Fog') {\n\t\t\t\t\t\t\tobject.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n\t\t\t\t\t\t} else if (data.fog.type === 'FogExp2') {\n\t\t\t\t\t\t\tobject.fog = new FogExp2(data.fog.color, data.fog.density);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\t\t\t\t\tobject = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n\t\t\t\t\tif (data.focus !== undefined) object.focus = data.focus;\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\t\t\t\t\tobject = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\t\t\t\t\tobject = new AmbientLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tobject = new DirectionalLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tobject = new PointLight(data.color, data.intensity, data.distance, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tobject = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tobject = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tobject = new HemisphereLight(data.color, data.groundColor, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\t\t\t\t\tobject = new LightProbe().fromJSON(data);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new SkinnedMesh(geometry, material);\n\t\t\t\t\tif (data.bindMode !== undefined) object.bindMode = data.bindMode;\n\t\t\t\t\tif (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n\t\t\t\t\tif (data.skeleton !== undefined) object.skeleton = data.skeleton;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new Mesh(geometry, material);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tconst count = data.count;\n\t\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\t\tconst instanceColor = data.instanceColor;\n\t\t\t\t\tobject = new InstancedMesh(geometry, material, count);\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);\n\t\t\t\t\tif (instanceColor !== undefined) object.instanceColor = new BufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\t\t\t\t\tobject = new LOD();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\t\t\t\t\tobject = new Line(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\t\t\t\t\tobject = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\t\t\t\t\tobject = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\t\t\t\t\tobject = new Points(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\t\t\t\t\tobject = new Sprite(getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\t\t\t\t\tobject = new Group();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Bone':\n\t\t\t\t\tobject = new Bone();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tobject = new Object3D();\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\t\t\tif (data.name !== undefined) object.name = data.name;\n\n\t\t\tif (data.matrix !== undefined) {\n\t\t\t\tobject.matrix.fromArray(data.matrix);\n\t\t\t\tif (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\t\tif (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n\t\t\t} else {\n\t\t\t\tif (data.position !== undefined) object.position.fromArray(data.position);\n\t\t\t\tif (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n\t\t\t\tif (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n\t\t\t\tif (data.scale !== undefined) object.scale.fromArray(data.scale);\n\t\t\t}\n\n\t\t\tif (data.castShadow !== undefined) object.castShadow = data.castShadow;\n\t\t\tif (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif (data.shadow) {\n\t\t\t\tif (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\t\tif (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n\t\t\t\tif (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n\t\t\t}\n\n\t\t\tif (data.visible !== undefined) object.visible = data.visible;\n\t\t\tif (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n\t\t\tif (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n\t\t\tif (data.userData !== undefined) object.userData = data.userData;\n\t\t\tif (data.layers !== undefined) object.layers.mask = data.layers;\n\n\t\t\tif (data.children !== undefined) {\n\t\t\t\tconst children = data.children;\n\n\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\tobject.add(this.parseObject(children[i], geometries, materials, animations));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.animations !== undefined) {\n\t\t\t\tconst objectAnimations = data.animations;\n\n\t\t\t\tfor (let i = 0; i < objectAnimations.length; i++) {\n\t\t\t\t\tconst uuid = objectAnimations[i];\n\t\t\t\t\tobject.animations.push(animations[uuid]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.type === 'LOD') {\n\t\t\t\tif (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n\t\t\t\tconst levels = data.levels;\n\n\t\t\t\tfor (let l = 0; l < levels.length; l++) {\n\t\t\t\t\tconst level = levels[l];\n\t\t\t\t\tconst child = object.getObjectByProperty('uuid', level.object);\n\n\t\t\t\t\tif (child !== undefined) {\n\t\t\t\t\t\tobject.addLevel(child, level.distance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn object;\n\t\t}\n\n\t\tbindSkeletons(object, skeletons) {\n\t\t\tif (Object.keys(skeletons).length === 0) return;\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n\t\t\t\t\tconst skeleton = skeletons[child.skeleton];\n\n\t\t\t\t\tif (skeleton === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchild.bind(skeleton, child.bindMatrix);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t/* DEPRECATED */\n\n\n\t\tsetTexturePath(value) {\n\t\t\tconsole.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');\n\t\t\treturn this.setResourcePath(value);\n\t\t}\n\n\t}\n\n\tconst TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\tconst TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\tconst TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\tclass ImageBitmapLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\n\t\t\tif (typeof createImageBitmap === 'undefined') {\n\t\t\t\tconsole.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n\t\t\t}\n\n\t\t\tif (typeof fetch === 'undefined') {\n\t\t\t\tconsole.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n\t\t\t}\n\n\t\t\tthis.options = {\n\t\t\t\tpremultiplyAlpha: 'none'\n\t\t\t};\n\t\t}\n\n\t\tsetOptions(options) {\n\t\t\tthis.options = options;\n\t\t\treturn this;\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tconst fetchOptions = {};\n\t\t\tfetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n\t\t\tfetchOptions.headers = this.requestHeader;\n\t\t\tfetch(url, fetchOptions).then(function (res) {\n\t\t\t\treturn res.blob();\n\t\t\t}).then(function (blob) {\n\t\t\t\treturn createImageBitmap(blob, Object.assign(scope.options, {\n\t\t\t\t\tcolorSpaceConversion: 'none'\n\t\t\t\t}));\n\t\t\t}).then(function (imageBitmap) {\n\t\t\t\tCache.add(url, imageBitmap);\n\t\t\t\tif (onLoad) onLoad(imageBitmap);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}).catch(function (e) {\n\t\t\t\tif (onError) onError(e);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t});\n\t\t\tscope.manager.itemStart(url);\n\t\t}\n\n\t}\n\n\tImageBitmapLoader.prototype.isImageBitmapLoader = true;\n\n\tclass ShapePath {\n\t\tconstructor() {\n\t\t\tthis.type = 'ShapePath';\n\t\t\tthis.color = new Color();\n\t\t\tthis.subPaths = [];\n\t\t\tthis.currentPath = null;\n\t\t}\n\n\t\tmoveTo(x, y) {\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tlineTo(x, y) {\n\t\t\tthis.currentPath.lineTo(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tquadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tthis.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tbezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tthis.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tsplineThru(pts) {\n\t\t\tthis.currentPath.splineThru(pts);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoShapes(isCCW, noHoles) {\n\t\t\tfunction toShapesNoHoles(inSubpaths) {\n\t\t\t\tconst shapes = [];\n\n\t\t\t\tfor (let i = 0, l = inSubpaths.length; i < l; i++) {\n\t\t\t\t\tconst tmpPath = inSubpaths[i];\n\t\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\t\tshapes.push(tmpShape);\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon(inPt, inPolygon) {\n\t\t\t\tconst polyLen = inPolygon.length; // inPt on polygon contour => immediate success\t\tor\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//\twith the horizontal line through inPt, left of inPt\n\t\t\t\t//\tnot counting lowerY endpoints of edges and whole edges on that line\n\n\t\t\t\tlet inside = false;\n\n\t\t\t\tfor (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n\t\t\t\t\tlet edgeLowPt = inPolygon[p];\n\t\t\t\t\tlet edgeHighPt = inPolygon[q];\n\t\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif (Math.abs(edgeDy) > Number.EPSILON) {\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif (edgeDy < 0) {\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[q];\n\t\t\t\t\t\t\tedgeDx = -edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[p];\n\t\t\t\t\t\t\tedgeDy = -edgeDy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n\t\t\t\t\t\tif (inPt.y === edgeLowPt.y) {\n\t\t\t\t\t\t\tif (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n\t\t\t\t\t\t\tif (perpEdge === 0) return true; // inPt is on contour ?\n\n\t\t\t\t\t\t\tif (perpEdge < 0) continue;\n\t\t\t\t\t\t\tinside = !inside; // true intersection left of inPt\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif (inPt.y !== edgeLowPt.y) continue; // parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\n\t\t\t\t\t\tif (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn inside;\n\t\t\t}\n\n\t\t\tconst isClockWise = ShapeUtils.isClockWise;\n\t\t\tconst subPaths = this.subPaths;\n\t\t\tif (subPaths.length === 0) return [];\n\t\t\tif (noHoles === true) return toShapesNoHoles(subPaths);\n\t\t\tlet solid, tmpPath, tmpShape;\n\t\t\tconst shapes = [];\n\n\t\t\tif (subPaths.length === 1) {\n\t\t\t\ttmpPath = subPaths[0];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tlet holesFirst = !isClockWise(subPaths[0].getPoints());\n\t\t\tholesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n\t\t\tconst betterShapeHoles = [];\n\t\t\tconst newShapes = [];\n\t\t\tlet newShapeHoles = [];\n\t\t\tlet mainIdx = 0;\n\t\t\tlet tmpPoints;\n\t\t\tnewShapes[mainIdx] = undefined;\n\t\t\tnewShapeHoles[mainIdx] = [];\n\n\t\t\tfor (let i = 0, l = subPaths.length; i < l; i++) {\n\t\t\t\ttmpPath = subPaths[i];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise(tmpPoints);\n\t\t\t\tsolid = isCCW ? !solid : solid;\n\n\t\t\t\tif (solid) {\n\t\t\t\t\tif (!holesFirst && newShapes[mainIdx]) mainIdx++;\n\t\t\t\t\tnewShapes[mainIdx] = {\n\t\t\t\t\t\ts: new Shape(),\n\t\t\t\t\t\tp: tmpPoints\n\t\t\t\t\t};\n\t\t\t\t\tnewShapes[mainIdx].s.curves = tmpPath.curves;\n\t\t\t\t\tif (holesFirst) mainIdx++;\n\t\t\t\t\tnewShapeHoles[mainIdx] = []; //console.log('cw', i);\n\t\t\t\t} else {\n\t\t\t\t\tnewShapeHoles[mainIdx].push({\n\t\t\t\t\t\th: tmpPath,\n\t\t\t\t\t\tp: tmpPoints[0]\n\t\t\t\t\t}); //console.log('ccw', i);\n\t\t\t\t}\n\t\t\t} // only Holes? -> probably all Shapes with wrong orientation\n\n\n\t\t\tif (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n\t\t\tif (newShapes.length > 1) {\n\t\t\t\tlet ambiguous = false;\n\t\t\t\tconst toChange = [];\n\n\t\t\t\tfor (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tbetterShapeHoles[sIdx] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tconst sho = newShapeHoles[sIdx];\n\n\t\t\t\t\tfor (let hIdx = 0; hIdx < sho.length; hIdx++) {\n\t\t\t\t\t\tconst ho = sho[hIdx];\n\t\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\t\tfor (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n\t\t\t\t\t\t\tif (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n\t\t\t\t\t\t\t\tif (sIdx !== s2Idx) toChange.push({\n\t\t\t\t\t\t\t\t\tfroms: sIdx,\n\t\t\t\t\t\t\t\t\ttos: s2Idx,\n\t\t\t\t\t\t\t\t\thole: hIdx\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[s2Idx].push(ho);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\tbetterShapeHoles[sIdx].push(ho);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // console.log(\"ambiguous: \", ambiguous);\n\n\n\t\t\t\tif (toChange.length > 0) {\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif (!ambiguous) newShapeHoles = betterShapeHoles;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet tmpHoles;\n\n\t\t\tfor (let i = 0, il = newShapes.length; i < il; i++) {\n\t\t\t\ttmpShape = newShapes[i].s;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\ttmpHoles = newShapeHoles[i];\n\n\t\t\t\tfor (let j = 0, jl = tmpHoles.length; j < jl; j++) {\n\t\t\t\t\ttmpShape.holes.push(tmpHoles[j].h);\n\t\t\t\t}\n\t\t\t} //console.log(\"shape\", shapes);\n\n\n\t\t\treturn shapes;\n\t\t}\n\n\t}\n\n\tclass Font {\n\t\tconstructor(data) {\n\t\t\tthis.type = 'Font';\n\t\t\tthis.data = data;\n\t\t}\n\n\t\tgenerateShapes(text, size = 100) {\n\t\t\tconst shapes = [];\n\t\t\tconst paths = createPaths(text, size, this.data);\n\n\t\t\tfor (let p = 0, pl = paths.length; p < pl; p++) {\n\t\t\t\tArray.prototype.push.apply(shapes, paths[p].toShapes());\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t}\n\n\t}\n\n\tfunction createPaths(text, size, data) {\n\t\tconst chars = Array.from(text);\n\t\tconst scale = size / data.resolution;\n\t\tconst line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n\t\tconst paths = [];\n\t\tlet offsetX = 0,\n\t\t\t\toffsetY = 0;\n\n\t\tfor (let i = 0; i < chars.length; i++) {\n\t\t\tconst char = chars[i];\n\n\t\t\tif (char === '\\n') {\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\t\t\t} else {\n\t\t\t\tconst ret = createPath(char, scale, offsetX, offsetY, data);\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push(ret.path);\n\t\t\t}\n\t\t}\n\n\t\treturn paths;\n\t}\n\n\tfunction createPath(char, scale, offsetX, offsetY, data) {\n\t\tconst glyph = data.glyphs[char] || data.glyphs['?'];\n\n\t\tif (!glyph) {\n\t\t\tconsole.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst path = new ShapePath();\n\t\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif (glyph.o) {\n\t\t\tconst outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n\t\t\tfor (let i = 0, l = outline.length; i < l;) {\n\t\t\t\tconst action = outline[i++];\n\n\t\t\t\tswitch (action) {\n\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t// moveTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.moveTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t// lineTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.lineTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\t// quadraticCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t// bezierCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\toffsetX: glyph.ha * scale,\n\t\t\tpath: path\n\t\t};\n\t}\n\n\tFont.prototype.isFont = true;\n\n\tclass FontLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tlet json;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n\t\t\t\t\tjson = JSON.parse(text.substring(65, text.length - 2));\n\t\t\t\t}\n\n\t\t\t\tconst font = scope.parse(json);\n\t\t\t\tif (onLoad) onLoad(font);\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\treturn new Font(json);\n\t\t}\n\n\t}\n\n\tlet _context;\n\n\tconst AudioContext = {\n\t\tgetContext: function () {\n\t\t\tif (_context === undefined) {\n\t\t\t\t_context = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\t}\n\n\t\t\treturn _context;\n\t\t},\n\t\tsetContext: function (value) {\n\t\t\t_context = value;\n\t\t}\n\t};\n\n\tclass AudioLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\ttry {\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tconst bufferCopy = buffer.slice(0);\n\t\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData(bufferCopy, function (audioBuffer) {\n\t\t\t\t\t\tonLoad(audioBuffer);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t}\n\n\tclass HemisphereLightProbe extends LightProbe {\n\t\tconstructor(skyColor, groundColor, intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tconst color1 = new Color().set(skyColor);\n\t\t\tconst color2 = new Color().set(groundColor);\n\t\t\tconst sky = new Vector3(color1.r, color1.g, color1.b);\n\t\t\tconst ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\n\t\t\tconst c0 = Math.sqrt(Math.PI);\n\t\t\tconst c1 = c0 * Math.sqrt(0.75);\n\t\t\tthis.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);\n\t\t\tthis.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);\n\t\t}\n\n\t}\n\n\tHemisphereLightProbe.prototype.isHemisphereLightProbe = true;\n\n\tclass AmbientLightProbe extends LightProbe {\n\t\tconstructor(color, intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tconst color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\n\t\t\tthis.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));\n\t\t}\n\n\t}\n\n\tAmbientLightProbe.prototype.isAmbientLightProbe = true;\n\n\tconst _eyeRight = /*@__PURE__*/new Matrix4();\n\n\tconst _eyeLeft = /*@__PURE__*/new Matrix4();\n\n\tclass StereoCamera {\n\t\tconstructor() {\n\t\t\tthis.type = 'StereoCamera';\n\t\t\tthis.aspect = 1;\n\t\t\tthis.eyeSep = 0.064;\n\t\t\tthis.cameraL = new PerspectiveCamera();\n\t\t\tthis.cameraL.layers.enable(1);\n\t\t\tthis.cameraL.matrixAutoUpdate = false;\n\t\t\tthis.cameraR = new PerspectiveCamera();\n\t\t\tthis.cameraR.layers.enable(2);\n\t\t\tthis.cameraR.matrixAutoUpdate = false;\n\t\t\tthis._cache = {\n\t\t\t\tfocus: null,\n\t\t\t\tfov: null,\n\t\t\t\taspect: null,\n\t\t\t\tnear: null,\n\t\t\t\tfar: null,\n\t\t\t\tzoom: null,\n\t\t\t\teyeSep: null\n\t\t\t};\n\t\t}\n\n\t\tupdate(camera) {\n\t\t\tconst cache = this._cache;\n\t\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif (needsUpdate) {\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tconst projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tconst ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;\n\t\t\t\tlet xmin, xmax; // translate xOffset\n\n\t\t\t\t_eyeLeft.elements[12] = -eyeSepHalf;\n\t\t\t\t_eyeRight.elements[12] = eyeSepHalf; // for left eye\n\n\t\t\t\txmin = -ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n\t\t\t\txmin = -ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraR.projectionMatrix.copy(projectionMatrix);\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n\t\t\tthis.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n\t\t}\n\n\t}\n\n\tclass Clock {\n\t\tconstructor(autoStart = true) {\n\t\t\tthis.autoStart = autoStart;\n\t\t\tthis.startTime = 0;\n\t\t\tthis.oldTime = 0;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = false;\n\t\t}\n\n\t\tstart() {\n\t\t\tthis.startTime = now();\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\t\t}\n\n\t\tstop() {\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\t\t}\n\n\t\tgetElapsedTime() {\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\t\t}\n\n\t\tgetDelta() {\n\t\t\tlet diff = 0;\n\n\t\t\tif (this.autoStart && !this.running) {\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (this.running) {\n\t\t\t\tconst newTime = now();\n\t\t\t\tdiff = (newTime - this.oldTime) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\t\t\t\tthis.elapsedTime += diff;\n\t\t\t}\n\n\t\t\treturn diff;\n\t\t}\n\n\t}\n\n\tfunction now() {\n\t\treturn (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\n\t}\n\n\tconst _position$1 = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$1 = /*@__PURE__*/new Quaternion();\n\n\tconst _scale$1 = /*@__PURE__*/new Vector3();\n\n\tconst _orientation$1 = /*@__PURE__*/new Vector3();\n\n\tclass AudioListener extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'AudioListener';\n\t\t\tthis.context = AudioContext.getContext();\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect(this.context.destination);\n\t\t\tthis.filter = null;\n\t\t\tthis.timeDelta = 0; // private\n\n\t\t\tthis._clock = new Clock();\n\t\t}\n\n\t\tgetInput() {\n\t\t\treturn this.gain;\n\t\t}\n\n\t\tremoveFilter() {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t\tthis.gain.connect(this.context.destination);\n\t\t\t\tthis.filter = null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetFilter() {\n\t\t\treturn this.filter;\n\t\t}\n\n\t\tsetFilter(value) {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t} else {\n\t\t\t\tthis.gain.disconnect(this.context.destination);\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect(this.filter);\n\t\t\tthis.filter.connect(this.context.destination);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMasterVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\n\t\tsetMasterVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tconst listener = this.context.listener;\n\t\t\tconst up = this.up;\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\t\t\tthis.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);\n\n\t\t\t_orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);\n\n\t\t\tif (listener.positionX) {\n\t\t\t\t// code path for Chrome (see #14393)\n\t\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\t\t\t\tlistener.positionX.linearRampToValueAtTime(_position$1.x, endTime);\n\t\t\t\tlistener.positionY.linearRampToValueAtTime(_position$1.y, endTime);\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n\t\t\t\tlistener.upX.linearRampToValueAtTime(up.x, endTime);\n\t\t\t\tlistener.upY.linearRampToValueAtTime(up.y, endTime);\n\t\t\t\tlistener.upZ.linearRampToValueAtTime(up.z, endTime);\n\t\t\t} else {\n\t\t\t\tlistener.setPosition(_position$1.x, _position$1.y, _position$1.z);\n\t\t\t\tlistener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass Audio extends Object3D {\n\t\tconstructor(listener) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Audio';\n\t\t\tthis.listener = listener;\n\t\t\tthis.context = listener.context;\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect(listener.getInput());\n\t\t\tthis.autoplay = false;\n\t\t\tthis.buffer = null;\n\t\t\tthis.detune = 0;\n\t\t\tthis.loop = false;\n\t\t\tthis.loopStart = 0;\n\t\t\tthis.loopEnd = 0;\n\t\t\tthis.offset = 0;\n\t\t\tthis.duration = undefined;\n\t\t\tthis.playbackRate = 1;\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.hasPlaybackControl = true;\n\t\t\tthis.source = null;\n\t\t\tthis.sourceType = 'empty';\n\t\t\tthis._startedAt = 0;\n\t\t\tthis._progress = 0;\n\t\t\tthis._connected = false;\n\t\t\tthis.filters = [];\n\t\t}\n\n\t\tgetOutput() {\n\t\t\treturn this.gain;\n\t\t}\n\n\t\tsetNodeSource(audioNode) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMediaElementSource(mediaElement) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource(mediaElement);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMediaStreamSource(mediaStream) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource(mediaStream);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetBuffer(audioBuffer) {\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\t\t\tif (this.autoplay) this.play();\n\t\t\treturn this;\n\t\t}\n\n\t\tplay(delay = 0) {\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tconsole.warn('THREE.Audio: Audio is already playing.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\t\t\tconst source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind(this);\n\t\t\tsource.start(this._startedAt, this._progress + this.offset, this.duration);\n\t\t\tthis.isPlaying = true;\n\t\t\tthis.source = source;\n\t\t\tthis.setDetune(this.detune);\n\t\t\tthis.setPlaybackRate(this.playbackRate);\n\t\t\treturn this.connect();\n\t\t}\n\n\t\tpause() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\t// update current progress\n\t\t\t\tthis._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n\n\t\t\t\tif (this.loop === true) {\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\t\t\t\t\tthis._progress = this._progress % (this.duration || this.buffer.duration);\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\t\t\t\tthis.isPlaying = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tstop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\t\t\treturn this;\n\t\t}\n\n\t\tconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.connect(this.filters[0]);\n\n\t\t\t\tfor (let i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].connect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].connect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.connect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = true;\n\t\t\treturn this;\n\t\t}\n\n\t\tdisconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.disconnect(this.filters[0]);\n\n\t\t\t\tfor (let i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].disconnect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].disconnect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.disconnect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = false;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetFilters() {\n\t\t\treturn this.filters;\n\t\t}\n\n\t\tsetFilters(value) {\n\t\t\tif (!value) value = [];\n\n\t\t\tif (this._connected === true) {\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value.slice();\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.filters = value.slice();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDetune(value) {\n\t\t\tthis.detune = value;\n\t\t\tif (this.source.detune === undefined) return; // only set detune when available\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetDetune() {\n\t\t\treturn this.detune;\n\t\t}\n\n\t\tgetFilter() {\n\t\t\treturn this.getFilters()[0];\n\t\t}\n\n\t\tsetFilter(filter) {\n\t\t\treturn this.setFilters(filter ? [filter] : []);\n\t\t}\n\n\t\tsetPlaybackRate(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetPlaybackRate() {\n\t\t\treturn this.playbackRate;\n\t\t}\n\n\t\tonEnded() {\n\t\t\tthis.isPlaying = false;\n\t\t}\n\n\t\tgetLoop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn this.loop;\n\t\t}\n\n\t\tsetLoop(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.loop = this.loop;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoopStart(value) {\n\t\t\tthis.loopStart = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoopEnd(value) {\n\t\t\tthis.loopEnd = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\n\t\tsetVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tconst _position = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion = /*@__PURE__*/new Quaternion();\n\n\tconst _scale = /*@__PURE__*/new Vector3();\n\n\tconst _orientation = /*@__PURE__*/new Vector3();\n\n\tclass PositionalAudio extends Audio {\n\t\tconstructor(listener) {\n\t\t\tsuper(listener);\n\t\t\tthis.panner = this.context.createPanner();\n\t\t\tthis.panner.panningModel = 'HRTF';\n\t\t\tthis.panner.connect(this.gain);\n\t\t}\n\n\t\tgetOutput() {\n\t\t\treturn this.panner;\n\t\t}\n\n\t\tgetRefDistance() {\n\t\t\treturn this.panner.refDistance;\n\t\t}\n\n\t\tsetRefDistance(value) {\n\t\t\tthis.panner.refDistance = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetRolloffFactor() {\n\t\t\treturn this.panner.rolloffFactor;\n\t\t}\n\n\t\tsetRolloffFactor(value) {\n\t\t\tthis.panner.rolloffFactor = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetDistanceModel() {\n\t\t\treturn this.panner.distanceModel;\n\t\t}\n\n\t\tsetDistanceModel(value) {\n\t\t\tthis.panner.distanceModel = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMaxDistance() {\n\t\t\treturn this.panner.maxDistance;\n\t\t}\n\n\t\tsetMaxDistance(value) {\n\t\t\tthis.panner.maxDistance = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tif (this.hasPlaybackControl === true && this.isPlaying === false) return;\n\t\t\tthis.matrixWorld.decompose(_position, _quaternion, _scale);\n\n\t\t\t_orientation.set(0, 0, 1).applyQuaternion(_quaternion);\n\n\t\t\tconst panner = this.panner;\n\n\t\t\tif (panner.positionX) {\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\t\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\t\t\t\tpanner.positionX.linearRampToValueAtTime(_position.x, endTime);\n\t\t\t\tpanner.positionY.linearRampToValueAtTime(_position.y, endTime);\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime(_position.z, endTime);\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);\n\t\t\t} else {\n\t\t\t\tpanner.setPosition(_position.x, _position.y, _position.z);\n\t\t\t\tpanner.setOrientation(_orientation.x, _orientation.y, _orientation.z);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass AudioAnalyser {\n\t\tconstructor(audio, fftSize = 2048) {\n\t\t\tthis.analyser = audio.context.createAnalyser();\n\t\t\tthis.analyser.fftSize = fftSize;\n\t\t\tthis.data = new Uint8Array(this.analyser.frequencyBinCount);\n\t\t\taudio.getOutput().connect(this.analyser);\n\t\t}\n\n\t\tgetFrequencyData() {\n\t\t\tthis.analyser.getByteFrequencyData(this.data);\n\t\t\treturn this.data;\n\t\t}\n\n\t\tgetAverageFrequency() {\n\t\t\tlet value = 0;\n\t\t\tconst data = this.getFrequencyData();\n\n\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\tvalue += data[i];\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\t\t}\n\n\t}\n\n\tclass PropertyMixer {\n\t\tconstructor(binding, typeName, valueSize) {\n\t\t\tthis.binding = binding;\n\t\t\tthis.valueSize = valueSize;\n\t\t\tlet mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t\t//\n\t\t\t// interpolators can use .buffer as their .result\n\t\t\t// the data then goes to 'incoming'\n\t\t\t//\n\t\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t\t// the cumulative result and are compared to detect\n\t\t\t// changes\n\t\t\t//\n\t\t\t// 'orig' stores the original state of the property\n\t\t\t//\n\t\t\t// 'add' is used for additive cumulative results\n\t\t\t//\n\t\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t\t// to store intermediate quaternion multiplication results\n\n\t\t\tswitch (typeName) {\n\t\t\t\tcase 'quaternion':\n\t\t\t\t\tmixFunction = this._slerp;\n\t\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 6);\n\t\t\t\t\tthis._workIndex = 5;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'string':\n\t\t\t\tcase 'bool':\n\t\t\t\t\tmixFunction = this._select; // Use the regular mix function and for additive on these types,\n\t\t\t\t\t// additive is not relevant for non-numeric types\n\n\t\t\t\t\tmixFunctionAdditive = this._select;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\t\t\t\t\tthis.buffer = new Array(valueSize * 5);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmixFunction = this._lerp;\n\t\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 5);\n\t\t\t}\n\n\t\t\tthis._mixBufferRegion = mixFunction;\n\t\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\t\tthis._setIdentity = setIdentity;\n\t\t\tthis._origIndex = 3;\n\t\t\tthis._addIndex = 4;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t\tthis.useCount = 0;\n\t\t\tthis.referenceCount = 0;\n\t\t} // accumulate data in the 'incoming' region into 'accu<i>'\n\n\n\t\taccumulate(accuIndex, weight) {\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = accuIndex * stride + stride;\n\t\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\t\tif (currentWeight === 0) {\n\t\t\t\t// accuN := incoming * weight\n\t\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[offset + i] = buffer[i];\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\t\t\t} else {\n\t\t\t\t// accuN := accuN + incoming * weight\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tconst mix = weight / currentWeight;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, 0, mix, stride);\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\t\t} // accumulate data in the 'incoming' region into 'add'\n\n\n\t\taccumulateAdditive(weight) {\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif (this.cumulativeWeightAdditive === 0) {\n\t\t\t\t// add = identity\n\t\t\t\tthis._setIdentity();\n\t\t\t} // add := add + incoming * weight\n\n\n\t\t\tthis._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\t\t} // apply the state of 'accu<i>' to the binding when accus differ\n\n\n\t\tapply(accuIndex) {\n\t\t\tconst stride = this.valueSize,\n\t\t\t\t\t\tbuffer = this.buffer,\n\t\t\t\t\t\toffset = accuIndex * stride + stride,\n\t\t\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\t\t\t\t\t\tbinding = this.binding;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif (weight < 1) {\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n\t\t\t}\n\n\t\t\tif (weightAdditive > 0) {\n\t\t\t\t// accuN := accuN + additive accuN\n\t\t\t\tthis._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n\t\t\t}\n\n\t\t\tfor (let i = stride, e = stride + stride; i !== e; ++i) {\n\t\t\t\tif (buffer[i] !== buffer[i + stride]) {\n\t\t\t\t\t// value has changed -> update scene graph\n\t\t\t\t\tbinding.setValue(buffer, offset);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} // remember the state of the bound property and copy it to both accus\n\n\n\t\tsaveOriginalState() {\n\t\t\tconst binding = this.binding;\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\t\t\tbinding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n\t\t\tfor (let i = stride, e = originalValueOffset; i !== e; ++i) {\n\t\t\t\tbuffer[i] = buffer[originalValueOffset + i % stride];\n\t\t\t} // Add to identity for additive\n\n\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t} // apply the state previously taken via 'saveOriginalState' to the binding\n\n\n\t\trestoreOriginalState() {\n\t\t\tconst originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue(this.buffer, originalValueOffset);\n\t\t}\n\n\t\t_setAdditiveIdentityNumeric() {\n\t\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\tthis.buffer[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t_setAdditiveIdentityQuaternion() {\n\t\t\tthis._setAdditiveIdentityNumeric();\n\n\t\t\tthis.buffer[this._addIndex * this.valueSize + 3] = 1;\n\t\t}\n\n\t\t_setAdditiveIdentityOther() {\n\t\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor (let i = 0; i < this.valueSize; i++) {\n\t\t\t\tthis.buffer[targetIndex + i] = this.buffer[startIndex + i];\n\t\t\t}\n\t\t} // mix functions\n\n\n\t\t_select(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tif (t >= 0.5) {\n\t\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[dstOffset + i] = buffer[srcOffset + i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_slerp(buffer, dstOffset, srcOffset, t) {\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n\t\t}\n\n\t\t_slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tconst workOffset = this._workIndex * stride; // Store result in intermediate buffer offset\n\n\t\t\tQuaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result\n\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n\t\t}\n\n\t\t_lerp(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tconst s = 1 - t;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tconst j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\n\t\t_lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tconst j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n\tconst _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\n\n\tconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\n\tconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\n\n\tconst _directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\n\n\tconst _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\n\n\tconst _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\n\n\tconst _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\n\n\tconst _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\n\n\tconst _supportedObjectNames = ['material', 'materials', 'bones'];\n\n\tclass Composite {\n\t\tconstructor(targetGroup, path, optionalParsedPath) {\n\t\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n\t\t\tthis._targetGroup = targetGroup;\n\t\t\tthis._bindings = targetGroup.subscribe_(path, parsedPath);\n\t\t}\n\n\t\tgetValue(array, offset) {\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t\tbinding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n\t\t\tif (binding !== undefined) binding.getValue(array, offset);\n\t\t}\n\n\t\tsetValue(array, offset) {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].setValue(array, offset);\n\t\t\t}\n\t\t}\n\n\t\tbind() {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].bind();\n\t\t\t}\n\t\t}\n\n\t\tunbind() {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].unbind();\n\t\t\t}\n\t\t}\n\n\t} // Note: This class uses a State pattern on a per-method basis:\n\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t// prototype version of these methods with one that represents\n\t// the bound state. When the property is not found, the methods\n\t// become no-ops.\n\n\n\tclass PropertyBinding {\n\t\tconstructor(rootNode, path, parsedPath) {\n\t\t\tthis.path = path;\n\t\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\t\t\tthis.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n\t\t\tthis.rootNode = rootNode; // initial state of these methods that calls 'bind'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\n\t\tstatic create(root, path, parsedPath) {\n\t\t\tif (!(root && root.isAnimationObjectGroup)) {\n\t\t\t\treturn new PropertyBinding(root, path, parsedPath);\n\t\t\t} else {\n\t\t\t\treturn new PropertyBinding.Composite(root, path, parsedPath);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\n\n\t\tstatic sanitizeNodeName(name) {\n\t\t\treturn name.replace(/\\s/g, '_').replace(_reservedRe, '');\n\t\t}\n\n\t\tstatic parseTrackName(trackName) {\n\t\t\tconst matches = _trackRe.exec(trackName);\n\n\t\t\tif (!matches) {\n\t\t\t\tthrow new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n\t\t\t}\n\n\t\t\tconst results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[2],\n\t\t\t\tobjectName: matches[3],\n\t\t\t\tobjectIndex: matches[4],\n\t\t\t\tpropertyName: matches[5],\n\t\t\t\t// required\n\t\t\t\tpropertyIndex: matches[6]\n\t\t\t};\n\t\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n\n\t\t\tif (lastDot !== undefined && lastDot !== -1) {\n\t\t\t\tconst objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\n\t\t\t\tif (_supportedObjectNames.indexOf(objectName) !== -1) {\n\t\t\t\t\tresults.nodeName = results.nodeName.substring(0, lastDot);\n\t\t\t\t\tresults.objectName = objectName;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (results.propertyName === null || results.propertyName.length === 0) {\n\t\t\t\tthrow new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t}\n\n\t\tstatic findNode(root, nodeName) {\n\t\t\tif (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n\t\t\t\treturn root;\n\t\t\t} // search into skeleton bones.\n\n\n\t\t\tif (root.skeleton) {\n\t\t\t\tconst bone = root.skeleton.getBoneByName(nodeName);\n\n\t\t\t\tif (bone !== undefined) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t} // search into node subtree.\n\n\n\t\t\tif (root.children) {\n\t\t\t\tconst searchNodeSubtree = function (children) {\n\t\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\t\tconst childNode = children[i];\n\n\t\t\t\t\t\tif (childNode.name === nodeName || childNode.uuid === nodeName) {\n\t\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst result = searchNodeSubtree(childNode.children);\n\t\t\t\t\t\tif (result) return result;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t};\n\n\t\t\t\tconst subTreeNode = searchNodeSubtree(root.children);\n\n\t\t\t\tif (subTreeNode) {\n\t\t\t\t\treturn subTreeNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} // these are used to \"bind\" a nonexistent property\n\n\n\t\t_getValue_unavailable() {}\n\n\t\t_setValue_unavailable() {} // Getters\n\n\n\t\t_getValue_direct(buffer, offset) {\n\t\t\tbuffer[offset] = this.node[this.propertyName];\n\t\t}\n\n\t\t_getValue_array(buffer, offset) {\n\t\t\tconst source = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = source.length; i !== n; ++i) {\n\t\t\t\tbuffer[offset++] = source[i];\n\t\t\t}\n\t\t}\n\n\t\t_getValue_arrayElement(buffer, offset) {\n\t\t\tbuffer[offset] = this.resolvedProperty[this.propertyIndex];\n\t\t}\n\n\t\t_getValue_toArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.toArray(buffer, offset);\n\t\t} // Direct\n\n\n\t\t_setValue_direct(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t}\n\n\t\t_setValue_direct_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // EntireArray\n\n\n\t\t_setValue_array(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\t\t}\n\n\t\t_setValue_array_setNeedsUpdate(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // ArrayElement\n\n\n\t\t_setValue_arrayElement(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t}\n\n\t\t_setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // HasToFromArray\n\n\n\t\t_setValue_fromArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t}\n\n\t\t_setValue_fromArray_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}\n\n\t\t_getValue_unbound(targetArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.getValue(targetArray, offset);\n\t\t}\n\n\t\t_setValue_unbound(sourceArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.setValue(sourceArray, offset);\n\t\t} // create getter / setter pair for a property in the scene graph\n\n\n\t\tbind() {\n\t\t\tlet targetObject = this.node;\n\t\t\tconst parsedPath = this.parsedPath;\n\t\t\tconst objectName = parsedPath.objectName;\n\t\t\tconst propertyName = parsedPath.propertyName;\n\t\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif (!targetObject) {\n\t\t\t\ttargetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n\t\t\t\tthis.node = targetObject;\n\t\t\t} // set fail state so we can just 'return' on error\n\n\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable; // ensure there is a value node\n\n\t\t\tif (!targetObject) {\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (objectName) {\n\t\t\t\tlet objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n\t\t\t\tswitch (objectName) {\n\t\t\t\t\tcase 'materials':\n\t\t\t\t\t\tif (!targetObject.material) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!targetObject.material.materials) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\t\t\t\t\t\tif (!targetObject.skeleton) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} // potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n\t\t\t\t\t\tfor (let i = 0; i < targetObject.length; i++) {\n\t\t\t\t\t\t\tif (targetObject[i].name === objectIndex) {\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (targetObject[objectName] === undefined) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[objectName];\n\t\t\t\t}\n\n\t\t\t\tif (objectIndex !== undefined) {\n\t\t\t\t\tif (targetObject[objectIndex] === undefined) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[objectIndex];\n\t\t\t\t}\n\t\t\t} // resolve property\n\n\n\t\t\tconst nodeProperty = targetObject[propertyName];\n\n\t\t\tif (nodeProperty === undefined) {\n\t\t\t\tconst nodeName = parsedPath.nodeName;\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n\t\t\t\treturn;\n\t\t\t} // determine versioning scheme\n\n\n\t\t\tlet versioning = this.Versioning.None;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif (targetObject.needsUpdate !== undefined) {\n\t\t\t\t// material\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n\t\t\t\t// node transform\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t} // determine how the property gets bound\n\n\n\t\t\tlet bindingType = this.BindingType.Direct;\n\n\t\t\tif (propertyIndex !== undefined) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\t\t\tif (propertyName === 'morphTargetInfluences') {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif (!targetObject.geometry) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (targetObject.geometry.isBufferGeometry) {\n\t\t\t\t\t\tif (!targetObject.geometry.morphAttributes) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\t\t\t} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else if (Array.isArray(nodeProperty)) {\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else {\n\t\t\t\tthis.propertyName = propertyName;\n\t\t\t} // select getter / setter\n\n\n\t\t\tthis.getValue = this.GetterByBindingType[bindingType];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n\t\t}\n\n\t\tunbind() {\n\t\t\tthis.node = null; // back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\n\t}\n\n\tPropertyBinding.Composite = Composite;\n\tPropertyBinding.prototype.BindingType = {\n\t\tDirect: 0,\n\t\tEntireArray: 1,\n\t\tArrayElement: 2,\n\t\tHasFromToArray: 3\n\t};\n\tPropertyBinding.prototype.Versioning = {\n\t\tNone: 0,\n\t\tNeedsUpdate: 1,\n\t\tMatrixWorldNeedsUpdate: 2\n\t};\n\tPropertyBinding.prototype.GetterByBindingType = [PropertyBinding.prototype._getValue_direct, PropertyBinding.prototype._getValue_array, PropertyBinding.prototype._getValue_arrayElement, PropertyBinding.prototype._getValue_toArray];\n\tPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[// Direct\n\tPropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [// EntireArray\n\tPropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [// ArrayElement\n\tPropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [// HasToFromArray\n\tPropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate, PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *\t- Add objects you would otherwise pass as 'root' to the\n\t *\t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t *\t- Instead pass this object as 'root'.\n\t *\n\t *\t- You can also add and remove objects later when the mixer\n\t *\t\tis running.\n\t *\n\t * Note:\n\t *\n\t *\t\tObjects of this class appear as one object to the mixer,\n\t *\t\tso cache control of the individual objects must be done\n\t *\t\ton the group.\n\t *\n\t * Limitation:\n\t *\n\t *\t- The animated properties must be compatible among the\n\t *\t\tall objects in the group.\n\t *\n\t *\t- A single property can either be controlled through a\n\t *\t\ttarget group or directly, but not both.\n\t */\n\n\tclass AnimationObjectGroup {\n\t\tconstructor() {\n\t\t\tthis.uuid = generateUUID(); // cached objects followed by the active ones\n\n\t\t\tthis._objects = Array.prototype.slice.call(arguments);\n\t\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t\t// note: read by PropertyBinding.Composite\n\n\t\t\tconst indices = {};\n\t\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tindices[arguments[i].uuid] = i;\n\t\t\t}\n\n\t\t\tthis._paths = []; // inside: string\n\n\t\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\n\t\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\n\t\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\t\tconst scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tobjects: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._objects.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tget bindingsPerObject() {\n\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n\t\tadd() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tpaths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet knownObject = undefined,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tlet index = indicesByUUID[uuid];\n\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\t\t\t\tindex = nObjects++;\n\t\t\t\t\tindicesByUUID[uuid] = index;\n\t\t\t\t\tobjects.push(object); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tbindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n\t\t\t\t\t}\n\t\t\t\t} else if (index < nCachedObjects) {\n\t\t\t\t\tknownObject = objects[index]; // move existing object to the ACTIVE region\n\n\t\t\t\t\tconst firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex];\n\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\tobjects[index] = lastCachedObject;\n\t\t\t\t\tindicesByUUID[uuid] = firstActiveIndex;\n\t\t\t\t\tobjects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex];\n\t\t\t\t\t\tlet binding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\n\t\t\t\t\t\tif (binding === undefined) {\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\t\t\t\t\t\t\tbinding = new PropertyBinding(object, paths[j], parsedPaths[j]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t} else if (objects[index] !== knownObject) {\n\t\t\t\t\tconsole.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t}\n\n\t\tremove() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined && index >= nCachedObjects) {\n\t\t\t\t\t// move existing object into the CACHED region\n\t\t\t\t\tconst lastCachedIndex = nCachedObjects++,\n\t\t\t\t\t\t\t\tfirstActiveObject = objects[lastCachedIndex];\n\t\t\t\t\tindicesByUUID[firstActiveObject.uuid] = index;\n\t\t\t\t\tobjects[index] = firstActiveObject;\n\t\t\t\t\tindicesByUUID[uuid] = lastCachedIndex;\n\t\t\t\t\tobjects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tfirstActive = bindingsForPath[lastCachedIndex],\n\t\t\t\t\t\t\t\t\tbinding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = firstActive;\n\t\t\t\t\t\tbindingsForPath[lastCachedIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // remove & forget\n\n\n\t\tuncache() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined) {\n\t\t\t\t\tdelete indicesByUUID[uuid];\n\n\t\t\t\t\tif (index < nCachedObjects) {\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\t\t\t\t\t\tconst firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex],\n\t\t\t\t\t\t\t\t\tlastIndex = --nObjects,\n\t\t\t\t\t\t\t\t\tlastObject = objects[lastIndex]; // last cached object takes this object's place\n\n\t\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\t\tobjects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = firstActiveIndex;\n\t\t\t\t\t\tobjects[firstActiveIndex] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex],\n\t\t\t\t\t\t\t\t\t\tlast = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\t\t\t\t\t\tconst lastIndex = --nObjects,\n\t\t\t\t\t\t\t\t\tlastObject = objects[lastIndex];\n\n\t\t\t\t\t\tif (lastIndex > 0) {\n\t\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = index;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobjects[index] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tconst bindingsForPath = bindings[j];\n\t\t\t\t\t\t\tbindingsForPath[index] = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // Internal interface used by befriended PropertyBinding.Composite:\n\n\n\t\tsubscribe_(path, parsedPath) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\t\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\t\tlet index = indicesByPath[path];\n\t\t\tconst bindings = this._bindings;\n\t\t\tif (index !== undefined) return bindings[index];\n\t\t\tconst paths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tobjects = this._objects,\n\t\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\t\tbindingsForPath = new Array(nObjects);\n\t\t\tindex = bindings.length;\n\t\t\tindicesByPath[path] = index;\n\t\t\tpaths.push(path);\n\t\t\tparsedPaths.push(parsedPath);\n\t\t\tbindings.push(bindingsForPath);\n\n\t\t\tfor (let i = nCachedObjects, n = objects.length; i !== n; ++i) {\n\t\t\t\tconst object = objects[i];\n\t\t\t\tbindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\t\t}\n\n\t\tunsubscribe_(path) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\t\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\t\t\tindex = indicesByPath[path];\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tconst paths = this._paths,\n\t\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\t\t\tlastBindings = bindings[lastBindingsIndex],\n\t\t\t\t\t\t\tlastBindingsPath = path[lastBindingsIndex];\n\t\t\t\tindicesByPath[lastBindingsPath] = index;\n\t\t\t\tbindings[index] = lastBindings;\n\t\t\t\tbindings.pop();\n\t\t\t\tparsedPaths[index] = parsedPaths[lastBindingsIndex];\n\t\t\t\tparsedPaths.pop();\n\t\t\t\tpaths[index] = paths[lastBindingsIndex];\n\t\t\t\tpaths.pop();\n\t\t\t}\n\t\t}\n\n\t}\n\n\tAnimationObjectGroup.prototype.isAnimationObjectGroup = true;\n\n\tclass AnimationAction {\n\t\tconstructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {\n\t\t\tthis._mixer = mixer;\n\t\t\tthis._clip = clip;\n\t\t\tthis._localRoot = localRoot;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tconst tracks = clip.tracks,\n\t\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\t\tinterpolants = new Array(nTracks);\n\t\t\tconst interpolantSettings = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\n\t\t\tfor (let i = 0; i !== nTracks; ++i) {\n\t\t\t\tconst interpolant = tracks[i].createInterpolant(null);\n\t\t\t\tinterpolants[i] = interpolant;\n\t\t\t\tinterpolant.settings = interpolantSettings;\n\t\t\t}\n\n\t\t\tthis._interpolantSettings = interpolantSettings;\n\t\t\tthis._interpolants = interpolants; // bound by the mixer\n\t\t\t// inside: PropertyMixer (managed by the mixer)\n\n\t\t\tthis._propertyBindings = new Array(nTracks);\n\t\t\tthis._cacheIndex = null; // for the memory manager\n\n\t\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis.loop = LoopRepeat;\n\t\t\tthis._loopCount = -1; // global mixer time when the action is to be started\n\t\t\t// it's set back to 'null' upon start of the action\n\n\t\t\tthis._startTime = null; // scaled local time of the action\n\t\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1;\n\t\t\tthis._effectiveTimeScale = 1;\n\t\t\tthis.weight = 1;\n\t\t\tthis._effectiveWeight = 1;\n\t\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\t\tthis.paused = false; // true -> zero effective time scale\n\n\t\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\t\tthis.clampWhenFinished = false; // keep feeding the last frame?\n\n\t\t\tthis.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n\t\t\tthis.zeroSlopeAtEnd = true; // clips for start, loop and end\n\t\t} // State & Scheduling\n\n\n\t\tplay() {\n\t\t\tthis._mixer._activateAction(this);\n\n\t\t\treturn this;\n\t\t}\n\n\t\tstop() {\n\t\t\tthis._mixer._deactivateAction(this);\n\n\t\t\treturn this.reset();\n\t\t}\n\n\t\treset() {\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\t\t\tthis.time = 0; // restart clip\n\n\t\t\tthis._loopCount = -1; // forget previous loops\n\n\t\t\tthis._startTime = null; // forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\t\t}\n\n\t\tisRunning() {\n\t\t\treturn this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n\t\t} // return true when play has been called\n\n\n\t\tisScheduled() {\n\t\t\treturn this._mixer._isActiveAction(this);\n\t\t}\n\n\t\tstartAt(time) {\n\t\t\tthis._startTime = time;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoop(mode, repetitions) {\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\t\t\treturn this;\n\t\t} // Weight\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\n\n\t\tsetEffectiveWeight(weight) {\n\t\t\tthis.weight = weight; // note: same logic as when updated at runtime\n\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\t\treturn this.stopFading();\n\t\t} // return the weight considering fading and .enabled\n\n\n\t\tgetEffectiveWeight() {\n\t\t\treturn this._effectiveWeight;\n\t\t}\n\n\t\tfadeIn(duration) {\n\t\t\treturn this._scheduleFading(duration, 0, 1);\n\t\t}\n\n\t\tfadeOut(duration) {\n\t\t\treturn this._scheduleFading(duration, 1, 0);\n\t\t}\n\n\t\tcrossFadeFrom(fadeOutAction, duration, warp) {\n\t\t\tfadeOutAction.fadeOut(duration);\n\t\t\tthis.fadeIn(duration);\n\n\t\t\tif (warp) {\n\t\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\t\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\t\t\tfadeOutAction.warp(1.0, startEndRatio, duration);\n\t\t\t\tthis.warp(endStartRatio, 1.0, duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcrossFadeTo(fadeInAction, duration, warp) {\n\t\t\treturn fadeInAction.crossFadeFrom(this, duration, warp);\n\t\t}\n\n\t\tstopFading() {\n\t\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\t\tif (weightInterpolant !== null) {\n\t\t\t\tthis._weightInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(weightInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Time Scale Control\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\n\n\t\tsetEffectiveTimeScale(timeScale) {\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\t\t\treturn this.stopWarping();\n\t\t} // return the time scale considering warping and .paused\n\n\n\t\tgetEffectiveTimeScale() {\n\t\t\treturn this._effectiveTimeScale;\n\t\t}\n\n\t\tsetDuration(duration) {\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\t\t\treturn this.stopWarping();\n\t\t}\n\n\t\tsyncWith(action) {\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\t\t\treturn this.stopWarping();\n\t\t}\n\n\t\thalt(duration) {\n\t\t\treturn this.warp(this._effectiveTimeScale, 0, duration);\n\t\t}\n\n\t\twarp(startTimeScale, endTimeScale, duration) {\n\t\t\tconst mixer = this._mixer,\n\t\t\t\t\t\tnow = mixer.time,\n\t\t\t\t\t\ttimeScale = this.timeScale;\n\t\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tconst times = interpolant.parameterPositions,\n\t\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[0] = startTimeScale / timeScale;\n\t\t\tvalues[1] = endTimeScale / timeScale;\n\t\t\treturn this;\n\t\t}\n\n\t\tstopWarping() {\n\t\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif (timeScaleInterpolant !== null) {\n\t\t\t\tthis._timeScaleInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Object Accessors\n\n\n\t\tgetMixer() {\n\t\t\treturn this._mixer;\n\t\t}\n\n\t\tgetClip() {\n\t\t\treturn this._clip;\n\t\t}\n\n\t\tgetRoot() {\n\t\t\treturn this._localRoot || this._mixer._root;\n\t\t} // Interna\n\n\n\t\t_update(time, deltaTime, timeDirection, accuIndex) {\n\t\t\t// called by the mixer\n\t\t\tif (!this.enabled) {\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\t\t\t\tthis._updateWeight(time);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst startTime = this._startTime;\n\n\t\t\tif (startTime !== null) {\n\t\t\t\t// check for scheduled start of action\n\t\t\t\tconst timeRunning = (time - startTime) * timeDirection;\n\n\t\t\t\tif (timeRunning < 0 || timeDirection === 0) {\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\t\t\t} // start\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\t\t\t} // apply time scale and advance time\n\n\n\t\t\tdeltaTime *= this._updateTimeScale(time);\n\n\t\t\tconst clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\n\t\t\tconst weight = this._updateWeight(time);\n\n\t\t\tif (weight > 0) {\n\t\t\t\tconst interpolants = this._interpolants;\n\t\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\t\tswitch (this.blendMode) {\n\t\t\t\t\tcase AdditiveAnimationBlendMode:\n\t\t\t\t\t\tfor (let j = 0, m = interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\tinterpolants[j].evaluate(clipTime);\n\t\t\t\t\t\t\tpropertyMixers[j].accumulateAdditive(weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfor (let j = 0, m = interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\tinterpolants[j].evaluate(clipTime);\n\t\t\t\t\t\t\tpropertyMixers[j].accumulate(accuIndex, weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_updateWeight(time) {\n\t\t\tlet weight = 0;\n\n\t\t\tif (this.enabled) {\n\t\t\t\tweight = this.weight;\n\t\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tconst interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif (interpolantValue === 0) {\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\t\t}\n\n\t\t_updateTimeScale(time) {\n\t\t\tlet timeScale = 0;\n\n\t\t\tif (!this.paused) {\n\t\t\t\ttimeScale = this.timeScale;\n\t\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tconst interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif (timeScale === 0) {\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\t\t}\n\n\t\t_updateTime(deltaTime) {\n\t\t\tconst duration = this._clip.duration;\n\t\t\tconst loop = this.loop;\n\t\t\tlet time = this.time + deltaTime;\n\t\t\tlet loopCount = this._loopCount;\n\t\t\tconst pingPong = loop === LoopPingPong;\n\n\t\t\tif (deltaTime === 0) {\n\t\t\t\tif (loopCount === -1) return time;\n\t\t\t\treturn pingPong && (loopCount & 1) === 1 ? duration - time : time;\n\t\t\t}\n\n\t\t\tif (loop === LoopOnce) {\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tthis._loopCount = 0;\n\n\t\t\t\t\tthis._setEndings(true, true, false);\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\t\t\t\t\tif (time >= duration) {\n\t\t\t\t\t\ttime = duration;\n\t\t\t\t\t} else if (time < 0) {\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.time = time;\n\t\t\t\t\t\tbreak handle_stop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\taction: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// repetitive Repeat or PingPong\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tif (deltaTime >= 0) {\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(true, this.repetitions === 0, pingPong);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\t\t\t\t\t\tthis._setEndings(this.repetitions === 0, true, pingPong);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (time >= duration || time < 0) {\n\t\t\t\t\t// wrap around\n\t\t\t\t\tconst loopDelta = Math.floor(time / duration); // signed\n\n\t\t\t\t\ttime -= duration * loopDelta;\n\t\t\t\t\tloopCount += Math.abs(loopDelta);\n\t\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif (pending <= 0) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\t\t\t\t\t\tif (pending === 1) {\n\t\t\t\t\t\t\t// entering the last round\n\t\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\n\t\t\t\t\t\t\tthis._setEndings(atStart, !atStart, pingPong);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setEndings(false, false, pingPong);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'loop',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tloopDelta: loopDelta\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.time = time;\n\t\t\t\t}\n\n\t\t\t\tif (pingPong && (loopCount & 1) === 1) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\t\t\t\t\treturn duration - time;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn time;\n\t\t}\n\n\t\t_setEndings(atStart, atEnd, pingPong) {\n\t\t\tconst settings = this._interpolantSettings;\n\n\t\t\tif (pingPong) {\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\t\t\t} else {\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\t\t\tif (atStart) {\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\t\t\t}\n\n\t\t\t\tif (atEnd) {\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingEnd = WrapAroundEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_scheduleFading(duration, weightNow, weightThen) {\n\t\t\tconst mixer = this._mixer,\n\t\t\t\t\t\tnow = mixer.time;\n\t\t\tlet interpolant = this._weightInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tconst times = interpolant.parameterPositions,\n\t\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\tvalues[0] = weightNow;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[1] = weightThen;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AnimationMixer extends EventDispatcher {\n\t\tconstructor(root) {\n\t\t\tsuper();\n\t\t\tthis._root = root;\n\n\t\t\tthis._initMemoryManager();\n\n\t\t\tthis._accuIndex = 0;\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1.0;\n\t\t}\n\n\t\t_bindAction(action, prototypeAction) {\n\t\t\tconst root = action._localRoot || this._root,\n\t\t\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\t\t\tlet bindingsByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingsByName === undefined) {\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingsByName;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i !== nTracks; ++i) {\n\t\t\t\tconst track = tracks[i],\n\t\t\t\t\t\t\ttrackName = track.name;\n\t\t\t\tlet binding = bindingsByName[trackName];\n\n\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t} else {\n\t\t\t\t\tbinding = bindings[i];\n\n\t\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\t\t\t\t\t\tif (binding._cacheIndex === null) {\n\t\t\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n\t\t\t\t\tbinding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t}\n\n\t\t\t\tinterpolants[i].resultBuffer = binding.buffer;\n\t\t\t}\n\t\t}\n\n\t\t_activateAction(action) {\n\t\t\tif (!this._isActiveAction(action)) {\n\t\t\t\tif (action._cacheIndex === null) {\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\t\t\t\t\tconst rootUuid = (action._localRoot || this._root).uuid,\n\t\t\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\t\t\tthis._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n\t\t\t\t\tthis._addInactiveAction(action, clipUuid, rootUuid);\n\t\t\t\t}\n\n\t\t\t\tconst bindings = action._propertyBindings; // increment reference counts / sort out state\n\n\t\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\t\tif (binding.useCount++ === 0) {\n\t\t\t\t\t\tthis._lendBinding(binding);\n\n\t\t\t\t\t\tbinding.saveOriginalState();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction(action);\n\t\t\t}\n\t\t}\n\n\t\t_deactivateAction(action) {\n\t\t\tif (this._isActiveAction(action)) {\n\t\t\t\tconst bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n\t\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\t\tif (--binding.useCount === 0) {\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\t\tthis._takeBackBinding(binding);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction(action);\n\t\t\t}\n\t\t} // Memory manager\n\n\n\t\t_initMemoryManager() {\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._actionsByClip = {}; // inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n\t\t\tthis._nActiveBindings = 0;\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\n\t\t\tthis._nActiveControlInterpolants = 0;\n\t\t\tconst scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._actions.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveActions;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\t\t} // Memory management for AnimationAction objects\n\n\n\t\t_isActiveAction(action) {\n\t\t\tconst index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\t\t}\n\n\t\t_addInactiveAction(action, clipUuid, rootUuid) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip;\n\t\t\tlet actionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip === undefined) {\n\t\t\t\tactionsForClip = {\n\t\t\t\t\tknownActions: [action],\n\t\t\t\t\tactionByRoot: {}\n\t\t\t\t};\n\t\t\t\taction._byClipCacheIndex = 0;\n\t\t\t\tactionsByClip[clipUuid] = actionsForClip;\n\t\t\t} else {\n\t\t\t\tconst knownActions = actionsForClip.knownActions;\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push(action);\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push(action);\n\t\t\tactionsForClip.actionByRoot[rootUuid] = action;\n\t\t}\n\n\t\t_removeInactiveAction(action) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1],\n\t\t\t\t\t\tcacheIndex = action._cacheIndex;\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\tactions.pop();\n\t\t\taction._cacheIndex = null;\n\t\t\tconst clipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\t\tactionsForClip = actionsByClip[clipUuid],\n\t\t\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\t\t\t\t\tlastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n\t\t\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[byClipCacheIndex] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\t\t\taction._byClipCacheIndex = null;\n\t\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\t\t\trootUuid = (action._localRoot || this._root).uuid;\n\t\t\tdelete actionByRoot[rootUuid];\n\n\t\t\tif (knownActionsForClip.length === 0) {\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t}\n\n\t\t_removeInactiveBindingsForAction(action) {\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\tif (--binding.referenceCount === 0) {\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_lendAction(action) {\n\t\t\t// [ active actions |\tinactive actions\t]\n\t\t\t// [\tactive actions >| inactive actions ]\n\t\t\t//\t\t\t\t\t\t\t\t s\t\t\t\ta\n\t\t\t//\t\t\t\t\t\t\t\t\t<-swap->\n\t\t\t//\t\t\t\t\t\t\t\t a\t\t\t\ts\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveActions++,\n\t\t\t\t\t\tfirstInactiveAction = actions[lastActiveIndex];\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[lastActiveIndex] = action;\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = firstInactiveAction;\n\t\t}\n\n\t\t_takeBackAction(action) {\n\t\t\t// [\tactive actions\t| inactive actions ]\n\t\t\t// [ active actions |< inactive actions\t]\n\t\t\t//\t\t\t\ta\t\t\t\ts\n\t\t\t//\t\t\t\t <-swap->\n\t\t\t//\t\t\t\ts\t\t\t\ta\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveActions,\n\t\t\t\t\t\tlastActiveAction = actions[firstInactiveIndex];\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[firstInactiveIndex] = action;\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = lastActiveAction;\n\t\t} // Memory management for PropertyMixer objects\n\n\n\t\t_addInactiveBinding(binding, rootUuid, trackName) {\n\t\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindings = this._bindings;\n\t\t\tlet bindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName === undefined) {\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingByName;\n\t\t\t}\n\n\t\t\tbindingByName[trackName] = binding;\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push(binding);\n\t\t}\n\n\t\t_removeInactiveBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tpropBinding = binding.binding,\n\t\t\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\t\t\ttrackName = propBinding.path,\n\t\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid],\n\t\t\t\t\t\tlastInactiveBinding = bindings[bindings.length - 1],\n\t\t\t\t\t\tcacheIndex = binding._cacheIndex;\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[cacheIndex] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\t\t\tdelete bindingByName[trackName];\n\n\t\t\tif (Object.keys(bindingByName).length === 0) {\n\t\t\t\tdelete bindingsByRoot[rootUuid];\n\t\t\t}\n\t\t}\n\n\t\t_lendBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveBindings++,\n\t\t\t\t\t\tfirstInactiveBinding = bindings[lastActiveIndex];\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[lastActiveIndex] = binding;\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = firstInactiveBinding;\n\t\t}\n\n\t\t_takeBackBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveBindings,\n\t\t\t\t\t\tlastActiveBinding = bindings[firstInactiveIndex];\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[firstInactiveIndex] = binding;\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = lastActiveBinding;\n\t\t} // Memory management of Interpolants for weight and time scale\n\n\n\t\t_lendControlInterpolant() {\n\t\t\tconst interpolants = this._controlInterpolants,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants++;\n\t\t\tlet interpolant = interpolants[lastActiveIndex];\n\n\t\t\tif (interpolant === undefined) {\n\t\t\t\tinterpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[lastActiveIndex] = interpolant;\n\t\t\t}\n\n\t\t\treturn interpolant;\n\t\t}\n\n\t\t_takeBackControlInterpolant(interpolant) {\n\t\t\tconst interpolants = this._controlInterpolants,\n\t\t\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveControlInterpolants,\n\t\t\t\t\t\tlastActiveInterpolant = interpolants[firstInactiveIndex];\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[firstInactiveIndex] = interpolant;\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[prevIndex] = lastActiveInterpolant;\n\t\t} // return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\n\n\t\tclipAction(clip, optionalRoot, blendMode) {\n\t\t\tconst root = optionalRoot || this._root,\n\t\t\t\t\t\trootUuid = root.uuid;\n\t\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n\t\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\t\t\tconst actionsForClip = this._actionsByClip[clipUuid];\n\t\t\tlet prototypeAction = null;\n\n\t\t\tif (blendMode === undefined) {\n\t\t\t\tif (clipObject !== null) {\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\t\t\t\t} else {\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\tconst existingAction = actionsForClip.actionByRoot[rootUuid];\n\n\t\t\t\tif (existingAction !== undefined && existingAction.blendMode === blendMode) {\n\t\t\t\t\treturn existingAction;\n\t\t\t\t} // we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\n\n\t\t\t\tprototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n\t\t\t\tif (clipObject === null) clipObject = prototypeAction._clip;\n\t\t\t} // clip must be known when specified via string\n\n\n\t\t\tif (clipObject === null) return null; // allocate all resources required to run it\n\n\t\t\tconst newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n\n\t\t\tthis._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n\t\t\tthis._addInactiveAction(newAction, clipUuid, rootUuid);\n\n\t\t\treturn newAction;\n\t\t} // get an existing action\n\n\n\t\texistingAction(clip, optionalRoot) {\n\t\t\tconst root = optionalRoot || this._root,\n\t\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\t\tclipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n\t\t\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\treturn actionsForClip.actionByRoot[rootUuid] || null;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} // deactivates all previously scheduled actions\n\n\n\t\tstopAllAction() {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor (let i = nActions - 1; i >= 0; --i) {\n\t\t\t\tactions[i].stop();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // advance the time and update apply the animation\n\n\n\t\tupdate(deltaTime) {\n\t\t\tdeltaTime *= this.timeScale;\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\t\t\ttimeDirection = Math.sign(deltaTime),\n\t\t\t\t\t\taccuIndex = this._accuIndex ^= 1; // run active actions\n\n\t\t\tfor (let i = 0; i !== nActions; ++i) {\n\t\t\t\tconst action = actions[i];\n\n\t\t\t\taction._update(time, deltaTime, timeDirection, accuIndex);\n\t\t\t} // update scene graph\n\n\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor (let i = 0; i !== nBindings; ++i) {\n\t\t\t\tbindings[i].apply(accuIndex);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Allows you to seek to a specific time in an animation.\n\n\n\t\tsetTime(timeInSeconds) {\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\n\t\t\tfor (let i = 0; i < this._actions.length; i++) {\n\t\t\t\tthis._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\t\t\t}\n\n\t\t\treturn this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\t\t} // return this mixer's root target object\n\n\n\t\tgetRoot() {\n\t\t\treturn this._root;\n\t\t} // free all resources specific to a particular clip\n\n\n\t\tuncacheClip(clip) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\t\tactionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\t\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor (let i = 0, n = actionsToRemove.length; i !== n; ++i) {\n\t\t\t\t\tconst action = actionsToRemove[i];\n\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1];\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\t\t} // free all resources specific to a particular root target object\n\n\n\t\tuncacheRoot(root) {\n\t\t\tconst rootUuid = root.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor (const clipUuid in actionsByClip) {\n\t\t\t\tconst actionByRoot = actionsByClip[clipUuid].actionByRoot,\n\t\t\t\t\t\t\taction = actionByRoot[rootUuid];\n\n\t\t\t\tif (action !== undefined) {\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName !== undefined) {\n\t\t\t\tfor (const trackName in bindingByName) {\n\t\t\t\t\tconst binding = bindingByName[trackName];\n\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t} // remove a targeted clip from the cache\n\n\n\t\tuncacheAction(clip, optionalRoot) {\n\t\t\tconst action = this.existingAction(clip, optionalRoot);\n\n\t\t\tif (action !== null) {\n\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tAnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);\n\n\tclass Uniform {\n\t\tconstructor(value) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tconsole.warn('THREE.Uniform: Type parameter is no longer needed.');\n\t\t\t\tvalue = arguments[1];\n\t\t\t}\n\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n\t\t}\n\n\t}\n\n\tclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\t\tconstructor(array, stride, meshPerAttribute = 1) {\n\t\t\tsuper(array, stride);\n\t\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tconst ib = super.clone(data);\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn ib;\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tconst json = super.toJSON(data);\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn json;\n\t\t}\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\n\tclass GLBufferAttribute {\n\t\tconstructor(buffer, type, itemSize, elementSize, count) {\n\t\t\tthis.buffer = buffer;\n\t\t\tthis.type = type;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.elementSize = elementSize;\n\t\t\tthis.count = count;\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetBuffer(buffer) {\n\t\t\tthis.buffer = buffer;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetType(type, elementSize) {\n\t\t\tthis.type = type;\n\t\t\tthis.elementSize = elementSize;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetItemSize(itemSize) {\n\t\t\tthis.itemSize = itemSize;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetCount(count) {\n\t\t\tthis.count = count;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tGLBufferAttribute.prototype.isGLBufferAttribute = true;\n\n\tclass Raycaster {\n\t\tconstructor(origin, direction, near = 0, far = Infinity) {\n\t\t\tthis.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.camera = null;\n\t\t\tthis.layers = new Layers();\n\t\t\tthis.params = {\n\t\t\t\tMesh: {},\n\t\t\t\tLine: {\n\t\t\t\t\tthreshold: 1\n\t\t\t\t},\n\t\t\t\tLOD: {},\n\t\t\t\tPoints: {\n\t\t\t\t\tthreshold: 1\n\t\t\t\t},\n\t\t\t\tSprite: {}\n\t\t\t};\n\t\t}\n\n\t\tset(origin, direction) {\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\t\tthis.ray.set(origin, direction);\n\t\t}\n\n\t\tsetFromCamera(coords, camera) {\n\t\t\tif (camera && camera.isPerspectiveCamera) {\n\t\t\t\tthis.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n\t\t\t\tthis.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n\t\t\t\tthis.camera = camera;\n\t\t\t} else if (camera && camera.isOrthographicCamera) {\n\t\t\t\tthis.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n\n\t\t\t\tthis.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n\t\t\t\tthis.camera = camera;\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n\t\t\t}\n\t\t}\n\n\t\tintersectObject(object, recursive = false, intersects = []) {\n\t\t\tintersectObject(object, this, intersects, recursive);\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\n\t\tintersectObjects(objects, recursive = false, intersects = []) {\n\t\t\tfor (let i = 0, l = objects.length; i < l; i++) {\n\t\t\t\tintersectObject(objects[i], this, intersects, recursive);\n\t\t\t}\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\n\t}\n\n\tfunction ascSort(a, b) {\n\t\treturn a.distance - b.distance;\n\t}\n\n\tfunction intersectObject(object, raycaster, intersects, recursive) {\n\t\tif (object.layers.test(raycaster.layers)) {\n\t\t\tobject.raycast(raycaster, intersects);\n\t\t}\n\n\t\tif (recursive === true) {\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tintersectObject(children[i], raycaster, intersects, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tclass Spherical {\n\t\tconstructor(radius = 1, phi = 0, theta = 0) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi; // polar angle\n\n\t\t\tthis.theta = theta; // azimuthal angle\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(radius, phi, theta) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\t\t\treturn this;\n\t\t} // restrict phi to be betwee EPS and PI-EPS\n\n\n\t\tmakeSafe() {\n\t\t\tconst EPS = 0.000001;\n\t\t\tthis.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t}\n\n\t\tsetFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + y * y + z * z);\n\n\t\t\tif (this.radius === 0) {\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\t\t\t} else {\n\t\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\t\tthis.phi = Math.acos(clamp(y / this.radius, -1, 1));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t */\n\tclass Cylindrical {\n\t\tconstructor(radius = 1, theta = 0, y = 0) {\n\t\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\n\t\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\n\t\t\tthis.y = y; // height above the x-z plane\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(radius, theta, y) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t}\n\n\t\tsetFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + z * z);\n\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tconst _vector$4 = /*@__PURE__*/new Vector2();\n\n\tclass Box2 {\n\t\tconstructor(min = new Vector2(+Infinity, +Infinity), max = new Vector2(-Infinity, -Infinity)) {\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tset(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCenterAndSize(center, size) {\n\t\t\tconst halfSize = _vector$4.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.min.x = this.min.y = +Infinity;\n\t\t\tthis.max.x = this.max.y = -Infinity;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t}\n\n\t\tgetSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getSize() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n\t\t}\n\n\t\tcontainsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n\t\t}\n\n\t\tgetParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\t// using 4 splitting planes to rule out intersections\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\tconst clampedPoint = _vector$4.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t}\n\n\t\tintersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t}\n\n\t}\n\n\tBox2.prototype.isBox2 = true;\n\n\tconst _startP = /*@__PURE__*/new Vector3();\n\n\tconst _startEnd = /*@__PURE__*/new Vector3();\n\n\tclass Line3 {\n\t\tconstructor(start = new Vector3(), end = new Vector3()) {\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t}\n\n\t\tset(start, end) {\n\t\t\tthis.start.copy(start);\n\t\t\tthis.end.copy(end);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(line) {\n\t\t\tthis.start.copy(line.start);\n\t\t\tthis.end.copy(line.end);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.start, this.end).multiplyScalar(0.5);\n\t\t}\n\n\t\tdelta(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .delta() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.subVectors(this.end, this.start);\n\t\t}\n\n\t\tdistanceSq() {\n\t\t\treturn this.start.distanceToSquared(this.end);\n\t\t}\n\n\t\tdistance() {\n\t\t\treturn this.start.distanceTo(this.end);\n\t\t}\n\n\t\tat(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t}\n\n\t\tclosestPointToPointParameter(point, clampToLine) {\n\t\t\t_startP.subVectors(point, this.start);\n\n\t\t\t_startEnd.subVectors(this.end, this.start);\n\n\t\t\tconst startEnd2 = _startEnd.dot(_startEnd);\n\n\t\t\tconst startEnd_startP = _startEnd.dot(_startP);\n\n\t\t\tlet t = startEnd_startP / startEnd2;\n\n\t\t\tif (clampToLine) {\n\t\t\t\tt = clamp(t, 0, 1);\n\t\t\t}\n\n\t\t\treturn t;\n\t\t}\n\n\t\tclosestPointToPoint(point, clampToLine, target) {\n\t\t\tconst t = this.closestPointToPointParameter(point, clampToLine);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tthis.start.applyMatrix4(matrix);\n\t\t\tthis.end.applyMatrix4(matrix);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(line) {\n\t\t\treturn line.start.equals(this.start) && line.end.equals(this.end);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tclass ImmediateRenderObject extends Object3D {\n\t\tconstructor(material) {\n\t\t\tsuper();\n\t\t\tthis.material = material;\n\n\t\t\tthis.render = function ()\n\t\t\t/* renderCallback */\n\t\t\t{};\n\n\t\t\tthis.hasPositions = false;\n\t\t\tthis.hasNormals = false;\n\t\t\tthis.hasColors = false;\n\t\t\tthis.hasUvs = false;\n\t\t\tthis.positionArray = null;\n\t\t\tthis.normalArray = null;\n\t\t\tthis.colorArray = null;\n\t\t\tthis.uvArray = null;\n\t\t\tthis.count = 0;\n\t\t}\n\n\t}\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\tconst _vector$3 = /*@__PURE__*/new Vector3();\n\n\tclass SpotLightHelper extends Object3D {\n\t\tconstructor(light, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\t\tfor (let i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\t\tconst p1 = i / l * Math.PI * 2;\n\t\t\t\tconst p2 = j / l * Math.PI * 2;\n\t\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tthis.cone = new LineSegments(geometry, material);\n\t\t\tthis.add(this.cone);\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.cone.geometry.dispose();\n\t\t\tthis.cone.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tconst coneWidth = coneLength * Math.tan(this.light.angle);\n\t\t\tthis.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\t\t_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\tthis.cone.lookAt(_vector$3);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.cone.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.cone.material.color.copy(this.light.color);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tconst _vector$2 = /*@__PURE__*/new Vector3();\n\n\tconst _boneMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n\tclass SkeletonHelper extends LineSegments {\n\t\tconstructor(object) {\n\t\t\tconst bones = getBoneList(object);\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst vertices = [];\n\t\t\tconst colors = [];\n\t\t\tconst color1 = new Color(0, 0, 1);\n\t\t\tconst color2 = new Color(0, 1, 0);\n\n\t\t\tfor (let i = 0; i < bones.length; i++) {\n\t\t\t\tconst bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tcolors.push(color1.r, color1.g, color1.b);\n\t\t\t\t\tcolors.push(color2.r, color2.g, color2.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false,\n\t\t\t\ttransparent: true\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'SkeletonHelper';\n\t\t\tthis.isSkeletonHelper = true;\n\t\t\tthis.root = object;\n\t\t\tthis.bones = bones;\n\t\t\tthis.matrix = object.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tconst bones = this.bones;\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst position = geometry.getAttribute('position');\n\n\t\t\t_matrixWorldInv.copy(this.root.matrixWorld).invert();\n\n\t\t\tfor (let i = 0, j = 0; i < bones.length; i++) {\n\t\t\t\tconst bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n\n\t\t\t\t\t_vector$2.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);\n\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n\n\t\t\t\t\t_vector$2.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);\n\t\t\t\t\tj += 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tfunction getBoneList(object) {\n\t\tconst boneList = [];\n\n\t\tif (object && object.isBone) {\n\t\t\tboneList.push(object);\n\t\t}\n\n\t\tfor (let i = 0; i < object.children.length; i++) {\n\t\t\tboneList.push.apply(boneList, getBoneList(object.children[i]));\n\t\t}\n\n\t\treturn boneList;\n\t}\n\n\tclass PointLightHelper extends Mesh {\n\t\tconstructor(light, sphereSize, color) {\n\t\t\tconst geometry = new SphereGeometry(sphereSize, 4, 2);\n\t\t\tconst material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.color = color;\n\t\t\tthis.type = 'PointLightHelper';\n\t\t\tthis.matrix = this.light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.update();\n\t\t\t/*\n\t\t\t// TODO: delete this comment?\n\t\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\t\tconst d = light.distance;\n\t\t\tif ( d === 0.0 ) {\n\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t} else {\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t}\n\t\t\tthis.add( this.lightDistance );\n\t\t\t*/\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.material.color.copy(this.light.color);\n\t\t\t}\n\t\t\t/*\n\t\t\tconst d = this.light.distance;\n\t\t\t\tif ( d === 0.0 ) {\n\t\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.lightDistance.visible = true;\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t\t}\n\t\t\t*/\n\n\t\t}\n\n\t}\n\n\tconst _vector$1 = /*@__PURE__*/new Vector3();\n\n\tconst _color1 = /*@__PURE__*/new Color();\n\n\tconst _color2 = /*@__PURE__*/new Color();\n\n\tclass HemisphereLightHelper extends Object3D {\n\t\tconstructor(light, size, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tconst geometry = new OctahedronGeometry(size);\n\t\t\tgeometry.rotateY(Math.PI * 0.5);\n\t\t\tthis.material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tif (this.color === undefined) this.material.vertexColors = true;\n\t\t\tconst position = geometry.getAttribute('position');\n\t\t\tconst colors = new Float32Array(position.count * 3);\n\t\t\tgeometry.setAttribute('color', new BufferAttribute(colors, 3));\n\t\t\tthis.add(new Mesh(geometry, this.material));\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.children[0].geometry.dispose();\n\t\t\tthis.children[0].material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst mesh = this.children[0];\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tconst colors = mesh.geometry.getAttribute('color');\n\n\t\t\t\t_color1.copy(this.light.color);\n\n\t\t\t\t_color2.copy(this.light.groundColor);\n\n\t\t\t\tfor (let i = 0, l = colors.count; i < l; i++) {\n\t\t\t\t\tconst color = i < l / 2 ? _color1 : _color2;\n\t\t\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\t\t\t}\n\n\t\t\tmesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());\n\t\t}\n\n\t}\n\n\tclass GridHelper extends LineSegments {\n\t\tconstructor(size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888) {\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tconst center = divisions / 2;\n\t\t\tconst step = size / divisions;\n\t\t\tconst halfSize = size / 2;\n\t\t\tconst vertices = [],\n\t\t\t\t\t\tcolors = [];\n\n\t\t\tfor (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\t\t\t\tvertices.push(-halfSize, 0, k, halfSize, 0, k);\n\t\t\t\tvertices.push(k, 0, -halfSize, k, 0, halfSize);\n\t\t\t\tconst color = i === center ? color1 : color2;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'GridHelper';\n\t\t}\n\n\t}\n\n\tclass PolarGridHelper extends LineSegments {\n\t\tconstructor(radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888) {\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tconst vertices = [];\n\t\t\tconst colors = []; // create the radials\n\n\t\t\tfor (let i = 0; i <= radials; i++) {\n\t\t\t\tconst v = i / radials * (Math.PI * 2);\n\t\t\t\tconst x = Math.sin(v) * radius;\n\t\t\t\tconst z = Math.cos(v) * radius;\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\tconst color = i & 1 ? color1 : color2;\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t} // create the circles\n\n\n\t\t\tfor (let i = 0; i <= circles; i++) {\n\t\t\t\tconst color = i & 1 ? color1 : color2;\n\t\t\t\tconst r = radius - radius / circles * i;\n\n\t\t\t\tfor (let j = 0; j < divisions; j++) {\n\t\t\t\t\t// first vertex\n\t\t\t\t\tlet v = j / divisions * (Math.PI * 2);\n\t\t\t\t\tlet x = Math.sin(v) * r;\n\t\t\t\t\tlet z = Math.cos(v) * r;\n\t\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\t\tcolors.push(color.r, color.g, color.b); // second vertex\n\n\t\t\t\t\tv = (j + 1) / divisions * (Math.PI * 2);\n\t\t\t\t\tx = Math.sin(v) * r;\n\t\t\t\t\tz = Math.cos(v) * r;\n\t\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'PolarGridHelper';\n\t\t}\n\n\t}\n\n\tconst _v1 = /*@__PURE__*/new Vector3();\n\n\tconst _v2 = /*@__PURE__*/new Vector3();\n\n\tconst _v3 = /*@__PURE__*/new Vector3();\n\n\tclass DirectionalLightHelper extends Object3D {\n\t\tconstructor(light, size, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tif (size === undefined) size = 1;\n\t\t\tlet geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tthis.lightPlane = new Line(geometry, material);\n\t\t\tthis.add(this.lightPlane);\n\t\t\tgeometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\t\t\tthis.targetLine = new Line(geometry, material);\n\t\t\tthis.add(this.targetLine);\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.lightPlane.geometry.dispose();\n\t\t\tthis.lightPlane.material.dispose();\n\t\t\tthis.targetLine.geometry.dispose();\n\t\t\tthis.targetLine.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\t_v1.setFromMatrixPosition(this.light.matrixWorld);\n\n\t\t\t_v2.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\t_v3.subVectors(_v2, _v1);\n\n\t\t\tthis.lightPlane.lookAt(_v2);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.lightPlane.material.color.set(this.color);\n\t\t\t\tthis.targetLine.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.lightPlane.material.color.copy(this.light.color);\n\t\t\t\tthis.targetLine.material.color.copy(this.light.color);\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt(_v2);\n\t\t\tthis.targetLine.scale.z = _v3.length();\n\t\t}\n\n\t}\n\n\tconst _vector = /*@__PURE__*/new Vector3();\n\n\tconst _camera = /*@__PURE__*/new Camera();\n\t/**\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\n\tclass CameraHelper extends LineSegments {\n\t\tconstructor(camera) {\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tconst vertices = [];\n\t\t\tconst colors = [];\n\t\t\tconst pointMap = {}; // colors\n\n\t\t\tconst colorFrustum = new Color(0xffaa00);\n\t\t\tconst colorCone = new Color(0xff0000);\n\t\t\tconst colorUp = new Color(0x00aaff);\n\t\t\tconst colorTarget = new Color(0xffffff);\n\t\t\tconst colorCross = new Color(0x333333); // near\n\n\t\t\taddLine('n1', 'n2', colorFrustum);\n\t\t\taddLine('n2', 'n4', colorFrustum);\n\t\t\taddLine('n4', 'n3', colorFrustum);\n\t\t\taddLine('n3', 'n1', colorFrustum); // far\n\n\t\t\taddLine('f1', 'f2', colorFrustum);\n\t\t\taddLine('f2', 'f4', colorFrustum);\n\t\t\taddLine('f4', 'f3', colorFrustum);\n\t\t\taddLine('f3', 'f1', colorFrustum); // sides\n\n\t\t\taddLine('n1', 'f1', colorFrustum);\n\t\t\taddLine('n2', 'f2', colorFrustum);\n\t\t\taddLine('n3', 'f3', colorFrustum);\n\t\t\taddLine('n4', 'f4', colorFrustum); // cone\n\n\t\t\taddLine('p', 'n1', colorCone);\n\t\t\taddLine('p', 'n2', colorCone);\n\t\t\taddLine('p', 'n3', colorCone);\n\t\t\taddLine('p', 'n4', colorCone); // up\n\n\t\t\taddLine('u1', 'u2', colorUp);\n\t\t\taddLine('u2', 'u3', colorUp);\n\t\t\taddLine('u3', 'u1', colorUp); // target\n\n\t\t\taddLine('c', 't', colorTarget);\n\t\t\taddLine('p', 'c', colorCross); // cross\n\n\t\t\taddLine('cn1', 'cn2', colorCross);\n\t\t\taddLine('cn3', 'cn4', colorCross);\n\t\t\taddLine('cf1', 'cf2', colorCross);\n\t\t\taddLine('cf3', 'cf4', colorCross);\n\n\t\t\tfunction addLine(a, b, color) {\n\t\t\t\taddPoint(a, color);\n\t\t\t\taddPoint(b, color);\n\t\t\t}\n\n\t\t\tfunction addPoint(id, color) {\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\n\t\t\t\tif (pointMap[id] === undefined) {\n\t\t\t\t\tpointMap[id] = [];\n\t\t\t\t}\n\n\t\t\t\tpointMap[id].push(vertices.length / 3 - 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'CameraHelper';\n\t\t\tthis.camera = camera;\n\t\t\tif (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();\n\t\t\tthis.matrix = camera.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.pointMap = pointMap;\n\t\t\tthis.update();\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst pointMap = this.pointMap;\n\t\t\tconst w = 1,\n\t\t\t\t\t\th = 1; // we need just camera projection matrix inverse\n\t\t\t// world matrix must be identity\n\n\t\t\t_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target\n\n\n\t\t\tsetPoint('c', pointMap, geometry, _camera, 0, 0, -1);\n\t\t\tsetPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near\n\n\t\t\tsetPoint('n1', pointMap, geometry, _camera, -w, -h, -1);\n\t\t\tsetPoint('n2', pointMap, geometry, _camera, w, -h, -1);\n\t\t\tsetPoint('n3', pointMap, geometry, _camera, -w, h, -1);\n\t\t\tsetPoint('n4', pointMap, geometry, _camera, w, h, -1); // far\n\n\t\t\tsetPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\n\t\t\tsetPoint('f2', pointMap, geometry, _camera, w, -h, 1);\n\t\t\tsetPoint('f3', pointMap, geometry, _camera, -w, h, 1);\n\t\t\tsetPoint('f4', pointMap, geometry, _camera, w, h, 1); // up\n\n\t\t\tsetPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross\n\n\t\t\tsetPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\n\t\t\tsetPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n\t\t\tsetPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\n\t\t\tsetPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n\t\t\tsetPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);\n\t\t\tsetPoint('cn2', pointMap, geometry, _camera, w, 0, -1);\n\t\t\tsetPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);\n\t\t\tsetPoint('cn4', pointMap, geometry, _camera, 0, h, -1);\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t}\n\n\tfunction setPoint(point, pointMap, geometry, camera, x, y, z) {\n\t\t_vector.set(x, y, z).unproject(camera);\n\n\t\tconst points = pointMap[point];\n\n\t\tif (points !== undefined) {\n\t\t\tconst position = geometry.getAttribute('position');\n\n\t\t\tfor (let i = 0, l = points.length; i < l; i++) {\n\t\t\t\tposition.setXYZ(points[i], _vector.x, _vector.y, _vector.z);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst _box = /*@__PURE__*/new Box3();\n\n\tclass BoxHelper extends LineSegments {\n\t\tconstructor(object, color = 0xffff00) {\n\t\t\tconst indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tconst positions = new Float32Array(8 * 3);\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.object = object;\n\t\t\tthis.type = 'BoxHelper';\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.update();\n\t\t}\n\n\t\tupdate(object) {\n\t\t\tif (object !== undefined) {\n\t\t\t\tconsole.warn('THREE.BoxHelper: .update() has no longer arguments.');\n\t\t\t}\n\n\t\t\tif (this.object !== undefined) {\n\t\t\t\t_box.setFromObject(this.object);\n\t\t\t}\n\n\t\t\tif (_box.isEmpty()) return;\n\t\t\tconst min = _box.min;\n\t\t\tconst max = _box.max;\n\t\t\t/*\n\t\t\t\t5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\t\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tconst position = this.geometry.attributes.position;\n\t\t\tconst array = position.array;\n\t\t\tarray[0] = max.x;\n\t\t\tarray[1] = max.y;\n\t\t\tarray[2] = max.z;\n\t\t\tarray[3] = min.x;\n\t\t\tarray[4] = max.y;\n\t\t\tarray[5] = max.z;\n\t\t\tarray[6] = min.x;\n\t\t\tarray[7] = min.y;\n\t\t\tarray[8] = max.z;\n\t\t\tarray[9] = max.x;\n\t\t\tarray[10] = min.y;\n\t\t\tarray[11] = max.z;\n\t\t\tarray[12] = max.x;\n\t\t\tarray[13] = max.y;\n\t\t\tarray[14] = min.z;\n\t\t\tarray[15] = min.x;\n\t\t\tarray[16] = max.y;\n\t\t\tarray[17] = min.z;\n\t\t\tarray[18] = min.x;\n\t\t\tarray[19] = min.y;\n\t\t\tarray[20] = min.z;\n\t\t\tarray[21] = max.x;\n\t\t\tarray[22] = min.y;\n\t\t\tarray[23] = min.z;\n\t\t\tposition.needsUpdate = true;\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t}\n\n\t\tsetFromObject(object) {\n\t\t\tthis.object = object;\n\t\t\tthis.update();\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tLineSegments.prototype.copy.call(this, source);\n\t\t\tthis.object = source.object;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Box3Helper extends LineSegments {\n\t\tconstructor(box, color = 0xffff00) {\n\t\t\tconst indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tconst positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.box = box;\n\t\t\tthis.type = 'Box3Helper';\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tconst box = this.box;\n\t\t\tif (box.isEmpty()) return;\n\t\t\tbox.getCenter(this.position);\n\t\t\tbox.getSize(this.scale);\n\t\t\tthis.scale.multiplyScalar(0.5);\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tclass PlaneHelper extends Line {\n\t\tconstructor(plane, size = 1, hex = 0xffff00) {\n\t\t\tconst color = hex;\n\t\t\tconst positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.computeBoundingSphere();\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.type = 'PlaneHelper';\n\t\t\tthis.plane = plane;\n\t\t\tthis.size = size;\n\t\t\tconst positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n\t\t\tconst geometry2 = new BufferGeometry();\n\t\t\tgeometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\t\t\tgeometry2.computeBoundingSphere();\n\t\t\tthis.add(new Mesh(geometry2, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\topacity: 0.2,\n\t\t\t\ttransparent: true,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false\n\t\t\t})));\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tlet scale = -this.plane.constant;\n\t\t\tif (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n\t\t\tthis.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n\t\t\tthis.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\t\tthis.lookAt(this.plane.normal);\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tconst _axis = /*@__PURE__*/new Vector3();\n\n\tlet _lineGeometry, _coneGeometry;\n\n\tclass ArrowHelper extends Object3D {\n\t\t// dir is assumed to be normalized\n\t\tconstructor(dir = new Vector3(0, 0, 1), origin = new Vector3(0, 0, 0), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ArrowHelper';\n\n\t\t\tif (_lineGeometry === undefined) {\n\t\t\t\t_lineGeometry = new BufferGeometry();\n\n\t\t\t\t_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n\t\t\t\t_coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);\n\n\t\t\t\t_coneGeometry.translate(0, -0.5, 0);\n\t\t\t}\n\n\t\t\tthis.position.copy(origin);\n\t\t\tthis.line = new Line(_lineGeometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.line.matrixAutoUpdate = false;\n\t\t\tthis.add(this.line);\n\t\t\tthis.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.cone.matrixAutoUpdate = false;\n\t\t\tthis.add(this.cone);\n\t\t\tthis.setDirection(dir);\n\t\t\tthis.setLength(length, headLength, headWidth);\n\t\t}\n\n\t\tsetDirection(dir) {\n\t\t\t// dir is assumed to be normalized\n\t\t\tif (dir.y > 0.99999) {\n\t\t\t\tthis.quaternion.set(0, 0, 0, 1);\n\t\t\t} else if (dir.y < -0.99999) {\n\t\t\t\tthis.quaternion.set(1, 0, 0, 0);\n\t\t\t} else {\n\t\t\t\t_axis.set(dir.z, 0, -dir.x).normalize();\n\n\t\t\t\tconst radians = Math.acos(dir.y);\n\t\t\t\tthis.quaternion.setFromAxisAngle(_axis, radians);\n\t\t\t}\n\t\t}\n\n\t\tsetLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {\n\t\t\tthis.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n\n\t\t\tthis.line.updateMatrix();\n\t\t\tthis.cone.scale.set(headWidth, headLength, headWidth);\n\t\t\tthis.cone.position.y = length;\n\t\t\tthis.cone.updateMatrix();\n\t\t}\n\n\t\tsetColor(color) {\n\t\t\tthis.line.material.color.set(color);\n\t\t\tthis.cone.material.color.set(color);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source, false);\n\t\t\tthis.line.copy(source.line);\n\t\t\tthis.cone.copy(source.cone);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AxesHelper extends LineSegments {\n\t\tconstructor(size = 1) {\n\t\t\tconst vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n\t\t\tconst colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'AxesHelper';\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t}\n\n\tconst _floatView = new Float32Array(1);\n\n\tconst _int32View = new Int32Array(_floatView.buffer);\n\n\tclass DataUtils {\n\t\t// Converts float32 to float16 (stored as uint16 value).\n\t\tstatic toHalfFloat(val) {\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t* used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t* by James Tursa?s half-precision code. */\n\t\t\t_floatView[0] = val;\n\t\t\tconst x = _int32View[0];\n\t\t\tlet bits = x >> 16 & 0x8000;\n\t\t\t/* Get the sign */\n\n\t\t\tlet m = x >> 12 & 0x07ff;\n\t\t\t/* Keep one extra bit for rounding */\n\n\t\t\tconst e = x >> 23 & 0xff;\n\t\t\t/* Using int is faster here */\n\n\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t* half, return signed zero. */\n\n\t\t\tif (e < 103) return bits;\n\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\n\t\t\tif (e > 142) {\n\t\t\t\tbits |= 0x7c00;\n\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\n\t\t\t\tbits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n\t\t\t\treturn bits;\n\t\t\t}\n\t\t\t/* If exponent underflows but not too much, return a denormal */\n\n\n\t\t\tif (e < 113) {\n\t\t\t\tm |= 0x0800;\n\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t* to 1, which is OK. */\n\n\t\t\t\tbits |= (m >> 114 - e) + (m >> 113 - e & 1);\n\t\t\t\treturn bits;\n\t\t\t}\n\n\t\t\tbits |= e - 112 << 10 | m >> 1;\n\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t* the exponent, which is OK. */\n\n\t\t\tbits += m & 1;\n\t\t\treturn bits;\n\t\t}\n\n\t}\n\n\tconst LOD_MIN = 4;\n\tconst LOD_MAX = 8;\n\tconst SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\n\tconst EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n\tconst TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\n\tconst MAX_SAMPLES = 20;\n\tconst ENCODINGS = {\n\t\t[LinearEncoding]: 0,\n\t\t[sRGBEncoding]: 1,\n\t\t[RGBEEncoding]: 2,\n\t\t[RGBM7Encoding]: 3,\n\t\t[RGBM16Encoding]: 4,\n\t\t[RGBDEncoding]: 5,\n\t\t[GammaEncoding]: 6\n\t};\n\tconst backgroundMaterial = new MeshBasicMaterial({\n\t\tside: BackSide,\n\t\tdepthWrite: false,\n\t\tdepthTest: false\n\t});\n\tconst backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);\n\n\tconst _flatCamera = /*@__PURE__*/new OrthographicCamera();\n\n\tconst {\n\t\t_lodPlanes,\n\t\t_sizeLods,\n\t\t_sigmas\n\t} = /*@__PURE__*/_createPlanes();\n\n\tconst _clearColor = /*@__PURE__*/new Color();\n\n\tlet _oldTarget = null; // Golden Ratio\n\n\tconst PHI = (1 + Math.sqrt(5)) / 2;\n\tconst INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\n\tconst _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];\n\t/**\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t *\n\t * Paper: Fast, Accurate Image-Based Lighting\n\t * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n\t*/\n\n\tfunction convertLinearToRGBE(color) {\n\t\tconst maxComponent = Math.max(color.r, color.g, color.b);\n\t\tconst fExp = Math.min(Math.max(Math.ceil(Math.log2(maxComponent)), -128.0), 127.0);\n\t\tcolor.multiplyScalar(Math.pow(2.0, -fExp));\n\t\tconst alpha = (fExp + 128.0) / 255.0;\n\t\treturn alpha;\n\t}\n\n\tclass PMREMGenerator {\n\t\tconstructor(renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t\tthis._pingPongRenderTarget = null;\n\t\t\tthis._blurMaterial = _getBlurShader(MAX_SAMPLES);\n\t\t\tthis._equirectShader = null;\n\t\t\tthis._cubemapShader = null;\n\n\t\t\tthis._compileMaterial(this._blurMaterial);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\n\n\t\tfromScene(scene, sigma = 0, near = 0.1, far = 100) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\n\t\t\tthis._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\n\n\t\t\tif (sigma > 0) {\n\t\t\t\tthis._blur(cubeUVRenderTarget, 0, 0, sigma);\n\t\t\t}\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\n\n\t\tfromEquirectangular(equirectangular) {\n\t\t\treturn this._fromTexture(equirectangular);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\n\n\t\tfromCubemap(cubemap) {\n\t\t\treturn this._fromTexture(cubemap);\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\n\n\t\tcompileCubemapShader() {\n\t\t\tif (this._cubemapShader === null) {\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t\tthis._compileMaterial(this._cubemapShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\n\n\t\tcompileEquirectangularShader() {\n\t\t\tif (this._equirectShader === null) {\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t\tthis._compileMaterial(this._equirectShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\n\n\t\tdispose() {\n\t\t\tthis._blurMaterial.dispose();\n\n\t\t\tif (this._cubemapShader !== null) this._cubemapShader.dispose();\n\t\t\tif (this._equirectShader !== null) this._equirectShader.dispose();\n\n\t\t\tfor (let i = 0; i < _lodPlanes.length; i++) {\n\t\t\t\t_lodPlanes[i].dispose();\n\t\t\t}\n\t\t} // private interface\n\n\n\t\t_cleanup(outputTarget) {\n\t\t\tthis._pingPongRenderTarget.dispose();\n\n\t\t\tthis._renderer.setRenderTarget(_oldTarget);\n\n\t\t\toutputTarget.scissorTest = false;\n\n\t\t\t_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n\t\t}\n\n\t\t_fromTexture(texture) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tconst cubeUVRenderTarget = this._allocateTargets(texture);\n\n\t\t\tthis._textureToCubeUV(texture, cubeUVRenderTarget);\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\n\t\t_allocateTargets(texture) {\n\t\t\t// warning: null texture is valid\n\t\t\tconst params = {\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tformat: RGBEFormat,\n\t\t\t\tencoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,\n\t\t\t\tdepthBuffer: false\n\t\t\t};\n\n\t\t\tconst cubeUVRenderTarget = _createRenderTarget(params);\n\n\t\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget(params);\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\n\t\t_compileMaterial(material) {\n\t\t\tconst tmpMesh = new Mesh(_lodPlanes[0], material);\n\n\t\t\tthis._renderer.compile(tmpMesh, _flatCamera);\n\t\t}\n\n\t\t_sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\n\t\t\tconst fov = 90;\n\t\t\tconst aspect = 1;\n\t\t\tconst cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tconst upSign = [1, -1, 1, 1, 1, 1];\n\t\t\tconst forwardSign = [1, 1, 1, -1, -1, -1];\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst originalAutoClear = renderer.autoClear;\n\t\t\tconst outputEncoding = renderer.outputEncoding;\n\t\t\tconst toneMapping = renderer.toneMapping;\n\t\t\trenderer.getClearColor(_clearColor);\n\t\t\trenderer.toneMapping = NoToneMapping;\n\t\t\trenderer.outputEncoding = LinearEncoding;\n\t\t\trenderer.autoClear = false;\n\t\t\tlet useSolidColor = false;\n\t\t\tconst background = scene.background;\n\n\t\t\tif (background) {\n\t\t\t\tif (background.isColor) {\n\t\t\t\t\tbackgroundMaterial.color.copy(background).convertSRGBToLinear();\n\t\t\t\t\tscene.background = null;\n\t\t\t\t\tconst alpha = convertLinearToRGBE(backgroundMaterial.color);\n\t\t\t\t\tbackgroundMaterial.opacity = alpha;\n\t\t\t\t\tuseSolidColor = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbackgroundMaterial.color.copy(_clearColor).convertSRGBToLinear();\n\t\t\t\tconst alpha = convertLinearToRGBE(backgroundMaterial.color);\n\t\t\t\tbackgroundMaterial.opacity = alpha;\n\t\t\t\tuseSolidColor = true;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst col = i % 3;\n\n\t\t\t\tif (col == 0) {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(forwardSign[i], 0, 0);\n\t\t\t\t} else if (col == 1) {\n\t\t\t\t\tcubeCamera.up.set(0, 0, upSign[i]);\n\t\t\t\t\tcubeCamera.lookAt(0, forwardSign[i], 0);\n\t\t\t\t} else {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(0, 0, forwardSign[i]);\n\t\t\t\t}\n\n\t\t\t\t_setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\n\n\t\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\n\t\t\t\tif (useSolidColor) {\n\t\t\t\t\trenderer.render(backgroundBox, cubeCamera);\n\t\t\t\t}\n\n\t\t\t\trenderer.render(scene, cubeCamera);\n\t\t\t}\n\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.outputEncoding = outputEncoding;\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t}\n\n\t\t_textureToCubeUV(texture, cubeUVRenderTarget) {\n\t\t\tconst renderer = this._renderer;\n\n\t\t\tif (texture.isCubeTexture) {\n\t\t\t\tif (this._cubemapShader == null) {\n\t\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._equirectShader == null) {\n\t\t\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\t\tconst mesh = new Mesh(_lodPlanes[0], material);\n\t\t\tconst uniforms = material.uniforms;\n\t\t\tuniforms['envMap'].value = texture;\n\n\t\t\tif (!texture.isCubeTexture) {\n\t\t\t\tuniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);\n\t\t\t}\n\n\t\t\tuniforms['inputEncoding'].value = ENCODINGS[texture.encoding];\n\t\t\tuniforms['outputEncoding'].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];\n\n\t\t\t_setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\n\n\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\t\t\trenderer.render(mesh, _flatCamera);\n\t\t}\n\n\t\t_applyPMREM(cubeUVRenderTarget) {\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst autoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tfor (let i = 1; i < TOTAL_LODS; i++) {\n\t\t\t\tconst sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);\n\t\t\t\tconst poleAxis = _axisDirections[(i - 1) % _axisDirections.length];\n\n\t\t\t\tthis._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n\t\t\t}\n\n\t\t\trenderer.autoClear = autoClear;\n\t\t}\n\t\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\n\n\t\t_blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n\t\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\t\tthis._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n\n\t\t\tthis._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n\t\t}\n\n\t\t_halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst blurMaterial = this._blurMaterial;\n\n\t\t\tif (direction !== 'latitudinal' && direction !== 'longitudinal') {\n\t\t\t\tconsole.error('blur direction must be either latitudinal or longitudinal!');\n\t\t\t} // Number of standard deviations at which to cut off the discrete approximation.\n\n\n\t\t\tconst STANDARD_DEVIATIONS = 3;\n\t\t\tconst blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);\n\t\t\tconst blurUniforms = blurMaterial.uniforms;\n\t\t\tconst pixels = _sizeLods[lodIn] - 1;\n\t\t\tconst radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n\t\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\t\tconst samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n\n\t\t\tif (samples > MAX_SAMPLES) {\n\t\t\t\tconsole.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);\n\t\t\t}\n\n\t\t\tconst weights = [];\n\t\t\tlet sum = 0;\n\n\t\t\tfor (let i = 0; i < MAX_SAMPLES; ++i) {\n\t\t\t\tconst x = i / sigmaPixels;\n\t\t\t\tconst weight = Math.exp(-x * x / 2);\n\t\t\t\tweights.push(weight);\n\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tsum += weight;\n\t\t\t\t} else if (i < samples) {\n\t\t\t\t\tsum += 2 * weight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < weights.length; i++) {\n\t\t\t\tweights[i] = weights[i] / sum;\n\t\t\t}\n\n\t\t\tblurUniforms['envMap'].value = targetIn.texture;\n\t\t\tblurUniforms['samples'].value = samples;\n\t\t\tblurUniforms['weights'].value = weights;\n\t\t\tblurUniforms['latitudinal'].value = direction === 'latitudinal';\n\n\t\t\tif (poleAxis) {\n\t\t\t\tblurUniforms['poleAxis'].value = poleAxis;\n\t\t\t}\n\n\t\t\tblurUniforms['dTheta'].value = radiansPerPixel;\n\t\t\tblurUniforms['mipInt'].value = LOD_MAX - lodIn;\n\t\t\tblurUniforms['inputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tblurUniforms['outputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tconst outputSize = _sizeLods[lodOut];\n\t\t\tconst x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\n\t\t\tconst y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\n\n\t\t\t_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n\n\t\t\trenderer.setRenderTarget(targetOut);\n\t\t\trenderer.render(blurMesh, _flatCamera);\n\t\t}\n\n\t}\n\n\tfunction _isLDR(texture) {\n\t\tif (texture === undefined || texture.type !== UnsignedByteType) return false;\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\t}\n\n\tfunction _createPlanes() {\n\t\tconst _lodPlanes = [];\n\t\tconst _sizeLods = [];\n\t\tconst _sigmas = [];\n\t\tlet lod = LOD_MAX;\n\n\t\tfor (let i = 0; i < TOTAL_LODS; i++) {\n\t\t\tconst sizeLod = Math.pow(2, lod);\n\n\t\t\t_sizeLods.push(sizeLod);\n\n\t\t\tlet sigma = 1.0 / sizeLod;\n\n\t\t\tif (i > LOD_MAX - LOD_MIN) {\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\n\t\t\t} else if (i == 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\t_sigmas.push(sigma);\n\n\t\t\tconst texelSize = 1.0 / (sizeLod - 1);\n\t\t\tconst min = -texelSize / 2;\n\t\t\tconst max = 1 + texelSize / 2;\n\t\t\tconst uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n\t\t\tconst cubeFaces = 6;\n\t\t\tconst vertices = 6;\n\t\t\tconst positionSize = 3;\n\t\t\tconst uvSize = 2;\n\t\t\tconst faceIndexSize = 1;\n\t\t\tconst position = new Float32Array(positionSize * vertices * cubeFaces);\n\t\t\tconst uv = new Float32Array(uvSize * vertices * cubeFaces);\n\t\t\tconst faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n\n\t\t\tfor (let face = 0; face < cubeFaces; face++) {\n\t\t\t\tconst x = face % 3 * 2 / 3 - 1;\n\t\t\t\tconst y = face > 2 ? 0 : -1;\n\t\t\t\tconst coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n\t\t\t\tposition.set(coordinates, positionSize * vertices * face);\n\t\t\t\tuv.set(uv1, uvSize * vertices * face);\n\t\t\t\tconst fill = [face, face, face, face, face, face];\n\t\t\t\tfaceIndex.set(fill, faceIndexSize * vertices * face);\n\t\t\t}\n\n\t\t\tconst planes = new BufferGeometry();\n\t\t\tplanes.setAttribute('position', new BufferAttribute(position, positionSize));\n\t\t\tplanes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n\t\t\tplanes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n\n\t\t\t_lodPlanes.push(planes);\n\n\t\t\tif (lod > LOD_MIN) {\n\t\t\t\tlod--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t_lodPlanes,\n\t\t\t_sizeLods,\n\t\t\t_sigmas\n\t\t};\n\t}\n\n\tfunction _createRenderTarget(params) {\n\t\tconst cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\t}\n\n\tfunction _setViewport(target, x, y, width, height) {\n\t\ttarget.viewport.set(x, y, width, height);\n\t\ttarget.scissor.set(x, y, width, height);\n\t}\n\n\tfunction _getBlurShader(maxSamples) {\n\t\tconst weights = new Float32Array(maxSamples);\n\t\tconst poleAxis = new Vector3(0, 1, 0);\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'SphericalGaussianBlur',\n\t\t\tdefines: {\n\t\t\t\t'n': maxSamples\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'samples': {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\t'weights': {\n\t\t\t\t\tvalue: weights\n\t\t\t\t},\n\t\t\t\t'latitudinal': {\n\t\t\t\t\tvalue: false\n\t\t\t\t},\n\t\t\t\t'dTheta': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'mipInt': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'poleAxis': {\n\t\t\t\t\tvalue: poleAxis\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getEquirectShader() {\n\t\tconst texelSize = new Vector2(1, 1);\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'EquirectangularToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'texelSize': {\n\t\t\t\t\tvalue: texelSize\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCubemapShader() {\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'CubemapToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t${_getEncodings()}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCommonVertexShader() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`\n\t\t);\n\t}\n\n\tfunction _getEncodings() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t`\n\t\t);\n\t}\n\n\tconst LineStrip = 0;\n\tconst LinePieces = 1;\n\tconst NoColors = 0;\n\tconst FaceColors = 1;\n\tconst VertexColors = 2;\n\tfunction MeshFaceMaterial(materials) {\n\t\tconsole.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\n\t\treturn materials;\n\t}\n\tfunction MultiMaterial(materials = []) {\n\t\tconsole.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\n\t\tmaterials.clone = function () {\n\t\t\treturn materials.slice();\n\t\t};\n\n\t\treturn materials;\n\t}\n\tfunction PointCloud(geometry, material) {\n\t\tconsole.warn('THREE.PointCloud has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction Particle(material) {\n\t\tconsole.warn('THREE.Particle has been renamed to THREE.Sprite.');\n\t\treturn new Sprite(material);\n\t}\n\tfunction ParticleSystem(geometry, material) {\n\t\tconsole.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction PointCloudMaterial(parameters) {\n\t\tconsole.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleBasicMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleSystemMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction Vertex(x, y, z) {\n\t\tconsole.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n\t\treturn new Vector3(x, y, z);\n\t} //\n\n\tfunction DynamicBufferAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');\n\t\treturn new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);\n\t}\n\tfunction Int8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');\n\t\treturn new Int8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');\n\t\treturn new Uint8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8ClampedAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');\n\t\treturn new Uint8ClampedBufferAttribute(array, itemSize);\n\t}\n\tfunction Int16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');\n\t\treturn new Int16BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');\n\t\treturn new Uint16BufferAttribute(array, itemSize);\n\t}\n\tfunction Int32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');\n\t\treturn new Int32BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');\n\t\treturn new Uint32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');\n\t\treturn new Float32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float64Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');\n\t\treturn new Float64BufferAttribute(array, itemSize);\n\t} //\n\n\tCurve.create = function (construct, getPoint) {\n\t\tconsole.log('THREE.Curve.create() has been deprecated');\n\t\tconstruct.prototype = Object.create(Curve.prototype);\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\t\treturn construct;\n\t}; //\n\n\n\tPath.prototype.fromPoints = function (points) {\n\t\tconsole.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\n\t\treturn this.setFromPoints(points);\n\t}; //\n\n\n\tfunction AxisHelper(size) {\n\t\tconsole.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\n\t\treturn new AxesHelper(size);\n\t}\n\tfunction BoundingBoxHelper(object, color) {\n\t\tconsole.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');\n\t\treturn new BoxHelper(object, color);\n\t}\n\tfunction EdgesHelper(object, hex) {\n\t\tconsole.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\n\t\treturn new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\t\tconsole.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\t\tconsole.error('THREE.SkeletonHelper: update() no longer needs to be called.');\n\t};\n\n\tfunction WireframeHelper(object, hex) {\n\t\tconsole.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\n\t\treturn new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t} //\n\n\tLoader.prototype.extractUrlBase = function (url) {\n\t\tconsole.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');\n\t\treturn LoaderUtils.extractUrlBase(url);\n\t};\n\n\tLoader.Handlers = {\n\t\tadd: function ()\n\t\t/* regex, loader */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');\n\t\t},\n\t\tget: function ()\n\t\t/* file */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');\n\t\t}\n\t};\n\tfunction XHRLoader(manager) {\n\t\tconsole.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\n\t\treturn new FileLoader(manager);\n\t}\n\tfunction BinaryTextureLoader(manager) {\n\t\tconsole.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\n\t\treturn new DataTextureLoader(manager);\n\t} //\n\n\tBox2.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox2.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox2.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox2.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tBox3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox3.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox3.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox3.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t};\n\n\tBox3.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tSphere.prototype.empty = function () {\n\t\tconsole.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t}; //\n\n\n\tFrustum.prototype.setFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');\n\t\treturn this.setFromProjectionMatrix(m);\n\t}; //\n\n\n\tLine3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Line3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t}; //\n\n\n\tMatrix3.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix3.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n\t\treturn vector.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.multiplyVector3Array = function ()\n\t/* a */\n\t{\n\t\tconsole.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');\n\t\treturn attribute.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.applyToVector3Array = function ()\n\t/* array, offset, length */\n\t{\n\t\tconsole.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tMatrix4.prototype.extractPosition = function (m) {\n\t\tconsole.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n\t\treturn this.copyPosition(m);\n\t};\n\n\tMatrix4.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix4.prototype.getPosition = function () {\n\t\tconsole.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n\t\treturn new Vector3().setFromMatrixColumn(this, 3);\n\t};\n\n\tMatrix4.prototype.setRotationFromQuaternion = function (q) {\n\t\tconsole.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n\t\treturn this.makeRotationFromQuaternion(q);\n\t};\n\n\tMatrix4.prototype.multiplyToArray = function () {\n\t\tconsole.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\n\t};\n\n\tMatrix4.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector4 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector3Array = function ()\n\t/* a */\n\t{\n\t\tconsole.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateAxis = function (v) {\n\t\tconsole.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n\t\tv.transformDirection(this);\n\t};\n\n\tMatrix4.prototype.crossVector = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.translate = function () {\n\t\tconsole.error('THREE.Matrix4: .translate() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateX = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateX() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateY = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateY() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateZ = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateZ() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateByAxis = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n\t};\n\n\tMatrix4.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');\n\t\treturn attribute.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.applyToVector3Array = function ()\n\t/* array, offset, length */\n\t{\n\t\tconsole.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.makeFrustum = function (left, right, bottom, top, near, far) {\n\t\tconsole.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');\n\t\treturn this.makePerspective(left, right, top, bottom, near, far);\n\t};\n\n\tMatrix4.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tPlane.prototype.isIntersectionLine = function (line) {\n\t\tconsole.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n\t\treturn this.intersectsLine(line);\n\t}; //\n\n\n\tQuaternion.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n\t\treturn vector.applyQuaternion(this);\n\t};\n\n\tQuaternion.prototype.inverse = function () {\n\t\tconsole.warn('THREE.Quaternion: .inverse() has been renamed to invert().');\n\t\treturn this.invert();\n\t}; //\n\n\n\tRay.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tRay.prototype.isIntersectionPlane = function (plane) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n\t\treturn this.intersectsPlane(plane);\n\t};\n\n\tRay.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t}; //\n\n\n\tTriangle.prototype.area = function () {\n\t\tconsole.warn('THREE.Triangle: .area() has been renamed to .getArea().');\n\t\treturn this.getArea();\n\t};\n\n\tTriangle.prototype.barycoordFromPoint = function (point, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn this.getBarycoord(point, target);\n\t};\n\n\tTriangle.prototype.midpoint = function (target) {\n\t\tconsole.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');\n\t\treturn this.getMidpoint(target);\n\t};\n\n\tTriangle.prototypenormal = function (target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn this.getNormal(target);\n\t};\n\n\tTriangle.prototype.plane = function (target) {\n\t\tconsole.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');\n\t\treturn this.getPlane(target);\n\t};\n\n\tTriangle.barycoordFromPoint = function (point, a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn Triangle.getBarycoord(point, a, b, c, target);\n\t};\n\n\tTriangle.normal = function (a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn Triangle.getNormal(a, b, c, target);\n\t}; //\n\n\n\tShape.prototype.extractAllPoints = function (divisions) {\n\t\tconsole.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');\n\t\treturn this.extractPoints(divisions);\n\t};\n\n\tShape.prototype.extrude = function (options) {\n\t\tconsole.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\n\t\treturn new ExtrudeGeometry(this, options);\n\t};\n\n\tShape.prototype.makeGeometry = function (options) {\n\t\tconsole.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\n\t\treturn new ShapeGeometry(this, options);\n\t}; //\n\n\n\tVector2.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector2.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector2.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector3.prototype.setEulerFromRotationMatrix = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n\t};\n\n\tVector3.prototype.setEulerFromQuaternion = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n\t};\n\n\tVector3.prototype.getPositionFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n\t\treturn this.setFromMatrixPosition(m);\n\t};\n\n\tVector3.prototype.getScaleFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n\t\treturn this.setFromMatrixScale(m);\n\t};\n\n\tVector3.prototype.getColumnFromMatrix = function (index, matrix) {\n\t\tconsole.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n\t\treturn this.setFromMatrixColumn(matrix, index);\n\t};\n\n\tVector3.prototype.applyProjection = function (m) {\n\t\tconsole.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');\n\t\treturn this.applyMatrix4(m);\n\t};\n\n\tVector3.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector3.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector3.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector4.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector4.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tObject3D.prototype.getChildByName = function (name) {\n\t\tconsole.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n\t\treturn this.getObjectByName(name);\n\t};\n\n\tObject3D.prototype.renderDepth = function () {\n\t\tconsole.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n\t};\n\n\tObject3D.prototype.translate = function (distance, axis) {\n\t\tconsole.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n\t\treturn this.translateOnAxis(axis, distance);\n\t};\n\n\tObject3D.prototype.getWorldRotation = function () {\n\t\tconsole.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');\n\t};\n\n\tObject3D.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t}\n\t\t}\n\t});\n\n\tMesh.prototype.setDrawMode = function () {\n\t\tconsole.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t};\n\n\tObject.defineProperties(Mesh.prototype, {\n\t\tdrawMode: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');\n\t\t\t\treturn TrianglesDrawMode;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t\t}\n\t\t}\n\t});\n\n\tSkinnedMesh.prototype.initBones = function () {\n\t\tconsole.error('THREE.SkinnedMesh: initBones() has been removed.');\n\t}; //\n\n\n\tPerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n\t\tconsole.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');\n\t\tif (filmGauge !== undefined) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength(focalLength);\n\t}; //\n\n\n\tObject.defineProperties(Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .onlyShadow has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .shadowDarkness has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function ()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(DynamicDrawUsage);\n\t\t\t}\n\t\t}\n\t});\n\n\tBufferAttribute.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tBufferAttribute.prototype.copyIndicesArray = function ()\n\t/* indices */\n\t{\n\t\tconsole.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');\n\t}, BufferAttribute.prototype.setArray = function ()\n\t/* array */\n\t{\n\t\tconsole.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\tBufferGeometry.prototype.addIndex = function (index) {\n\t\tconsole.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n\t\tthis.setIndex(index);\n\t};\n\n\tBufferGeometry.prototype.addAttribute = function (name, attribute) {\n\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');\n\n\t\tif (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n\t\t\treturn this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n\t\t}\n\n\t\tif (name === 'index') {\n\t\t\tconsole.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n\t\t\tthis.setIndex(attribute);\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this.setAttribute(name, attribute);\n\t};\n\n\tBufferGeometry.prototype.addDrawCall = function (start, count, indexOffset) {\n\t\tif (indexOffset !== undefined) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n\t\t}\n\n\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n\t\tthis.addGroup(start, count);\n\t};\n\n\tBufferGeometry.prototype.clearDrawCalls = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n\t\tthis.clearGroups();\n\t};\n\n\tBufferGeometry.prototype.computeOffsets = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n\t};\n\n\tBufferGeometry.prototype.removeAttribute = function (name) {\n\t\tconsole.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');\n\t\treturn this.deleteAttribute(name);\n\t};\n\n\tBufferGeometry.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t});\n\n\tInterleavedBuffer.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tInterleavedBuffer.prototype.setArray = function ()\n\t/* array */\n\t{\n\t\tconsole.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\n\tExtrudeGeometry.prototype.getArrays = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShapeList = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShape = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShape() has been removed.');\n\t}; //\n\n\n\tScene.prototype.dispose = function () {\n\t\tconsole.error('THREE.Scene: .dispose() has been removed.');\n\t}; //\n\n\n\tUniform.prototype.onUpdate = function () {\n\t\tconsole.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');\n\t\treturn this;\n\t}; //\n\n\n\tObject.defineProperties(Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t}\n\t\t},\n\t\toverdraw: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapRGB has been removed.');\n\t\t\t\treturn new Color();\n\t\t\t}\n\t\t},\n\t\tshading: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\tthis.flatShading = value === FlatShading;\n\t\t\t}\n\t\t},\n\t\tstencilMask: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\treturn this.stencilFuncMask;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\tthis.stencilFuncMask = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tWebGLRenderer.prototype.clearTarget = function (renderTarget, color, depth, stencil) {\n\t\tconsole.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');\n\t\tthis.setRenderTarget(renderTarget);\n\t\tthis.clear(color, depth, stencil);\n\t};\n\n\tWebGLRenderer.prototype.animate = function (callback) {\n\t\tconsole.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');\n\t\tthis.setAnimationLoop(callback);\n\t};\n\n\tWebGLRenderer.prototype.getCurrentRenderTarget = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\n\t\treturn this.getRenderTarget();\n\t};\n\n\tWebGLRenderer.prototype.getMaxAnisotropy = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');\n\t\treturn this.capabilities.getMaxAnisotropy();\n\t};\n\n\tWebGLRenderer.prototype.getPrecision = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\n\t\treturn this.capabilities.precision;\n\t};\n\n\tWebGLRenderer.prototype.resetGLState = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\n\t\treturn this.state.reset();\n\t};\n\n\tWebGLRenderer.prototype.supportsFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsHalfFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_half_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsStandardDerivatives = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n\t\treturn this.extensions.get('OES_standard_derivatives');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_s3tc');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_pvrtc');\n\t};\n\n\tWebGLRenderer.prototype.supportsBlendMinMax = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n\t\treturn this.extensions.get('EXT_blend_minmax');\n\t};\n\n\tWebGLRenderer.prototype.supportsVertexTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');\n\t\treturn this.capabilities.vertexTextures;\n\t};\n\n\tWebGLRenderer.prototype.supportsInstancedArrays = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n\t\treturn this.extensions.get('ANGLE_instanced_arrays');\n\t};\n\n\tWebGLRenderer.prototype.enableScissorTest = function (boolean) {\n\t\tconsole.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n\t\tthis.setScissorTest(boolean);\n\t};\n\n\tWebGLRenderer.prototype.initMaterial = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPrePlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPostPlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.updateShadowMap = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setFaceCulling = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.allocTextureUnit = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture2D = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTextureCube = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.getActiveMipMapLevel = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');\n\t\treturn this.getActiveMipmapLevel();\n\t};\n\n\tObject.defineProperties(WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function ()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');\n\t\t\t\treturn this.getContext();\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');\n\t\t\t\treturn this.xr;\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\tthis.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t\treturn 1.0;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function ()\n\t\t\t/* cullFace */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t}\n\t});\n\tfunction WebGLRenderTargetCube(width, height, options) {\n\t\tconsole.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');\n\t\treturn new WebGLCubeRenderTarget(width, options);\n\t} //\n\n\tObject.defineProperties(WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tAudio.prototype.load = function (file) {\n\t\tconsole.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\n\t\tconst scope = this;\n\t\tconst audioLoader = new AudioLoader();\n\t\taudioLoader.load(file, function (buffer) {\n\t\t\tscope.setBuffer(buffer);\n\t\t});\n\t\treturn this;\n\t};\n\n\tAudioAnalyser.prototype.getData = function () {\n\t\tconsole.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n\t\treturn this.getFrequencyData();\n\t}; //\n\n\n\tCubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n\t\tconsole.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\n\t\treturn this.update(renderer, scene);\n\t};\n\n\tCubeCamera.prototype.clear = function (renderer, color, depth, stencil) {\n\t\tconsole.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');\n\t\treturn this.renderTarget.clear(renderer, color, depth, stencil);\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n\t\tconst loader = new TextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tconst texture = loader.load(url, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n\t\tconst loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tconst texture = loader.load(urls, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n\t}; //\n\n\n\tfunction CanvasRenderer() {\n\t\tconsole.error('THREE.CanvasRenderer has been removed');\n\t} //\n\n\tfunction JSONLoader() {\n\t\tconsole.error('THREE.JSONLoader has been removed.');\n\t} //\n\n\tconst SceneUtils = {\n\t\tcreateMultiMaterialObject: function ()\n\t\t/* geometry, materials */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tdetach: function ()\n\t\t/* child, parent, scene */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tattach: function ()\n\t\t/* child, scene, parent */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t}\n\t}; //\n\n\tfunction LensFlare() {\n\t\tconsole.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');\n\t}\n\n\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n\t\t\tdetail: {\n\t\t\t\trevision: REVISION\n\t\t\t}\n\t\t}));\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\tif (typeof window !== 'undefined') {\n\t\tif (window.__THREE__) {\n\t\t\tconsole.warn('WARNING: Multiple instances of Three.js being imported.');\n\t\t} else {\n\t\t\twindow.__THREE__ = REVISION;\n\t\t}\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DataUtils = DataUtils;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float16BufferAttribute = Float16BufferAttribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GLBufferAttribute = GLBufferAttribute;\n\texports.GLSL1 = GLSL1;\n\texports.GLSL3 = GLSL3;\n\texports.GammaEncoding = GammaEncoding;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SplineCurve = SplineCurve;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultipleRenderTargets = WebGLMultipleRenderTargets;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","module.exports = function( THREE ) {\n\t/**\n\t * @author qiao / https://github.com/qiao\n\t * @author mrdoob / http://mrdoob.com\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author erich666 / http://erichaines.com\n\t */\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\n\tfunction OrbitControls( object, domElement ) {\n\n\t\tthis.object = object;\n\n\t\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\tthis.target = new THREE.Vector3();\n\n\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\n\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = 0; // radians\n\t\tthis.maxPolarAngle = Math.PI; // radians\n\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\t\tthis.minAzimuthAngle = - Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.25;\n\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = true;\n\t\tthis.zoomSpeed = 1.0;\n\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 1.0;\n\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = true;\n\t\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t\t// Set to false to disable use of the keys\n\t\tthis.enableKeys = true;\n\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\n\t\t// for reset\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\n\t\t//\n\t\t// public methods\n\t\t//\n\n\t\tthis.getPolarAngle = function () {\n\n\t\t\treturn spherical.phi;\n\n\t\t};\n\n\t\tthis.getAzimuthalAngle = function () {\n\n\t\t\treturn spherical.theta;\n\n\t\t};\n\n\t\tthis.reset = function () {\n\n\t\t\tscope.target.copy( scope.target0 );\n\t\t\tscope.object.position.copy( scope.position0 );\n\t\t\tscope.object.zoom = scope.zoom0;\n\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\tscope.update();\n\n\t\t\tstate = STATE.NONE;\n\n\t\t};\n\n\t\t// this method is exposed, but perhaps it would be better if we can make it private...\n\t\tthis.update = function() {\n\n\t\t\tvar offset = new THREE.Vector3();\n\n\t\t\t// so camera.up is the orbit axis\n\t\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\t\tvar quatInverse = quat.clone().inverse();\n\n\t\t\tvar lastPosition = new THREE.Vector3();\n\t\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\t\treturn function update () {\n\n\t\t\t\tvar position = scope.object.position;\n\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t\t// angle from z-axis around y-axis\n\t\t\t\tspherical.setFromVector3( offset );\n\n\t\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t\t}\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t\t// restrict theta to be between desired limits\n\t\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\t\tspherical.makeSafe();\n\n\n\t\t\t\tspherical.radius *= scale;\n\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t\t// move target to panned location\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tscale = 1;\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t\t// update condition is:\n\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\t\tif ( zoomChanged ||\n\t\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\t\tzoomChanged = false;\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t};\n\n\t\t}();\n\n\t\tthis.dispose = function() {\n\n\t\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t\t};\n\n\t\t//\n\t\t// internals\n\t\t//\n\n\t\tvar scope = this;\n\n\t\tvar changeEvent = { type: 'change' };\n\t\tvar startEvent = { type: 'start' };\n\t\tvar endEvent = { type: 'end' };\n\n\t\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\t\tvar state = STATE.NONE;\n\n\t\tvar EPS = 0.000001;\n\n\t\t// current position in spherical coordinates\n\t\tvar spherical = new THREE.Spherical();\n\t\tvar sphericalDelta = new THREE.Spherical();\n\n\t\tvar scale = 1;\n\t\tvar panOffset = new THREE.Vector3();\n\t\tvar zoomChanged = false;\n\n\t\tvar rotateStart = new THREE.Vector2();\n\t\tvar rotateEnd = new THREE.Vector2();\n\t\tvar rotateDelta = new THREE.Vector2();\n\n\t\tvar panStart = new THREE.Vector2();\n\t\tvar panEnd = new THREE.Vector2();\n\t\tvar panDelta = new THREE.Vector2();\n\n\t\tvar dollyStart = new THREE.Vector2();\n\t\tvar dollyEnd = new THREE.Vector2();\n\t\tvar dollyDelta = new THREE.Vector2();\n\n\t\tfunction getAutoRotationAngle() {\n\n\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t\t}\n\n\t\tfunction getZoomScale() {\n\n\t\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t\t}\n\n\t\tfunction rotateLeft( angle ) {\n\n\t\t\tsphericalDelta.theta -= angle;\n\n\t\t}\n\n\t\tfunction rotateUp( angle ) {\n\n\t\t\tsphericalDelta.phi -= angle;\n\n\t\t}\n\n\t\tvar panLeft = function() {\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\t\tv.multiplyScalar( - distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\tvar panUp = function() {\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\n\t\t\t\tv.multiplyScalar( distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\tvar pan = function() {\n\n\t\t\tvar offset = new THREE.Vector3();\n\n\t\t\treturn function pan ( deltaX, deltaY ) {\n\n\t\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\t\t// perspective\n\t\t\t\t\tvar position = scope.object.position;\n\t\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\t\t// orthographic\n\t\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\t\tscope.enablePan = false;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}();\n\n\t\tfunction dollyIn( dollyScale ) {\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tscale /= dollyScale;\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction dollyOut( dollyScale ) {\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tscale *= dollyScale;\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\t\t// event callbacks - update the object state\n\t\t//\n\n\t\tfunction handleMouseDownRotate( event ) {\n\n\t\t\t//console.log( 'handleMouseDownRotate' );\n\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownDolly( event ) {\n\n\t\t\t//console.log( 'handleMouseDownDolly' );\n\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownPan( event ) {\n\n\t\t\t//console.log( 'handleMouseDownPan' );\n\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseMoveRotate( event ) {\n\n\t\t\t//console.log( 'handleMouseMoveRotate' );\n\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMoveDolly( event ) {\n\n\t\t\t//console.log( 'handleMouseMoveDolly' );\n\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMovePan( event ) {\n\n\t\t\t//console.log( 'handleMouseMovePan' );\n\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseUp( event ) {\n\n\t\t\t//console.log( 'handleMouseUp' );\n\n\t\t}\n\n\t\tfunction handleMouseWheel( event ) {\n\n\t\t\t//console.log( 'handleMouseWheel' );\n\n\t\t\tif ( event.deltaY < 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleKeyDown( event ) {\n\n\t\t\t//console.log( 'handleKeyDown' );\n\n\t\t\tswitch ( event.keyCode ) {\n\n\t\t\t\tcase scope.keys.UP:\n\t\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.LEFT:\n\t\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.RIGHT:\n\t\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction handleTouchStartRotate( event ) {\n\n\t\t\t//console.log( 'handleTouchStartRotate' );\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t}\n\n\t\tfunction handleTouchStartDolly( event ) {\n\n\t\t\t//console.log( 'handleTouchStartDolly' );\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyStart.set( 0, distance );\n\n\t\t}\n\n\t\tfunction handleTouchStartPan( event ) {\n\n\t\t\t//console.log( 'handleTouchStartPan' );\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t}\n\n\t\tfunction handleTouchMoveRotate( event ) {\n\n\t\t\t//console.log( 'handleTouchMoveRotate' );\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchMoveDolly( event ) {\n\n\t\t\t//console.log( 'handleTouchMoveDolly' );\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyEnd.set( 0, distance );\n\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchMovePan( event ) {\n\n\t\t\t//console.log( 'handleTouchMovePan' );\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchEnd( event ) {\n\n\t\t\t//console.log( 'handleTouchEnd' );\n\n\t\t}\n\n\t\t//\n\t\t// event handlers - FSM: listen for events and reset state\n\t\t//\n\n\t\tfunction onMouseDown( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\tstate = STATE.PAN;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseUp( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\thandleMouseUp( event );\n\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onMouseWheel( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\thandleMouseWheel( event );\n\n\t\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t}\n\n\t\tfunction onKeyDown( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\t\thandleKeyDown( event );\n\n\t\t}\n\n\t\tfunction onTouchStart( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tswitch ( event.touches.length ) {\n\n\t\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\thandleTouchStartDolly( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\tswitch ( event.touches.length ) {\n\n\t\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMoveDolly( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchEnd( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\thandleTouchEnd( event );\n\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onContextMenu( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t}\n\n\t\t//\n\n\t\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\t\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\t\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t\t// force an update at start\n\n\t\tthis.update();\n\n\t};\n\n\tOrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\tOrbitControls.prototype.constructor = OrbitControls;\n\n\tObject.defineProperties( OrbitControls.prototype, {\n\n\t\tcenter: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\t\treturn this.target;\n\n\t\t\t}\n\n\t\t},\n\n\t\t// backward compatibility\n\n\t\tnoZoom: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\treturn ! this.enableZoom;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\tthis.enableZoom = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoRotate: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\treturn ! this.enableRotate;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\tthis.enableRotate = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoPan: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\treturn ! this.enablePan;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\tthis.enablePan = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoKeys: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\treturn ! this.enableKeys;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\tthis.enableKeys = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tstaticMoving : {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\treturn ! this.enableDamping;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\tthis.enableDamping = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tdynamicDampingFactor : {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\treturn this.dampingFactor;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\tthis.dampingFactor = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\treturn OrbitControls;\n};\n",null,null,null,null,null,null],"names":["HMR_HOST","HMR_PORT","HMR_SECURE","HMR_ENV_HASH","module","bundle","HMR_BUNDLE_ID","OVERLAY_ID","OldModule","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","undefined","checkedAssets","acceptedAssets","assetsToAccept","location","protocol","indexOf","hostname","port","parent","isParcelRequire","WebSocket","getHostname","getPort","test","ws","onmessage","event","JSON","parse","type","removeErrorOverlay","assets","filter","asset","envHash","handled","forEach","didAccept","hmrAcceptCheck","root","id","depsByBundle","console","clear","hmrApply","i","length","hmrAcceptRun","window","reload","ansiDiagnostic","diagnostics","ansi","stack","codeframe","error","message","hints","join","overlay","createErrorOverlay","html","document","body","appendChild","onerror","e","onclose","warn","getElementById","remove","log","createElement","errorHTML","diagnostic","map","hint","innerHTML","modules","parents","k","d","dep","Array","isArray","concat","getParents","link","newLink","cloneNode","onload","parentNode","removeChild","setAttribute","getAttribute","split","Date","now","insertBefore","nextSibling","cssTimeout","setTimeout","links","querySelectorAll","href","servedFromHMRServer","RegExp","absolute","origin","updateLink","reloadCSS","deps","Function","output","cached","cache","some","v","cb","assetsToAlsoAccept","apply","getRandomNum","max","min","Math","floor","random","constructor","velocity","Vector3","acceleration","wonderTheta","maxSpeed","boost","Start","radius","theta","degToRad","phi","mesh","position","x","sin","cos","y","z","Update","time","ApplyForce","multiplyScalar","add","clampLength","head","clone","lookAt","BuildMesh","geometry","CylinderGeometry","rotateX","material","MeshNormalMaterial","Mesh","f","count","params","seek","maxForce","align","effectiveRange","separate","choesin","group","Group","agents","agent","Agent","Align","Separate","Cohesion","AvoidBoxContainer","currAgent","sumVec","steer","otherAgent","dist","distanceTo","divideScalar","normalize","subVectors","closeVec","Seek","target","toGoalVector","distance","steerVector","sumVector","Avoid","currentCreature","wall","computeBoundingSphere","boundingSphere","toMeVector","pow","rangeWidth","rangeHeight","rangeDepth","resetDescription","addEventListener","className","clearTimeout","Boid","OrbitControls","scene","fov","near","far","renderer","WebGLRenderer","antialias","setSize","innerWidth","innerHeight","container","domElement","AddControls","_Resize","AddCamera","controls","camera","autoRotate","enableDamping","dampingFactor","update","render","aspect","clientWidth","clientHeight","updateProjectionMatrix","setPixelRatio","devicePixelRatio","entities","Scene","cameraController","CameraController","ambientLight","AmbientLight","intensity","fog","Fog","setAnimationLoop","Add","entity","inGroup","Entity","Error","global","factory","exports","define","amd","globalThis","self","THREE","REVISION","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","TOUCH","DOLLY_PAN","DOLLY_ROTATE","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipMapNearestFilter","NearestMipmapLinearFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipMapNearestFilter","LinearMipmapLinearFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","NormalAnimationBlendMode","AdditiveAnimationBlendMode","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","ZeroStencilOp","KeepStencilOp","ReplaceStencilOp","IncrementStencilOp","DecrementStencilOp","IncrementWrapStencilOp","DecrementWrapStencilOp","InvertStencilOp","NeverStencilFunc","LessStencilFunc","EqualStencilFunc","LessEqualStencilFunc","GreaterStencilFunc","NotEqualStencilFunc","GreaterEqualStencilFunc","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","StreamDrawUsage","StaticReadUsage","DynamicReadUsage","StreamReadUsage","StaticCopyUsage","DynamicCopyUsage","StreamCopyUsage","GLSL1","GLSL3","listener","_listeners","listeners","hasEventListener","removeEventListener","listenerArray","index","splice","dispatchEvent","array","slice","l","_lut","toString","_seed","DEG2RAD","PI","RAD2DEG","d0","d1","d2","d3","uuid","toUpperCase","value","n","m","a1","a2","b1","b2","t","lambda","dt","lerp","exp","abs","euclideanModulo","low","high","range","s","degrees","radians","ceil","LN2","q","a","b","c","order","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","MathUtils","Object","freeze","__proto__","generateUUID","clamp","mapLinear","inverseLerp","damp","pingpong","smoothstep","smootherstep","randInt","randFloat","randFloatSpread","seededRandom","radToDeg","isPowerOfTwo","ceilPowerOfTwo","floorPowerOfTwo","setQuaternionFromProperEuler","width","height","setScalar","scalar","setX","setY","setComponent","getComponent","copy","w","addVectors","addScalar","addScaledVector","sub","subScalar","multiply","divide","applyMatrix3","elements","clampScalar","minVal","maxVal","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","angle","atan2","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","Vector2","prototype","isVector2","arguments","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","g","h","invert","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","r","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","scale","rotate","translate","matrix","Matrix3","isMatrix3","_canvas","getDataURL","image","src","HTMLCanvasElement","canvas","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","EventDispatcher","Texture","DEFAULT_IMAGE","mapping","DEFAULT_MAPPING","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","defineProperty","name","mipmaps","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","updateMatrix","source","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","isDataTexture","serializeImage","transformUv","uv","needsUpdate","isTexture","HTMLImageElement","ImageBitmap","ImageUtils","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","epsilon","epsilon2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","Vector4","isVector4","options","depth","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","setTexture","WebGLRenderTarget","isWebGLRenderTarget","il","WebGLMultipleRenderTargets","isWebGLMultipleRenderTargets","samples","WebGLMultisampleRenderTarget","isWebGLMultisampleRenderTarget","_x","_y","_z","_w","slerp","qa","qb","qm","slerpQuaternions","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","Number","EPSILON","len","tDir","multiplyQuaternionsFlat","_onChangeCallback","quaternion","setFromEuler","euler","isEuler","_order","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","conjugate","p","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","Quaternion","isQuaternion","multiplyVectors","applyEuler","applyQuaternion","_quaternion$4","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector$c","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","isVector3","Infinity","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","expandByPoint","setFromCenterAndSize","size","halfSize","_vector$b","setFromObject","object","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","boundingBox","computeBoundingBox","_box$3","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","_center","_extents","_v0$2","_v1$7","_v2$3","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","distanceToPoint","clampedPoint","getBoundingSphere","intersect","_points","Box3","isBox3","_testAxis","v0","extents","j","p0","p1","p2","_box$2","_v1$6","_toFarthestPoint","_toPoint","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","missingRadiusHalf","_vector$a","_segCenter","_segDir","_diff","_edge1","_edge2","_normal$1","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","segExtent","a01","b0","s0","sqrDist","extDet","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","sign","DdQxE2","DdE1xQ","QdN","n14","n24","n34","n41","n42","n43","n44","Matrix4","copyPosition","setFromMatrix3","makeBasis","extractRotation","scaleX","_v1$5","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","yx","zx","zy","x2","y2","z2","wx","wy","wz","decompose","_m1$2","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","makeOrthographic","isMatrix4","_matrix$1","_quaternion$3","Euler","DefaultOrder","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","RotationOrders","mask","channel","enable","enableAll","toggle","disable","disableAll","layers","_object3DId","_v1$4","_q1","_m1$1","_target","_position$3","_scale$2","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","DefaultUp","onRotationChange","onQuaternionChange","defineProperties","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","Layers","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","userData","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","isObject3D","removeFromParent","attach","getObjectById","getObjectByProperty","getObjectByName","child","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","force","updateParents","updateChildren","geometries","materials","shapes","skeletons","stringify","isInstancedMesh","instanceMatrix","instanceColor","library","element","isMesh","isLine","isPoints","serialize","parameters","shape","isSkinnedMesh","bindMode","bindMatrix","skeleton","uuids","animation","extractFromCache","values","key","recursive","_vector1","_vector2$1","_normalMatrix","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","referencePoint","Plane","isPlane","_v0$1","_v1$3","_v2$2","_v3$1","_vab","_vac","_vbc","_vap","_vbp","_vcp","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","Triangle","getPlane","d4","vc","d5","d6","vb","va","materialId","blending","side","vertexColors","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","alphaToCoverage","premultipliedAlpha","toneMapped","onBuild","onBeforeCompile","customProgramCacheKey","setValues","newValue","flatShading","currentValue","isColor","isRoot","color","getHex","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","envMap","combine","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationColor","sizeAttenuation","linewidth","dashSize","gapSize","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","morphTargets","morphNormals","srcPlanes","dstPlanes","Material","isMaterial","_colorKeywords","_hslA","_hslB","setRGB","setHex","setStyle","hex","setHSL","hue2rgb","style","string","parseFloat","exec","components","parseInt","handleAlpha","charAt","setColorName","toLowerCase","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","SRGBToLinear","copyLinearToSRGB","LinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpColors","lerpHSL","normalized","Color","NAMES","MeshBasicMaterial","isMeshBasicMaterial","_vector$9","_vector2","itemSize","TypeError","usage","updateRange","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZ","setXYZW","onUpload","BufferAttribute","isBufferAttribute","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float16BufferAttribute","isFloat16BufferAttribute","Float32Array","Float64Array","TYPED_ARRAYS","buffer","_id","_m1","_obj","_offset","_box$1","_boxMorphTargets","_vector$8","attributes","morphAttributes","morphTargetsRelative","groups","drawRange","getIndex","setIndex","arrayMax","Uint32BufferAttribute","Uint16BufferAttribute","deleteAttribute","hasAttribute","addGroup","materialIndex","clearGroups","setDrawRange","tangent","Float32BufferAttribute","morphAttributesPosition","isGLBufferAttribute","morphAttribute","isNaN","Sphere","jl","computeFaceNormals","computeTangents","indices","positions","normals","uvs","nVertices","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","isFinite","handleTriangle","tmp2","n2","handleVertex","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","ab","normalizeNormals","merge","isBufferGeometry","attribute1","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","array2","geometry2","BufferGeometry","newAttribute","convertBufferAttribute","morphArray","keys","hasMorphAttributes","attributeArray","_inverseMatrix$2","_ray$2","Ray","_sphere$3","_vA$1","_vB$1","_vC$1","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA$1","_uvB$1","_uvC$1","_intersectionPoint","_intersectionPointWorld","updateMorphTargets","morphTargetInfluences","morphTargetDictionary","assign","ml","String","raycaster","intersects","intersection","morphPosition","groupMaterial","checkBufferGeometryIntersection","faceIndex","face","isGeometry","morphInfluences","influence","boneTransform","checkIntersection","widthSegments","heightSegments","depthSegments","scope","vertices","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","property","uniforms","merged","cloneUniforms","UniformsUtils","mergeUniforms","default_vertex","default_fragment","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","uniform","ShaderMaterial","isShaderMaterial","Camera","zoom","focus","view","filmGauge","filmOffset","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","tan","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","enabled","offsetX","offsetY","clearViewOffset","skew","PerspectiveCamera","isPerspectiveCamera","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","_needsFlipEnvMap","CubeTexture","isCubeTexture","dummy","isInteger","fromEquirectangularTexture","shader","tEquirect","BoxGeometry","currentMinFilter","CubeCamera","stencil","WebGLCubeRenderTarget","_sphere$2","_vector$7","p4","p5","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","isAnimating","animationLoop","requestId","frame","requestAnimationFrame","onAnimationFrame","stop","cancelAnimationFrame","setContext","gl","capabilities","isWebGL2","buffers","WeakMap","bufferType","createBuffer","bindBuffer","bufferData","FLOAT","HALF_FLOAT","UNSIGNED_SHORT","SHORT","UNSIGNED_INT","INT","BYTE","UNSIGNED_BYTE","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","isInterleavedBufferAttribute","get","deleteBuffer","delete","elementSize","updateBuffer","width_half","height_half","segment_width","segment_height","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","envmap_physical_pars_fragment","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmission_fragment","transmission_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","ShaderChunk","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","background","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","physical","transmissionSamplerSize","transmissionSamplerMap","cubemaps","state","objects","clearColor","clearAlpha","planeMesh","boxMesh","currentBackground","currentBackgroundVersion","currentTonemapping","renderList","forceClear","isScene","session","getSession","environmentBlendMode","setClear","autoClear","autoClearColor","autoClearDepth","autoClearStencil","toneMapping","unshift","PlaneGeometry","getClearColor","setClearColor","getClearAlpha","setClearAlpha","maxVertexAttributes","MAX_VERTEX_ATTRIBS","extension","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","program","updateBuffers","getBindingState","bindVertexArrayObject","saveCache","ELEMENT_ARRAY_BUFFER","setupVertexAttributes","createVertexArray","createVertexArrayOES","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","programMap","stateMap","createVertexArrayObject","newAttributes","enabledAttributes","attributeDivisors","cachedAttributes","geometryAttributes","attributesNum","cachedAttribute","geometryAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableVertexAttribArray","stride","vertexAttribIPointer","vertexAttribPointer","isInstancedBufferGeometry","initAttributes","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","_maxInstanceCount","enableAttribute","ARRAY_BUFFER","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","disableUnusedAttributes","reset","geometryId","programId","deleteVertexArrayObject","resetDefaultState","setup","releaseStatesOfGeometry","releaseStatesOfProgram","info","mode","drawArrays","primcount","methodName","setMode","renderInstances","maxAnisotropy","has","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","getMaxPrecision","logarithmicDepthBuffer","maxTextures","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","floatVertexTextures","maxSamples","MAX_SAMPLES","getMaxAnisotropy","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","numPlanes","numIntersection","init","enableLocalClipping","projectPlanes","beginShadows","endShadows","resetGlobalState","setState","useCache","materialProperties","nGlobal","lGlobal","dstArray","clippingState","skipTransform","nPlanes","flatSize","viewMatrix","i4","cubemap","mapTextureMapping","onTextureDispose","getExtension","wireframeAttributes","onGeometryDispose","memory","geometryIndex","geometryPosition","previousAttribute","currentAttribute","updateWireframeAttribute","getWireframeAttribute","drawElements","calls","triangles","lines","instanceCount","TRIANGLES","LINES","LINE_STRIP","LINE_LOOP","POINTS","programs","autoReset","influencesList","workInfluences","objectInfluences","influences","sort","absNumericalSort","MAX_SAFE_INTEGER","numericalSort","morphInfluencesSum","morphBaseInfluence","getUniforms","setValue","updateMap","buffergeometry","onInstancedMeshDispose","instancedMesh","wrapR","DataTexture2DArray","isDataTexture2DArray","DataTexture3D","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","nBlocks","blockSize","firstElem","allocateTextureUnit","uniform1f","addr","uniform2f","arraysEqual","uniform2fv","uniform3f","uniform3fv","uniform4f","uniform4fv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniform1ui","uniform2uiv","uniform3uiv","uniform4uiv","unit","safeSetTexture2D","setTexture3D","safeSetTextureCube","setTexture2DArray","setValueV1f","setValueV2f","setValueV3f","setValueV4f","setValueM2","setValueM3","setValueM4","setValueV1i","setValueV2i","setValueV3i","setValueV4i","setValueV1ui","setValueV2ui","setValueV3ui","setValueV4ui","setValueT1","setValueT3D1","setValueT6","setValueT2DArray1","uniform1fv","flatten","uniform1iv","uniform1uiv","units","allocTexUnits","setValueV1fArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueV1iArray","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV1uiArray","setValueV2uiArray","setValueV3uiArray","setValueV4uiArray","setValueT1Array","setValueT6Array","activeInfo","getSingularSetter","getPureArraySetter","PureArrayUniform","updateCache","seq","StructuredUniform","RePathPart","uniformObject","path","pathLength","lastIndex","match","matchEnd","idIsIndex","subscript","addUniform","SingleUniform","next","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","parseUniform","WebGLUniforms","setOptional","upload","seqWithValue","createShader","shaderSource","compileShader","programIdCount","status","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","trim","getShaderSource","addLineNumbers","functionName","getEncodingComponents","toneMappingName","chunks","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filterEmptyLine","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","numClippingPlanes","numClipIntersection","includePattern","includeReplacer","include","resolveIncludes","deprecatedUnrollLoopPattern","unrollLoopPattern","loopReplacer","deprecatedLoopReplacer","snippet","precisionstring","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapMode","envMapModeDefine","envMapBlendingDefine","cacheKey","generateShadowMapTypeDefine","generateEnvMapTypeDefine","generateEnvMapModeDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","generateExtensions","customDefines","generateDefines","createProgram","prefixVertex","prefixFragment","versionString","isRawShaderMaterial","generatePrecision","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","vertexAlphas","vertexUvs","uvsVertexOnly","skinning","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","getToneMappingFunction","getTexelDecodingFunction","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","getTexelEncodingFunction","outputEncoding","depthPacking","replaceLightNums","replaceClippingPlaneNums","unrollLoops","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","vertexErrors","getShaderErrors","fragmentErrors","getError","VALIDATE_STATUS","prefix","deleteShader","cachedUniforms","fetchAttributeLocations","destroy","deleteProgram","usedTimes","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","bones","nVertexUniforms","nVertexMatrices","shadows","environment","isMeshStandardMaterial","getMaxBones","getTextureEncodingFromMap","isFogExp2","directional","spot","rectArea","hemi","shadowMap","pl","preexistingProgram","WebGLProgram","pop","getParameters","getProgramCacheKey","acquireProgram","releaseProgram","groupOrder","renderItems","renderItemsIndex","opaque","transmissive","defaultProgram","renderItem","getNextRenderItem","customOpaqueSort","customTransparentSort","painterSortStable","reversePainterSortStable","finish","lists","renderCallDepth","list","WebGLRenderList","light","halfWidth","halfHeight","nextVersion","lightA","lightB","UniformsCache","shadowCache","ShadowUniformsCache","hash","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","shadowCastingLightsFirst","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","WebGLLights","lightsArray","shadowsArray","shadowLight","setupLights","setupLightsView","pushLight","pushShadow","renderStates","renderState","WebGLRenderState","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","_renderer","_objects","_capabilities","_frustum","Frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","_maxTextureSize","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","mapPass","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","renderObject","VSMPass","renderBufferDirect","useMorphing","result","getMaterialVariant","getDepthMaterialVariant","customMaterial","customDepthMaterial","getDistanceMaterialVariant","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","shadowCamera","kl","depthMaterial","getDepthMaterial","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","DEPTH_TEST","depthMask","setFunc","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","setOp","stencilOp","clearStencil","colorBuffer","ColorBuffer","DepthBuffer","StencilBuffer","enabledCapabilities","xrFramebuffer","currentBoundFramebuffers","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","lineWidthAvailable","glVersion","VERSION","currentTextureSlot","currentBoundTextures","scissorParam","SCISSOR_BOX","viewportParam","VIEWPORT","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","setFlipSided","setCullFace","CULL_FACE","framebuffer","bindFramebuffer","FRAMEBUFFER","DRAW_FRAMEBUFFER","useProgram","equationToGL","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","MIN","MAX","MIN_EXT","MAX_EXT","factorToGL","ZERO","ONE","SRC_COLOR","SRC_ALPHA","SRC_ALPHA_SATURATE","DST_COLOR","DST_ALPHA","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_DST_ALPHA","BLEND","blendFuncSeparate","blendFunc","blendEquationSeparate","frontFaceCW","setPolygonOffset","SAMPLE_ALPHA_TO_COVERAGE","frontFace","CW","CCW","cullFace","BACK","FRONT","FRONT_AND_BACK","lineWidth","factor","POLYGON_OFFSET_FILL","SCISSOR_TEST","webglSlot","TEXTURE0","activeTexture","webglType","webglTexture","boundTexture","compressedTexImage2D","texImage3D","KEEP","READ_FRAMEBUFFER","bindXRFramebuffer","setMaterial","setLineWidth","unbindTexture","_gl","utils","_videoTextures","useOffscreenCanvas","OffscreenCanvas","err","needsPowerOfTwo","needsNewCanvas","maxSize","createCanvas","supportsMips","generateMipmap","textureProperties","__maxMipLevel","log2","internalFormatName","glFormat","glType","RED","R32F","R16F","R8","RGB","RGB32F","RGB16F","RGB8","RGBA32F","RGBA16F","RGBA8","LINEAR","deallocateTexture","isVideoTexture","onRenderTargetDispose","deallocateRenderTarget","__webglInit","deleteTexture","__webglTexture","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","attachmentProperties","textureUnits","textureUnit","slot","updateVideoTexture","__version","complete","uploadTexture","TEXTURE_2D_ARRAY","TEXTURE_3D","uploadCubeTexture","wrappingToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","filterToGL","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","textureType","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","filterFallback","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","initTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","textureNeedsPowerOfTwo","isPowerOfTwo$1","resizeImage","convert","glInternalFormat","getInternalFormat","setTextureParameters","mipmap","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT24","DEPTH24_STENCIL8","DEPTH_COMPONENT16","DEPTH_STENCIL","isCompressedTexture","textureNeedsGenerateMipmaps","isCompressed","cubeImage","mipmapImage","attachment","textureTarget","framebufferTexture2D","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","isCube","setTexture2D","webglDepthTexture","setupDepthTexture","createRenderbuffer","setupRenderBufferStorage","isMultipleRenderTargets","isRenderTarget3D","createFramebuffer","COLOR_ATTACHMENT0","setupFrameBufferTexture","glTextureType","isTexture3D","setupDepthRenderbuffer","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","blitFramebuffer","warnedTexture2D","warnedTextureCube","setTextureCube","resetTextureUnits","setupRenderTarget","updateRenderTargetMipmap","updateMultisampleRenderTarget","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","LUMINANCE","LUMINANCE_ALPHA","RED_INTEGER","RG","RG_INTEGER","RGB_INTEGER","RGBA_INTEGER","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8","UNSIGNED_INT_24_8_WEBGL","cameras","ArrayCamera","isArrayCamera","isGroup","_moveEvent","_targetRay","_grip","_hand","getHandSpace","joints","inputState","pinching","getTargetRaySpace","hasLinearVelocity","linearVelocity","hasAngularVelocity","angularVelocity","getGripSpace","disconnect","inputSource","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","hand","visibilityState","getPose","targetRaySpace","transform","inputjoint","jointPose","getJointPose","jointName","joint","jointRadius","indexTip","thumbTip","distanceToPinch","threshold","handedness","gripSpace","framebufferScaleFactor","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","cameraAutoUpdate","isPresenting","getController","controller","WebXRController","getControllerGrip","getHand","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","onSessionEvent","onSessionEnd","onInputSourcesChange","getContextAttributes","xrCompatible","makeXRCompatible","layerInit","baseLayer","XRWebGLLayer","updateRenderState","requestReferenceSpace","inputSources","removed","added","cameraLPos","cameraRPos","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","updateCamera","depthNear","depthFar","setProjectionFromUnion","getCamera","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","WebGLAnimation","isFog","density","pixelRatio","transmissionRenderTarget","refreshUniformsCommon","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","uvScaleMap","uv2ScaleMap","refreshFogUniforms","refreshMaterialUniforms","display","createCanvasElement","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","renderListStack","renderStateStack","sortObjects","toneMappingExposure","_this","_isContextLost","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_currentDrawBuffers","_clippingEnabled","_localClippingEnabled","_transmissionRenderTarget","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","contextNames","contextAttributes","contextName","onContextLost","onContextRestore","isWebGL1Renderer","shift","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","WebGLExtensions","WebGLCapabilities","WebGLUtils","WebGLState","WebGLInfo","WebGLProperties","WebGLTextures","WebGLCubeMaps","WebGLAttributes","WebGLBindingStates","WebGLGeometries","WebGLObjects","WebGLMorphtargets","WebGLClipping","WebGLPrograms","WebGLMaterials","WebGLRenderLists","WebGLRenderStates","WebGLBackground","WebGLShadowMap","WebGLBufferRenderer","WebGLIndexedBufferRenderer","initGLContext","WebXRManager","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","onXRSessionStart","onXRSessionEnd","preventDefault","infoAutoReset","shadowMapAutoUpdate","shadowMapNeedsUpdate","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReferences","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","DYNAMIC_DRAW","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","getTargetPixelRatio","isLineSegments","isLineLoop","isSprite","compile","material2","getProgram","projectObject","opaqueObjects","transmissiveObjects","transparentObjects","renderObjects","renderTransmissiveObjects","isLOD","isImmediateRenderObject","camera2","renderObjectImmediate","lightsStateVersion","programCacheKey","updateCommonMaterialProperties","needsLights","materialNeedsLights","progUniforms","uniformsList","needsProgramChange","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","computeBoneTexture","boneTextureSize","markUniformsLightsNeedsUpdate","framebufferBound","drawBuffersWEBGL","layer","framebufferTextureLayer","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","halfFloatSupportedByExt","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","copyTextureToTexture3D","sourceBox","glTarget","unpackRowLen","UNPACK_ROW_LENGTH","unpackImageHeight","UNPACK_IMAGE_HEIGHT","unpackSkipPixels","UNPACK_SKIP_PIXELS","unpackSkipRows","UNPACK_SKIP_ROWS","unpackSkipImages","UNPACK_SKIP_IMAGES","texSubImage3D","resetState","__THREE_DEVTOOLS__","CustomEvent","detail","WebGL1Renderer","FogExp2","arrayBuffers","_uuid","ib","InterleavedBuffer","isInterleavedBuffer","_vector$6","interleavedBuffer","interleavedBuffers","InterleavedBufferAttribute","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","float32Array","transformVertex","Sprite","vertexPosition","mvPosition","_v1$2","_v2$1","_currentLevel","levels","addLevel","getCurrentLevel","getObjectForDistance","_basePosition","_skinIndex","_skinWeight","_vector$5","_matrix","bindMatrixInverse","bind","calculateInverses","normalizeSkinWeights","skinWeight","skinIndex","weight","boneIndex","boneInverses","SkinnedMesh","Bone","isBone","DataTexture","_offsetMatrix","_identityMatrix","boneMatrices","inverse","bone","Skeleton","getBoneByName","fromJSON","json","boneInverse","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","getColorAt","getMatrixAt","raycastTimes","instanceId","setColorAt","setMatrixAt","InstancedMesh","linecap","linejoin","_start$1","_end$1","_inverseMatrix$1","_ray$1","_sphere$1","computeLineDistances","lineDistances","Line","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","distSq","_start","_end","LineSegments","LineLoop","_inverseMatrix","_ray","_sphere","_position$2","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","video","requestVideoFrameCallback","updateVideo","hasVideoFrameCallback","readyState","HAVE_CURRENT_DATA","VideoTexture","CompressedTexture","CanvasTexture","isCanvasTexture","DepthTexture","segments","thetaStart","thetaLength","vertex","segment","radiusTop","radiusBottom","radialSegments","openEnded","indexArray","generateTorso","generateCap","slope","indexRow","sinTheta","cosTheta","centerIndexStart","centerIndexEnd","vertexBuffer","uvBuffer","subdivide","applyRadius","generateUVs","getVertexByIndex","subdivideFace","cols","aj","bj","rows","pushVertex","azimuth","inclination","correctUVs","correctSeam","centroid","azi","correctUV","PolyhedronGeometry","_v0","_v1$1","_normal","_triangle","thresholdAngle","precisionPoints","thresholdDot","indexAttr","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","reverseHash","index0","Earcut","triangulate","holeIndices","dim","hasHoles","outerLen","outerNode","linkedList","prev","invSize","eliminateHoles","earcutLinked","clockwise","last","signedArea","insertNode","removeNode","again","steiner","area","ear","pass","indexCurve","isEarHashed","isEar","filterPoints","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","zOrder","prevZ","nextZ","locallyInside","isValidDiagonal","splitPolygon","queue","getLeftmost","compareX","eliminateHole","hole","findHoleBridge","hx","hy","mx","my","tanMin","sectorContainsSector","sortLinked","tail","numMerges","pSize","qSize","inSize","leftmost","px","py","intersectsPolygon","middleInside","q1","q2","o1","o2","o3","o4","onSegment","num","inside","Node","an","bp","sum","contour","isClockWise","pts","ShapeUtils","triangulateShape","holes","faces","removeDupEndPts","addContour","holeIndex","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","extrudeByPath","splineTube","binormal","position2","getSpacedPoints","computeFrenetFrames","shapePoints","extractPoints","reverse","hl","ahole","pt","vec","vlen","flen","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","contourMovements","getBevelVec","holesMovements","oneHoleMovements","verticesMovements","bs","vert","scalePt2","binormals","buildLidFaces","buildSideFaces","f3","layeroffset","sidewalls","sl","slen1","slen2","f4","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","toJSON$1","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","phiStart","phiLength","inverseSegments","base","n1","func","slices","stacks","EPS","pu","pv","sliceCount","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","indexOffset","shapeVertices","shapeHoles","shapeHole","thetaEnd","grid","verticesRow","uOffset","ExtrudeGeometry","text","font","isFont","generateShapes","tube","tubularSegments","arc","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","cs","closed","frames","P","generateBufferData","generateSegment","generateIndices","getPointAt","edge","edges","o","ol","edge1","edge2","Geometries","BoxBufferGeometry","CircleGeometry","CircleBufferGeometry","ConeGeometry","ConeBufferGeometry","CylinderBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","EdgesGeometry","ExtrudeBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","LatheGeometry","LatheBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","ParametricGeometry","ParametricBufferGeometry","PlaneBufferGeometry","PolyhedronBufferGeometry","RingGeometry","RingBufferGeometry","ShapeGeometry","ShapeBufferGeometry","SphereGeometry","SphereBufferGeometry","TetrahedronGeometry","TetrahedronBufferGeometry","TextGeometry","TextBufferGeometry","TorusGeometry","TorusBufferGeometry","TorusKnotGeometry","TorusKnotBufferGeometry","TubeGeometry","TubeBufferGeometry","WireframeGeometry","RawShaderMaterial","ior","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","compareTime","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","find","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","startIndex","endIndex","interpolant","evaluate","resultBuffer","referenceQuat","numTimes","valueStart","valueEnd","blendMode","parameterPositions","sampleValues","sampleSize","_cachedIndex","settings","DefaultSettings_","pp","validate_interval","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","getSettings_","copySampleValue_","Interpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","trackType","getInterpolation","InterpolantFactoryMethodDiscrete","DiscreteInterpolant","InterpolantFactoryMethodLinear","LinearInterpolant","InterpolantFactoryMethodSmooth","CubicInterpolant","factoryMethod","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","KeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","duration","jsonTracks","frameTime","parseKeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","morphTarget","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","typeName","getTrackTypeForValueTypeName","Cache","files","file","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","DefaultLoadingManager","LoadingManager","manager","crossOrigin","withCredentials","resourcePath","requestHeader","load","loadAsync","Promise","resolve","reject","setCrossOrigin","setWithCredentials","setPath","setResourcePath","setRequestHeader","loading","Loader","dataUriRegex","dataUriRegexResult","request","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","XMLHttpRequest","open","callbacks","overrideMimeType","header","send","setResponseType","setMimeType","FileLoader","AnimationClip","loaded","texDatas","mipmapCount","loadTexture","isCubemap","onImageLoad","onImageError","substr","urls","ImageLoader","texData","isJPEG","search","arcLengthDivisions","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","arcLengths","targetArcLength","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","t2","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","Curve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","twoPi","deltaAngle","samePoints","EllipseCurve","isEllipseCurve","aRadius","ArcCurve","isArcCurve","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","t3","CubicPoly","pz","curveType","intPoint","CatmullRomCurve3","isCatmullRomCurve3","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","v3","CubicBezier","CubicBezierCurve","isCubicBezierCurve","CubicBezierCurve3","isCubicBezierCurve3","LineCurve","isLineCurve","isLineCurve3","QuadraticBezier","QuadraticBezierCurve","isQuadraticBezierCurve","QuadraticBezierCurve3","isQuadraticBezierCurve3","CatmullRom","SplineCurve","isSplineCurve","Curves","LineCurve3","curves","autoClose","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","diff","lens","cacheLengths","sums","CurvePath","currentPoint","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","Path","getPointsHoles","holesPts","Light","HemisphereLight","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","_frameExtents","_viewportCount","_viewports","shadowMatrix","viewportIndex","LightShadow","SpotLightShadow","isSpotLightShadow","power","SpotLight","_lightPositionWorld","_lookTarget","_cubeDirections","_cubeUps","PointLightShadow","PointLight","scaleW","scaleH","OrthographicCamera","DirectionalLightShadow","isDirectionalLightShadow","DirectionalLight","RectAreaLight","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","SphericalHarmonics3","isSphericalHarmonics3","LightProbe","getTexture","shading","setTextures","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","interleavedBufferMap","arrayBufferMap","getArrayBuffer","getTypedArray","arrayBuffer","typedArray","bufferAttribute","getInterleavedBuffer","bufferAttributeConstr","drawcalls","offsets","LoaderUtils","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","hasImages","Shape","geometryShapes","bufferGeometryLoader","BufferGeometryLoader","details","MaterialLoader","loadImage","currentUrl","deserializedImage","deserializeImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","LOD","objectAnimations","setTexturePath","createImageBitmap","fetch","setOptions","fetchOptions","credentials","headers","then","res","blob","colorSpaceConversion","imageBitmap","catch","ImageBitmapLoader","isImageBitmapLoader","subPaths","currentPath","toShapes","isCCW","noHoles","inSubpaths","tmpPath","tmpShape","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","toShapesNoHoles","solid","holesFirst","betterShapeHoles","newShapes","newShapeHoles","mainIdx","tmpPoints","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","isPointInsidePolygon","froms","tos","tmpHoles","paths","createPaths","chars","line_height","yMax","yMin","underlineThickness","char","ret","createPath","glyph","glyphs","familyName","ShapePath","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","action","ha","Font","substring","AudioContext","webkitAudioContext","bufferCopy","decodeAudioData","audioBuffer","sky","ground","HemisphereLightProbe","isHemisphereLightProbe","AmbientLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","eyeSep","_cache","eyeSepHalf","eyeSepOnProjection","ymax","xmin","xmax","autoStart","oldTime","elapsedTime","running","getElapsedTime","getDelta","newTime","performance","_position$1","_quaternion$1","_scale$1","_orientation$1","gain","createGain","connect","destination","timeDelta","_clock","Clock","getInput","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position","_quaternion","_scale","_orientation","Audio","panner","createPanner","panningModel","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accumulate","accuIndex","currentWeight","mix","accumulateAdditive","weightAdditive","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","targetIndex","workOffset","_RESERVED_CHARS_RE","_reservedRe","_wordChar","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","firstValidIndex","nCachedObjects_","bindings","unbind","rootNode","node","findNode","nodeName","_getValue_unbound","_setValue_unbound","create","isAnimationObjectGroup","Composite","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","_getValue_direct","_getValue_array","resolvedProperty","_getValue_arrayElement","_getValue_toArray","_setValue_direct","targetObject","_setValue_direct_setNeedsUpdate","_setValue_direct_setMatrixWorldNeedsUpdate","_setValue_array","dest","_setValue_array_setNeedsUpdate","_setValue_array_setMatrixWorldNeedsUpdate","_setValue_arrayElement","_setValue_arrayElement_setNeedsUpdate","_setValue_arrayElement_setMatrixWorldNeedsUpdate","_setValue_fromArray","_setValue_fromArray_setNeedsUpdate","_setValue_fromArray_setMatrixWorldNeedsUpdate","targetArray","sourceArray","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","AnimationObjectGroup","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","_updateWeight","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_initMemoryManager","_accuIndex","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","PropertyMixer","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","AnimationAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","AnimationMixer","Uniform","InstancedInterleavedBuffer","setType","setItemSize","setCount","GLBufferAttribute","setFromCamera","coords","intersectObject","ascSort","intersectObjects","other","makeSafe","setFromCartesianCoords","_vector$4","Box2","isBox2","_startP","_startEnd","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","ImmediateRenderObject","_vector$3","cone","coneLength","coneWidth","_vector$2","_boneMatrix","_matrixWorldInv","getBoneList","isSkeletonHelper","boneList","sphereSize","_vector$1","_color1","_color2","radials","circles","_v1","_v2","_v3","lightPlane","targetLine","_vector","_camera","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box","positions2","_axis","_lineGeometry","_coneGeometry","headLength","headWidth","setDirection","setColor","_floatView","_int32View","toHalfFloat","val","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","ENCODINGS","backgroundMaterial","backgroundBox","_flatCamera","_lodPlanes","_sizeLods","_sigmas","_createPlanes","_clearColor","_oldTarget","PHI","INV_PHI","_axisDirections","maxComponent","fExp","_pingPongRenderTarget","_blurMaterial","_getBlurShader","_equirectShader","_cubemapShader","_compileMaterial","fromScene","sigma","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","fromEquirectangular","equirectangular","_fromTexture","fromCubemap","compileCubemapShader","_getCubemapShader","compileEquirectangularShader","_getEquirectShader","outputTarget","_setViewport","_textureToCubeUV","_isLDR","_createRenderTarget","tmpMesh","cubeCamera","upSign","forwardSign","originalAutoClear","useSolidColor","convertLinearToRGBE","col","poleAxis","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","STANDARD_DEVIATIONS","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","weights","outputSize","lod","sizeLod","texelSize","cubeFaces","positionSize","uvSize","faceIndexSize","coordinates","fill","shaderMaterial","_getCommonVertexShader","_getEncodings","LineStrip","LinePieces","NoColors","FaceColors","VertexColors","isMultiMaterial","Int8BufferAttribute","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Int16BufferAttribute","Int32BufferAttribute","Float64BufferAttribute","construct","fromPoints","AxesHelper","BoxHelper","GridHelper","setColors","SkeletonHelper","Handlers","DataTextureLoader","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","Line3","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","getInverse","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","prototypenormal","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","getChildByName","renderDepth","getWorldRotation","applyMatrix","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","removeAttribute","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","initMaterial","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","audioLoader","AudioLoader","AudioAnalyser","getData","updateCubeMap","TextureLoader","loadTextureCube","CubeTextureLoader","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","__THREE__","AnimationLoader","ArrowHelper","AudioListener","AxisHelper","BinaryTextureLoader","BoundingBoxHelper","Box3Helper","CameraHelper","CanvasRenderer","CompressedTextureLoader","Cylindrical","DataUtils","DirectionalLightHelper","DynamicBufferAttribute","EdgesHelper","Float32Attribute","Float64Attribute","FontLoader","HemisphereLightHelper","Int16Attribute","Int32Attribute","Int8Attribute","JSONLoader","LensFlare","MeshFaceMaterial","MultiMaterial","ObjectLoader","PMREMGenerator","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PlaneHelper","PointCloud","PointCloudMaterial","PointLightHelper","PolarGridHelper","PositionalAudio","Raycaster","Spherical","SpotLightHelper","StereoCamera","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","WebGLRenderTargetCube","WireframeHelper","XHRLoader"],"version":3,"file":"index.HASH_REF_c75227167347e57df55b258c72166a09.js.map","sourceRoot":"/__parcel_source_root/"}